
STM32HB3i-DK_TouchGFX_BaseProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000278b0  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b68  08027b60  08027b60  00037b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 0000001c  080296c8  080296c8  000396c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  080296e4  080296e4  000396e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000014  080296ec  080296ec  000396ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000008  08029700  08029700  00039700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000114  24000000  08029708  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00007834  24000114  0802981c  00040114  2**2
                  ALLOC
  9 ._user_heap_stack 00002000  24007948  0802981c  00047948  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00110428  2**0
                  CONTENTS, READONLY
 11 FramebufferSection 000bf400  24040000  24040000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 FontFlashSection 00000404  90000000  90000000  00110000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 TextFlashSection 00000024  90000404  90000404  00110404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 ExtFlashSection 00000000  90000428  90000428  00110456  2**0
                  CONTENTS
 15 .comment      000000c2  00000000  00000000  00110456  2**0
                  CONTENTS, READONLY
 16 .debug_info   0009a5ae  00000000  00000000  00110518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 000121fd  00000000  00000000  001aaac6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 000041f8  00000000  00000000  001bccc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00003224  00000000  00000000  001c0ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  000444c3  00000000  00000000  001c40e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00059652  00000000  00000000  002085a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0017eac9  00000000  00000000  00261bf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  00011fdc  00000000  00000000  003e06c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 000000b2  00000000  00000000  003f26a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000114 	.word	0x24000114
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08027b48 	.word	0x08027b48

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000118 	.word	0x24000118
 80002ec:	08027b48 	.word	0x08027b48

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b970 	b.w	8000698 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9e08      	ldr	r6, [sp, #32]
 80003d6:	460d      	mov	r5, r1
 80003d8:	4604      	mov	r4, r0
 80003da:	460f      	mov	r7, r1
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d14a      	bne.n	8000476 <__udivmoddi4+0xa6>
 80003e0:	428a      	cmp	r2, r1
 80003e2:	4694      	mov	ip, r2
 80003e4:	d965      	bls.n	80004b2 <__udivmoddi4+0xe2>
 80003e6:	fab2 f382 	clz	r3, r2
 80003ea:	b143      	cbz	r3, 80003fe <__udivmoddi4+0x2e>
 80003ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80003f0:	f1c3 0220 	rsb	r2, r3, #32
 80003f4:	409f      	lsls	r7, r3
 80003f6:	fa20 f202 	lsr.w	r2, r0, r2
 80003fa:	4317      	orrs	r7, r2
 80003fc:	409c      	lsls	r4, r3
 80003fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000402:	fa1f f58c 	uxth.w	r5, ip
 8000406:	fbb7 f1fe 	udiv	r1, r7, lr
 800040a:	0c22      	lsrs	r2, r4, #16
 800040c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000410:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000414:	fb01 f005 	mul.w	r0, r1, r5
 8000418:	4290      	cmp	r0, r2
 800041a:	d90a      	bls.n	8000432 <__udivmoddi4+0x62>
 800041c:	eb1c 0202 	adds.w	r2, ip, r2
 8000420:	f101 37ff 	add.w	r7, r1, #4294967295
 8000424:	f080 811c 	bcs.w	8000660 <__udivmoddi4+0x290>
 8000428:	4290      	cmp	r0, r2
 800042a:	f240 8119 	bls.w	8000660 <__udivmoddi4+0x290>
 800042e:	3902      	subs	r1, #2
 8000430:	4462      	add	r2, ip
 8000432:	1a12      	subs	r2, r2, r0
 8000434:	b2a4      	uxth	r4, r4
 8000436:	fbb2 f0fe 	udiv	r0, r2, lr
 800043a:	fb0e 2210 	mls	r2, lr, r0, r2
 800043e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000442:	fb00 f505 	mul.w	r5, r0, r5
 8000446:	42a5      	cmp	r5, r4
 8000448:	d90a      	bls.n	8000460 <__udivmoddi4+0x90>
 800044a:	eb1c 0404 	adds.w	r4, ip, r4
 800044e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000452:	f080 8107 	bcs.w	8000664 <__udivmoddi4+0x294>
 8000456:	42a5      	cmp	r5, r4
 8000458:	f240 8104 	bls.w	8000664 <__udivmoddi4+0x294>
 800045c:	4464      	add	r4, ip
 800045e:	3802      	subs	r0, #2
 8000460:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000464:	1b64      	subs	r4, r4, r5
 8000466:	2100      	movs	r1, #0
 8000468:	b11e      	cbz	r6, 8000472 <__udivmoddi4+0xa2>
 800046a:	40dc      	lsrs	r4, r3
 800046c:	2300      	movs	r3, #0
 800046e:	e9c6 4300 	strd	r4, r3, [r6]
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	428b      	cmp	r3, r1
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0xbc>
 800047a:	2e00      	cmp	r6, #0
 800047c:	f000 80ed 	beq.w	800065a <__udivmoddi4+0x28a>
 8000480:	2100      	movs	r1, #0
 8000482:	e9c6 0500 	strd	r0, r5, [r6]
 8000486:	4608      	mov	r0, r1
 8000488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048c:	fab3 f183 	clz	r1, r3
 8000490:	2900      	cmp	r1, #0
 8000492:	d149      	bne.n	8000528 <__udivmoddi4+0x158>
 8000494:	42ab      	cmp	r3, r5
 8000496:	d302      	bcc.n	800049e <__udivmoddi4+0xce>
 8000498:	4282      	cmp	r2, r0
 800049a:	f200 80f8 	bhi.w	800068e <__udivmoddi4+0x2be>
 800049e:	1a84      	subs	r4, r0, r2
 80004a0:	eb65 0203 	sbc.w	r2, r5, r3
 80004a4:	2001      	movs	r0, #1
 80004a6:	4617      	mov	r7, r2
 80004a8:	2e00      	cmp	r6, #0
 80004aa:	d0e2      	beq.n	8000472 <__udivmoddi4+0xa2>
 80004ac:	e9c6 4700 	strd	r4, r7, [r6]
 80004b0:	e7df      	b.n	8000472 <__udivmoddi4+0xa2>
 80004b2:	b902      	cbnz	r2, 80004b6 <__udivmoddi4+0xe6>
 80004b4:	deff      	udf	#255	; 0xff
 80004b6:	fab2 f382 	clz	r3, r2
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	f040 8090 	bne.w	80005e0 <__udivmoddi4+0x210>
 80004c0:	1a8a      	subs	r2, r1, r2
 80004c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c6:	fa1f fe8c 	uxth.w	lr, ip
 80004ca:	2101      	movs	r1, #1
 80004cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004d0:	fb07 2015 	mls	r0, r7, r5, r2
 80004d4:	0c22      	lsrs	r2, r4, #16
 80004d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004da:	fb0e f005 	mul.w	r0, lr, r5
 80004de:	4290      	cmp	r0, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x124>
 80004e2:	eb1c 0202 	adds.w	r2, ip, r2
 80004e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x122>
 80004ec:	4290      	cmp	r0, r2
 80004ee:	f200 80cb 	bhi.w	8000688 <__udivmoddi4+0x2b8>
 80004f2:	4645      	mov	r5, r8
 80004f4:	1a12      	subs	r2, r2, r0
 80004f6:	b2a4      	uxth	r4, r4
 80004f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000500:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000504:	fb0e fe00 	mul.w	lr, lr, r0
 8000508:	45a6      	cmp	lr, r4
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x14e>
 800050c:	eb1c 0404 	adds.w	r4, ip, r4
 8000510:	f100 32ff 	add.w	r2, r0, #4294967295
 8000514:	d202      	bcs.n	800051c <__udivmoddi4+0x14c>
 8000516:	45a6      	cmp	lr, r4
 8000518:	f200 80bb 	bhi.w	8000692 <__udivmoddi4+0x2c2>
 800051c:	4610      	mov	r0, r2
 800051e:	eba4 040e 	sub.w	r4, r4, lr
 8000522:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000526:	e79f      	b.n	8000468 <__udivmoddi4+0x98>
 8000528:	f1c1 0720 	rsb	r7, r1, #32
 800052c:	408b      	lsls	r3, r1
 800052e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000532:	ea4c 0c03 	orr.w	ip, ip, r3
 8000536:	fa05 f401 	lsl.w	r4, r5, r1
 800053a:	fa20 f307 	lsr.w	r3, r0, r7
 800053e:	40fd      	lsrs	r5, r7
 8000540:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000544:	4323      	orrs	r3, r4
 8000546:	fbb5 f8f9 	udiv	r8, r5, r9
 800054a:	fa1f fe8c 	uxth.w	lr, ip
 800054e:	fb09 5518 	mls	r5, r9, r8, r5
 8000552:	0c1c      	lsrs	r4, r3, #16
 8000554:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000558:	fb08 f50e 	mul.w	r5, r8, lr
 800055c:	42a5      	cmp	r5, r4
 800055e:	fa02 f201 	lsl.w	r2, r2, r1
 8000562:	fa00 f001 	lsl.w	r0, r0, r1
 8000566:	d90b      	bls.n	8000580 <__udivmoddi4+0x1b0>
 8000568:	eb1c 0404 	adds.w	r4, ip, r4
 800056c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000570:	f080 8088 	bcs.w	8000684 <__udivmoddi4+0x2b4>
 8000574:	42a5      	cmp	r5, r4
 8000576:	f240 8085 	bls.w	8000684 <__udivmoddi4+0x2b4>
 800057a:	f1a8 0802 	sub.w	r8, r8, #2
 800057e:	4464      	add	r4, ip
 8000580:	1b64      	subs	r4, r4, r5
 8000582:	b29d      	uxth	r5, r3
 8000584:	fbb4 f3f9 	udiv	r3, r4, r9
 8000588:	fb09 4413 	mls	r4, r9, r3, r4
 800058c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000590:	fb03 fe0e 	mul.w	lr, r3, lr
 8000594:	45a6      	cmp	lr, r4
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x1da>
 8000598:	eb1c 0404 	adds.w	r4, ip, r4
 800059c:	f103 35ff 	add.w	r5, r3, #4294967295
 80005a0:	d26c      	bcs.n	800067c <__udivmoddi4+0x2ac>
 80005a2:	45a6      	cmp	lr, r4
 80005a4:	d96a      	bls.n	800067c <__udivmoddi4+0x2ac>
 80005a6:	3b02      	subs	r3, #2
 80005a8:	4464      	add	r4, ip
 80005aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005ae:	fba3 9502 	umull	r9, r5, r3, r2
 80005b2:	eba4 040e 	sub.w	r4, r4, lr
 80005b6:	42ac      	cmp	r4, r5
 80005b8:	46c8      	mov	r8, r9
 80005ba:	46ae      	mov	lr, r5
 80005bc:	d356      	bcc.n	800066c <__udivmoddi4+0x29c>
 80005be:	d053      	beq.n	8000668 <__udivmoddi4+0x298>
 80005c0:	b156      	cbz	r6, 80005d8 <__udivmoddi4+0x208>
 80005c2:	ebb0 0208 	subs.w	r2, r0, r8
 80005c6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ca:	fa04 f707 	lsl.w	r7, r4, r7
 80005ce:	40ca      	lsrs	r2, r1
 80005d0:	40cc      	lsrs	r4, r1
 80005d2:	4317      	orrs	r7, r2
 80005d4:	e9c6 7400 	strd	r7, r4, [r6]
 80005d8:	4618      	mov	r0, r3
 80005da:	2100      	movs	r1, #0
 80005dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005e0:	f1c3 0120 	rsb	r1, r3, #32
 80005e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005e8:	fa20 f201 	lsr.w	r2, r0, r1
 80005ec:	fa25 f101 	lsr.w	r1, r5, r1
 80005f0:	409d      	lsls	r5, r3
 80005f2:	432a      	orrs	r2, r5
 80005f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f8:	fa1f fe8c 	uxth.w	lr, ip
 80005fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000600:	fb07 1510 	mls	r5, r7, r0, r1
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800060a:	fb00 f50e 	mul.w	r5, r0, lr
 800060e:	428d      	cmp	r5, r1
 8000610:	fa04 f403 	lsl.w	r4, r4, r3
 8000614:	d908      	bls.n	8000628 <__udivmoddi4+0x258>
 8000616:	eb1c 0101 	adds.w	r1, ip, r1
 800061a:	f100 38ff 	add.w	r8, r0, #4294967295
 800061e:	d22f      	bcs.n	8000680 <__udivmoddi4+0x2b0>
 8000620:	428d      	cmp	r5, r1
 8000622:	d92d      	bls.n	8000680 <__udivmoddi4+0x2b0>
 8000624:	3802      	subs	r0, #2
 8000626:	4461      	add	r1, ip
 8000628:	1b49      	subs	r1, r1, r5
 800062a:	b292      	uxth	r2, r2
 800062c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000630:	fb07 1115 	mls	r1, r7, r5, r1
 8000634:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000638:	fb05 f10e 	mul.w	r1, r5, lr
 800063c:	4291      	cmp	r1, r2
 800063e:	d908      	bls.n	8000652 <__udivmoddi4+0x282>
 8000640:	eb1c 0202 	adds.w	r2, ip, r2
 8000644:	f105 38ff 	add.w	r8, r5, #4294967295
 8000648:	d216      	bcs.n	8000678 <__udivmoddi4+0x2a8>
 800064a:	4291      	cmp	r1, r2
 800064c:	d914      	bls.n	8000678 <__udivmoddi4+0x2a8>
 800064e:	3d02      	subs	r5, #2
 8000650:	4462      	add	r2, ip
 8000652:	1a52      	subs	r2, r2, r1
 8000654:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000658:	e738      	b.n	80004cc <__udivmoddi4+0xfc>
 800065a:	4631      	mov	r1, r6
 800065c:	4630      	mov	r0, r6
 800065e:	e708      	b.n	8000472 <__udivmoddi4+0xa2>
 8000660:	4639      	mov	r1, r7
 8000662:	e6e6      	b.n	8000432 <__udivmoddi4+0x62>
 8000664:	4610      	mov	r0, r2
 8000666:	e6fb      	b.n	8000460 <__udivmoddi4+0x90>
 8000668:	4548      	cmp	r0, r9
 800066a:	d2a9      	bcs.n	80005c0 <__udivmoddi4+0x1f0>
 800066c:	ebb9 0802 	subs.w	r8, r9, r2
 8000670:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000674:	3b01      	subs	r3, #1
 8000676:	e7a3      	b.n	80005c0 <__udivmoddi4+0x1f0>
 8000678:	4645      	mov	r5, r8
 800067a:	e7ea      	b.n	8000652 <__udivmoddi4+0x282>
 800067c:	462b      	mov	r3, r5
 800067e:	e794      	b.n	80005aa <__udivmoddi4+0x1da>
 8000680:	4640      	mov	r0, r8
 8000682:	e7d1      	b.n	8000628 <__udivmoddi4+0x258>
 8000684:	46d0      	mov	r8, sl
 8000686:	e77b      	b.n	8000580 <__udivmoddi4+0x1b0>
 8000688:	3d02      	subs	r5, #2
 800068a:	4462      	add	r2, ip
 800068c:	e732      	b.n	80004f4 <__udivmoddi4+0x124>
 800068e:	4608      	mov	r0, r1
 8000690:	e70a      	b.n	80004a8 <__udivmoddi4+0xd8>
 8000692:	4464      	add	r4, ip
 8000694:	3802      	subs	r0, #2
 8000696:	e742      	b.n	800051e <__udivmoddi4+0x14e>

08000698 <__aeabi_idiv0>:
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f7ff fe23 	bl	80002f0 <strlen>
 80006aa:	4603      	mov	r3, r0
 80006ac:	b29a      	uxth	r2, r3
 80006ae:	f04f 33ff 	mov.w	r3, #4294967295
 80006b2:	6879      	ldr	r1, [r7, #4]
 80006b4:	4803      	ldr	r0, [pc, #12]	; (80006c4 <Send_Uart+0x28>)
 80006b6:	f010 fe45 	bl	8011344 <HAL_UART_Transmit>
}
 80006ba:	bf00      	nop
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	240005c8 	.word	0x240005c8

080006c8 <Mount_SD>:



void Mount_SD (const TCHAR* path)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 0);
 80006d0:	2200      	movs	r2, #0
 80006d2:	6879      	ldr	r1, [r7, #4]
 80006d4:	480a      	ldr	r0, [pc, #40]	; (8000700 <Mount_SD+0x38>)
 80006d6:	f013 fa37 	bl	8013b48 <f_mount>
 80006da:	4603      	mov	r3, r0
 80006dc:	461a      	mov	r2, r3
 80006de:	4b09      	ldr	r3, [pc, #36]	; (8000704 <Mount_SD+0x3c>)
 80006e0:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting SD CARD...\r\n");
 80006e2:	4b08      	ldr	r3, [pc, #32]	; (8000704 <Mount_SD+0x3c>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d003      	beq.n	80006f2 <Mount_SD+0x2a>
 80006ea:	4807      	ldr	r0, [pc, #28]	; (8000708 <Mount_SD+0x40>)
 80006ec:	f7ff ffd6 	bl	800069c <Send_Uart>
	else Send_Uart("SD CARD mounted successfully...\r\n");
}
 80006f0:	e002      	b.n	80006f8 <Mount_SD+0x30>
	else Send_Uart("SD CARD mounted successfully...\r\n");
 80006f2:	4806      	ldr	r0, [pc, #24]	; (800070c <Mount_SD+0x44>)
 80006f4:	f7ff ffd2 	bl	800069c <Send_Uart>
}
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	24000130 	.word	0x24000130
 8000704:	24000364 	.word	0x24000364
 8000708:	08027b60 	.word	0x08027b60
 800070c:	08027b84 	.word	0x08027b84

08000710 <Unmount_SD>:

void Unmount_SD (const TCHAR* path)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 0);
 8000718:	2200      	movs	r2, #0
 800071a:	6879      	ldr	r1, [r7, #4]
 800071c:	2000      	movs	r0, #0
 800071e:	f013 fa13 	bl	8013b48 <f_mount>
 8000722:	4603      	mov	r3, r0
 8000724:	461a      	mov	r2, r3
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <Unmount_SD+0x38>)
 8000728:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) Send_Uart ("SD CARD UNMOUNTED successfully...\r\n");
 800072a:	4b07      	ldr	r3, [pc, #28]	; (8000748 <Unmount_SD+0x38>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d103      	bne.n	800073a <Unmount_SD+0x2a>
 8000732:	4806      	ldr	r0, [pc, #24]	; (800074c <Unmount_SD+0x3c>)
 8000734:	f7ff ffb2 	bl	800069c <Send_Uart>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\r\n");
}
 8000738:	e002      	b.n	8000740 <Unmount_SD+0x30>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\r\n");
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <Unmount_SD+0x40>)
 800073c:	f7ff ffae 	bl	800069c <Send_Uart>
}
 8000740:	bf00      	nop
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	24000364 	.word	0x24000364
 800074c:	08027ba8 	.word	0x08027ba8
 8000750:	08027bcc 	.word	0x08027bcc

08000754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800075a:	4b4f      	ldr	r3, [pc, #316]	; (8000898 <main+0x144>)
 800075c:	695b      	ldr	r3, [r3, #20]
 800075e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000762:	2b00      	cmp	r3, #0
 8000764:	d11b      	bne.n	800079e <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000766:	f3bf 8f4f 	dsb	sy
}
 800076a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800076c:	f3bf 8f6f 	isb	sy
}
 8000770:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000772:	4b49      	ldr	r3, [pc, #292]	; (8000898 <main+0x144>)
 8000774:	2200      	movs	r2, #0
 8000776:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800077a:	f3bf 8f4f 	dsb	sy
}
 800077e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000780:	f3bf 8f6f 	isb	sy
}
 8000784:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000786:	4b44      	ldr	r3, [pc, #272]	; (8000898 <main+0x144>)
 8000788:	695b      	ldr	r3, [r3, #20]
 800078a:	4a43      	ldr	r2, [pc, #268]	; (8000898 <main+0x144>)
 800078c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000790:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000792:	f3bf 8f4f 	dsb	sy
}
 8000796:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000798:	f3bf 8f6f 	isb	sy
}
 800079c:	e000      	b.n	80007a0 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800079e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80007a0:	4b3d      	ldr	r3, [pc, #244]	; (8000898 <main+0x144>)
 80007a2:	695b      	ldr	r3, [r3, #20]
 80007a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d138      	bne.n	800081e <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80007ac:	4b3a      	ldr	r3, [pc, #232]	; (8000898 <main+0x144>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80007b4:	f3bf 8f4f 	dsb	sy
}
 80007b8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80007ba:	4b37      	ldr	r3, [pc, #220]	; (8000898 <main+0x144>)
 80007bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80007c0:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	0b5b      	lsrs	r3, r3, #13
 80007c6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80007ca:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	08db      	lsrs	r3, r3, #3
 80007d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80007d4:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	015a      	lsls	r2, r3, #5
 80007da:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80007de:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80007e0:	687a      	ldr	r2, [r7, #4]
 80007e2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80007e4:	492c      	ldr	r1, [pc, #176]	; (8000898 <main+0x144>)
 80007e6:	4313      	orrs	r3, r2
 80007e8:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	1e5a      	subs	r2, r3, #1
 80007f0:	607a      	str	r2, [r7, #4]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d1ef      	bne.n	80007d6 <main+0x82>
    } while(sets-- != 0U);
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	1e5a      	subs	r2, r3, #1
 80007fa:	60ba      	str	r2, [r7, #8]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d1e5      	bne.n	80007cc <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000800:	f3bf 8f4f 	dsb	sy
}
 8000804:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000806:	4b24      	ldr	r3, [pc, #144]	; (8000898 <main+0x144>)
 8000808:	695b      	ldr	r3, [r3, #20]
 800080a:	4a23      	ldr	r2, [pc, #140]	; (8000898 <main+0x144>)
 800080c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000810:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000812:	f3bf 8f4f 	dsb	sy
}
 8000816:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000818:	f3bf 8f6f 	isb	sy
}
 800081c:	e000      	b.n	8000820 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800081e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000820:	f008 fa04 	bl	8008c2c <HAL_Init>

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000824:	f000 fc94 	bl	8001150 <MPU_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000828:	f000 f84a 	bl	80008c0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800082c:	f000 f8be 	bl	80009ac <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000830:	f000 fafe 	bl	8000e30 <MX_GPIO_Init>
  MX_CRC_Init();
 8000834:	f000 f8ee 	bl	8000a14 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000838:	f000 f90e 	bl	8000a58 <MX_DMA2D_Init>
  MX_I2C4_Init();
 800083c:	f000 f946 	bl	8000acc <MX_I2C4_Init>
  MX_LTDC_Init();
 8000840:	f000 f984 	bl	8000b4c <MX_LTDC_Init>
  MX_OCTOSPI1_Init();
 8000844:	f000 fa04 	bl	8000c50 <MX_OCTOSPI1_Init>
  MX_USART1_UART_Init();
 8000848:	f000 fa92 	bl	8000d70 <MX_USART1_UART_Init>
  MX_SDMMC1_SD_Init();
 800084c:	f000 fa72 	bl	8000d34 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000850:	f001 f96e 	bl	8001b30 <MX_FATFS_Init>
  MX_TouchGFX_Init();
 8000854:	f001 fbc4 	bl	8001fe0 <MX_TouchGFX_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 8000858:	f001 fbbb 	bl	8001fd2 <MX_TouchGFX_PreOSInit>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800085c:	f013 fabe 	bl	8013ddc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of GUI_Task */
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 8000860:	4a0e      	ldr	r2, [pc, #56]	; (800089c <main+0x148>)
 8000862:	2100      	movs	r1, #0
 8000864:	480e      	ldr	r0, [pc, #56]	; (80008a0 <main+0x14c>)
 8000866:	f013 fb3a 	bl	8013ede <osThreadNew>
 800086a:	4603      	mov	r3, r0
 800086c:	4a0d      	ldr	r2, [pc, #52]	; (80008a4 <main+0x150>)
 800086e:	6013      	str	r3, [r2, #0]

  /* creation of LEDblink_task */
  LEDblink_taskHandle = osThreadNew(Start_LEDblink_task, NULL, &LEDblink_task_attributes);
 8000870:	4a0d      	ldr	r2, [pc, #52]	; (80008a8 <main+0x154>)
 8000872:	2100      	movs	r1, #0
 8000874:	480d      	ldr	r0, [pc, #52]	; (80008ac <main+0x158>)
 8000876:	f013 fb32 	bl	8013ede <osThreadNew>
 800087a:	4603      	mov	r3, r0
 800087c:	4a0c      	ldr	r2, [pc, #48]	; (80008b0 <main+0x15c>)
 800087e:	6013      	str	r3, [r2, #0]

  /* creation of InterruptTask */
  InterruptTaskHandle = osThreadNew(Start_InterruptTask, NULL, &InterruptTask_attributes);
 8000880:	4a0c      	ldr	r2, [pc, #48]	; (80008b4 <main+0x160>)
 8000882:	2100      	movs	r1, #0
 8000884:	480c      	ldr	r0, [pc, #48]	; (80008b8 <main+0x164>)
 8000886:	f013 fb2a 	bl	8013ede <osThreadNew>
 800088a:	4603      	mov	r3, r0
 800088c:	4a0b      	ldr	r2, [pc, #44]	; (80008bc <main+0x168>)
 800088e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000890:	f013 faea 	bl	8013e68 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000894:	e7fe      	b.n	8000894 <main+0x140>
 8000896:	bf00      	nop
 8000898:	e000ed00 	.word	0xe000ed00
 800089c:	080286d0 	.word	0x080286d0
 80008a0:	08001ff1 	.word	0x08001ff1
 80008a4:	2400065c 	.word	0x2400065c
 80008a8:	080286f4 	.word	0x080286f4
 80008ac:	080010d1 	.word	0x080010d1
 80008b0:	24000660 	.word	0x24000660
 80008b4:	08028718 	.word	0x08028718
 80008b8:	08001115 	.word	0x08001115
 80008bc:	24000664 	.word	0x24000664

080008c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b09c      	sub	sp, #112	; 0x70
 80008c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ca:	224c      	movs	r2, #76	; 0x4c
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f026 fb15 	bl	8026efe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	2220      	movs	r2, #32
 80008d8:	2100      	movs	r1, #0
 80008da:	4618      	mov	r0, r3
 80008dc:	f026 fb0f 	bl	8026efe <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80008e0:	4b30      	ldr	r3, [pc, #192]	; (80009a4 <SystemClock_Config+0xe4>)
 80008e2:	f04f 32ff 	mov.w	r2, #4294967295
 80008e6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008ea:	2004      	movs	r0, #4
 80008ec:	f00b fbb2 	bl	800c054 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80008f0:	2300      	movs	r3, #0
 80008f2:	603b      	str	r3, [r7, #0]
 80008f4:	4b2c      	ldr	r3, [pc, #176]	; (80009a8 <SystemClock_Config+0xe8>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	4a2b      	ldr	r2, [pc, #172]	; (80009a8 <SystemClock_Config+0xe8>)
 80008fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008fe:	6193      	str	r3, [r2, #24]
 8000900:	4b29      	ldr	r3, [pc, #164]	; (80009a8 <SystemClock_Config+0xe8>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000908:	603b      	str	r3, [r7, #0]
 800090a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800090c:	bf00      	nop
 800090e:	4b26      	ldr	r3, [pc, #152]	; (80009a8 <SystemClock_Config+0xe8>)
 8000910:	699b      	ldr	r3, [r3, #24]
 8000912:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000916:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800091a:	d1f8      	bne.n	800090e <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800091c:	2301      	movs	r3, #1
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000920:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000924:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000926:	2302      	movs	r3, #2
 8000928:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800092a:	2302      	movs	r3, #2
 800092c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800092e:	230c      	movs	r3, #12
 8000930:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 280;
 8000932:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000936:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000938:	2302      	movs	r3, #2
 800093a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800093c:	2302      	movs	r3, #2
 800093e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 8000940:	2304      	movs	r3, #4
 8000942:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000944:	2304      	movs	r3, #4
 8000946:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000948:	2300      	movs	r3, #0
 800094a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800094c:	2300      	movs	r3, #0
 800094e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000950:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000954:	4618      	mov	r0, r3
 8000956:	f00b fbd7 	bl	800c108 <HAL_RCC_OscConfig>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000960:	f000 fc5a 	bl	8001218 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000964:	233f      	movs	r3, #63	; 0x3f
 8000966:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000968:	2303      	movs	r3, #3
 800096a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800096c:	2300      	movs	r3, #0
 800096e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000970:	2308      	movs	r3, #8
 8000972:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000974:	2340      	movs	r3, #64	; 0x40
 8000976:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000978:	2340      	movs	r3, #64	; 0x40
 800097a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800097c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000980:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000982:	2340      	movs	r3, #64	; 0x40
 8000984:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	2103      	movs	r1, #3
 800098a:	4618      	mov	r0, r3
 800098c:	f00b ffee 	bl	800c96c <HAL_RCC_ClockConfig>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000996:	f000 fc3f 	bl	8001218 <Error_Handler>
  }
}
 800099a:	bf00      	nop
 800099c:	3770      	adds	r7, #112	; 0x70
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	58024400 	.word	0x58024400
 80009a8:	58024800 	.word	0x58024800

080009ac <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b0b0      	sub	sp, #192	; 0xc0
 80009b0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009b2:	463b      	mov	r3, r7
 80009b4:	22c0      	movs	r2, #192	; 0xc0
 80009b6:	2100      	movs	r1, #0
 80009b8:	4618      	mov	r0, r3
 80009ba:	f026 faa0 	bl	8026efe <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI|RCC_PERIPHCLK_SDMMC;
 80009be:	4a14      	ldr	r2, [pc, #80]	; (8000a10 <PeriphCommonClock_Config+0x64>)
 80009c0:	f04f 0300 	mov.w	r3, #0
 80009c4:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80009c8:	2302      	movs	r3, #2
 80009ca:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 10;
 80009cc:	230a      	movs	r3, #10
 80009ce:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80009d0:	2302      	movs	r3, #2
 80009d2:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80009d4:	2302      	movs	r3, #2
 80009d6:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 1;
 80009d8:	2301      	movs	r3, #1
 80009da:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80009dc:	23c0      	movs	r3, #192	; 0xc0
 80009de:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80009e0:	2300      	movs	r3, #0
 80009e2:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 5462;
 80009e4:	f241 5356 	movw	r3, #5462	; 0x1556
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 80009ea:	2320      	movs	r3, #32
 80009ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 80009ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009f2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009f4:	463b      	mov	r3, r7
 80009f6:	4618      	mov	r0, r3
 80009f8:	f00c fb86 	bl	800d108 <HAL_RCCEx_PeriphCLKConfig>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 8000a02:	f000 fc09 	bl	8001218 <Error_Handler>
  }
}
 8000a06:	bf00      	nop
 8000a08:	37c0      	adds	r7, #192	; 0xc0
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	02010000 	.word	0x02010000

08000a14 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000a18:	4b0d      	ldr	r3, [pc, #52]	; (8000a50 <MX_CRC_Init+0x3c>)
 8000a1a:	4a0e      	ldr	r2, [pc, #56]	; (8000a54 <MX_CRC_Init+0x40>)
 8000a1c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <MX_CRC_Init+0x3c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000a24:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <MX_CRC_Init+0x3c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <MX_CRC_Init+0x3c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000a30:	4b07      	ldr	r3, [pc, #28]	; (8000a50 <MX_CRC_Init+0x3c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <MX_CRC_Init+0x3c>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000a3c:	4804      	ldr	r0, [pc, #16]	; (8000a50 <MX_CRC_Init+0x3c>)
 8000a3e:	f008 fb03 	bl	8009048 <HAL_CRC_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000a48:	f000 fbe6 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	24000368 	.word	0x24000368
 8000a54:	40023000 	.word	0x40023000

08000a58 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000a5c:	4b19      	ldr	r3, [pc, #100]	; (8000ac4 <MX_DMA2D_Init+0x6c>)
 8000a5e:	4a1a      	ldr	r2, [pc, #104]	; (8000ac8 <MX_DMA2D_Init+0x70>)
 8000a60:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000a62:	4b18      	ldr	r3, [pc, #96]	; (8000ac4 <MX_DMA2D_Init+0x6c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8000a68:	4b16      	ldr	r3, [pc, #88]	; (8000ac4 <MX_DMA2D_Init+0x6c>)
 8000a6a:	2202      	movs	r2, #2
 8000a6c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000a6e:	4b15      	ldr	r3, [pc, #84]	; (8000ac4 <MX_DMA2D_Init+0x6c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000a74:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <MX_DMA2D_Init+0x6c>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8000a7a:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <MX_DMA2D_Init+0x6c>)
 8000a7c:	2202      	movs	r2, #2
 8000a7e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000a80:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <MX_DMA2D_Init+0x6c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000a86:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <MX_DMA2D_Init+0x6c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000a8c:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <MX_DMA2D_Init+0x6c>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000a92:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <MX_DMA2D_Init+0x6c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8000a98:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <MX_DMA2D_Init+0x6c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000a9e:	4809      	ldr	r0, [pc, #36]	; (8000ac4 <MX_DMA2D_Init+0x6c>)
 8000aa0:	f008 fbc4 	bl	800922c <HAL_DMA2D_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000aaa:	f000 fbb5 	bl	8001218 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000aae:	2101      	movs	r1, #1
 8000ab0:	4804      	ldr	r0, [pc, #16]	; (8000ac4 <MX_DMA2D_Init+0x6c>)
 8000ab2:	f008 fd2f 	bl	8009514 <HAL_DMA2D_ConfigLayer>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 8000abc:	f000 fbac 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	2400038c 	.word	0x2400038c
 8000ac8:	52001000 	.word	0x52001000

08000acc <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000ad0:	4b1b      	ldr	r3, [pc, #108]	; (8000b40 <MX_I2C4_Init+0x74>)
 8000ad2:	4a1c      	ldr	r2, [pc, #112]	; (8000b44 <MX_I2C4_Init+0x78>)
 8000ad4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10808AD0;
 8000ad6:	4b1a      	ldr	r3, [pc, #104]	; (8000b40 <MX_I2C4_Init+0x74>)
 8000ad8:	4a1b      	ldr	r2, [pc, #108]	; (8000b48 <MX_I2C4_Init+0x7c>)
 8000ada:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000adc:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <MX_I2C4_Init+0x74>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ae2:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <MX_I2C4_Init+0x74>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ae8:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <MX_I2C4_Init+0x74>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000aee:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <MX_I2C4_Init+0x74>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000af4:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <MX_I2C4_Init+0x74>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000afa:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <MX_I2C4_Init+0x74>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b00:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <MX_I2C4_Init+0x74>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000b06:	480e      	ldr	r0, [pc, #56]	; (8000b40 <MX_I2C4_Init+0x74>)
 8000b08:	f009 f8d2 	bl	8009cb0 <HAL_I2C_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000b12:	f000 fb81 	bl	8001218 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8000b16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b1a:	4809      	ldr	r0, [pc, #36]	; (8000b40 <MX_I2C4_Init+0x74>)
 8000b1c:	f009 fe88 	bl	800a830 <HAL_I2CEx_ConfigAnalogFilter>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_I2C4_Init+0x5e>
  {
    Error_Handler();
 8000b26:	f000 fb77 	bl	8001218 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4804      	ldr	r0, [pc, #16]	; (8000b40 <MX_I2C4_Init+0x74>)
 8000b2e:	f009 feca 	bl	800a8c6 <HAL_I2CEx_ConfigDigitalFilter>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_I2C4_Init+0x70>
  {
    Error_Handler();
 8000b38:	f000 fb6e 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	240003f4 	.word	0x240003f4
 8000b44:	58001c00 	.word	0x58001c00
 8000b48:	10808ad0 	.word	0x10808ad0

08000b4c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08e      	sub	sp, #56	; 0x38
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	2234      	movs	r2, #52	; 0x34
 8000b56:	2100      	movs	r1, #0
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f026 f9d0 	bl	8026efe <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000b5e:	4b3a      	ldr	r3, [pc, #232]	; (8000c48 <MX_LTDC_Init+0xfc>)
 8000b60:	4a3a      	ldr	r2, [pc, #232]	; (8000c4c <MX_LTDC_Init+0x100>)
 8000b62:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000b64:	4b38      	ldr	r3, [pc, #224]	; (8000c48 <MX_LTDC_Init+0xfc>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000b6a:	4b37      	ldr	r3, [pc, #220]	; (8000c48 <MX_LTDC_Init+0xfc>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b70:	4b35      	ldr	r3, [pc, #212]	; (8000c48 <MX_LTDC_Init+0xfc>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b76:	4b34      	ldr	r3, [pc, #208]	; (8000c48 <MX_LTDC_Init+0xfc>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000b7c:	4b32      	ldr	r3, [pc, #200]	; (8000c48 <MX_LTDC_Init+0xfc>)
 8000b7e:	2228      	movs	r2, #40	; 0x28
 8000b80:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000b82:	4b31      	ldr	r3, [pc, #196]	; (8000c48 <MX_LTDC_Init+0xfc>)
 8000b84:	2209      	movs	r2, #9
 8000b86:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 42;
 8000b88:	4b2f      	ldr	r3, [pc, #188]	; (8000c48 <MX_LTDC_Init+0xfc>)
 8000b8a:	222a      	movs	r2, #42	; 0x2a
 8000b8c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000b8e:	4b2e      	ldr	r3, [pc, #184]	; (8000c48 <MX_LTDC_Init+0xfc>)
 8000b90:	220b      	movs	r2, #11
 8000b92:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 522;
 8000b94:	4b2c      	ldr	r3, [pc, #176]	; (8000c48 <MX_LTDC_Init+0xfc>)
 8000b96:	f240 220a 	movw	r2, #522	; 0x20a
 8000b9a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000b9c:	4b2a      	ldr	r3, [pc, #168]	; (8000c48 <MX_LTDC_Init+0xfc>)
 8000b9e:	f240 121b 	movw	r2, #283	; 0x11b
 8000ba2:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 554;
 8000ba4:	4b28      	ldr	r3, [pc, #160]	; (8000c48 <MX_LTDC_Init+0xfc>)
 8000ba6:	f240 222a 	movw	r2, #554	; 0x22a
 8000baa:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000bac:	4b26      	ldr	r3, [pc, #152]	; (8000c48 <MX_LTDC_Init+0xfc>)
 8000bae:	f240 121d 	movw	r2, #285	; 0x11d
 8000bb2:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000bb4:	4b24      	ldr	r3, [pc, #144]	; (8000c48 <MX_LTDC_Init+0xfc>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000bbc:	4b22      	ldr	r3, [pc, #136]	; (8000c48 <MX_LTDC_Init+0xfc>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000bc4:	4b20      	ldr	r3, [pc, #128]	; (8000c48 <MX_LTDC_Init+0xfc>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000bcc:	481e      	ldr	r0, [pc, #120]	; (8000c48 <MX_LTDC_Init+0xfc>)
 8000bce:	f009 fec7 	bl	800a960 <HAL_LTDC_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000bd8:	f000 fb1e 	bl	8001218 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000be0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000be4:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000bea:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000bee:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000bf4:	23ff      	movs	r3, #255	; 0xff
 8000bf6:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000bfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c00:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000c02:	2305      	movs	r3, #5
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8000c06:	2300      	movs	r3, #0
 8000c08:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000c0a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8000c10:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000c14:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 8000c16:	23ff      	movs	r3, #255	; 0xff
 8000c18:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4806      	ldr	r0, [pc, #24]	; (8000c48 <MX_LTDC_Init+0xfc>)
 8000c30:	f00a f81e 	bl	800ac70 <HAL_LTDC_ConfigLayer>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_LTDC_Init+0xf2>
  {
    Error_Handler();
 8000c3a:	f000 faed 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000c3e:	bf00      	nop
 8000c40:	3738      	adds	r7, #56	; 0x38
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	24000448 	.word	0x24000448
 8000c4c:	50001000 	.word	0x50001000

08000c50 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */
  OSPI_MemoryMappedTypeDef sMemMappedCfg = {0};
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8000c5e:	4b33      	ldr	r3, [pc, #204]	; (8000d2c <MX_OCTOSPI1_Init+0xdc>)
 8000c60:	4a33      	ldr	r2, [pc, #204]	; (8000d30 <MX_OCTOSPI1_Init+0xe0>)
 8000c62:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 32;
 8000c64:	4b31      	ldr	r3, [pc, #196]	; (8000d2c <MX_OCTOSPI1_Init+0xdc>)
 8000c66:	2220      	movs	r2, #32
 8000c68:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000c6a:	4b30      	ldr	r3, [pc, #192]	; (8000d2c <MX_OCTOSPI1_Init+0xdc>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8000c70:	4b2e      	ldr	r3, [pc, #184]	; (8000d2c <MX_OCTOSPI1_Init+0xdc>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 26;
 8000c76:	4b2d      	ldr	r3, [pc, #180]	; (8000d2c <MX_OCTOSPI1_Init+0xdc>)
 8000c78:	221a      	movs	r2, #26
 8000c7a:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 8000c7c:	4b2b      	ldr	r3, [pc, #172]	; (8000d2c <MX_OCTOSPI1_Init+0xdc>)
 8000c7e:	2202      	movs	r2, #2
 8000c80:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000c82:	4b2a      	ldr	r3, [pc, #168]	; (8000d2c <MX_OCTOSPI1_Init+0xdc>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000c88:	4b28      	ldr	r3, [pc, #160]	; (8000d2c <MX_OCTOSPI1_Init+0xdc>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000c8e:	4b27      	ldr	r3, [pc, #156]	; (8000d2c <MX_OCTOSPI1_Init+0xdc>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 3;
 8000c94:	4b25      	ldr	r3, [pc, #148]	; (8000d2c <MX_OCTOSPI1_Init+0xdc>)
 8000c96:	2203      	movs	r2, #3
 8000c98:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000c9a:	4b24      	ldr	r3, [pc, #144]	; (8000d2c <MX_OCTOSPI1_Init+0xdc>)
 8000c9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ca0:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000ca2:	4b22      	ldr	r3, [pc, #136]	; (8000d2c <MX_OCTOSPI1_Init+0xdc>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8000ca8:	4b20      	ldr	r3, [pc, #128]	; (8000d2c <MX_OCTOSPI1_Init+0xdc>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000cae:	4b1f      	ldr	r3, [pc, #124]	; (8000d2c <MX_OCTOSPI1_Init+0xdc>)
 8000cb0:	2208      	movs	r2, #8
 8000cb2:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
 8000cb4:	4b1d      	ldr	r3, [pc, #116]	; (8000d2c <MX_OCTOSPI1_Init+0xdc>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.Refresh = 0;
 8000cba:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <MX_OCTOSPI1_Init+0xdc>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000cc0:	481a      	ldr	r0, [pc, #104]	; (8000d2c <MX_OCTOSPI1_Init+0xdc>)
 8000cc2:	f00a fa67 	bl	800b194 <HAL_OSPI_Init>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_OCTOSPI1_Init+0x80>
  {
    Error_Handler();
 8000ccc:	f000 faa4 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */
  sMemMappedCfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	607b      	str	r3, [r7, #4]
  sMemMappedCfg.TimeOutPeriod = 1;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	60bb      	str	r3, [r7, #8]

  if (HAL_OSPI_MemoryMapped(&hospi1, &sMemMappedCfg) != HAL_OK)
 8000cd8:	1d3b      	adds	r3, r7, #4
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4813      	ldr	r0, [pc, #76]	; (8000d2c <MX_OCTOSPI1_Init+0xdc>)
 8000cde:	f00a fea9 	bl	800ba34 <HAL_OSPI_MemoryMapped>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_OCTOSPI1_Init+0x9c>
  {
    Error_Handler();
 8000ce8:	f000 fa96 	bl	8001218 <Error_Handler>
  }
  BSP_OSPI_NOR_Init_t Flash;
  Flash.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 8000cec:	2301      	movs	r3, #1
 8000cee:	703b      	strb	r3, [r7, #0]
  Flash.TransferRate  = BSP_OSPI_NOR_DTR_TRANSFER;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	707b      	strb	r3, [r7, #1]
  BSP_OSPI_NOR_DeInit(0);
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	f006 ff0f 	bl	8007b18 <BSP_OSPI_NOR_DeInit>
  int32_t RetVal = BSP_OSPI_NOR_Init(0, &Flash);
 8000cfa:	463b      	mov	r3, r7
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f006 fe80 	bl	8007a04 <BSP_OSPI_NOR_Init>
 8000d04:	60f8      	str	r0, [r7, #12]
  if(RetVal != BSP_ERROR_NONE)
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_OCTOSPI1_Init+0xc0>
  {
    Error_Handler();
 8000d0c:	f000 fa84 	bl	8001218 <Error_Handler>
  }
  RetVal = BSP_OSPI_NOR_EnableMemoryMappedMode(0);
 8000d10:	2000      	movs	r0, #0
 8000d12:	f006 ff9d 	bl	8007c50 <BSP_OSPI_NOR_EnableMemoryMappedMode>
 8000d16:	60f8      	str	r0, [r7, #12]
  if(RetVal != BSP_ERROR_NONE)
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_OCTOSPI1_Init+0xd2>
  {
    Error_Handler();
 8000d1e:	f000 fa7b 	bl	8001218 <Error_Handler>
  }
  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000d22:	bf00      	nop
 8000d24:	3710      	adds	r7, #16
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	240004f0 	.word	0x240004f0
 8000d30:	52005000 	.word	0x52005000

08000d34 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000d38:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <MX_SDMMC1_SD_Init+0x34>)
 8000d3a:	4a0c      	ldr	r2, [pc, #48]	; (8000d6c <MX_SDMMC1_SD_Init+0x38>)
 8000d3c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000d3e:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <MX_SDMMC1_SD_Init+0x34>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <MX_SDMMC1_SD_Init+0x34>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000d4a:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <MX_SDMMC1_SD_Init+0x34>)
 8000d4c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d50:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000d52:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <MX_SDMMC1_SD_Init+0x34>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000d58:	4b03      	ldr	r3, [pc, #12]	; (8000d68 <MX_SDMMC1_SD_Init+0x34>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000d5e:	bf00      	nop
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	2400054c 	.word	0x2400054c
 8000d6c:	52007000 	.word	0x52007000

08000d70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d70:	b5b0      	push	{r4, r5, r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d76:	4b2b      	ldr	r3, [pc, #172]	; (8000e24 <MX_USART1_UART_Init+0xb4>)
 8000d78:	4a2b      	ldr	r2, [pc, #172]	; (8000e28 <MX_USART1_UART_Init+0xb8>)
 8000d7a:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d7c:	4b29      	ldr	r3, [pc, #164]	; (8000e24 <MX_USART1_UART_Init+0xb4>)
 8000d7e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d82:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d84:	4b27      	ldr	r3, [pc, #156]	; (8000e24 <MX_USART1_UART_Init+0xb4>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d8a:	4b26      	ldr	r3, [pc, #152]	; (8000e24 <MX_USART1_UART_Init+0xb4>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d90:	4b24      	ldr	r3, [pc, #144]	; (8000e24 <MX_USART1_UART_Init+0xb4>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d96:	4b23      	ldr	r3, [pc, #140]	; (8000e24 <MX_USART1_UART_Init+0xb4>)
 8000d98:	220c      	movs	r2, #12
 8000d9a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d9c:	4b21      	ldr	r3, [pc, #132]	; (8000e24 <MX_USART1_UART_Init+0xb4>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da2:	4b20      	ldr	r3, [pc, #128]	; (8000e24 <MX_USART1_UART_Init+0xb4>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000da8:	4b1e      	ldr	r3, [pc, #120]	; (8000e24 <MX_USART1_UART_Init+0xb4>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000dae:	4b1d      	ldr	r3, [pc, #116]	; (8000e24 <MX_USART1_UART_Init+0xb4>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000db4:	4b1b      	ldr	r3, [pc, #108]	; (8000e24 <MX_USART1_UART_Init+0xb4>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dba:	481a      	ldr	r0, [pc, #104]	; (8000e24 <MX_USART1_UART_Init+0xb4>)
 8000dbc:	f010 fa72 	bl	80112a4 <HAL_UART_Init>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8000dc6:	f000 fa27 	bl	8001218 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4815      	ldr	r0, [pc, #84]	; (8000e24 <MX_USART1_UART_Init+0xb4>)
 8000dce:	f011 fc06 	bl	80125de <HAL_UARTEx_SetTxFifoThreshold>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8000dd8:	f000 fa1e 	bl	8001218 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4811      	ldr	r0, [pc, #68]	; (8000e24 <MX_USART1_UART_Init+0xb4>)
 8000de0:	f011 fc3b 	bl	801265a <HAL_UARTEx_SetRxFifoThreshold>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8000dea:	f000 fa15 	bl	8001218 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000dee:	480d      	ldr	r0, [pc, #52]	; (8000e24 <MX_USART1_UART_Init+0xb4>)
 8000df0:	f011 fbbc 	bl	801256c <HAL_UARTEx_DisableFifoMode>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8000dfa:	f000 fa0d 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
#ifdef DEBUG
  uint8_t MSG[] = "Initializing...\n\r";
 8000dfe:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <MX_USART1_UART_Init+0xbc>)
 8000e00:	1d3c      	adds	r4, r7, #4
 8000e02:	461d      	mov	r5, r3
 8000e04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e08:	682b      	ldr	r3, [r5, #0]
 8000e0a:	8023      	strh	r3, [r4, #0]
  HAL_UART_Transmit(&huart1, MSG, sizeof(MSG),HAL_MAX_DELAY);
 8000e0c:	1d39      	adds	r1, r7, #4
 8000e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e12:	2212      	movs	r2, #18
 8000e14:	4803      	ldr	r0, [pc, #12]	; (8000e24 <MX_USART1_UART_Init+0xb4>)
 8000e16:	f010 fa95 	bl	8011344 <HAL_UART_Transmit>
#endif
  /* USER CODE END USART1_Init 2 */

}
 8000e1a:	bf00      	nop
 8000e1c:	3718      	adds	r7, #24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bdb0      	pop	{r4, r5, r7, pc}
 8000e22:	bf00      	nop
 8000e24:	240005c8 	.word	0x240005c8
 8000e28:	40011000 	.word	0x40011000
 8000e2c:	08027c1c 	.word	0x08027c1c

08000e30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08e      	sub	sp, #56	; 0x38
 8000e34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
 8000e44:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000e46:	4b91      	ldr	r3, [pc, #580]	; (800108c <MX_GPIO_Init+0x25c>)
 8000e48:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e4c:	4a8f      	ldr	r2, [pc, #572]	; (800108c <MX_GPIO_Init+0x25c>)
 8000e4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e52:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e56:	4b8d      	ldr	r3, [pc, #564]	; (800108c <MX_GPIO_Init+0x25c>)
 8000e58:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e60:	623b      	str	r3, [r7, #32]
 8000e62:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e64:	4b89      	ldr	r3, [pc, #548]	; (800108c <MX_GPIO_Init+0x25c>)
 8000e66:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e6a:	4a88      	ldr	r2, [pc, #544]	; (800108c <MX_GPIO_Init+0x25c>)
 8000e6c:	f043 0304 	orr.w	r3, r3, #4
 8000e70:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e74:	4b85      	ldr	r3, [pc, #532]	; (800108c <MX_GPIO_Init+0x25c>)
 8000e76:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e7a:	f003 0304 	and.w	r3, r3, #4
 8000e7e:	61fb      	str	r3, [r7, #28]
 8000e80:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e82:	4b82      	ldr	r3, [pc, #520]	; (800108c <MX_GPIO_Init+0x25c>)
 8000e84:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e88:	4a80      	ldr	r2, [pc, #512]	; (800108c <MX_GPIO_Init+0x25c>)
 8000e8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e8e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e92:	4b7e      	ldr	r3, [pc, #504]	; (800108c <MX_GPIO_Init+0x25c>)
 8000e94:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e9c:	61bb      	str	r3, [r7, #24]
 8000e9e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000ea0:	4b7a      	ldr	r3, [pc, #488]	; (800108c <MX_GPIO_Init+0x25c>)
 8000ea2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ea6:	4a79      	ldr	r2, [pc, #484]	; (800108c <MX_GPIO_Init+0x25c>)
 8000ea8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eac:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000eb0:	4b76      	ldr	r3, [pc, #472]	; (800108c <MX_GPIO_Init+0x25c>)
 8000eb2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000eb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000eba:	617b      	str	r3, [r7, #20]
 8000ebc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ebe:	4b73      	ldr	r3, [pc, #460]	; (800108c <MX_GPIO_Init+0x25c>)
 8000ec0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ec4:	4a71      	ldr	r2, [pc, #452]	; (800108c <MX_GPIO_Init+0x25c>)
 8000ec6:	f043 0308 	orr.w	r3, r3, #8
 8000eca:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ece:	4b6f      	ldr	r3, [pc, #444]	; (800108c <MX_GPIO_Init+0x25c>)
 8000ed0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ed4:	f003 0308 	and.w	r3, r3, #8
 8000ed8:	613b      	str	r3, [r7, #16]
 8000eda:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000edc:	4b6b      	ldr	r3, [pc, #428]	; (800108c <MX_GPIO_Init+0x25c>)
 8000ede:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ee2:	4a6a      	ldr	r2, [pc, #424]	; (800108c <MX_GPIO_Init+0x25c>)
 8000ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000eec:	4b67      	ldr	r3, [pc, #412]	; (800108c <MX_GPIO_Init+0x25c>)
 8000eee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efa:	4b64      	ldr	r3, [pc, #400]	; (800108c <MX_GPIO_Init+0x25c>)
 8000efc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f00:	4a62      	ldr	r2, [pc, #392]	; (800108c <MX_GPIO_Init+0x25c>)
 8000f02:	f043 0301 	orr.w	r3, r3, #1
 8000f06:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f0a:	4b60      	ldr	r3, [pc, #384]	; (800108c <MX_GPIO_Init+0x25c>)
 8000f0c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f18:	4b5c      	ldr	r3, [pc, #368]	; (800108c <MX_GPIO_Init+0x25c>)
 8000f1a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f1e:	4a5b      	ldr	r2, [pc, #364]	; (800108c <MX_GPIO_Init+0x25c>)
 8000f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f24:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f28:	4b58      	ldr	r3, [pc, #352]	; (800108c <MX_GPIO_Init+0x25c>)
 8000f2a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f36:	4b55      	ldr	r3, [pc, #340]	; (800108c <MX_GPIO_Init+0x25c>)
 8000f38:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f3c:	4a53      	ldr	r2, [pc, #332]	; (800108c <MX_GPIO_Init+0x25c>)
 8000f3e:	f043 0302 	orr.w	r3, r3, #2
 8000f42:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f46:	4b51      	ldr	r3, [pc, #324]	; (800108c <MX_GPIO_Init+0x25c>)
 8000f48:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f4c:	f003 0302 	and.w	r3, r3, #2
 8000f50:	603b      	str	r3, [r7, #0]
 8000f52:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000f54:	2200      	movs	r2, #0
 8000f56:	f640 0104 	movw	r1, #2052	; 0x804
 8000f5a:	484d      	ldr	r0, [pc, #308]	; (8001090 <MX_GPIO_Init+0x260>)
 8000f5c:	f008 fe5a 	bl	8009c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8000f60:	2200      	movs	r2, #0
 8000f62:	2101      	movs	r1, #1
 8000f64:	484b      	ldr	r0, [pc, #300]	; (8001094 <MX_GPIO_Init+0x264>)
 8000f66:	f008 fe55 	bl	8009c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VSYNC_FREQ_Pin|LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f241 0106 	movw	r1, #4102	; 0x1006
 8000f70:	4849      	ldr	r0, [pc, #292]	; (8001098 <MX_GPIO_Init+0x268>)
 8000f72:	f008 fe4f 	bl	8009c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RENDER_TIME_Pin|FRAME_RATE_Pin, GPIO_PIN_RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000f7c:	4847      	ldr	r0, [pc, #284]	; (800109c <MX_GPIO_Init+0x26c>)
 8000f7e:	f008 fe49 	bl	8009c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 8000f82:	f640 0304 	movw	r3, #2052	; 0x804
 8000f86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f90:	2300      	movs	r3, #0
 8000f92:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f98:	4619      	mov	r1, r3
 8000f9a:	483d      	ldr	r0, [pc, #244]	; (8001090 <MX_GPIO_Init+0x260>)
 8000f9c:	f008 fb68 	bl	8009670 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000fa0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000faa:	2301      	movs	r3, #1
 8000fac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000fae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4837      	ldr	r0, [pc, #220]	; (8001094 <MX_GPIO_Init+0x264>)
 8000fb6:	f008 fb5b 	bl	8009670 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_ACTIVE_Pin */
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000fca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4830      	ldr	r0, [pc, #192]	; (8001094 <MX_GPIO_Init+0x264>)
 8000fd2:	f008 fb4d 	bl	8009670 <HAL_GPIO_Init>

  /*Configure GPIO pins : VSYNC_FREQ_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = VSYNC_FREQ_Pin|LCD_BL_CTRL_Pin;
 8000fd6:	f241 0302 	movw	r3, #4098	; 0x1002
 8000fda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fec:	4619      	mov	r1, r3
 8000fee:	482a      	ldr	r0, [pc, #168]	; (8001098 <MX_GPIO_Init+0x268>)
 8000ff0:	f008 fb3e 	bl	8009670 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BTN_Pin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 8000ff4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ffa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ffe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 8001004:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001008:	4619      	mov	r1, r3
 800100a:	4825      	ldr	r0, [pc, #148]	; (80010a0 <MX_GPIO_Init+0x270>)
 800100c:	f008 fb30 	bl	8009670 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001010:	2304      	movs	r3, #4
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001014:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001018:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800101a:	2301      	movs	r3, #1
 800101c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800101e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001022:	4619      	mov	r1, r3
 8001024:	481f      	ldr	r0, [pc, #124]	; (80010a4 <MX_GPIO_Init+0x274>)
 8001026:	f008 fb23 	bl	8009670 <HAL_GPIO_Init>

  /*Configure GPIO pins : RENDER_TIME_Pin FRAME_RATE_Pin */
  GPIO_InitStruct.Pin = RENDER_TIME_Pin|FRAME_RATE_Pin;
 800102a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800102e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001030:	2301      	movs	r3, #1
 8001032:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	2300      	movs	r3, #0
 800103a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001040:	4619      	mov	r1, r3
 8001042:	4816      	ldr	r0, [pc, #88]	; (800109c <MX_GPIO_Init+0x26c>)
 8001044:	f008 fb14 	bl	8009670 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_ON_OFF_Pin */
  GPIO_InitStruct.Pin = LCD_ON_OFF_Pin;
 8001048:	2304      	movs	r3, #4
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104c:	2301      	movs	r3, #1
 800104e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001050:	2301      	movs	r3, #1
 8001052:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001054:	2300      	movs	r3, #0
 8001056:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_ON_OFF_GPIO_Port, &GPIO_InitStruct);
 8001058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105c:	4619      	mov	r1, r3
 800105e:	480e      	ldr	r0, [pc, #56]	; (8001098 <MX_GPIO_Init+0x268>)
 8001060:	f008 fb06 	bl	8009670 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001064:	2200      	movs	r2, #0
 8001066:	2105      	movs	r1, #5
 8001068:	2008      	movs	r0, #8
 800106a:	f007 ff3b 	bl	8008ee4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800106e:	2008      	movs	r0, #8
 8001070:	f007 ff52 	bl	8008f18 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001074:	2200      	movs	r2, #0
 8001076:	2105      	movs	r1, #5
 8001078:	2028      	movs	r0, #40	; 0x28
 800107a:	f007 ff33 	bl	8008ee4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800107e:	2028      	movs	r0, #40	; 0x28
 8001080:	f007 ff4a 	bl	8008f18 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001084:	bf00      	nop
 8001086:	3738      	adds	r7, #56	; 0x38
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	58024400 	.word	0x58024400
 8001090:	58021800 	.word	0x58021800
 8001094:	58022000 	.word	0x58022000
 8001098:	58020000 	.word	0x58020000
 800109c:	58020400 	.word	0x58020400
 80010a0:	58020800 	.word	0x58020800
 80010a4:	58021c00 	.word	0x58021c00

080010a8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
volatile uint32_t userButtonPressed = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == USER_BTN_Pin)
 80010b2:	88fb      	ldrh	r3, [r7, #6]
 80010b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010b8:	d102      	bne.n	80010c0 <HAL_GPIO_EXTI_Callback+0x18>
	{
		userButtonPressed = 1;
 80010ba:	4b04      	ldr	r3, [pc, #16]	; (80010cc <HAL_GPIO_EXTI_Callback+0x24>)
 80010bc:	2201      	movs	r2, #1
 80010be:	601a      	str	r2, [r3, #0]
	}
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	24000668 	.word	0x24000668

080010d0 <Start_LEDblink_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_LEDblink_task */
void Start_LEDblink_task(void *argument)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_LEDblink_task */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80010d8:	2104      	movs	r1, #4
 80010da:	480b      	ldr	r0, [pc, #44]	; (8001108 <Start_LEDblink_task+0x38>)
 80010dc:	f008 fdb3 	bl	8009c46 <HAL_GPIO_TogglePin>
	#ifdef DEBUG
	  uint8_t MSG[] = "Blink\n\r";
 80010e0:	4a0a      	ldr	r2, [pc, #40]	; (800110c <Start_LEDblink_task+0x3c>)
 80010e2:	f107 0308 	add.w	r3, r7, #8
 80010e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010ea:	e883 0003 	stmia.w	r3, {r0, r1}
	  HAL_UART_Transmit(&huart1, MSG, sizeof(MSG),HAL_MAX_DELAY);
 80010ee:	f107 0108 	add.w	r1, r7, #8
 80010f2:	f04f 33ff 	mov.w	r3, #4294967295
 80010f6:	2208      	movs	r2, #8
 80010f8:	4805      	ldr	r0, [pc, #20]	; (8001110 <Start_LEDblink_task+0x40>)
 80010fa:	f010 f923 	bl	8011344 <HAL_UART_Transmit>
	#endif
	  osDelay(2000);
 80010fe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001102:	f012 ff7e 	bl	8014002 <osDelay>
  {
 8001106:	e7e7      	b.n	80010d8 <Start_LEDblink_task+0x8>
 8001108:	58021800 	.word	0x58021800
 800110c:	08027c30 	.word	0x08027c30
 8001110:	240005c8 	.word	0x240005c8

08001114 <Start_InterruptTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_InterruptTask */
void Start_InterruptTask(void *argument)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_InterruptTask */
  /* Infinite loop */
  for(;;)
  {
	  if(userButtonPressed == 1)
 800111c:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <Start_InterruptTask+0x34>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d10c      	bne.n	800113e <Start_InterruptTask+0x2a>
	  {
		  userButtonPressed = 0;
 8001124:	4b08      	ldr	r3, [pc, #32]	; (8001148 <Start_InterruptTask+0x34>)
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
		  Mount_SD("/");
 800112a:	4808      	ldr	r0, [pc, #32]	; (800114c <Start_InterruptTask+0x38>)
 800112c:	f7ff facc 	bl	80006c8 <Mount_SD>
		  HAL_Delay(2000);
 8001130:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001134:	f007 fdd6 	bl	8008ce4 <HAL_Delay>
		  Unmount_SD("/");
 8001138:	4804      	ldr	r0, [pc, #16]	; (800114c <Start_InterruptTask+0x38>)
 800113a:	f7ff fae9 	bl	8000710 <Unmount_SD>
	  }
    osDelay(10);
 800113e:	200a      	movs	r0, #10
 8001140:	f012 ff5f 	bl	8014002 <osDelay>
	  if(userButtonPressed == 1)
 8001144:	e7ea      	b.n	800111c <Start_InterruptTask+0x8>
 8001146:	bf00      	nop
 8001148:	24000668 	.word	0x24000668
 800114c:	08027c38 	.word	0x08027c38

08001150 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001156:	463b      	mov	r3, r7
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001162:	f007 fef5 	bl	8008f50 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001166:	2301      	movs	r3, #1
 8001168:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800116a:	2300      	movs	r3, #0
 800116c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800116e:	2300      	movs	r3, #0
 8001170:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001172:	231f      	movs	r3, #31
 8001174:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001176:	2387      	movs	r3, #135	; 0x87
 8001178:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800117a:	2300      	movs	r3, #0
 800117c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800117e:	2300      	movs	r3, #0
 8001180:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001182:	2301      	movs	r3, #1
 8001184:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001186:	2300      	movs	r3, #0
 8001188:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800118a:	2300      	movs	r3, #0
 800118c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800118e:	2300      	movs	r3, #0
 8001190:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001192:	463b      	mov	r3, r7
 8001194:	4618      	mov	r0, r3
 8001196:	f007 ff13 	bl	8008fc0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800119a:	2301      	movs	r3, #1
 800119c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 800119e:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 80011a2:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 80011a4:	2319      	movs	r3, #25
 80011a6:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80011ac:	2303      	movs	r3, #3
 80011ae:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80011b0:	2301      	movs	r3, #1
 80011b2:	73bb      	strb	r3, [r7, #14]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80011b4:	463b      	mov	r3, r7
 80011b6:	4618      	mov	r0, r3
 80011b8:	f007 ff02 	bl	8008fc0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80011bc:	2302      	movs	r3, #2
 80011be:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 80011c0:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 80011c4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1MB;
 80011c6:	2313      	movs	r3, #19
 80011c8:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80011ca:	463b      	mov	r3, r7
 80011cc:	4618      	mov	r0, r3
 80011ce:	f007 fef7 	bl	8008fc0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 80011d2:	2303      	movs	r3, #3
 80011d4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 80011d6:	2311      	movs	r3, #17
 80011d8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80011da:	2301      	movs	r3, #1
 80011dc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80011de:	463b      	mov	r3, r7
 80011e0:	4618      	mov	r0, r3
 80011e2:	f007 feed 	bl	8008fc0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80011e6:	2004      	movs	r0, #4
 80011e8:	f007 feca 	bl	8008f80 <HAL_MPU_Enable>

}
 80011ec:	bf00      	nop
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a04      	ldr	r2, [pc, #16]	; (8001214 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d101      	bne.n	800120a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001206:	f007 fd4d 	bl	8008ca4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40001000 	.word	0x40001000

08001218 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
	...

08001228 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122e:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <HAL_MspInit+0x38>)
 8001230:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001234:	4a0a      	ldr	r2, [pc, #40]	; (8001260 <HAL_MspInit+0x38>)
 8001236:	f043 0302 	orr.w	r3, r3, #2
 800123a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800123e:	4b08      	ldr	r3, [pc, #32]	; (8001260 <HAL_MspInit+0x38>)
 8001240:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001244:	f003 0302 	and.w	r3, r3, #2
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800124c:	2200      	movs	r2, #0
 800124e:	210f      	movs	r1, #15
 8001250:	f06f 0001 	mvn.w	r0, #1
 8001254:	f007 fe46 	bl	8008ee4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	58024400 	.word	0x58024400

08001264 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a0b      	ldr	r2, [pc, #44]	; (80012a0 <HAL_CRC_MspInit+0x3c>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d10e      	bne.n	8001294 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001276:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <HAL_CRC_MspInit+0x40>)
 8001278:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800127c:	4a09      	ldr	r2, [pc, #36]	; (80012a4 <HAL_CRC_MspInit+0x40>)
 800127e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001282:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8001286:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <HAL_CRC_MspInit+0x40>)
 8001288:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800128c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001294:	bf00      	nop
 8001296:	3714      	adds	r7, #20
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	40023000 	.word	0x40023000
 80012a4:	58024400 	.word	0x58024400

080012a8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a0e      	ldr	r2, [pc, #56]	; (80012f0 <HAL_DMA2D_MspInit+0x48>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d116      	bne.n	80012e8 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80012ba:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <HAL_DMA2D_MspInit+0x4c>)
 80012bc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80012c0:	4a0c      	ldr	r2, [pc, #48]	; (80012f4 <HAL_DMA2D_MspInit+0x4c>)
 80012c2:	f043 0310 	orr.w	r3, r3, #16
 80012c6:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 80012ca:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <HAL_DMA2D_MspInit+0x4c>)
 80012cc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80012d0:	f003 0310 	and.w	r3, r3, #16
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80012d8:	2200      	movs	r2, #0
 80012da:	2105      	movs	r1, #5
 80012dc:	205a      	movs	r0, #90	; 0x5a
 80012de:	f007 fe01 	bl	8008ee4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80012e2:	205a      	movs	r0, #90	; 0x5a
 80012e4:	f007 fe18 	bl	8008f18 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80012e8:	bf00      	nop
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	52001000 	.word	0x52001000
 80012f4:	58024400 	.word	0x58024400

080012f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b0ba      	sub	sp, #232	; 0xe8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001300:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001310:	f107 0310 	add.w	r3, r7, #16
 8001314:	22c0      	movs	r2, #192	; 0xc0
 8001316:	2100      	movs	r1, #0
 8001318:	4618      	mov	r0, r3
 800131a:	f025 fdf0 	bl	8026efe <memset>
  if(hi2c->Instance==I2C4)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a27      	ldr	r2, [pc, #156]	; (80013c0 <HAL_I2C_MspInit+0xc8>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d146      	bne.n	80013b6 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001328:	f04f 0210 	mov.w	r2, #16
 800132c:	f04f 0300 	mov.w	r3, #0
 8001330:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001334:	2300      	movs	r3, #0
 8001336:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800133a:	f107 0310 	add.w	r3, r7, #16
 800133e:	4618      	mov	r0, r3
 8001340:	f00b fee2 	bl	800d108 <HAL_RCCEx_PeriphCLKConfig>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800134a:	f7ff ff65 	bl	8001218 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800134e:	4b1d      	ldr	r3, [pc, #116]	; (80013c4 <HAL_I2C_MspInit+0xcc>)
 8001350:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001354:	4a1b      	ldr	r2, [pc, #108]	; (80013c4 <HAL_I2C_MspInit+0xcc>)
 8001356:	f043 0308 	orr.w	r3, r3, #8
 800135a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800135e:	4b19      	ldr	r3, [pc, #100]	; (80013c4 <HAL_I2C_MspInit+0xcc>)
 8001360:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001364:	f003 0308 	and.w	r3, r3, #8
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD13     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 800136c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001370:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001374:	2312      	movs	r3, #18
 8001376:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001380:	2302      	movs	r3, #2
 8001382:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001386:	2304      	movs	r3, #4
 8001388:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800138c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001390:	4619      	mov	r1, r3
 8001392:	480d      	ldr	r0, [pc, #52]	; (80013c8 <HAL_I2C_MspInit+0xd0>)
 8001394:	f008 f96c 	bl	8009670 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001398:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <HAL_I2C_MspInit+0xcc>)
 800139a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800139e:	4a09      	ldr	r2, [pc, #36]	; (80013c4 <HAL_I2C_MspInit+0xcc>)
 80013a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013a4:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80013a8:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <HAL_I2C_MspInit+0xcc>)
 80013aa:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80013ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80013b6:	bf00      	nop
 80013b8:	37e8      	adds	r7, #232	; 0xe8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	58001c00 	.word	0x58001c00
 80013c4:	58024400 	.word	0x58024400
 80013c8:	58020c00 	.word	0x58020c00

080013cc <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C4)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a0c      	ldr	r2, [pc, #48]	; (800140c <HAL_I2C_MspDeInit+0x40>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d111      	bne.n	8001402 <HAL_I2C_MspDeInit+0x36>
  {
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 80013de:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <HAL_I2C_MspDeInit+0x44>)
 80013e0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80013e4:	4a0a      	ldr	r2, [pc, #40]	; (8001410 <HAL_I2C_MspDeInit+0x44>)
 80013e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80013ea:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154

    /**I2C4 GPIO Configuration
    PD13     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_13);
 80013ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013f2:	4808      	ldr	r0, [pc, #32]	; (8001414 <HAL_I2C_MspDeInit+0x48>)
 80013f4:	f008 faec 	bl	80099d0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12);
 80013f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013fc:	4805      	ldr	r0, [pc, #20]	; (8001414 <HAL_I2C_MspDeInit+0x48>)
 80013fe:	f008 fae7 	bl	80099d0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	58001c00 	.word	0x58001c00
 8001410:	58024400 	.word	0x58024400
 8001414:	58020c00 	.word	0x58020c00

08001418 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b0bc      	sub	sp, #240	; 0xf0
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001430:	f107 0318 	add.w	r3, r7, #24
 8001434:	22c0      	movs	r2, #192	; 0xc0
 8001436:	2100      	movs	r1, #0
 8001438:	4618      	mov	r0, r3
 800143a:	f025 fd60 	bl	8026efe <memset>
  if(hltdc->Instance==LTDC)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a57      	ldr	r2, [pc, #348]	; (80015a0 <HAL_LTDC_MspInit+0x188>)
 8001444:	4293      	cmp	r3, r2
 8001446:	f040 80a6 	bne.w	8001596 <HAL_LTDC_MspInit+0x17e>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800144a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800144e:	f04f 0300 	mov.w	r3, #0
 8001452:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 8001456:	2318      	movs	r3, #24
 8001458:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 288;
 800145a:	f44f 7390 	mov.w	r3, #288	; 0x120
 800145e:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 17;
 8001460:	2311      	movs	r3, #17
 8001462:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001464:	2302      	movs	r3, #2
 8001466:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 30;
 8001468:	231e      	movs	r3, #30
 800146a:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 800146c:	2300      	movs	r3, #0
 800146e:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001470:	2300      	movs	r3, #0
 8001472:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001478:	f107 0318 	add.w	r3, r7, #24
 800147c:	4618      	mov	r0, r3
 800147e:	f00b fe43 	bl	800d108 <HAL_RCCEx_PeriphCLKConfig>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <HAL_LTDC_MspInit+0x74>
    {
      Error_Handler();
 8001488:	f7ff fec6 	bl	8001218 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800148c:	4b45      	ldr	r3, [pc, #276]	; (80015a4 <HAL_LTDC_MspInit+0x18c>)
 800148e:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8001492:	4a44      	ldr	r2, [pc, #272]	; (80015a4 <HAL_LTDC_MspInit+0x18c>)
 8001494:	f043 0308 	orr.w	r3, r3, #8
 8001498:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 800149c:	4b41      	ldr	r3, [pc, #260]	; (80015a4 <HAL_LTDC_MspInit+0x18c>)
 800149e:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80014a2:	f003 0308 	and.w	r3, r3, #8
 80014a6:	617b      	str	r3, [r7, #20]
 80014a8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 80014aa:	4b3e      	ldr	r3, [pc, #248]	; (80015a4 <HAL_LTDC_MspInit+0x18c>)
 80014ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014b0:	4a3c      	ldr	r2, [pc, #240]	; (80015a4 <HAL_LTDC_MspInit+0x18c>)
 80014b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014b6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80014ba:	4b3a      	ldr	r3, [pc, #232]	; (80015a4 <HAL_LTDC_MspInit+0x18c>)
 80014bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014c4:	613b      	str	r3, [r7, #16]
 80014c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80014c8:	4b36      	ldr	r3, [pc, #216]	; (80015a4 <HAL_LTDC_MspInit+0x18c>)
 80014ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014ce:	4a35      	ldr	r2, [pc, #212]	; (80015a4 <HAL_LTDC_MspInit+0x18c>)
 80014d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014d4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80014d8:	4b32      	ldr	r3, [pc, #200]	; (80015a4 <HAL_LTDC_MspInit+0x18c>)
 80014da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80014e6:	4b2f      	ldr	r3, [pc, #188]	; (80015a4 <HAL_LTDC_MspInit+0x18c>)
 80014e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014ec:	4a2d      	ldr	r2, [pc, #180]	; (80015a4 <HAL_LTDC_MspInit+0x18c>)
 80014ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80014f6:	4b2b      	ldr	r3, [pc, #172]	; (80015a4 <HAL_LTDC_MspInit+0x18c>)
 80014f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	68bb      	ldr	r3, [r7, #8]
    PJ1     ------> LTDC_R2
    PJ4     ------> LTDC_R5
    PJ2     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_4
 8001504:	23ff      	movs	r3, #255	; 0xff
 8001506:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_7|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150a:	2302      	movs	r3, #2
 800150c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001516:	2300      	movs	r3, #0
 8001518:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800151c:	230e      	movs	r3, #14
 800151e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001522:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001526:	4619      	mov	r1, r3
 8001528:	481f      	ldr	r0, [pc, #124]	; (80015a8 <HAL_LTDC_MspInit+0x190>)
 800152a:	f008 f8a1 	bl	8009670 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12
 800152e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001532:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_5
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001536:	2302      	movs	r3, #2
 8001538:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001542:	2300      	movs	r3, #0
 8001544:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001548:	230e      	movs	r3, #14
 800154a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800154e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001552:	4619      	mov	r1, r3
 8001554:	4815      	ldr	r0, [pc, #84]	; (80015ac <HAL_LTDC_MspInit+0x194>)
 8001556:	f008 f88b 	bl	8009670 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15;
 800155a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800155e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001562:	2302      	movs	r3, #2
 8001564:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156e:	2300      	movs	r3, #0
 8001570:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001574:	230e      	movs	r3, #14
 8001576:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800157a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800157e:	4619      	mov	r1, r3
 8001580:	480b      	ldr	r0, [pc, #44]	; (80015b0 <HAL_LTDC_MspInit+0x198>)
 8001582:	f008 f875 	bl	8009670 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001586:	2200      	movs	r2, #0
 8001588:	2105      	movs	r1, #5
 800158a:	2058      	movs	r0, #88	; 0x58
 800158c:	f007 fcaa 	bl	8008ee4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001590:	2058      	movs	r0, #88	; 0x58
 8001592:	f007 fcc1 	bl	8008f18 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001596:	bf00      	nop
 8001598:	37f0      	adds	r7, #240	; 0xf0
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	50001000 	.word	0x50001000
 80015a4:	58024400 	.word	0x58024400
 80015a8:	58022800 	.word	0x58022800
 80015ac:	58022400 	.word	0x58022400
 80015b0:	58022000 	.word	0x58022000

080015b4 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  if(hospi->Instance==OCTOSPI1)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a1c      	ldr	r2, [pc, #112]	; (8001634 <HAL_OSPI_MspInit+0x80>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d131      	bne.n	800162a <HAL_OSPI_MspInit+0x76>
  {
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */
	__HAL_RCC_OSPI1_FORCE_RESET();
 80015c6:	4b1c      	ldr	r3, [pc, #112]	; (8001638 <HAL_OSPI_MspInit+0x84>)
 80015c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80015ca:	4a1b      	ldr	r2, [pc, #108]	; (8001638 <HAL_OSPI_MspInit+0x84>)
 80015cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015d0:	67d3      	str	r3, [r2, #124]	; 0x7c
	__HAL_RCC_OSPI1_RELEASE_RESET();
 80015d2:	4b19      	ldr	r3, [pc, #100]	; (8001638 <HAL_OSPI_MspInit+0x84>)
 80015d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80015d6:	4a18      	ldr	r2, [pc, #96]	; (8001638 <HAL_OSPI_MspInit+0x84>)
 80015d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015dc:	67d3      	str	r3, [r2, #124]	; 0x7c
  /* USER CODE END OCTOSPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 80015de:	4b16      	ldr	r3, [pc, #88]	; (8001638 <HAL_OSPI_MspInit+0x84>)
 80015e0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80015e4:	4a14      	ldr	r2, [pc, #80]	; (8001638 <HAL_OSPI_MspInit+0x84>)
 80015e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015ea:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 80015ee:	4b12      	ldr	r3, [pc, #72]	; (8001638 <HAL_OSPI_MspInit+0x84>)
 80015f0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80015f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80015fc:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <HAL_OSPI_MspInit+0x84>)
 80015fe:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001602:	4a0d      	ldr	r2, [pc, #52]	; (8001638 <HAL_OSPI_MspInit+0x84>)
 8001604:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001608:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 800160c:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <HAL_OSPI_MspInit+0x84>)
 800160e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001612:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001616:	60bb      	str	r3, [r7, #8]
 8001618:	68bb      	ldr	r3, [r7, #8]
    /* OCTOSPI1 interrupt Init */
    HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 5, 0);
 800161a:	2200      	movs	r2, #0
 800161c:	2105      	movs	r1, #5
 800161e:	205c      	movs	r0, #92	; 0x5c
 8001620:	f007 fc60 	bl	8008ee4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 8001624:	205c      	movs	r0, #92	; 0x5c
 8001626:	f007 fc77 	bl	8008f18 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 800162a:	bf00      	nop
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	52005000 	.word	0x52005000
 8001638:	58024400 	.word	0x58024400

0800163c <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  if(hospi->Instance==OCTOSPI1)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a0c      	ldr	r2, [pc, #48]	; (800167c <HAL_OSPI_MspDeInit+0x40>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d112      	bne.n	8001674 <HAL_OSPI_MspDeInit+0x38>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 800164e:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <HAL_OSPI_MspDeInit+0x44>)
 8001650:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001654:	4a0a      	ldr	r2, [pc, #40]	; (8001680 <HAL_OSPI_MspDeInit+0x44>)
 8001656:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800165a:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
    __HAL_RCC_OSPI1_CLK_DISABLE();
 800165e:	4b08      	ldr	r3, [pc, #32]	; (8001680 <HAL_OSPI_MspDeInit+0x44>)
 8001660:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001664:	4a06      	ldr	r2, [pc, #24]	; (8001680 <HAL_OSPI_MspDeInit+0x44>)
 8001666:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800166a:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

    /* OCTOSPI1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(OCTOSPI1_IRQn);
 800166e:	205c      	movs	r0, #92	; 0x5c
 8001670:	f007 fc60 	bl	8008f34 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 8001674:	bf00      	nop
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	52005000 	.word	0x52005000
 8001680:	58024400 	.word	0x58024400

08001684 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08a      	sub	sp, #40	; 0x28
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a2a      	ldr	r2, [pc, #168]	; (800174c <HAL_SD_MspInit+0xc8>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d14d      	bne.n	8001742 <HAL_SD_MspInit+0xbe>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80016a6:	4b2a      	ldr	r3, [pc, #168]	; (8001750 <HAL_SD_MspInit+0xcc>)
 80016a8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80016ac:	4a28      	ldr	r2, [pc, #160]	; (8001750 <HAL_SD_MspInit+0xcc>)
 80016ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016b2:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 80016b6:	4b26      	ldr	r3, [pc, #152]	; (8001750 <HAL_SD_MspInit+0xcc>)
 80016b8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80016bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016c4:	4b22      	ldr	r3, [pc, #136]	; (8001750 <HAL_SD_MspInit+0xcc>)
 80016c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80016ca:	4a21      	ldr	r2, [pc, #132]	; (8001750 <HAL_SD_MspInit+0xcc>)
 80016cc:	f043 0304 	orr.w	r3, r3, #4
 80016d0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80016d4:	4b1e      	ldr	r3, [pc, #120]	; (8001750 <HAL_SD_MspInit+0xcc>)
 80016d6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80016da:	f003 0304 	and.w	r3, r3, #4
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016e2:	4b1b      	ldr	r3, [pc, #108]	; (8001750 <HAL_SD_MspInit+0xcc>)
 80016e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80016e8:	4a19      	ldr	r2, [pc, #100]	; (8001750 <HAL_SD_MspInit+0xcc>)
 80016ea:	f043 0308 	orr.w	r3, r3, #8
 80016ee:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80016f2:	4b17      	ldr	r3, [pc, #92]	; (8001750 <HAL_SD_MspInit+0xcc>)
 80016f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80016f8:	f003 0308 	and.w	r3, r3, #8
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	68bb      	ldr	r3, [r7, #8]
    PC12     ------> SDMMC1_CK
    PC11     ------> SDMMC1_D3
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_9
 8001700:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001704:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001706:	2302      	movs	r3, #2
 8001708:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170e:	2303      	movs	r3, #3
 8001710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001712:	230c      	movs	r3, #12
 8001714:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001716:	f107 0314 	add.w	r3, r7, #20
 800171a:	4619      	mov	r1, r3
 800171c:	480d      	ldr	r0, [pc, #52]	; (8001754 <HAL_SD_MspInit+0xd0>)
 800171e:	f007 ffa7 	bl	8009670 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001722:	2304      	movs	r3, #4
 8001724:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001726:	2302      	movs	r3, #2
 8001728:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172e:	2303      	movs	r3, #3
 8001730:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001732:	230c      	movs	r3, #12
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001736:	f107 0314 	add.w	r3, r7, #20
 800173a:	4619      	mov	r1, r3
 800173c:	4806      	ldr	r0, [pc, #24]	; (8001758 <HAL_SD_MspInit+0xd4>)
 800173e:	f007 ff97 	bl	8009670 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001742:	bf00      	nop
 8001744:	3728      	adds	r7, #40	; 0x28
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	52007000 	.word	0x52007000
 8001750:	58024400 	.word	0x58024400
 8001754:	58020800 	.word	0x58020800
 8001758:	58020c00 	.word	0x58020c00

0800175c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b0ba      	sub	sp, #232	; 0xe8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001774:	f107 0310 	add.w	r3, r7, #16
 8001778:	22c0      	movs	r2, #192	; 0xc0
 800177a:	2100      	movs	r1, #0
 800177c:	4618      	mov	r0, r3
 800177e:	f025 fbbe 	bl	8026efe <memset>
  if(huart->Instance==USART1)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a27      	ldr	r2, [pc, #156]	; (8001824 <HAL_UART_MspInit+0xc8>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d146      	bne.n	800181a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800178c:	f04f 0201 	mov.w	r2, #1
 8001790:	f04f 0300 	mov.w	r3, #0
 8001794:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001798:	2300      	movs	r3, #0
 800179a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800179e:	f107 0310 	add.w	r3, r7, #16
 80017a2:	4618      	mov	r0, r3
 80017a4:	f00b fcb0 	bl	800d108 <HAL_RCCEx_PeriphCLKConfig>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80017ae:	f7ff fd33 	bl	8001218 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017b2:	4b1d      	ldr	r3, [pc, #116]	; (8001828 <HAL_UART_MspInit+0xcc>)
 80017b4:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80017b8:	4a1b      	ldr	r2, [pc, #108]	; (8001828 <HAL_UART_MspInit+0xcc>)
 80017ba:	f043 0310 	orr.w	r3, r3, #16
 80017be:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 80017c2:	4b19      	ldr	r3, [pc, #100]	; (8001828 <HAL_UART_MspInit+0xcc>)
 80017c4:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80017c8:	f003 0310 	and.w	r3, r3, #16
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d0:	4b15      	ldr	r3, [pc, #84]	; (8001828 <HAL_UART_MspInit+0xcc>)
 80017d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80017d6:	4a14      	ldr	r2, [pc, #80]	; (8001828 <HAL_UART_MspInit+0xcc>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80017e0:	4b11      	ldr	r3, [pc, #68]	; (8001828 <HAL_UART_MspInit+0xcc>)
 80017e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 80017ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80017f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f6:	2302      	movs	r3, #2
 80017f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001802:	2300      	movs	r3, #0
 8001804:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001808:	2307      	movs	r3, #7
 800180a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001812:	4619      	mov	r1, r3
 8001814:	4805      	ldr	r0, [pc, #20]	; (800182c <HAL_UART_MspInit+0xd0>)
 8001816:	f007 ff2b 	bl	8009670 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800181a:	bf00      	nop
 800181c:	37e8      	adds	r7, #232	; 0xe8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40011000 	.word	0x40011000
 8001828:	58024400 	.word	0x58024400
 800182c:	58020000 	.word	0x58020000

08001830 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b090      	sub	sp, #64	; 0x40
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2b0f      	cmp	r3, #15
 800183c:	d827      	bhi.n	800188e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800183e:	2200      	movs	r2, #0
 8001840:	6879      	ldr	r1, [r7, #4]
 8001842:	2036      	movs	r0, #54	; 0x36
 8001844:	f007 fb4e 	bl	8008ee4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001848:	2036      	movs	r0, #54	; 0x36
 800184a:	f007 fb65 	bl	8008f18 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800184e:	4a29      	ldr	r2, [pc, #164]	; (80018f4 <HAL_InitTick+0xc4>)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001854:	4b28      	ldr	r3, [pc, #160]	; (80018f8 <HAL_InitTick+0xc8>)
 8001856:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800185a:	4a27      	ldr	r2, [pc, #156]	; (80018f8 <HAL_InitTick+0xc8>)
 800185c:	f043 0310 	orr.w	r3, r3, #16
 8001860:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001864:	4b24      	ldr	r3, [pc, #144]	; (80018f8 <HAL_InitTick+0xc8>)
 8001866:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800186a:	f003 0310 	and.w	r3, r3, #16
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001872:	f107 0210 	add.w	r2, r7, #16
 8001876:	f107 0314 	add.w	r3, r7, #20
 800187a:	4611      	mov	r1, r2
 800187c:	4618      	mov	r0, r3
 800187e:	f00b fc01 	bl	800d084 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001884:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001888:	2b00      	cmp	r3, #0
 800188a:	d106      	bne.n	800189a <HAL_InitTick+0x6a>
 800188c:	e001      	b.n	8001892 <HAL_InitTick+0x62>
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e02b      	b.n	80018ea <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001892:	f00b fbcb 	bl	800d02c <HAL_RCC_GetPCLK1Freq>
 8001896:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001898:	e004      	b.n	80018a4 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800189a:	f00b fbc7 	bl	800d02c <HAL_RCC_GetPCLK1Freq>
 800189e:	4603      	mov	r3, r0
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018a6:	4a15      	ldr	r2, [pc, #84]	; (80018fc <HAL_InitTick+0xcc>)
 80018a8:	fba2 2303 	umull	r2, r3, r2, r3
 80018ac:	0c9b      	lsrs	r3, r3, #18
 80018ae:	3b01      	subs	r3, #1
 80018b0:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80018b2:	4b13      	ldr	r3, [pc, #76]	; (8001900 <HAL_InitTick+0xd0>)
 80018b4:	4a13      	ldr	r2, [pc, #76]	; (8001904 <HAL_InitTick+0xd4>)
 80018b6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80018b8:	4b11      	ldr	r3, [pc, #68]	; (8001900 <HAL_InitTick+0xd0>)
 80018ba:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018be:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80018c0:	4a0f      	ldr	r2, [pc, #60]	; (8001900 <HAL_InitTick+0xd0>)
 80018c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018c4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80018c6:	4b0e      	ldr	r3, [pc, #56]	; (8001900 <HAL_InitTick+0xd0>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018cc:	4b0c      	ldr	r3, [pc, #48]	; (8001900 <HAL_InitTick+0xd0>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80018d2:	480b      	ldr	r0, [pc, #44]	; (8001900 <HAL_InitTick+0xd0>)
 80018d4:	f00f fa0c 	bl	8010cf0 <HAL_TIM_Base_Init>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d104      	bne.n	80018e8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80018de:	4808      	ldr	r0, [pc, #32]	; (8001900 <HAL_InitTick+0xd0>)
 80018e0:	f00f fa68 	bl	8010db4 <HAL_TIM_Base_Start_IT>
 80018e4:	4603      	mov	r3, r0
 80018e6:	e000      	b.n	80018ea <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3740      	adds	r7, #64	; 0x40
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	24000048 	.word	0x24000048
 80018f8:	58024400 	.word	0x58024400
 80018fc:	431bde83 	.word	0x431bde83
 8001900:	2400066c 	.word	0x2400066c
 8001904:	40001000 	.word	0x40001000

08001908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800190c:	e7fe      	b.n	800190c <NMI_Handler+0x4>

0800190e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800190e:	b480      	push	{r7}
 8001910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001912:	e7fe      	b.n	8001912 <HardFault_Handler+0x4>

08001914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001918:	e7fe      	b.n	8001918 <MemManage_Handler+0x4>

0800191a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800191a:	b480      	push	{r7}
 800191c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800191e:	e7fe      	b.n	800191e <BusFault_Handler+0x4>

08001920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001924:	e7fe      	b.n	8001924 <UsageFault_Handler+0x4>

08001926 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LCD_INT_Pin);
 8001938:	2004      	movs	r0, #4
 800193a:	f008 f99e 	bl	8009c7a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}

08001942 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BTN_Pin);
 8001946:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800194a:	f008 f996 	bl	8009c7a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
	...

08001954 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001958:	4802      	ldr	r0, [pc, #8]	; (8001964 <TIM6_DAC_IRQHandler+0x10>)
 800195a:	f00f faa3 	bl	8010ea4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	2400066c 	.word	0x2400066c

08001968 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800196c:	4802      	ldr	r0, [pc, #8]	; (8001978 <LTDC_IRQHandler+0x10>)
 800196e:	f009 f8c7 	bl	800ab00 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	24000448 	.word	0x24000448

0800197c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001980:	4802      	ldr	r0, [pc, #8]	; (800198c <DMA2D_IRQHandler+0x10>)
 8001982:	f007 fcb7 	bl	80092f4 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	2400038c 	.word	0x2400038c

08001990 <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi1);
 8001994:	4802      	ldr	r0, [pc, #8]	; (80019a0 <OCTOSPI1_IRQHandler+0x10>)
 8001996:	f009 fce1 	bl	800b35c <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	240004f0 	.word	0x240004f0

080019a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  return 1;
 80019a8:	2301      	movs	r3, #1
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <_kill>:

int _kill(int pid, int sig)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019be:	f025 fb41 	bl	8027044 <__errno>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2216      	movs	r2, #22
 80019c6:	601a      	str	r2, [r3, #0]
  return -1;
 80019c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <_exit>:

void _exit (int status)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019dc:	f04f 31ff 	mov.w	r1, #4294967295
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff ffe7 	bl	80019b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019e6:	e7fe      	b.n	80019e6 <_exit+0x12>

080019e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]
 80019f8:	e00a      	b.n	8001a10 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019fa:	f3af 8000 	nop.w
 80019fe:	4601      	mov	r1, r0
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	1c5a      	adds	r2, r3, #1
 8001a04:	60ba      	str	r2, [r7, #8]
 8001a06:	b2ca      	uxtb	r2, r1
 8001a08:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	697a      	ldr	r2, [r7, #20]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	dbf0      	blt.n	80019fa <_read+0x12>
  }

  return len;
 8001a18:	687b      	ldr	r3, [r7, #4]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b086      	sub	sp, #24
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	60f8      	str	r0, [r7, #12]
 8001a2a:	60b9      	str	r1, [r7, #8]
 8001a2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	e009      	b.n	8001a48 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	1c5a      	adds	r2, r3, #1
 8001a38:	60ba      	str	r2, [r7, #8]
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	3301      	adds	r3, #1
 8001a46:	617b      	str	r3, [r7, #20]
 8001a48:	697a      	ldr	r2, [r7, #20]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	dbf1      	blt.n	8001a34 <_write+0x12>
  }
  return len;
 8001a50:	687b      	ldr	r3, [r7, #4]
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3718      	adds	r7, #24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <_close>:

int _close(int file)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
 8001a7a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a82:	605a      	str	r2, [r3, #4]
  return 0;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <_isatty>:

int _isatty(int file)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a9a:	2301      	movs	r3, #1
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3714      	adds	r7, #20
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
	...

08001ac4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001acc:	4a14      	ldr	r2, [pc, #80]	; (8001b20 <_sbrk+0x5c>)
 8001ace:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <_sbrk+0x60>)
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ad8:	4b13      	ldr	r3, [pc, #76]	; (8001b28 <_sbrk+0x64>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d102      	bne.n	8001ae6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ae0:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <_sbrk+0x64>)
 8001ae2:	4a12      	ldr	r2, [pc, #72]	; (8001b2c <_sbrk+0x68>)
 8001ae4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ae6:	4b10      	ldr	r3, [pc, #64]	; (8001b28 <_sbrk+0x64>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4413      	add	r3, r2
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d207      	bcs.n	8001b04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001af4:	f025 faa6 	bl	8027044 <__errno>
 8001af8:	4603      	mov	r3, r0
 8001afa:	220c      	movs	r2, #12
 8001afc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001afe:	f04f 33ff 	mov.w	r3, #4294967295
 8001b02:	e009      	b.n	8001b18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b04:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <_sbrk+0x64>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b0a:	4b07      	ldr	r3, [pc, #28]	; (8001b28 <_sbrk+0x64>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4413      	add	r3, r2
 8001b12:	4a05      	ldr	r2, [pc, #20]	; (8001b28 <_sbrk+0x64>)
 8001b14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b16:	68fb      	ldr	r3, [r7, #12]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	24040000 	.word	0x24040000
 8001b24:	00001000 	.word	0x00001000
 8001b28:	240006b8 	.word	0x240006b8
 8001b2c:	24007948 	.word	0x24007948

08001b30 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8001b34:	4904      	ldr	r1, [pc, #16]	; (8001b48 <MX_FATFS_Init+0x18>)
 8001b36:	4805      	ldr	r0, [pc, #20]	; (8001b4c <MX_FATFS_Init+0x1c>)
 8001b38:	f012 f8b6 	bl	8013ca8 <FATFS_LinkDriver>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	461a      	mov	r2, r3
 8001b40:	4b03      	ldr	r3, [pc, #12]	; (8001b50 <MX_FATFS_Init+0x20>)
 8001b42:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8001b44:	bf00      	nop
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	240006c0 	.word	0x240006c0
 8001b4c:	0802873c 	.word	0x0802873c
 8001b50:	240006bc 	.word	0x240006bc

08001b54 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8001b5e:	f000 f871 	bl	8001c44 <BSP_SD_IsDetected>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d001      	beq.n	8001b6c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	e012      	b.n	8001b92 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8001b6c:	480b      	ldr	r0, [pc, #44]	; (8001b9c <BSP_SD_Init+0x48>)
 8001b6e:	f00d fed5 	bl	800f91c <HAL_SD_Init>
 8001b72:	4603      	mov	r3, r0
 8001b74:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d109      	bne.n	8001b90 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8001b7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b80:	4806      	ldr	r0, [pc, #24]	; (8001b9c <BSP_SD_Init+0x48>)
 8001b82:	f00e fbc9 	bl	8010318 <HAL_SD_ConfigWideBusOperation>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8001b90:	79fb      	ldrb	r3, [r7, #7]
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	2400054c 	.word	0x2400054c

08001ba0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8001bac:	2300      	movs	r3, #0
 8001bae:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68ba      	ldr	r2, [r7, #8]
 8001bb4:	68f9      	ldr	r1, [r7, #12]
 8001bb6:	4806      	ldr	r0, [pc, #24]	; (8001bd0 <BSP_SD_ReadBlocks_DMA+0x30>)
 8001bb8:	f00d ffd0 	bl	800fb5c <HAL_SD_ReadBlocks_DMA>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8001bc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	2400054c 	.word	0x2400054c

08001bd4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8001be0:	2300      	movs	r3, #0
 8001be2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	68ba      	ldr	r2, [r7, #8]
 8001be8:	68f9      	ldr	r1, [r7, #12]
 8001bea:	4806      	ldr	r0, [pc, #24]	; (8001c04 <BSP_SD_WriteBlocks_DMA+0x30>)
 8001bec:	f00e f85e 	bl	800fcac <HAL_SD_WriteBlocks_DMA>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8001bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	2400054c 	.word	0x2400054c

08001c08 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8001c0c:	4805      	ldr	r0, [pc, #20]	; (8001c24 <BSP_SD_GetCardState+0x1c>)
 8001c0e:	f00e fc95 	bl	801053c <HAL_SD_GetCardState>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b04      	cmp	r3, #4
 8001c16:	bf14      	ite	ne
 8001c18:	2301      	movne	r3, #1
 8001c1a:	2300      	moveq	r3, #0
 8001c1c:	b2db      	uxtb	r3, r3
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	2400054c 	.word	0x2400054c

08001c28 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8001c30:	6879      	ldr	r1, [r7, #4]
 8001c32:	4803      	ldr	r0, [pc, #12]	; (8001c40 <BSP_SD_GetCardInfo+0x18>)
 8001c34:	f00e fb44 	bl	80102c0 <HAL_SD_GetCardInfo>
}
 8001c38:	bf00      	nop
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	2400054c 	.word	0x2400054c

08001c44 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8001c4e:	f000 f80b 	bl	8001c68 <BSP_PlatformIsDetected>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d101      	bne.n	8001c5c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	b2db      	uxtb	r3, r3
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8001c72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c76:	4806      	ldr	r0, [pc, #24]	; (8001c90 <BSP_PlatformIsDetected+0x28>)
 8001c78:	f007 ffb4 	bl	8009be4 <HAL_GPIO_ReadPin>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8001c82:	2300      	movs	r3, #0
 8001c84:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8001c86:	79fb      	ldrb	r3, [r7, #7]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	58022000 	.word	0x58022000

08001c94 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8001c9c:	f012 f90a 	bl	8013eb4 <osKernelGetTickCount>
 8001ca0:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 8001ca2:	e006      	b.n	8001cb2 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8001ca4:	f7ff ffb0 	bl	8001c08 <BSP_SD_GetCardState>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	e009      	b.n	8001cc6 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 8001cb2:	f012 f8ff 	bl	8013eb4 <osKernelGetTickCount>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d8f0      	bhi.n	8001ca4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8001cc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
	...

08001cd0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8001cda:	4b0b      	ldr	r3, [pc, #44]	; (8001d08 <SD_CheckStatus+0x38>)
 8001cdc:	2201      	movs	r2, #1
 8001cde:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8001ce0:	f7ff ff92 	bl	8001c08 <BSP_SD_GetCardState>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d107      	bne.n	8001cfa <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8001cea:	4b07      	ldr	r3, [pc, #28]	; (8001d08 <SD_CheckStatus+0x38>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	f023 0301 	bic.w	r3, r3, #1
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	4b04      	ldr	r3, [pc, #16]	; (8001d08 <SD_CheckStatus+0x38>)
 8001cf8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8001cfa:	4b03      	ldr	r3, [pc, #12]	; (8001d08 <SD_CheckStatus+0x38>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	b2db      	uxtb	r3, r3
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	24000004 	.word	0x24000004

08001d0c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8001d16:	4b1c      	ldr	r3, [pc, #112]	; (8001d88 <SD_initialize+0x7c>)
 8001d18:	2201      	movs	r2, #1
 8001d1a:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8001d1c:	f012 f882 	bl	8013e24 <osKernelGetState>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d129      	bne.n	8001d7a <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8001d26:	f7ff ff15 	bl	8001b54 <BSP_SD_Init>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d107      	bne.n	8001d40 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8001d30:	79fb      	ldrb	r3, [r7, #7]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff ffcc 	bl	8001cd0 <SD_CheckStatus>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	4b12      	ldr	r3, [pc, #72]	; (8001d88 <SD_initialize+0x7c>)
 8001d3e:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8001d40:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <SD_initialize+0x7c>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d017      	beq.n	8001d7a <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 8001d4a:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <SD_initialize+0x80>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d107      	bne.n	8001d62 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 8001d52:	2200      	movs	r2, #0
 8001d54:	2102      	movs	r1, #2
 8001d56:	200a      	movs	r0, #10
 8001d58:	f012 fab2 	bl	80142c0 <osMessageQueueNew>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	4a0b      	ldr	r2, [pc, #44]	; (8001d8c <SD_initialize+0x80>)
 8001d60:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 8001d62:	4b0a      	ldr	r3, [pc, #40]	; (8001d8c <SD_initialize+0x80>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d107      	bne.n	8001d7a <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 8001d6a:	4b07      	ldr	r3, [pc, #28]	; (8001d88 <SD_initialize+0x7c>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	f043 0301 	orr.w	r3, r3, #1
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	4b04      	ldr	r3, [pc, #16]	; (8001d88 <SD_initialize+0x7c>)
 8001d78:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8001d7a:	4b03      	ldr	r3, [pc, #12]	; (8001d88 <SD_initialize+0x7c>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	b2db      	uxtb	r3, r3
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	24000004 	.word	0x24000004
 8001d8c:	240006c4 	.word	0x240006c4

08001d90 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff ff97 	bl	8001cd0 <SD_CheckStatus>
 8001da2:	4603      	mov	r3, r0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b088      	sub	sp, #32
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60b9      	str	r1, [r7, #8]
 8001db4:	607a      	str	r2, [r7, #4]
 8001db6:	603b      	str	r3, [r7, #0]
 8001db8:	4603      	mov	r3, r0
 8001dba:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8001dc0:	f247 5030 	movw	r0, #30000	; 0x7530
 8001dc4:	f7ff ff66 	bl	8001c94 <SD_CheckStatusWithTimeout>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	da01      	bge.n	8001dd2 <SD_read+0x26>
  {
    return res;
 8001dce:	7ffb      	ldrb	r3, [r7, #31]
 8001dd0:	e02f      	b.n	8001e32 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	6879      	ldr	r1, [r7, #4]
 8001dd6:	68b8      	ldr	r0, [r7, #8]
 8001dd8:	f7ff fee2 	bl	8001ba0 <BSP_SD_ReadBlocks_DMA>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8001de0:	7fbb      	ldrb	r3, [r7, #30]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d124      	bne.n	8001e30 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8001de6:	4b15      	ldr	r3, [pc, #84]	; (8001e3c <SD_read+0x90>)
 8001de8:	6818      	ldr	r0, [r3, #0]
 8001dea:	f107 0112 	add.w	r1, r7, #18
 8001dee:	f247 5330 	movw	r3, #30000	; 0x7530
 8001df2:	2200      	movs	r2, #0
 8001df4:	f012 fb38 	bl	8014468 <osMessageQueueGet>
 8001df8:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d117      	bne.n	8001e30 <SD_read+0x84>
 8001e00:	8a7b      	ldrh	r3, [r7, #18]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d114      	bne.n	8001e30 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 8001e06:	f012 f855 	bl	8013eb4 <osKernelGetTickCount>
 8001e0a:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8001e0c:	e007      	b.n	8001e1e <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8001e0e:	f7ff fefb 	bl	8001c08 <BSP_SD_GetCardState>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d102      	bne.n	8001e1e <SD_read+0x72>
              {
                res = RES_OK;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8001e1c:	e008      	b.n	8001e30 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8001e1e:	f012 f849 	bl	8013eb4 <osKernelGetTickCount>
 8001e22:	4602      	mov	r2, r0
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	f247 522f 	movw	r2, #29999	; 0x752f
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d9ee      	bls.n	8001e0e <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8001e30:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3720      	adds	r7, #32
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	240006c4 	.word	0x240006c4

08001e40 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b088      	sub	sp, #32
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60b9      	str	r1, [r7, #8]
 8001e48:	607a      	str	r2, [r7, #4]
 8001e4a:	603b      	str	r3, [r7, #0]
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8001e54:	f247 5030 	movw	r0, #30000	; 0x7530
 8001e58:	f7ff ff1c 	bl	8001c94 <SD_CheckStatusWithTimeout>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	da01      	bge.n	8001e66 <SD_write+0x26>
  {
    return res;
 8001e62:	7ffb      	ldrb	r3, [r7, #31]
 8001e64:	e02d      	b.n	8001ec2 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	6879      	ldr	r1, [r7, #4]
 8001e6a:	68b8      	ldr	r0, [r7, #8]
 8001e6c:	f7ff feb2 	bl	8001bd4 <BSP_SD_WriteBlocks_DMA>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d124      	bne.n	8001ec0 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8001e76:	4b15      	ldr	r3, [pc, #84]	; (8001ecc <SD_write+0x8c>)
 8001e78:	6818      	ldr	r0, [r3, #0]
 8001e7a:	f107 0112 	add.w	r1, r7, #18
 8001e7e:	f247 5330 	movw	r3, #30000	; 0x7530
 8001e82:	2200      	movs	r2, #0
 8001e84:	f012 faf0 	bl	8014468 <osMessageQueueGet>
 8001e88:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d117      	bne.n	8001ec0 <SD_write+0x80>
 8001e90:	8a7b      	ldrh	r3, [r7, #18]
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d114      	bne.n	8001ec0 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 8001e96:	f012 f80d 	bl	8013eb4 <osKernelGetTickCount>
 8001e9a:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8001e9c:	e007      	b.n	8001eae <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8001e9e:	f7ff feb3 	bl	8001c08 <BSP_SD_GetCardState>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d102      	bne.n	8001eae <SD_write+0x6e>
          {
            res = RES_OK;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	77fb      	strb	r3, [r7, #31]
            break;
 8001eac:	e008      	b.n	8001ec0 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8001eae:	f012 f801 	bl	8013eb4 <osKernelGetTickCount>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	f247 522f 	movw	r2, #29999	; 0x752f
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d9ee      	bls.n	8001e9e <SD_write+0x5e>
    }

  }
#endif

  return res;
 8001ec0:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3720      	adds	r7, #32
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	240006c4 	.word	0x240006c4

08001ed0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b08c      	sub	sp, #48	; 0x30
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	603a      	str	r2, [r7, #0]
 8001eda:	71fb      	strb	r3, [r7, #7]
 8001edc:	460b      	mov	r3, r1
 8001ede:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001ee6:	4b25      	ldr	r3, [pc, #148]	; (8001f7c <SD_ioctl+0xac>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <SD_ioctl+0x28>
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e03c      	b.n	8001f72 <SD_ioctl+0xa2>

  switch (cmd)
 8001ef8:	79bb      	ldrb	r3, [r7, #6]
 8001efa:	2b03      	cmp	r3, #3
 8001efc:	d834      	bhi.n	8001f68 <SD_ioctl+0x98>
 8001efe:	a201      	add	r2, pc, #4	; (adr r2, 8001f04 <SD_ioctl+0x34>)
 8001f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f04:	08001f15 	.word	0x08001f15
 8001f08:	08001f1d 	.word	0x08001f1d
 8001f0c:	08001f35 	.word	0x08001f35
 8001f10:	08001f4f 	.word	0x08001f4f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8001f14:	2300      	movs	r3, #0
 8001f16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8001f1a:	e028      	b.n	8001f6e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8001f1c:	f107 0308 	add.w	r3, r7, #8
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff fe81 	bl	8001c28 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8001f26:	6a3a      	ldr	r2, [r7, #32]
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8001f32:	e01c      	b.n	8001f6e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8001f34:	f107 0308 	add.w	r3, r7, #8
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff fe75 	bl	8001c28 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8001f46:	2300      	movs	r3, #0
 8001f48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8001f4c:	e00f      	b.n	8001f6e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8001f4e:	f107 0308 	add.w	r3, r7, #8
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff fe68 	bl	8001c28 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8001f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5a:	0a5a      	lsrs	r2, r3, #9
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8001f60:	2300      	movs	r3, #0
 8001f62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8001f66:	e002      	b.n	8001f6e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8001f68:	2304      	movs	r3, #4
 8001f6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8001f6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3730      	adds	r7, #48	; 0x30
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	24000004 	.word	0x24000004

08001f80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fb8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f84:	f006 fdda 	bl	8008b3c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f88:	480c      	ldr	r0, [pc, #48]	; (8001fbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f8a:	490d      	ldr	r1, [pc, #52]	; (8001fc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f8c:	4a0d      	ldr	r2, [pc, #52]	; (8001fc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f90:	e002      	b.n	8001f98 <LoopCopyDataInit>

08001f92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f96:	3304      	adds	r3, #4

08001f98 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001f98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f9c:	d3f9      	bcc.n	8001f92 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f9e:	4a0a      	ldr	r2, [pc, #40]	; (8001fc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fa0:	4c0a      	ldr	r4, [pc, #40]	; (8001fcc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fa4:	e001      	b.n	8001faa <LoopFillZerobss>

08001fa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fa8:	3204      	adds	r2, #4

08001faa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001faa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fac:	d3fb      	bcc.n	8001fa6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001fae:	f025 f84f 	bl	8027050 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fb2:	f7fe fbcf 	bl	8000754 <main>
  bx  lr
 8001fb6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fb8:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 8001fbc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001fc0:	24000114 	.word	0x24000114
  ldr r2, =_sidata
 8001fc4:	08029708 	.word	0x08029708
  ldr r2, =_sbss
 8001fc8:	24000114 	.word	0x24000114
  ldr r4, =_ebss
 8001fcc:	24007948 	.word	0x24007948

08001fd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fd0:	e7fe      	b.n	8001fd0 <ADC_IRQHandler>

08001fd2 <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	af00      	add	r7, sp, #0
}
 8001fd6:	bf00      	nop
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 8001fe4:	f001 fd4e 	bl	8003a84 <touchgfx_components_init>
  touchgfx_init();
 8001fe8:	f001 fd22 	bl	8003a30 <touchgfx_init>
}
 8001fec:	bf00      	nop
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 8001ff8:	f001 fd4c 	bl	8003a94 <touchgfx_taskEntry>
}
 8001ffc:	bf00      	nop
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
    {
 800200c:	4a04      	ldr	r2, [pc, #16]	; (8002020 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	601a      	str	r2, [r3, #0]
    }
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4618      	mov	r0, r3
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	08028770 	.word	0x08028770

08002024 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
    }
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7ff ffe9 	bl	8002004 <_ZN8touchgfx15TouchControllerD1Ev>
 8002032:	2104      	movs	r1, #4
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f024 fd2e 	bl	8026a96 <_ZdlPvj>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4618      	mov	r0, r3
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <_ZN20STM32TouchController4initEv>:
#include <stm32h7b3i_discovery_ts.h>
#include <TouchGFXHAL.hpp>
#include <cmsis_os.h>

void STM32TouchController::init()
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
    TS_Init_t hTS;

    hTS.Orientation = TS_SWAP_XY;
 800204c:	2308      	movs	r3, #8
 800204e:	613b      	str	r3, [r7, #16]
    hTS.Accuracy = 0;
 8002050:	2300      	movs	r3, #0
 8002052:	617b      	str	r3, [r7, #20]
    hTS.Width = touchgfx::HAL::FRAME_BUFFER_WIDTH;
 8002054:	4b07      	ldr	r3, [pc, #28]	; (8002074 <_ZN20STM32TouchController4initEv+0x30>)
 8002056:	881b      	ldrh	r3, [r3, #0]
 8002058:	60bb      	str	r3, [r7, #8]
    hTS.Height = touchgfx::HAL::FRAME_BUFFER_HEIGHT;
 800205a:	4b07      	ldr	r3, [pc, #28]	; (8002078 <_ZN20STM32TouchController4initEv+0x34>)
 800205c:	881b      	ldrh	r3, [r3, #0]
 800205e:	60fb      	str	r3, [r7, #12]
    BSP_TS_Init(0, &hTS);
 8002060:	f107 0308 	add.w	r3, r7, #8
 8002064:	4619      	mov	r1, r3
 8002066:	2000      	movs	r0, #0
 8002068:	f006 fb4a 	bl	8008700 <BSP_TS_Init>
}
 800206c:	bf00      	nop
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	24006d32 	.word	0x24006d32
 8002078:	24006d34 	.word	0x24006d34

0800207c <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b088      	sub	sp, #32
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
    TS_State_t TS_State = { 0 };
 8002088:	f107 0310 	add.w	r3, r7, #16
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	605a      	str	r2, [r3, #4]
 8002092:	609a      	str	r2, [r3, #8]

    /* This should never fail !! */
    if (BSP_TS_GetState(0, &TS_State) != BSP_ERROR_NONE)
 8002094:	f107 0310 	add.w	r3, r7, #16
 8002098:	4619      	mov	r1, r3
 800209a:	2000      	movs	r0, #0
 800209c:	f006 fbd6 	bl	800884c <BSP_TS_GetState>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	bf14      	ite	ne
 80020a6:	2301      	movne	r3, #1
 80020a8:	2300      	moveq	r3, #0
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d00a      	beq.n	80020c6 <_ZN20STM32TouchController11sampleTouchERlS0_+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80020b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020b4:	f383 8811 	msr	BASEPRI, r3
 80020b8:	f3bf 8f6f 	isb	sy
 80020bc:	f3bf 8f4f 	dsb	sy
 80020c0:	61fb      	str	r3, [r7, #28]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80020c2:	bf00      	nop
    {
        configASSERT(0);
 80020c4:	e7fe      	b.n	80020c4 <_ZN20STM32TouchController11sampleTouchERlS0_+0x48>
    }

    if (TS_State.TouchDetected)
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d009      	beq.n	80020e0 <_ZN20STM32TouchController11sampleTouchERlS0_+0x64>
    {
        x = TS_State.TouchX;
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	461a      	mov	r2, r3
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	601a      	str	r2, [r3, #0]
        y = TS_State.TouchY;
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	461a      	mov	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	601a      	str	r2, [r3, #0]

        return true;
 80020dc:	2301      	movs	r3, #1
 80020de:	e000      	b.n	80020e2 <_ZN20STM32TouchController11sampleTouchERlS0_+0x66>
    }

    return false;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3720      	adds	r7, #32
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
	...

080020ec <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	4a05      	ldr	r2, [pc, #20]	; (800210c <_ZN20STM32TouchControllerD1Ev+0x20>)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff ff81 	bl	8002004 <_ZN8touchgfx15TouchControllerD1Ev>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4618      	mov	r0, r3
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	08028758 	.word	0x08028758

08002110 <_ZN20STM32TouchControllerD0Ev>:
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f7ff ffe7 	bl	80020ec <_ZN20STM32TouchControllerD1Ev>
 800211e:	2104      	movs	r1, #4
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f024 fcb8 	bl	8026a96 <_ZdlPvj>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4618      	mov	r0, r3
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <_ZN8touchgfx4GPIO4initEv>:

/*
 * Perform configuration of IO pins.
 */
void GPIO::init()
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0

}
 8002134:	bf00      	nop
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
	...

08002140 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	4603      	mov	r3, r0
 8002148:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800214a:	79fb      	ldrb	r3, [r7, #7]
 800214c:	2b03      	cmp	r3, #3
 800214e:	d826      	bhi.n	800219e <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5e>
 8002150:	a201      	add	r2, pc, #4	; (adr r2, 8002158 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 8002152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002156:	bf00      	nop
 8002158:	08002169 	.word	0x08002169
 800215c:	08002177 	.word	0x08002177
 8002160:	08002185 	.word	0x08002185
 8002164:	08002193 	.word	0x08002193
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
 8002168:	2201      	movs	r2, #1
 800216a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800216e:	480e      	ldr	r0, [pc, #56]	; (80021a8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x68>)
 8002170:	f007 fd50 	bl	8009c14 <HAL_GPIO_WritePin>
#endif
        break;
 8002174:	e013      	b.n	800219e <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5e>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, GPIO_PIN_SET);
 8002176:	2201      	movs	r2, #1
 8002178:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800217c:	480b      	ldr	r0, [pc, #44]	; (80021ac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x6c>)
 800217e:	f007 fd49 	bl	8009c14 <HAL_GPIO_WritePin>
#endif
        break;
 8002182:	e00c      	b.n	800219e <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5e>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_SET);
 8002184:	2201      	movs	r2, #1
 8002186:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800218a:	4808      	ldr	r0, [pc, #32]	; (80021ac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x6c>)
 800218c:	f007 fd42 	bl	8009c14 <HAL_GPIO_WritePin>
#endif
        break;
 8002190:	e005      	b.n	800219e <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5e>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
 8002192:	2201      	movs	r2, #1
 8002194:	2101      	movs	r1, #1
 8002196:	4806      	ldr	r0, [pc, #24]	; (80021b0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x70>)
 8002198:	f007 fd3c 	bl	8009c14 <HAL_GPIO_WritePin>
#endif
        break;
 800219c:	bf00      	nop
    }
}
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	58020000 	.word	0x58020000
 80021ac:	58020400 	.word	0x58020400
 80021b0:	58022000 	.word	0x58022000

080021b4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	71fb      	strb	r3, [r7, #7]
    switch (id)
 80021be:	79fb      	ldrb	r3, [r7, #7]
 80021c0:	2b03      	cmp	r3, #3
 80021c2:	d826      	bhi.n	8002212 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5e>
 80021c4:	a201      	add	r2, pc, #4	; (adr r2, 80021cc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 80021c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ca:	bf00      	nop
 80021cc:	080021dd 	.word	0x080021dd
 80021d0:	080021eb 	.word	0x080021eb
 80021d4:	080021f9 	.word	0x080021f9
 80021d8:	08002207 	.word	0x08002207
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 80021dc:	2200      	movs	r2, #0
 80021de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021e2:	480e      	ldr	r0, [pc, #56]	; (800221c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x68>)
 80021e4:	f007 fd16 	bl	8009c14 <HAL_GPIO_WritePin>
#endif
        break;
 80021e8:	e013      	b.n	8002212 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5e>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, GPIO_PIN_RESET);
 80021ea:	2200      	movs	r2, #0
 80021ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021f0:	480b      	ldr	r0, [pc, #44]	; (8002220 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x6c>)
 80021f2:	f007 fd0f 	bl	8009c14 <HAL_GPIO_WritePin>
#endif
        break;
 80021f6:	e00c      	b.n	8002212 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5e>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_RESET);
 80021f8:	2200      	movs	r2, #0
 80021fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021fe:	4808      	ldr	r0, [pc, #32]	; (8002220 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x6c>)
 8002200:	f007 fd08 	bl	8009c14 <HAL_GPIO_WritePin>
#endif
        break;
 8002204:	e005      	b.n	8002212 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5e>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8002206:	2200      	movs	r2, #0
 8002208:	2101      	movs	r1, #1
 800220a:	4806      	ldr	r0, [pc, #24]	; (8002224 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x70>)
 800220c:	f007 fd02 	bl	8009c14 <HAL_GPIO_WritePin>
#endif
        break;
 8002210:	bf00      	nop
    }
}
 8002212:	bf00      	nop
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	58020000 	.word	0x58020000
 8002220:	58020400 	.word	0x58020400
 8002224:	58022000 	.word	0x58022000

08002228 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8002232:	79fb      	ldrb	r3, [r7, #7]
 8002234:	2b03      	cmp	r3, #3
 8002236:	d822      	bhi.n	800227e <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x56>
 8002238:	a201      	add	r2, pc, #4	; (adr r2, 8002240 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 800223a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800223e:	bf00      	nop
 8002240:	08002251 	.word	0x08002251
 8002244:	0800225d 	.word	0x0800225d
 8002248:	08002269 	.word	0x08002269
 800224c:	08002275 	.word	0x08002275
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8002250:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002254:	480c      	ldr	r0, [pc, #48]	; (8002288 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x60>)
 8002256:	f007 fcf6 	bl	8009c46 <HAL_GPIO_TogglePin>
#endif
        break;
 800225a:	e010      	b.n	800227e <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x56>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 800225c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002260:	480a      	ldr	r0, [pc, #40]	; (800228c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x64>)
 8002262:	f007 fcf0 	bl	8009c46 <HAL_GPIO_TogglePin>
#endif
        break;
 8002266:	e00a      	b.n	800227e <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x56>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8002268:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800226c:	4807      	ldr	r0, [pc, #28]	; (800228c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x64>)
 800226e:	f007 fcea 	bl	8009c46 <HAL_GPIO_TogglePin>
#endif
        break;
 8002272:	e004      	b.n	800227e <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x56>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8002274:	2101      	movs	r1, #1
 8002276:	4806      	ldr	r0, [pc, #24]	; (8002290 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x68>)
 8002278:	f007 fce5 	bl	8009c46 <HAL_GPIO_TogglePin>
#endif
        break;
 800227c:	bf00      	nop
    }
}
 800227e:	bf00      	nop
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	58020000 	.word	0x58020000
 800228c:	58020400 	.word	0x58020400
 8002290:	58022000 	.word	0x58022000

08002294 <_ZN8touchgfx3HALD1Ev>:
        DISPLAY_ROTATION = rotate0;
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
    }

    /** Finalizes an instance of the HAL class. */
    virtual ~HAL()
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
    {
 800229c:	4a04      	ldr	r2, [pc, #16]	; (80022b0 <_ZN8touchgfx3HALD1Ev+0x1c>)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	601a      	str	r2, [r3, #0]
    }
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4618      	mov	r0, r3
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	08029004 	.word	0x08029004

080022b4 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
    }
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f7ff ffe9 	bl	8002294 <_ZN8touchgfx3HALD1Ev>
 80022c2:	217c      	movs	r1, #124	; 0x7c
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f024 fbe6 	bl	8026a96 <_ZdlPvj>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4618      	mov	r0, r3
 80022ce:	3708      	adds	r7, #8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @param  orientation The desired display orientation.
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	70fb      	strb	r3, [r7, #3]
    {
        requestedOrientation = orientation;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	78fa      	ldrb	r2, [r7, #3]
 80022e4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        displayOrientationChangeRequested = true;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
    }
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
     * @param   width   The width of the framebuffer.
     * @param   height  The height of the framebuffer.
     *
     * @see touchgfx_generic_init
     */
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	460b      	mov	r3, r1
 8002306:	807b      	strh	r3, [r7, #2]
 8002308:	4613      	mov	r3, r2
 800230a:	803b      	strh	r3, [r7, #0]
    {
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 800230c:	4b0c      	ldr	r3, [pc, #48]	; (8002340 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 800230e:	881b      	ldrh	r3, [r3, #0]
 8002310:	887a      	ldrh	r2, [r7, #2]
 8002312:	429a      	cmp	r2, r3
 8002314:	d304      	bcc.n	8002320 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 8002316:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 8002318:	881b      	ldrh	r3, [r3, #0]
 800231a:	883a      	ldrh	r2, [r7, #0]
 800231c:	429a      	cmp	r2, r3
 800231e:	d205      	bcs.n	800232c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 8002320:	4b09      	ldr	r3, [pc, #36]	; (8002348 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 8002322:	4a0a      	ldr	r2, [pc, #40]	; (800234c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 8002324:	219e      	movs	r1, #158	; 0x9e
 8002326:	480a      	ldr	r0, [pc, #40]	; (8002350 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 8002328:	f024 fbe4 	bl	8026af4 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 800232c:	4a09      	ldr	r2, [pc, #36]	; (8002354 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 800232e:	887b      	ldrh	r3, [r7, #2]
 8002330:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 8002332:	4a09      	ldr	r2, [pc, #36]	; (8002358 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 8002334:	883b      	ldrh	r3, [r7, #0]
 8002336:	8013      	strh	r3, [r2, #0]
    }
 8002338:	bf00      	nop
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	24006d2c 	.word	0x24006d2c
 8002344:	24006d2e 	.word	0x24006d2e
 8002348:	08027c3c 	.word	0x08027c3c
 800234c:	08027ca0 	.word	0x08027ca0
 8002350:	08027ce4 	.word	0x08027ce4
 8002354:	24006d32 	.word	0x24006d32
 8002358:	24006d34 	.word	0x24006d34

0800235c <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800236a:	2b00      	cmp	r3, #0
 800236c:	d009      	beq.n	8002382 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4610      	mov	r0, r2
 800237c:	4798      	blx	r3
 800237e:	4603      	mov	r3, r0
 8002380:	e000      	b.n	8002384 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 8002382:	2300      	movs	r3, #0
    }
 8002384:	4618      	mov	r0, r3
 8002386:	3708      	adds	r7, #8
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f016 f9b9 	bl	801870c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	33ac      	adds	r3, #172	; 0xac
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	4798      	blx	r3
    }
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 80023ae:	b480      	push	{r7}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
 80023b6:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 80023b8:	2300      	movs	r3, #0
    }
 80023ba:	4618      	mov	r0, r3
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
	...

080023c8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
 80023d4:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d106      	bne.n	80023ea <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 80023dc:	4b0f      	ldr	r3, [pc, #60]	; (800241c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 80023de:	4a10      	ldr	r2, [pc, #64]	; (8002420 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 80023e0:	f240 21d2 	movw	r1, #722	; 0x2d2
 80023e4:	480f      	ldr	r0, [pc, #60]	; (8002424 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 80023e6:	f024 fb85 	bl	8026af4 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	68ba      	ldr	r2, [r7, #8]
 80023ee:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	bf14      	ite	ne
 80023fc:	2301      	movne	r3, #1
 80023fe:	2300      	moveq	r3, #0
 8002400:	b2da      	uxtb	r2, r3
 8002402:	4b09      	ldr	r3, [pc, #36]	; (8002428 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8002404:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	338c      	adds	r3, #140	; 0x8c
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6839      	ldr	r1, [r7, #0]
 8002410:	68f8      	ldr	r0, [r7, #12]
 8002412:	4798      	blx	r3
    }
 8002414:	bf00      	nop
 8002416:	3710      	adds	r7, #16
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	08027d2c 	.word	0x08027d2c
 8002420:	08027d64 	.word	0x08027d64
 8002424:	08027ce4 	.word	0x08027ce4
 8002428:	24006d36 	.word	0x24006d36

0800242c <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	645a      	str	r2, [r3, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	bf14      	ite	ne
 8002442:	2301      	movne	r3, #1
 8002444:	2300      	moveq	r3, #0
 8002446:	b2da      	uxtb	r2, r3
 8002448:	4b03      	ldr	r3, [pc, #12]	; (8002458 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 800244a:	701a      	strb	r2, [r3, #0]
    }
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	24006d37 	.word	0x24006d37

0800245c <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8002464:	2300      	movs	r3, #0
    }
 8002466:	4618      	mov	r0, r3
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8002472:	b580      	push	{r7, lr}
 8002474:	b082      	sub	sp, #8
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
 800247a:	460b      	mov	r3, r1
 800247c:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002482:	2b00      	cmp	r3, #0
 8002484:	d004      	beq.n	8002490 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800248a:	887a      	ldrh	r2, [r7, #2]
 800248c:	4610      	mov	r0, r2
 800248e:	4798      	blx	r3
        }
    }
 8002490:	bf00      	nop
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 80024a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 80024a4:	4618      	mov	r0, r3
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	3318      	adds	r3, #24
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4610      	mov	r0, r2
 80024c8:	4798      	blx	r3
 80024ca:	4603      	mov	r3, r0
    }
 80024cc:	4618      	mov	r0, r3
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d011      	beq.n	8002510 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 80024ec:	4b14      	ldr	r3, [pc, #80]	; (8002540 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d11e      	bne.n	8002532 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 80024f4:	4b13      	ldr	r3, [pc, #76]	; (8002544 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80024f6:	881b      	ldrh	r3, [r3, #0]
 80024f8:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80024fa:	4b13      	ldr	r3, [pc, #76]	; (8002548 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80024fc:	881a      	ldrh	r2, [r3, #0]
 80024fe:	4b11      	ldr	r3, [pc, #68]	; (8002544 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8002500:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 8002502:	4a11      	ldr	r2, [pc, #68]	; (8002548 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8002504:	89bb      	ldrh	r3, [r7, #12]
 8002506:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8002508:	4b0d      	ldr	r3, [pc, #52]	; (8002540 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800250a:	2201      	movs	r2, #1
 800250c:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 800250e:	e010      	b.n	8002532 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 8002510:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00c      	beq.n	8002532 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 8002518:	4b0a      	ldr	r3, [pc, #40]	; (8002544 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800251a:	881b      	ldrh	r3, [r3, #0]
 800251c:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800251e:	4b0a      	ldr	r3, [pc, #40]	; (8002548 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8002520:	881a      	ldrh	r2, [r3, #0]
 8002522:	4b08      	ldr	r3, [pc, #32]	; (8002544 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8002524:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 8002526:	4a08      	ldr	r2, [pc, #32]	; (8002548 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8002528:	89fb      	ldrh	r3, [r7, #14]
 800252a:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 800252c:	4b04      	ldr	r3, [pc, #16]	; (8002540 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800252e:	2200      	movs	r2, #0
 8002530:	701a      	strb	r2, [r3, #0]
    }
 8002532:	bf00      	nop
 8002534:	3714      	adds	r7, #20
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	24006d30 	.word	0x24006d30
 8002544:	24006d2e 	.word	0x24006d2e
 8002548:	24006d2c 	.word	0x24006d2c

0800254c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4618      	mov	r0, r3
 8002558:	f015 fb36 	bl	8017bc8 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 800255c:	bf00      	nop
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	4a05      	ldr	r2, [pc, #20]	; (8002584 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff fe8d 	bl	8002294 <_ZN8touchgfx3HALD1Ev>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4618      	mov	r0, r3
 800257e:	3708      	adds	r7, #8
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	08028b10 	.word	0x08028b10

08002588 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f7ff ffe7 	bl	8002564 <_ZN20TouchGFXGeneratedHALD1Ev>
 8002596:	217c      	movs	r1, #124	; 0x7c
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f024 fa7c 	bl	8026a96 <_ZdlPvj>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4618      	mov	r0, r3
 80025a2:	3708      	adds	r7, #8
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff ffca 	bl	800254c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 80025b8:	bf00      	nop
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32h7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f001 fd4e 	bl	800406c <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 80025d0:	bf00      	nop
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
    enableLCDControllerInterrupt();
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	3380      	adds	r3, #128	; 0x80
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	4798      	blx	r3
    enableInterrupts();
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	3378      	adds	r3, #120	; 0x78
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	4798      	blx	r3

    OSWrappers::waitForVSync();
 80025f8:	f000 f954 	bl	80028a4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	3370      	adds	r3, #112	; 0x70
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4610      	mov	r0, r2
 8002608:	4798      	blx	r3

    // Turning on display after first frame is rendered
    HAL_GPIO_WritePin(GPIOK, GPIO_PIN_7, GPIO_PIN_RESET);
 800260a:	2200      	movs	r2, #0
 800260c:	2180      	movs	r1, #128	; 0x80
 800260e:	480b      	ldr	r0, [pc, #44]	; (800263c <_ZN11TouchGFXHAL9taskEntryEv+0x64>)
 8002610:	f007 fb00 	bl	8009c14 <HAL_GPIO_WritePin>
    /* Assert display enable LCD_DISP_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8002614:	2201      	movs	r2, #1
 8002616:	2104      	movs	r1, #4
 8002618:	4809      	ldr	r0, [pc, #36]	; (8002640 <_ZN11TouchGFXHAL9taskEntryEv+0x68>)
 800261a:	f007 fafb 	bl	8009c14 <HAL_GPIO_WritePin>
    /* Assert back light LCD_BL_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800261e:	2201      	movs	r2, #1
 8002620:	2102      	movs	r1, #2
 8002622:	4807      	ldr	r0, [pc, #28]	; (8002640 <_ZN11TouchGFXHAL9taskEntryEv+0x68>)
 8002624:	f007 faf6 	bl	8009c14 <HAL_GPIO_WritePin>

    for (;;)
    {
        OSWrappers::waitForVSync();
 8002628:	f000 f93c 	bl	80028a4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	3370      	adds	r3, #112	; 0x70
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4610      	mov	r0, r2
 8002638:	4798      	blx	r3
        OSWrappers::waitForVSync();
 800263a:	e7f5      	b.n	8002628 <_ZN11TouchGFXHAL9taskEntryEv+0x50>
 800263c:	58022800 	.word	0x58022800
 8002640:	58020000 	.word	0x58020000

08002644 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4618      	mov	r0, r3
 8002650:	f001 fda4 	bl	800419c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8002654:	4603      	mov	r3, r0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b082      	sub	sp, #8
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
 8002666:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6839      	ldr	r1, [r7, #0]
 800266c:	4618      	mov	r0, r3
 800266e:	f001 fda3 	bl	80041b8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8002672:	bf00      	nop
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
	...

0800267c <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6839      	ldr	r1, [r7, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f001 fdaa 	bl	80041e4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002690:	4b1f      	ldr	r3, [pc, #124]	; (8002710 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x94>)
 8002692:	2200      	movs	r2, #0
 8002694:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002698:	f3bf 8f4f 	dsb	sy
}
 800269c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800269e:	4b1c      	ldr	r3, [pc, #112]	; (8002710 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x94>)
 80026a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026a4:	617b      	str	r3, [r7, #20]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	0b5b      	lsrs	r3, r3, #13
 80026aa:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80026ae:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	08db      	lsrs	r3, r3, #3
 80026b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026b8:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	015a      	lsls	r2, r3, #5
 80026be:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80026c2:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80026c8:	4911      	ldr	r1, [pc, #68]	; (8002710 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x94>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	1e5a      	subs	r2, r3, #1
 80026d4:	60fa      	str	r2, [r7, #12]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	bf14      	ite	ne
 80026da:	2301      	movne	r3, #1
 80026dc:	2300      	moveq	r3, #0
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1ea      	bne.n	80026ba <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x3e>
    } while(sets-- != 0U);
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1e5a      	subs	r2, r3, #1
 80026e8:	613a      	str	r2, [r7, #16]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	bf14      	ite	ne
 80026ee:	2301      	movne	r3, #1
 80026f0:	2300      	moveq	r3, #0
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1db      	bne.n	80026b0 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 80026f8:	f3bf 8f4f 	dsb	sy
}
 80026fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80026fe:	f3bf 8f6f 	isb	sy
}
 8002702:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8002704:	bf00      	nop
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 8002706:	bf00      	nop
 8002708:	3718      	adds	r7, #24
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	e000ed00 	.word	0xe000ed00

08002714 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4618      	mov	r0, r3
 8002720:	f001 fcc8 	bl	80040b4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8002724:	bf00      	nop
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4618      	mov	r0, r3
 8002738:	f001 fccc 	bl	80040d4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 800273c:	bf00      	nop
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4618      	mov	r0, r3
 8002750:	f001 fcce 	bl	80040f0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8002754:	bf00      	nop
 8002756:	3708      	adds	r7, #8
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4618      	mov	r0, r3
 8002768:	f001 fcd0 	bl	800410c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 800276c:	bf00      	nop
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	4a05      	ldr	r2, [pc, #20]	; (8002794 <_ZN11TouchGFXHALD1Ev+0x20>)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff feed 	bl	8002564 <_ZN20TouchGFXGeneratedHALD1Ev>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4618      	mov	r0, r3
 800278e:	3708      	adds	r7, #8
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	08028788 	.word	0x08028788

08002798 <_ZN11TouchGFXHALD0Ev>:
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f7ff ffe7 	bl	8002774 <_ZN11TouchGFXHALD1Ev>
 80027a6:	217c      	movs	r1, #124	; 0x7c
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f024 f974 	bl	8026a96 <_ZdlPvj>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4618      	mov	r0, r3
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 80027bc:	2200      	movs	r2, #0
 80027be:	2101      	movs	r1, #1
 80027c0:	2001      	movs	r0, #1
 80027c2:	f011 fc39 	bl	8014038 <osSemaphoreNew>
 80027c6:	4603      	mov	r3, r0
 80027c8:	4a0f      	ldr	r2, [pc, #60]	; (8002808 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80027ca:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 80027cc:	4b0e      	ldr	r3, [pc, #56]	; (8002808 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d105      	bne.n	80027e0 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 80027d4:	4b0d      	ldr	r3, [pc, #52]	; (800280c <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 80027d6:	4a0e      	ldr	r2, [pc, #56]	; (8002810 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 80027d8:	2128      	movs	r1, #40	; 0x28
 80027da:	480e      	ldr	r0, [pc, #56]	; (8002814 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 80027dc:	f024 f98a 	bl	8026af4 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 80027e0:	2200      	movs	r2, #0
 80027e2:	2104      	movs	r1, #4
 80027e4:	2001      	movs	r0, #1
 80027e6:	f011 fd6b 	bl	80142c0 <osMessageQueueNew>
 80027ea:	4603      	mov	r3, r0
 80027ec:	4a0a      	ldr	r2, [pc, #40]	; (8002818 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 80027ee:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 80027f0:	4b09      	ldr	r3, [pc, #36]	; (8002818 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d105      	bne.n	8002804 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 80027f8:	4b08      	ldr	r3, [pc, #32]	; (800281c <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 80027fa:	4a05      	ldr	r2, [pc, #20]	; (8002810 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 80027fc:	212c      	movs	r1, #44	; 0x2c
 80027fe:	4805      	ldr	r0, [pc, #20]	; (8002814 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8002800:	f024 f978 	bl	8026af4 <__assert_func>
}
 8002804:	bf00      	nop
 8002806:	bd80      	pop	{r7, pc}
 8002808:	240006c8 	.word	0x240006c8
 800280c:	08027db4 	.word	0x08027db4
 8002810:	08027e00 	.word	0x08027e00
 8002814:	08027e30 	.word	0x08027e30
 8002818:	240006cc 	.word	0x240006cc
 800281c:	08027ec4 	.word	0x08027ec4

08002820 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8002824:	4b04      	ldr	r3, [pc, #16]	; (8002838 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f04f 31ff 	mov.w	r1, #4294967295
 800282c:	4618      	mov	r0, r3
 800282e:	f011 fc8d 	bl	801414c <osSemaphoreAcquire>
}
 8002832:	bf00      	nop
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	240006c8 	.word	0x240006c8

0800283c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8002840:	4b03      	ldr	r3, [pc, #12]	; (8002850 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4618      	mov	r0, r3
 8002846:	f011 fcd3 	bl	80141f0 <osSemaphoreRelease>
}
 800284a:	bf00      	nop
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	240006c8 	.word	0x240006c8

08002854 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8002858:	4b03      	ldr	r3, [pc, #12]	; (8002868 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2100      	movs	r1, #0
 800285e:	4618      	mov	r0, r3
 8002860:	f011 fc74 	bl	801414c <osSemaphoreAcquire>
}
 8002864:	bf00      	nop
 8002866:	bd80      	pop	{r7, pc}
 8002868:	240006c8 	.word	0x240006c8

0800286c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8002870:	4b03      	ldr	r3, [pc, #12]	; (8002880 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4618      	mov	r0, r3
 8002876:	f011 fcbb 	bl	80141f0 <osSemaphoreRelease>
}
 800287a:	bf00      	nop
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	240006c8 	.word	0x240006c8

08002884 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8002888:	4b04      	ldr	r3, [pc, #16]	; (800289c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 800288a:	6818      	ldr	r0, [r3, #0]
 800288c:	2300      	movs	r3, #0
 800288e:	2200      	movs	r2, #0
 8002890:	4903      	ldr	r1, [pc, #12]	; (80028a0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 8002892:	f011 fd89 	bl	80143a8 <osMessageQueuePut>
}
 8002896:	bf00      	nop
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	240006cc 	.word	0x240006cc
 80028a0:	24000008 	.word	0x24000008

080028a4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 80028aa:	4b09      	ldr	r3, [pc, #36]	; (80028d0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 80028ac:	6818      	ldr	r0, [r3, #0]
 80028ae:	1d39      	adds	r1, r7, #4
 80028b0:	2300      	movs	r3, #0
 80028b2:	2200      	movs	r2, #0
 80028b4:	f011 fdd8 	bl	8014468 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 80028b8:	4b05      	ldr	r3, [pc, #20]	; (80028d0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 80028ba:	6818      	ldr	r0, [r3, #0]
 80028bc:	1d39      	adds	r1, r7, #4
 80028be:	f04f 33ff 	mov.w	r3, #4294967295
 80028c2:	2200      	movs	r2, #0
 80028c4:	f011 fdd0 	bl	8014468 <osMessageQueueGet>
}
 80028c8:	bf00      	nop
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	240006cc 	.word	0x240006cc

080028d4 <__NVIC_EnableIRQ>:
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80028de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	db0b      	blt.n	80028fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028e6:	88fb      	ldrh	r3, [r7, #6]
 80028e8:	f003 021f 	and.w	r2, r3, #31
 80028ec:	4907      	ldr	r1, [pc, #28]	; (800290c <__NVIC_EnableIRQ+0x38>)
 80028ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028f2:	095b      	lsrs	r3, r3, #5
 80028f4:	2001      	movs	r0, #1
 80028f6:	fa00 f202 	lsl.w	r2, r0, r2
 80028fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	e000e100 	.word	0xe000e100

08002910 <__NVIC_DisableIRQ>:
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800291a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800291e:	2b00      	cmp	r3, #0
 8002920:	db12      	blt.n	8002948 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002922:	88fb      	ldrh	r3, [r7, #6]
 8002924:	f003 021f 	and.w	r2, r3, #31
 8002928:	490a      	ldr	r1, [pc, #40]	; (8002954 <__NVIC_DisableIRQ+0x44>)
 800292a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800292e:	095b      	lsrs	r3, r3, #5
 8002930:	2001      	movs	r0, #1
 8002932:	fa00 f202 	lsl.w	r2, r0, r2
 8002936:	3320      	adds	r3, #32
 8002938:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800293c:	f3bf 8f4f 	dsb	sy
}
 8002940:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002942:	f3bf 8f6f 	isb	sy
}
 8002946:	bf00      	nop
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	e000e100 	.word	0xe000e100

08002958 <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
        : color(0)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]
    {
    }
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4618      	mov	r0, r3
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <_ZNK8touchgfx9colortypecvmEv>:
    /**
     * Cast that converts the given colortype to an uint32_t.
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
    {
        return color;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
    }
 8002980:	4618      	mov	r0, r3
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
    {
 8002994:	4a04      	ldr	r2, [pc, #16]	; (80029a8 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	601a      	str	r2, [r3, #0]
    }
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4618      	mov	r0, r3
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	080288b0 	.word	0x080288b0

080029ac <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
    }
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f7ff ffe9 	bl	800298c <_ZN8touchgfx9DMA_QueueD1Ev>
 80029ba:	2104      	movs	r1, #4
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f024 f86a 	bl	8026a96 <_ZdlPvj>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4618      	mov	r0, r3
 80029c6:	3708      	adds	r7, #8
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	3344      	adds	r3, #68	; 0x44
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	4798      	blx	r3
    }
 80029e0:	bf00      	nop
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
    {
 80029f0:	4a04      	ldr	r2, [pc, #16]	; (8002a04 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	601a      	str	r2, [r3, #0]
    }
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4618      	mov	r0, r3
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	080290dc 	.word	0x080290dc

08002a08 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
    }
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f7ff ffe9 	bl	80029e8 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8002a16:	210c      	movs	r1, #12
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f024 f83c 	bl	8026a96 <_ZdlPvj>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4618      	mov	r0, r3
 8002a22:	3708      	adds	r7, #8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8002a32:	4a09      	ldr	r2, [pc, #36]	; (8002a58 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	605a      	str	r2, [r3, #4]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	721a      	strb	r2, [r3, #8]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	725a      	strb	r2, [r3, #9]
    {
    }
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr
 8002a58:	080290dc 	.word	0x080290dc

08002a5c <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8002a64:	2301      	movs	r3, #1
    }
 8002a66:	4618      	mov	r0, r3
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b082      	sub	sp, #8
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	3328      	adds	r3, #40	; 0x28
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4610      	mov	r0, r2
 8002a86:	4798      	blx	r3
    }
 8002a88:	bf00      	nop
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <_ZN8touchgfx3HAL11getInstanceEv>:
    static HAL* getInstance()
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
        return instance;
 8002a94:	4b03      	ldr	r3, [pc, #12]	; (8002aa4 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 8002a96:	681b      	ldr	r3, [r3, #0]
    }
 8002a98:	4618      	mov	r0, r3
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	24006d38 	.word	0x24006d38

08002aa8 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685a      	ldr	r2, [r3, #4]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	3314      	adds	r3, #20
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4610      	mov	r0, r2
 8002ac0:	4798      	blx	r3
    }
 8002ac2:	bf00      	nop
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b082      	sub	sp, #8
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 8002ad2:	f7ff ffdd 	bl	8002a90 <_ZN8touchgfx3HAL11getInstanceEv>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff ffe5 	bl	8002aa8 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 8002ade:	bf00      	nop
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b082      	sub	sp, #8
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	330c      	adds	r3, #12
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff ff30 	bl	8002958 <_ZN8touchgfx9colortypeC1Ev>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4618      	mov	r0, r3
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
	...

08002b04 <_ZN8STM32DMAC1Ev>:
}

STM32DMA::STM32DMA()
 8002b04:	b5b0      	push	{r4, r5, r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	330c      	adds	r3, #12
 8002b12:	4619      	mov	r1, r3
 8002b14:	4610      	mov	r0, r2
 8002b16:	f7ff ff87 	bl	8002a28 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8002b1a:	4a0e      	ldr	r2, [pc, #56]	; (8002b54 <_ZN8STM32DMAC1Ev+0x50>)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f103 000c 	add.w	r0, r3, #12
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	3320      	adds	r3, #32
 8002b2a:	2260      	movs	r2, #96	; 0x60
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	f015 ff27 	bl	8018980 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	3320      	adds	r3, #32
 8002b36:	245f      	movs	r4, #95	; 0x5f
 8002b38:	461d      	mov	r5, r3
 8002b3a:	e004      	b.n	8002b46 <_ZN8STM32DMAC1Ev+0x42>
 8002b3c:	4628      	mov	r0, r5
 8002b3e:	f7ff ffd2 	bl	8002ae6 <_ZN8touchgfx6BlitOpC1Ev>
 8002b42:	3524      	adds	r5, #36	; 0x24
 8002b44:	3c01      	subs	r4, #1
 8002b46:	2c00      	cmp	r4, #0
 8002b48:	daf8      	bge.n	8002b3c <_ZN8STM32DMAC1Ev+0x38>
{
}
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3708      	adds	r7, #8
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bdb0      	pop	{r4, r5, r7, pc}
 8002b54:	08028860 	.word	0x08028860

08002b58 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	4a09      	ldr	r2, [pc, #36]	; (8002b88 <_ZN8STM32DMAD1Ev+0x30>)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 8002b66:	205a      	movs	r0, #90	; 0x5a
 8002b68:	f7ff fed2 	bl	8002910 <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	330c      	adds	r3, #12
 8002b70:	4618      	mov	r0, r3
 8002b72:	f000 fab3 	bl	80030dc <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff ff35 	bl	80029e8 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4618      	mov	r0, r3
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	08028860 	.word	0x08028860

08002b8c <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
}
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f7ff ffdf 	bl	8002b58 <_ZN8STM32DMAD1Ev>
 8002b9a:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f023 ff79 	bl	8026a96 <_ZdlPvj>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
	...

08002bb0 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002bb8:	4b12      	ldr	r3, [pc, #72]	; (8002c04 <_ZN8STM32DMA10initializeEv+0x54>)
 8002bba:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002bbe:	4a11      	ldr	r2, [pc, #68]	; (8002c04 <_ZN8STM32DMA10initializeEv+0x54>)
 8002bc0:	f043 0310 	orr.w	r3, r3, #16
 8002bc4:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8002bc8:	4b0e      	ldr	r3, [pc, #56]	; (8002c04 <_ZN8STM32DMA10initializeEv+0x54>)
 8002bca:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002bce:	f003 0310 	and.w	r3, r3, #16
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8002bd6:	4b0b      	ldr	r3, [pc, #44]	; (8002c04 <_ZN8STM32DMA10initializeEv+0x54>)
 8002bd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bda:	4a0a      	ldr	r2, [pc, #40]	; (8002c04 <_ZN8STM32DMA10initializeEv+0x54>)
 8002bdc:	f043 0310 	orr.w	r3, r3, #16
 8002be0:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8002be2:	4b08      	ldr	r3, [pc, #32]	; (8002c04 <_ZN8STM32DMA10initializeEv+0x54>)
 8002be4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002be6:	4a07      	ldr	r2, [pc, #28]	; (8002c04 <_ZN8STM32DMA10initializeEv+0x54>)
 8002be8:	f023 0310 	bic.w	r3, r3, #16
 8002bec:	67d3      	str	r3, [r2, #124]	; 0x7c

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8002bee:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <_ZN8STM32DMA10initializeEv+0x58>)
 8002bf0:	4a06      	ldr	r2, [pc, #24]	; (8002c0c <_ZN8STM32DMA10initializeEv+0x5c>)
 8002bf2:	621a      	str	r2, [r3, #32]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 8002bf4:	205a      	movs	r0, #90	; 0x5a
 8002bf6:	f7ff fe6d 	bl	80028d4 <__NVIC_EnableIRQ>
}
 8002bfa:	bf00      	nop
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	58024400 	.word	0x58024400
 8002c08:	2400038c 	.word	0x2400038c
 8002c0c:	08002acb 	.word	0x08002acb

08002c10 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	460b      	mov	r3, r1
 8002c1a:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	60fb      	str	r3, [r7, #12]

    switch (format)
 8002c20:	78fb      	ldrb	r3, [r7, #3]
 8002c22:	2b0b      	cmp	r3, #11
 8002c24:	d826      	bhi.n	8002c74 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 8002c26:	a201      	add	r2, pc, #4	; (adr r2, 8002c2c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8002c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c2c:	08002c69 	.word	0x08002c69
 8002c30:	08002c63 	.word	0x08002c63
 8002c34:	08002c5d 	.word	0x08002c5d
 8002c38:	08002c75 	.word	0x08002c75
 8002c3c:	08002c75 	.word	0x08002c75
 8002c40:	08002c75 	.word	0x08002c75
 8002c44:	08002c75 	.word	0x08002c75
 8002c48:	08002c6f 	.word	0x08002c6f
 8002c4c:	08002c6f 	.word	0x08002c6f
 8002c50:	08002c6f 	.word	0x08002c6f
 8002c54:	08002c6f 	.word	0x08002c6f
 8002c58:	08002c6f 	.word	0x08002c6f
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	60fb      	str	r3, [r7, #12]
        break;
 8002c60:	e00e      	b.n	8002c80 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8002c62:	2301      	movs	r3, #1
 8002c64:	60fb      	str	r3, [r7, #12]
        break;
 8002c66:	e00b      	b.n	8002c80 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8002c68:	2302      	movs	r3, #2
 8002c6a:	60fb      	str	r3, [r7, #12]
        break;
 8002c6c:	e008      	b.n	8002c80 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 8002c6e:	2305      	movs	r3, #5
 8002c70:	60fb      	str	r3, [r7, #12]
        break;
 8002c72:	e005      	b.n	8002c80 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 8002c74:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 8002c76:	4a06      	ldr	r2, [pc, #24]	; (8002c90 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 8002c78:	2165      	movs	r1, #101	; 0x65
 8002c7a:	4806      	ldr	r0, [pc, #24]	; (8002c94 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 8002c7c:	f023 ff3a 	bl	8026af4 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8002c80:	68fb      	ldr	r3, [r7, #12]
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	08027f08 	.word	0x08027f08
 8002c90:	08027f24 	.word	0x08027f24
 8002c94:	08027f70 	.word	0x08027f70

08002c98 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	60fb      	str	r3, [r7, #12]

    switch (format)
 8002ca8:	78fb      	ldrb	r3, [r7, #3]
 8002caa:	2b0a      	cmp	r3, #10
 8002cac:	d821      	bhi.n	8002cf2 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 8002cae:	a201      	add	r2, pc, #4	; (adr r2, 8002cb4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8002cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb4:	08002ced 	.word	0x08002ced
 8002cb8:	08002ce7 	.word	0x08002ce7
 8002cbc:	08002ce1 	.word	0x08002ce1
 8002cc0:	08002cf3 	.word	0x08002cf3
 8002cc4:	08002cf3 	.word	0x08002cf3
 8002cc8:	08002cf3 	.word	0x08002cf3
 8002ccc:	08002cf3 	.word	0x08002cf3
 8002cd0:	08002ce7 	.word	0x08002ce7
 8002cd4:	08002ce7 	.word	0x08002ce7
 8002cd8:	08002ce7 	.word	0x08002ce7
 8002cdc:	08002ce7 	.word	0x08002ce7
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	60fb      	str	r3, [r7, #12]
        break;
 8002ce4:	e00b      	b.n	8002cfe <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	60fb      	str	r3, [r7, #12]
        break;
 8002cea:	e008      	b.n	8002cfe <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8002cec:	2302      	movs	r3, #2
 8002cee:	60fb      	str	r3, [r7, #12]
        break;
 8002cf0:	e005      	b.n	8002cfe <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8002cf2:	4b05      	ldr	r3, [pc, #20]	; (8002d08 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8002cf4:	4a05      	ldr	r2, [pc, #20]	; (8002d0c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 8002cf6:	2186      	movs	r1, #134	; 0x86
 8002cf8:	4805      	ldr	r0, [pc, #20]	; (8002d10 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 8002cfa:	f023 fefb 	bl	8026af4 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	08027f08 	.word	0x08027f08
 8002d0c:	08028004 	.word	0x08028004
 8002d10:	08027f70 	.word	0x08027f70

08002d14 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8002d1c:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8002d2c:	b590      	push	{r4, r7, lr}
 8002d2e:	b089      	sub	sp, #36	; 0x24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	7f5b      	ldrb	r3, [r3, #29]
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f7ff ff67 	bl	8002c10 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8002d42:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	7f9b      	ldrb	r3, [r3, #30]
 8002d48:	4619      	mov	r1, r3
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f7ff ff60 	bl	8002c10 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8002d50:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	7f9b      	ldrb	r3, [r3, #30]
 8002d56:	4619      	mov	r1, r3
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f7ff ff9d 	bl	8002c98 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8002d5e:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	8b5b      	ldrh	r3, [r3, #26]
 8002d64:	461a      	mov	r2, r3
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	8a9b      	ldrh	r3, [r3, #20]
 8002d6a:	1ad2      	subs	r2, r2, r3
 8002d6c:	4b92      	ldr	r3, [pc, #584]	; (8002fb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002d6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	8b5b      	ldrh	r3, [r3, #26]
 8002d74:	461a      	mov	r2, r3
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	8a9b      	ldrh	r3, [r3, #20]
 8002d7a:	1ad2      	subs	r2, r2, r3
 8002d7c:	4b8e      	ldr	r3, [pc, #568]	; (8002fb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002d7e:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	8b1b      	ldrh	r3, [r3, #24]
 8002d84:	461a      	mov	r2, r3
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	8a9b      	ldrh	r3, [r3, #20]
 8002d8a:	1ad2      	subs	r2, r2, r3
 8002d8c:	4b8a      	ldr	r3, [pc, #552]	; (8002fb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002d8e:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002d90:	4a89      	ldr	r2, [pc, #548]	; (8002fb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	8adb      	ldrh	r3, [r3, #22]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	8a9b      	ldrh	r3, [r3, #20]
 8002da0:	041b      	lsls	r3, r3, #16
 8002da2:	431a      	orrs	r2, r3
 8002da4:	4b84      	ldr	r3, [pc, #528]	; (8002fb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002da6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	691a      	ldr	r2, [r3, #16]
 8002dac:	4b82      	ldr	r3, [pc, #520]	; (8002fb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002dae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	4b80      	ldr	r3, [pc, #512]	; (8002fb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002db6:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dc0:	d037      	beq.n	8002e32 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 8002dc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dc6:	f200 80e3 	bhi.w	8002f90 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 8002dca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dce:	d015      	beq.n	8002dfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8002dd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dd4:	f200 80dc 	bhi.w	8002f90 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 8002dd8:	2b80      	cmp	r3, #128	; 0x80
 8002dda:	d045      	beq.n	8002e68 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>
 8002ddc:	2b80      	cmp	r3, #128	; 0x80
 8002dde:	f200 80d7 	bhi.w	8002f90 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 8002de2:	2b40      	cmp	r3, #64	; 0x40
 8002de4:	f000 80bf 	beq.w	8002f66 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23a>
 8002de8:	2b40      	cmp	r3, #64	; 0x40
 8002dea:	f200 80d1 	bhi.w	8002f90 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 8002dee:	2b04      	cmp	r3, #4
 8002df0:	f000 80a4 	beq.w	8002f3c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>
 8002df4:	2b20      	cmp	r3, #32
 8002df6:	f000 80b6 	beq.w	8002f66 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23a>
 8002dfa:	e0c9      	b.n	8002f90 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	7f1b      	ldrb	r3, [r3, #28]
 8002e00:	061b      	lsls	r3, r3, #24
 8002e02:	4619      	mov	r1, r3
 8002e04:	4a6c      	ldr	r2, [pc, #432]	; (8002fb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002e06:	4b6d      	ldr	r3, [pc, #436]	; (8002fbc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002e08:	430b      	orrs	r3, r1
 8002e0a:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	330c      	adds	r3, #12
 8002e10:	4c69      	ldr	r4, [pc, #420]	; (8002fb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7ff fdae 	bl	8002974 <_ZNK8touchgfx9colortypecvmEv>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002e1c:	4a66      	ldr	r2, [pc, #408]	; (8002fb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	691a      	ldr	r2, [r3, #16]
 8002e26:	4b64      	ldr	r3, [pc, #400]	; (8002fb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002e28:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002e2a:	4b63      	ldr	r3, [pc, #396]	; (8002fb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002e2c:	4a64      	ldr	r2, [pc, #400]	; (8002fc0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8002e2e:	601a      	str	r2, [r3, #0]
        break;
 8002e30:	e0d9      	b.n	8002fe6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	7f1b      	ldrb	r3, [r3, #28]
 8002e36:	061b      	lsls	r3, r3, #24
 8002e38:	4619      	mov	r1, r3
 8002e3a:	4a5f      	ldr	r2, [pc, #380]	; (8002fb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002e3c:	4b61      	ldr	r3, [pc, #388]	; (8002fc4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8002e3e:	430b      	orrs	r3, r1
 8002e40:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	330c      	adds	r3, #12
 8002e46:	4c5c      	ldr	r4, [pc, #368]	; (8002fb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff fd93 	bl	8002974 <_ZNK8touchgfx9colortypecvmEv>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	6223      	str	r3, [r4, #32]
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002e52:	4a59      	ldr	r2, [pc, #356]	; (8002fb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	691a      	ldr	r2, [r3, #16]
 8002e5c:	4b56      	ldr	r3, [pc, #344]	; (8002fb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002e5e:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002e60:	4b55      	ldr	r3, [pc, #340]	; (8002fb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002e62:	4a57      	ldr	r2, [pc, #348]	; (8002fc0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8002e64:	601a      	str	r2, [r3, #0]
        break;
 8002e66:	e0be      	b.n	8002fe6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_L8:
        {
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	60fb      	str	r3, [r7, #12]
            bool blend = true;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	77fb      	strb	r3, [r7, #31]

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	7f1b      	ldrb	r3, [r3, #28]
 8002e76:	061b      	lsls	r3, r3, #24
 8002e78:	461a      	mov	r2, r3
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	4a4e      	ldr	r2, [pc, #312]	; (8002fb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e84:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002e86:	4a4c      	ldr	r2, [pc, #304]	; (8002fb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	6253      	str	r3, [r2, #36]	; 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	691a      	ldr	r2, [r3, #16]
 8002e90:	4b49      	ldr	r3, [pc, #292]	; (8002fb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002e92:	615a      	str	r2, [r3, #20]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	1d1a      	adds	r2, r3, #4
 8002e98:	4b47      	ldr	r3, [pc, #284]	; (8002fb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002e9a:	62da      	str	r2, [r3, #44]	; 0x2c

            switch ((Bitmap::ClutFormat)palette->format)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	881b      	ldrh	r3, [r3, #0]
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d002      	beq.n	8002eac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x180>
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d00d      	beq.n	8002ec6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x19a>
 8002eaa:	e020      	b.n	8002eee <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002eac:	4b42      	ldr	r3, [pc, #264]	; (8002fb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002eae:	69da      	ldr	r2, [r3, #28]
 8002eb0:	4b45      	ldr	r3, [pc, #276]	; (8002fc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	8852      	ldrh	r2, [r2, #2]
 8002eb8:	3a01      	subs	r2, #1
 8002eba:	0212      	lsls	r2, r2, #8
 8002ebc:	4611      	mov	r1, r2
 8002ebe:	4a3e      	ldr	r2, [pc, #248]	; (8002fb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002ec0:	430b      	orrs	r3, r1
 8002ec2:	61d3      	str	r3, [r2, #28]
                break;
 8002ec4:	e01a      	b.n	8002efc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if (blitOp.alpha == 255)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	7f1b      	ldrb	r3, [r3, #28]
 8002eca:	2bff      	cmp	r3, #255	; 0xff
 8002ecc:	d101      	bne.n	8002ed2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a6>
                {
                    blend = false;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002ed2:	4b39      	ldr	r3, [pc, #228]	; (8002fb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002ed4:	69da      	ldr	r2, [r3, #28]
 8002ed6:	4b3c      	ldr	r3, [pc, #240]	; (8002fc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002ed8:	4013      	ands	r3, r2
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	8852      	ldrh	r2, [r2, #2]
 8002ede:	3a01      	subs	r2, #1
 8002ee0:	0212      	lsls	r2, r2, #8
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	4a34      	ldr	r2, [pc, #208]	; (8002fb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002ee6:	f043 0310 	orr.w	r3, r3, #16
 8002eea:	61d3      	str	r3, [r2, #28]
                break;
 8002eec:	e006      	b.n	8002efc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>
            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 8002eee:	4b37      	ldr	r3, [pc, #220]	; (8002fcc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002ef0:	4a37      	ldr	r2, [pc, #220]	; (8002fd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8002ef2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ef6:	4837      	ldr	r0, [pc, #220]	; (8002fd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8002ef8:	f023 fdfc 	bl	8026af4 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8002efc:	4b2e      	ldr	r3, [pc, #184]	; (8002fb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	4a2d      	ldr	r2, [pc, #180]	; (8002fb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002f02:	f043 0320 	orr.w	r3, r3, #32
 8002f06:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8002f08:	bf00      	nop
 8002f0a:	4b2b      	ldr	r3, [pc, #172]	; (8002fb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002f0c:	69db      	ldr	r3, [r3, #28]
 8002f0e:	f003 0320 	and.w	r3, r3, #32
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	bf14      	ite	ne
 8002f16:	2301      	movne	r3, #1
 8002f18:	2300      	moveq	r3, #0
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1f4      	bne.n	8002f0a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1de>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8002f20:	4b25      	ldr	r3, [pc, #148]	; (8002fb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002f22:	2210      	movs	r2, #16
 8002f24:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if (blend)
 8002f26:	7ffb      	ldrb	r3, [r7, #31]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d003      	beq.n	8002f34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002f2c:	4b22      	ldr	r3, [pc, #136]	; (8002fb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002f2e:	4a24      	ldr	r2, [pc, #144]	; (8002fc0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8002f30:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
        break;
 8002f32:	e058      	b.n	8002fe6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8002f34:	4b20      	ldr	r3, [pc, #128]	; (8002fb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002f36:	4a28      	ldr	r2, [pc, #160]	; (8002fd8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8002f38:	601a      	str	r2, [r3, #0]
        break;
 8002f3a:	e054      	b.n	8002fe6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	7f1b      	ldrb	r3, [r3, #28]
 8002f40:	061b      	lsls	r3, r3, #24
 8002f42:	461a      	mov	r2, r3
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	4a1b      	ldr	r2, [pc, #108]	; (8002fb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002f4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f4e:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002f50:	4a19      	ldr	r2, [pc, #100]	; (8002fb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	691a      	ldr	r2, [r3, #16]
 8002f5a:	4b17      	ldr	r3, [pc, #92]	; (8002fb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002f5c:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002f5e:	4b16      	ldr	r3, [pc, #88]	; (8002fb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002f60:	4a17      	ldr	r2, [pc, #92]	; (8002fc0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8002f62:	601a      	str	r2, [r3, #0]
        break;
 8002f64:	e03f      	b.n	8002fe6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	7f1b      	ldrb	r3, [r3, #28]
 8002f6a:	061b      	lsls	r3, r3, #24
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	4a11      	ldr	r2, [pc, #68]	; (8002fb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f78:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002f7a:	4a0f      	ldr	r2, [pc, #60]	; (8002fb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	691a      	ldr	r2, [r3, #16]
 8002f84:	4b0c      	ldr	r3, [pc, #48]	; (8002fb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002f86:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002f88:	4b0b      	ldr	r3, [pc, #44]	; (8002fb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002f8a:	4a0d      	ldr	r2, [pc, #52]	; (8002fc0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8002f8c:	601a      	str	r2, [r3, #0]
        break;
 8002f8e:	e02a      	b.n	8002fe6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	7f1b      	ldrb	r3, [r3, #28]
 8002f94:	061b      	lsls	r3, r3, #24
 8002f96:	461a      	mov	r2, r3
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	4a06      	ldr	r2, [pc, #24]	; (8002fb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002f9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fa2:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	7f5a      	ldrb	r2, [r3, #29]
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	7f9b      	ldrb	r3, [r3, #30]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d015      	beq.n	8002fdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8002fb0:	4b01      	ldr	r3, [pc, #4]	; (8002fb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002fb2:	4a09      	ldr	r2, [pc, #36]	; (8002fd8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8002fb4:	601a      	str	r2, [r3, #0]
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }

        break;
 8002fb6:	e015      	b.n	8002fe4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>
 8002fb8:	52001000 	.word	0x52001000
 8002fbc:	0002000a 	.word	0x0002000a
 8002fc0:	00020201 	.word	0x00020201
 8002fc4:	00020009 	.word	0x00020009
 8002fc8:	ffff00ef 	.word	0xffff00ef
 8002fcc:	08028050 	.word	0x08028050
 8002fd0:	0802806c 	.word	0x0802806c
 8002fd4:	08027f70 	.word	0x08027f70
 8002fd8:	00010201 	.word	0x00010201
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002fdc:	4b04      	ldr	r3, [pc, #16]	; (8002ff0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 8002fde:	f240 2201 	movw	r2, #513	; 0x201
 8002fe2:	601a      	str	r2, [r3, #0]
        break;
 8002fe4:	bf00      	nop
    }
}
 8002fe6:	bf00      	nop
 8002fe8:	3724      	adds	r7, #36	; 0x24
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd90      	pop	{r4, r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	52001000 	.word	0x52001000

08002ff4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002ff4:	b590      	push	{r4, r7, lr}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	7f9b      	ldrb	r3, [r3, #30]
 8003002:	4619      	mov	r1, r3
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f7ff fe47 	bl	8002c98 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800300a:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800300c:	4a2f      	ldr	r2, [pc, #188]	; (80030cc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	8adb      	ldrh	r3, [r3, #22]
 8003016:	461a      	mov	r2, r3
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	8a9b      	ldrh	r3, [r3, #20]
 800301c:	041b      	lsls	r3, r3, #16
 800301e:	431a      	orrs	r2, r3
 8003020:	4b2a      	ldr	r3, [pc, #168]	; (80030cc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003022:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	691a      	ldr	r2, [r3, #16]
 8003028:	4b28      	ldr	r3, [pc, #160]	; (80030cc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800302a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	8b5b      	ldrh	r3, [r3, #26]
 8003030:	461a      	mov	r2, r3
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	8a9b      	ldrh	r3, [r3, #20]
 8003036:	1ad2      	subs	r2, r2, r3
 8003038:	4b24      	ldr	r3, [pc, #144]	; (80030cc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800303a:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2b08      	cmp	r3, #8
 8003042:	d12e      	bne.n	80030a2 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xae>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	8b5b      	ldrh	r3, [r3, #26]
 8003048:	461a      	mov	r2, r3
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	8a9b      	ldrh	r3, [r3, #20]
 800304e:	1ad2      	subs	r2, r2, r3
 8003050:	4b1e      	ldr	r3, [pc, #120]	; (80030cc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003052:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	8b5b      	ldrh	r3, [r3, #26]
 8003058:	461a      	mov	r2, r3
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	8a9b      	ldrh	r3, [r3, #20]
 800305e:	1ad2      	subs	r2, r2, r3
 8003060:	4b1a      	ldr	r3, [pc, #104]	; (80030cc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003062:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003064:	4a19      	ldr	r2, [pc, #100]	; (80030cc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	7f1b      	ldrb	r3, [r3, #28]
 800306e:	061b      	lsls	r3, r3, #24
 8003070:	4619      	mov	r1, r3
 8003072:	4a16      	ldr	r2, [pc, #88]	; (80030cc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003074:	4b16      	ldr	r3, [pc, #88]	; (80030d0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xdc>)
 8003076:	430b      	orrs	r3, r1
 8003078:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	330c      	adds	r3, #12
 800307e:	4c13      	ldr	r4, [pc, #76]	; (80030cc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff fc77 	bl	8002974 <_ZNK8touchgfx9colortypecvmEv>
 8003086:	4603      	mov	r3, r0
 8003088:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	691a      	ldr	r2, [r3, #16]
 800308e:	4b0f      	ldr	r3, [pc, #60]	; (80030cc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003090:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	691a      	ldr	r2, [r3, #16]
 8003096:	4b0d      	ldr	r3, [pc, #52]	; (80030cc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8003098:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 800309a:	4b0c      	ldr	r3, [pc, #48]	; (80030cc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800309c:	4a0d      	ldr	r2, [pc, #52]	; (80030d4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe0>)
 800309e:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 80030a0:	e010      	b.n	80030c4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd0>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 80030a2:	4a0a      	ldr	r2, [pc, #40]	; (80030cc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 80030a8:	4b08      	ldr	r3, [pc, #32]	; (80030cc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	330c      	adds	r3, #12
 80030b2:	4c06      	ldr	r4, [pc, #24]	; (80030cc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7ff fc5d 	bl	8002974 <_ZNK8touchgfx9colortypecvmEv>
 80030ba:	4603      	mov	r3, r0
 80030bc:	63a3      	str	r3, [r4, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 80030be:	4b03      	ldr	r3, [pc, #12]	; (80030cc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80030c0:	4a05      	ldr	r2, [pc, #20]	; (80030d8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe4>)
 80030c2:	601a      	str	r2, [r3, #0]
}
 80030c4:	bf00      	nop
 80030c6:	3714      	adds	r7, #20
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd90      	pop	{r4, r7, pc}
 80030cc:	52001000 	.word	0x52001000
 80030d0:	00010009 	.word	0x00010009
 80030d4:	00020201 	.word	0x00020201
 80030d8:	00030201 	.word	0x00030201

080030dc <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	4a05      	ldr	r2, [pc, #20]	; (80030fc <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	601a      	str	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff fc4d 	bl	800298c <_ZN8touchgfx9DMA_QueueD1Ev>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4618      	mov	r0, r3
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	0802912c 	.word	0x0802912c

08003100 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f7ff ffe7 	bl	80030dc <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800310e:	2114      	movs	r1, #20
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f023 fcc0 	bl	8026a96 <_ZdlPvj>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4618      	mov	r0, r3
 800311a:	3708      	adds	r7, #8
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	801a      	strh	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	805a      	strh	r2, [r3, #2]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	809a      	strh	r2, [r3, #4]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	80da      	strh	r2, [r3, #6]
    {
    }
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4618      	mov	r0, r3
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
	...

08003150 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8003158:	4a04      	ldr	r2, [pc, #16]	; (800316c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6013      	str	r3, [r2, #0]
    }
 800315e:	bf00      	nop
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	24006d94 	.word	0x24006d94

08003170 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
    {
 8003178:	4a04      	ldr	r2, [pc, #16]	; (800318c <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	601a      	str	r2, [r3, #0]
    }
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4618      	mov	r0, r3
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr
 800318c:	08028afc 	.word	0x08028afc

08003190 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
    }
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f7ff ffe9 	bl	8003170 <_ZN8touchgfx12FontProviderD1Ev>
 800319e:	2104      	movs	r1, #4
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f023 fc78 	bl	8026a96 <_ZdlPvj>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4618      	mov	r0, r3
 80031aa:	3708      	adds	r7, #8
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
 80031bc:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 80031be:	4a0b      	ldr	r2, [pc, #44]	; (80031ec <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	601a      	str	r2, [r3, #0]
        : presenterStorage(pres),
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	605a      	str	r2, [r3, #4]
          screenStorage(scr),
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	609a      	str	r2, [r3, #8]
          transitionStorage(tra),
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	60da      	str	r2, [r3, #12]
          frontendApplication(app)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	611a      	str	r2, [r3, #16]
    {
    }
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	4618      	mov	r0, r3
 80031e0:	3714      	adds	r7, #20
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	08028aec 	.word	0x08028aec

080031f0 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
    {
 80031f8:	4a04      	ldr	r2, [pc, #16]	; (800320c <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	601a      	str	r2, [r3, #0]
    }
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4618      	mov	r0, r3
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr
 800320c:	08028aec 	.word	0x08028aec

08003210 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
    }
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f7ff ffe9 	bl	80031f0 <_ZN8touchgfx7MVPHeapD1Ev>
 800321e:	2114      	movs	r1, #20
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f023 fc38 	bl	8026a96 <_ZdlPvj>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4618      	mov	r0, r3
 800322a:	3708      	adds	r7, #8
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800323a:	bf00      	nop
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8003246:	b480      	push	{r7}
 8003248:	b083      	sub	sp, #12
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
 800324e:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8003266:	bf00      	nop
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr

08003272 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8003272:	b480      	push	{r7}
 8003274:	b083      	sub	sp, #12
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
 800327a:	460b      	mov	r3, r1
 800327c:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr

0800328a <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800328a:	b480      	push	{r7}
 800328c:	b083      	sub	sp, #12
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
    {
    }
 8003292:	bf00      	nop
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr

0800329e <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800329e:	b480      	push	{r7}
 80032a0:	b083      	sub	sp, #12
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
    {
    }
 80032a6:	bf00      	nop
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
	...

080032b4 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
    {
 80032bc:	4a04      	ldr	r2, [pc, #16]	; (80032d0 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	601a      	str	r2, [r3, #0]
    }
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4618      	mov	r0, r3
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	08028ac4 	.word	0x08028ac4

080032d4 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
    }
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f7ff ffe9 	bl	80032b4 <_ZN8touchgfx15UIEventListenerD1Ev>
 80032e2:	2104      	movs	r1, #4
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f023 fbd6 	bl	8026a96 <_ZdlPvj>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4618      	mov	r0, r3
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
    {
 80032fc:	4a04      	ldr	r2, [pc, #16]	; (8003310 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	601a      	str	r2, [r3, #0]
    }
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4618      	mov	r0, r3
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr
 8003310:	08029248 	.word	0x08029248

08003314 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
    }
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f7ff ffe9 	bl	80032f4 <_ZN8touchgfx3LCDD1Ev>
 8003322:	2108      	movs	r1, #8
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f023 fbb6 	bl	8026a96 <_ZdlPvj>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4618      	mov	r0, r3
 800332e:	3708      	adds	r7, #8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
    {
    }
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	460b      	mov	r3, r1
 8003352:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8003372:	6810      	ldr	r0, [r2, #0]
 8003374:	6851      	ldr	r1, [r2, #4]
 8003376:	c303      	stmia	r3!, {r0, r1}
    }
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
    {
 800338c:	4a04      	ldr	r2, [pc, #16]	; (80033a0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	601a      	str	r2, [r3, #0]
    }
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4618      	mov	r0, r3
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr
 80033a0:	08028aac 	.word	0x08028aac

080033a4 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
    }
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f7ff ffe9 	bl	8003384 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 80033b2:	2104      	movs	r1, #4
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f023 fb6e 	bl	8026a96 <_ZdlPvj>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4618      	mov	r0, r3
 80033be:	3708      	adds	r7, #8
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
            : startX(0),
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	801a      	strh	r2, [r3, #0]
              startY(0),
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	805a      	strh	r2, [r3, #2]
              downX(0),
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	809a      	strh	r2, [r3, #4]
              downY(0),
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	80da      	strh	r2, [r3, #6]
              tickCount(0),
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	811a      	strh	r2, [r3, #8]
              velocityX(0),
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	815a      	strh	r2, [r3, #10]
              velocityY(0),
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	819a      	strh	r2, [r3, #12]
              inProgress(false)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	739a      	strb	r2, [r3, #14]
        {
        }
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4618      	mov	r0, r3
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr

0800340a <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 800340a:	b580      	push	{r7, lr}
 800340c:	b082      	sub	sp, #8
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4618      	mov	r0, r3
 8003416:	f7ff ffd5 	bl	80033c4 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	611a      	str	r2, [r3, #16]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	829a      	strh	r2, [r3, #20]
    {
    }
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4618      	mov	r0, r3
 800342a:	3708      	adds	r7, #8
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
 800343c:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 800343e:	4a55      	ldr	r2, [pc, #340]	; (8003594 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	601a      	str	r2, [r3, #0]
        : dma(dmaInterface),
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	68ba      	ldr	r2, [r7, #8]
 8003448:	605a      	str	r2, [r3, #4]
          lcdRef(display),
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	609a      	str	r2, [r3, #8]
          touchController(touchCtrl),
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	60da      	str	r2, [r3, #12]
          mcuInstrumentation(0),
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	611a      	str	r2, [r3, #16]
          buttonController(0),
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	615a      	str	r2, [r3, #20]
          frameBufferAllocator(0),
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	619a      	str	r2, [r3, #24]
          gestures(),
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	331c      	adds	r3, #28
 800346c:	4618      	mov	r0, r3
 800346e:	f7ff ffcc 	bl	800340a <_ZN8touchgfx8GesturesC1Ev>
          nativeDisplayOrientation(ORIENTATION_LANDSCAPE),
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          taskDelayFunc(0),
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	639a      	str	r2, [r3, #56]	; 0x38
          frameBuffer0(0),
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	63da      	str	r2, [r3, #60]	; 0x3c
          frameBuffer1(0),
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	641a      	str	r2, [r3, #64]	; 0x40
          frameBuffer2(0),
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	645a      	str	r2, [r3, #68]	; 0x44
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
          fingerSize(1),
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
          lockDMAToPorch(false),
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
          frameBufferUpdatedThisFrame(false),
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
          auxiliaryLCD(0),
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	64da      	str	r2, [r3, #76]	; 0x4c
          partialFrameBufferRect(),
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	3350      	adds	r3, #80	; 0x50
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff fe2f 	bl	8003120 <_ZN8touchgfx4RectC1Ev>
          useAuxiliaryLCD(false),
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
          listener(0),
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	65da      	str	r2, [r3, #92]	; 0x5c
          lastX(0),
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	661a      	str	r2, [r3, #96]	; 0x60
          lastY(0),
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	665a      	str	r2, [r3, #100]	; 0x64
          touchSampleRate(1),
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
          mcuLoadPct(0),
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
          vSyncCnt(0),
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
          vSyncForFrame(1),
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
          vSyncCompensationEnabled(false),
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
          clientDirty(false),
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
          swapRequested(false),
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
          lastTouched(false),
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
          updateMCULoad(0),
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          cc_begin(0),
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	675a      	str	r2, [r3, #116]	; 0x74
          requestedOrientation(ORIENTATION_LANDSCAPE),
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
          displayOrientationChangeRequested(false),
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
          useDMAAcceleration(true),
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2201      	movs	r2, #1
 800353e:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
          lastRenderMethod(HARDWARE)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2201      	movs	r2, #1
 8003546:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
        instance = this;
 800354a:	4a13      	ldr	r2, [pc, #76]	; (8003598 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8003550:	4a12      	ldr	r2, [pc, #72]	; (800359c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8003552:	8b3b      	ldrh	r3, [r7, #24]
 8003554:	8013      	strh	r3, [r2, #0]
 8003556:	4b11      	ldr	r3, [pc, #68]	; (800359c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8003558:	881a      	ldrh	r2, [r3, #0]
 800355a:	4b11      	ldr	r3, [pc, #68]	; (80035a0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 800355c:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 800355e:	4a11      	ldr	r2, [pc, #68]	; (80035a4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8003560:	8bbb      	ldrh	r3, [r7, #28]
 8003562:	8013      	strh	r3, [r2, #0]
 8003564:	4b0f      	ldr	r3, [pc, #60]	; (80035a4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8003566:	881a      	ldrh	r2, [r3, #0]
 8003568:	4b0f      	ldr	r3, [pc, #60]	; (80035a8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 800356a:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 800356c:	4b0f      	ldr	r3, [pc, #60]	; (80035ac <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 800356e:	2200      	movs	r2, #0
 8003570:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8003572:	8b3a      	ldrh	r2, [r7, #24]
 8003574:	8bbb      	ldrh	r3, [r7, #28]
 8003576:	429a      	cmp	r2, r3
 8003578:	bf34      	ite	cc
 800357a:	2301      	movcc	r3, #1
 800357c:	2300      	movcs	r3, #0
 800357e:	b2db      	uxtb	r3, r3
 8003580:	461a      	mov	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	4618      	mov	r0, r3
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	08029004 	.word	0x08029004
 8003598:	24006d38 	.word	0x24006d38
 800359c:	24006d2c 	.word	0x24006d2c
 80035a0:	24006d32 	.word	0x24006d32
 80035a4:	24006d2e 	.word	0x24006d2e
 80035a8:	24006d34 	.word	0x24006d34
 80035ac:	24006d30 	.word	0x24006d30

080035b0 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	4a05      	ldr	r2, [pc, #20]	; (80035d0 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	601a      	str	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7ff fe77 	bl	80032b4 <_ZN8touchgfx15UIEventListenerD1Ev>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4618      	mov	r0, r3
 80035ca:	3708      	adds	r7, #8
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	080292a0 	.word	0x080292a0

080035d4 <_ZN8touchgfx11ApplicationD0Ev>:
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f7ff ffe7 	bl	80035b0 <_ZN8touchgfx11ApplicationD1Ev>
 80035e2:	f44f 719e 	mov.w	r1, #316	; 0x13c
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f023 fa55 	bl	8026a96 <_ZdlPvj>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4618      	mov	r0, r3
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b082      	sub	sp, #8
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f804 	bl	800360c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8003604:	bf00      	nop
 8003606:	3708      	adds	r7, #8
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00f      	beq.n	800363e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	330c      	adds	r3, #12
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4610      	mov	r0, r2
 8003632:	4798      	blx	r3
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800363a:	2301      	movs	r3, #1
 800363c:	e000      	b.n	8003640 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800363e:	2300      	movs	r3, #0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00e      	beq.n	8003662 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	3308      	adds	r3, #8
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4610      	mov	r0, r2
 8003658:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
        }
    }
 8003662:	bf00      	nop
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
	...

0800366c <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	4a05      	ldr	r2, [pc, #20]	; (800368c <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	601a      	str	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4618      	mov	r0, r3
 800367e:	f7ff ff97 	bl	80035b0 <_ZN8touchgfx11ApplicationD1Ev>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4618      	mov	r0, r3
 8003686:	3708      	adds	r7, #8
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	08028a58 	.word	0x08028a58

08003690 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f7ff ffe7 	bl	800366c <_ZN8touchgfx14MVPApplicationD1Ev>
 800369e:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f023 f9f7 	bl	8026a96 <_ZdlPvj>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4618      	mov	r0, r3
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
	...

080036b4 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	4a08      	ldr	r2, [pc, #32]	; (80036e0 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80036c8:	4618      	mov	r0, r3
 80036ca:	f000 fb19 	bl	8003d00 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7ff ffcb 	bl	800366c <_ZN8touchgfx14MVPApplicationD1Ev>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4618      	mov	r0, r3
 80036da:	3708      	adds	r7, #8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	080289ec 	.word	0x080289ec

080036e4 <_ZN23FrontendApplicationBaseD0Ev>:
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f7ff ffe1 	bl	80036b4 <_ZN23FrontendApplicationBaseD1Ev>
 80036f2:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f023 f9cd 	bl	8026a96 <_ZdlPvj>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4618      	mov	r0, r3
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 8003706:	b580      	push	{r7, lr}
 8003708:	b082      	sub	sp, #8
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
    {
        gotoScreen1ScreenNoTransition();
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f001 f8f4 	bl	80048fc <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 8003714:	bf00      	nop
 8003716:	3708      	adds	r7, #8
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	4a05      	ldr	r2, [pc, #20]	; (800373c <_ZN19FrontendApplicationD1Ev+0x20>)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	601a      	str	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4618      	mov	r0, r3
 800372e:	f7ff ffc1 	bl	80036b4 <_ZN23FrontendApplicationBaseD1Ev>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4618      	mov	r0, r3
 8003736:	3708      	adds	r7, #8
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	08028998 	.word	0x08028998

08003740 <_ZN19FrontendApplicationD0Ev>:
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f7ff ffe7 	bl	800371c <_ZN19FrontendApplicationD1Ev>
 800374e:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f023 f99f 	bl	8026a96 <_ZdlPvj>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4618      	mov	r0, r3
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8003762:	b580      	push	{r7, lr}
 8003764:	b082      	sub	sp, #8
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8003770:	4618      	mov	r0, r3
 8003772:	f002 fbbb 	bl	8005eec <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4618      	mov	r0, r3
 800377a:	f017 fa77 	bl	801ac6c <_ZN8touchgfx11Application15handleTickEventEv>
    }
 800377e:	bf00      	nop
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8003786:	b580      	push	{r7, lr}
 8003788:	b082      	sub	sp, #8
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
 800378e:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f001 f8b2 	bl	80048fc <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 8003798:	bf00      	nop
 800379a:	3708      	adds	r7, #8
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af02      	add	r7, sp, #8
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
 80037ac:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	68b9      	ldr	r1, [r7, #8]
 80037ba:	f7ff fcf9 	bl	80031b0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 80037be:	4a04      	ldr	r2, [pc, #16]	; (80037d0 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	601a      	str	r2, [r3, #0]
    {

    }
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	08028984 	.word	0x08028984

080037d4 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	4801      	ldr	r0, [pc, #4]	; (80037e0 <__tcf_0+0xc>)
 80037da:	f000 f965 	bl	8003aa8 <_ZN12FrontendHeapD1Ev>
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	240006d0 	.word	0x240006d0

080037e4 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 80037e8:	4b11      	ldr	r3, [pc, #68]	; (8003830 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f3bf 8f5b 	dmb	ish
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	bf0c      	ite	eq
 80037f8:	2301      	moveq	r3, #1
 80037fa:	2300      	movne	r3, #0
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d013      	beq.n	800382a <_ZN12FrontendHeap11getInstanceEv+0x46>
 8003802:	480b      	ldr	r0, [pc, #44]	; (8003830 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8003804:	f023 f949 	bl	8026a9a <__cxa_guard_acquire>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	bf14      	ite	ne
 800380e:	2301      	movne	r3, #1
 8003810:	2300      	moveq	r3, #0
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b00      	cmp	r3, #0
 8003816:	d008      	beq.n	800382a <_ZN12FrontendHeap11getInstanceEv+0x46>
 8003818:	4806      	ldr	r0, [pc, #24]	; (8003834 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 800381a:	f000 f867 	bl	80038ec <_ZN12FrontendHeapC1Ev>
 800381e:	4806      	ldr	r0, [pc, #24]	; (8003838 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8003820:	f023 f986 	bl	8026b30 <atexit>
 8003824:	4802      	ldr	r0, [pc, #8]	; (8003830 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8003826:	f023 f944 	bl	8026ab2 <__cxa_guard_release>
        return instance;
 800382a:	4b02      	ldr	r3, [pc, #8]	; (8003834 <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 800382c:	4618      	mov	r0, r3
 800382e:	bd80      	pop	{r7, pc}
 8003830:	24000958 	.word	0x24000958
 8003834:	240006d0 	.word	0x240006d0
 8003838:	080037d5 	.word	0x080037d5

0800383c <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	4a05      	ldr	r2, [pc, #20]	; (800385c <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4618      	mov	r0, r3
 800384e:	f7ff fccf 	bl	80031f0 <_ZN8touchgfx7MVPHeapD1Ev>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4618      	mov	r0, r3
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	08028984 	.word	0x08028984

08003860 <_ZN16FrontendHeapBaseD0Ev>:
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f7ff ffe7 	bl	800383c <_ZN16FrontendHeapBaseD1Ev>
 800386e:	2114      	movs	r1, #20
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f023 f910 	bl	8026a96 <_ZdlPvj>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4618      	mov	r0, r3
 800387a:	3708      	adds	r7, #8
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4618      	mov	r0, r3
 800388c:	f013 fefa 	bl	8017684 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003890:	4a03      	ldr	r2, [pc, #12]	; (80038a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	601a      	str	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4618      	mov	r0, r3
 800389a:	3708      	adds	r7, #8
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	08028950 	.word	0x08028950

080038a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f013 fee8 	bl	8017684 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80038b4:	4a03      	ldr	r2, [pc, #12]	; (80038c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4618      	mov	r0, r3
 80038be:	3708      	adds	r7, #8
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	0802891c 	.word	0x0802891c

080038c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f013 fed6 	bl	8017684 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80038d8:	4a03      	ldr	r2, [pc, #12]	; (80038e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	601a      	str	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4618      	mov	r0, r3
 80038e2:	3708      	adds	r7, #8
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	080288e8 	.word	0x080288e8

080038ec <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80038ec:	b590      	push	{r4, r7, lr}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af02      	add	r7, sp, #8
 80038f2:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f103 0114 	add.w	r1, r3, #20
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f503 748a 	add.w	r4, r3, #276	; 0x114
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f503 7396 	add.w	r3, r3, #300	; 0x12c
                     app(model, *this)
 800390e:	9300      	str	r3, [sp, #0]
 8003910:	4623      	mov	r3, r4
 8003912:	f7ff ff45 	bl	80037a0 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8003916:	4a18      	ldr	r2, [pc, #96]	; (8003978 <_ZN12FrontendHeapC1Ev+0x8c>)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3314      	adds	r3, #20
 8003920:	4618      	mov	r0, r3
 8003922:	f7ff ffad 	bl	8003880 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	332c      	adds	r3, #44	; 0x2c
 800392a:	4618      	mov	r0, r3
 800392c:	f7ff ffba 	bl	80038a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8003936:	4618      	mov	r0, r3
 8003938:	f7ff ffc6 	bl	80038c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003942:	4618      	mov	r0, r3
 8003944:	f002 fac4 	bl	8005ed0 <_ZN5ModelC1Ev>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f503 7096 	add.w	r0, r3, #300	; 0x12c
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	4619      	mov	r1, r3
 8003958:	f002 faa4 	bl	8005ea4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8003964:	4619      	mov	r1, r3
 8003966:	4610      	mov	r0, r2
 8003968:	f7ff ff0d 	bl	8003786 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4618      	mov	r0, r3
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	bd90      	pop	{r4, r7, pc}
 8003976:	bf00      	nop
 8003978:	080288d4 	.word	0x080288d4

0800397c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af02      	add	r7, sp, #8
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
 8003988:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	8bbb      	ldrh	r3, [r7, #28]
 800398e:	9301      	str	r3, [sp, #4]
 8003990:	8b3b      	ldrh	r3, [r7, #24]
 8003992:	9300      	str	r3, [sp, #0]
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	68b9      	ldr	r1, [r7, #8]
 800399a:	f7ff fd49 	bl	8003430 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 800399e:	4a04      	ldr	r2, [pc, #16]	; (80039b0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	601a      	str	r2, [r3, #0]
    }
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	4618      	mov	r0, r3
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	08028b10 	.word	0x08028b10

080039b4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af02      	add	r7, sp, #8
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
 80039c0:	603b      	str	r3, [r7, #0]
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	8bbb      	ldrh	r3, [r7, #28]
 80039c6:	9301      	str	r3, [sp, #4]
 80039c8:	8b3b      	ldrh	r3, [r7, #24]
 80039ca:	9300      	str	r3, [sp, #0]
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	68b9      	ldr	r1, [r7, #8]
 80039d2:	f7ff ffd3 	bl	800397c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80039d6:	4a04      	ldr	r2, [pc, #16]	; (80039e8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	601a      	str	r2, [r3, #0]
    }
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	4618      	mov	r0, r3
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	08028788 	.word	0x08028788

080039ec <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	4a04      	ldr	r2, [pc, #16]	; (8003a08 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	601a      	str	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4618      	mov	r0, r3
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr
 8003a08:	08028770 	.word	0x08028770

08003a0c <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7ff ffe8 	bl	80039ec <_ZN8touchgfx15TouchControllerC1Ev>
 8003a1c:	4a03      	ldr	r2, [pc, #12]	; (8003a2c <_ZN20STM32TouchControllerC1Ev+0x20>)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	601a      	str	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4618      	mov	r0, r3
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	08028758 	.word	0x08028758

08003a30 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8003a30:	b590      	push	{r4, r7, lr}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8003a36:	f000 fd09 	bl	800444c <_ZN14BitmapDatabase11getInstanceEv>
 8003a3a:	4604      	mov	r4, r0
 8003a3c:	f000 fd10 	bl	8004460 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8003a40:	4603      	mov	r3, r0
 8003a42:	4619      	mov	r1, r3
 8003a44:	2300      	movs	r3, #0
 8003a46:	9300      	str	r3, [sp, #0]
 8003a48:	2300      	movs	r3, #0
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	4620      	mov	r0, r4
 8003a4e:	f019 fe03 	bl	801d658 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 8003a52:	4809      	ldr	r0, [pc, #36]	; (8003a78 <touchgfx_init+0x48>)
 8003a54:	f7ff fb7c 	bl	8003150 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8003a58:	2000      	movs	r0, #0
 8003a5a:	f002 f977 	bl	8005d4c <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8003a5e:	4807      	ldr	r0, [pc, #28]	; (8003a7c <touchgfx_init+0x4c>)
 8003a60:	f019 fcb2 	bl	801d3c8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8003a64:	f7ff febe 	bl	80037e4 <_ZN12FrontendHeap11getInstanceEv>
 8003a68:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8003a6a:	4805      	ldr	r0, [pc, #20]	; (8003a80 <touchgfx_init+0x50>)
 8003a6c:	f7fe fda8 	bl	80025c0 <_ZN11TouchGFXHAL10initializeEv>
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd90      	pop	{r4, r7, pc}
 8003a78:	24001764 	.word	0x24001764
 8003a7c:	2400000c 	.word	0x2400000c
 8003a80:	24001768 	.word	0x24001768

08003a84 <touchgfx_components_init>:

void touchgfx_components_init()
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
}
 8003a88:	bf00      	nop
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
	...

08003a94 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8003a98:	4802      	ldr	r0, [pc, #8]	; (8003aa4 <touchgfx_taskEntry+0x10>)
 8003a9a:	f7fe fd9d 	bl	80025d8 <_ZN11TouchGFXHAL9taskEntryEv>
}
 8003a9e:	bf00      	nop
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	24001768 	.word	0x24001768

08003aa8 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	4a10      	ldr	r2, [pc, #64]	; (8003af4 <_ZN12FrontendHeapD1Ev+0x4c>)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	601a      	str	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7ff fe2d 	bl	800371c <_ZN19FrontendApplicationD1Ev>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f000 f827 	bl	8003b1c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	332c      	adds	r3, #44	; 0x2c
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f000 f844 	bl	8003b60 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	3314      	adds	r3, #20
 8003adc:	4618      	mov	r0, r3
 8003ade:	f000 f861 	bl	8003ba4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7ff fea9 	bl	800383c <_ZN16FrontendHeapBaseD1Ev>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4618      	mov	r0, r3
 8003aee:	3708      	adds	r7, #8
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	080288d4 	.word	0x080288d4

08003af8 <_ZN12FrontendHeapD0Ev>:
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f7ff ffd1 	bl	8003aa8 <_ZN12FrontendHeapD1Ev>
 8003b06:	f44f 7122 	mov.w	r1, #648	; 0x288
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f022 ffc3 	bl	8026a96 <_ZdlPvj>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4618      	mov	r0, r3
 8003b14:	3708      	adds	r7, #8
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
	...

08003b1c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	4a05      	ldr	r2, [pc, #20]	; (8003b3c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	601a      	str	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f013 fda8 	bl	8017682 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4618      	mov	r0, r3
 8003b36:	3708      	adds	r7, #8
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	080288e8 	.word	0x080288e8

08003b40 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f7ff ffe7 	bl	8003b1c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003b4e:	2114      	movs	r1, #20
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f022 ffa0 	bl	8026a96 <_ZdlPvj>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3708      	adds	r7, #8
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	4a05      	ldr	r2, [pc, #20]	; (8003b80 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	601a      	str	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4618      	mov	r0, r3
 8003b72:	f013 fd86 	bl	8017682 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3708      	adds	r7, #8
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	0802891c 	.word	0x0802891c

08003b84 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f7ff ffe7 	bl	8003b60 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003b92:	21e8      	movs	r1, #232	; 0xe8
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f022 ff7e 	bl	8026a96 <_ZdlPvj>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3708      	adds	r7, #8
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	4a05      	ldr	r2, [pc, #20]	; (8003bc4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	601a      	str	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f013 fd64 	bl	8017682 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3708      	adds	r7, #8
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	08028950 	.word	0x08028950

08003bc8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f7ff ffe7 	bl	8003ba4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003bd6:	2118      	movs	r1, #24
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f022 ff5c 	bl	8026a96 <_ZdlPvj>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4618      	mov	r0, r3
 8003be2:	3708      	adds	r7, #8
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	4a05      	ldr	r2, [pc, #20]	; (8003c08 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	601a      	str	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7ff fab9 	bl	8003170 <_ZN8touchgfx12FontProviderD1Ev>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4618      	mov	r0, r3
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	08028be8 	.word	0x08028be8

08003c0c <_ZN23ApplicationFontProviderD0Ev>:
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f7ff ffe7 	bl	8003be8 <_ZN23ApplicationFontProviderD1Ev>
 8003c1a:	2104      	movs	r1, #4
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f022 ff3a 	bl	8026a96 <_ZdlPvj>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4618      	mov	r0, r3
 8003c26:	3708      	adds	r7, #8
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <_ZN8touchgfx8LCD24bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	4a05      	ldr	r2, [pc, #20]	; (8003c4c <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	601a      	str	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7ff fb59 	bl	80032f4 <_ZN8touchgfx3LCDD1Ev>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4618      	mov	r0, r3
 8003c46:	3708      	adds	r7, #8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	08029604 	.word	0x08029604

08003c50 <_ZN8touchgfx8LCD24bppD0Ev>:
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f7ff ffe7 	bl	8003c2c <_ZN8touchgfx8LCD24bppD1Ev>
 8003c5e:	2164      	movs	r1, #100	; 0x64
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f022 ff18 	bl	8026a96 <_ZdlPvj>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3708      	adds	r7, #8
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <_Z41__static_initialization_and_destruction_0ii>:
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af02      	add	r7, sp, #8
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d119      	bne.n	8003cb4 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d114      	bne.n	8003cb4 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 8003c8a:	4818      	ldr	r0, [pc, #96]	; (8003cec <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003c8c:	f7ff febe 	bl	8003a0c <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 8003c90:	4817      	ldr	r0, [pc, #92]	; (8003cf0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003c92:	f7fe ff37 	bl	8002b04 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 8003c96:	4817      	ldr	r0, [pc, #92]	; (8003cf4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003c98:	f01c fd38 	bl	802070c <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 8003c9c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003ca0:	9301      	str	r3, [sp, #4]
 8003ca2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	4b10      	ldr	r3, [pc, #64]	; (8003cec <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003caa:	4a12      	ldr	r2, [pc, #72]	; (8003cf4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003cac:	4910      	ldr	r1, [pc, #64]	; (8003cf0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003cae:	4812      	ldr	r0, [pc, #72]	; (8003cf8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8003cb0:	f7ff fe80 	bl	80039b4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d113      	bne.n	8003ce2 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d10e      	bne.n	8003ce2 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8003cc4:	480c      	ldr	r0, [pc, #48]	; (8003cf8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8003cc6:	f7fe fd55 	bl	8002774 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8003cca:	480c      	ldr	r0, [pc, #48]	; (8003cfc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8003ccc:	f7ff ff8c 	bl	8003be8 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 8003cd0:	4808      	ldr	r0, [pc, #32]	; (8003cf4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003cd2:	f7ff ffab 	bl	8003c2c <_ZN8touchgfx8LCD24bppD1Ev>
static STM32DMA dma;
 8003cd6:	4806      	ldr	r0, [pc, #24]	; (8003cf0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003cd8:	f7fe ff3e 	bl	8002b58 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 8003cdc:	4803      	ldr	r0, [pc, #12]	; (8003cec <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003cde:	f7fe fa05 	bl	80020ec <_ZN20STM32TouchControllerD1Ev>
}
 8003ce2:	bf00      	nop
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	2400095c 	.word	0x2400095c
 8003cf0:	24000960 	.word	0x24000960
 8003cf4:	24001700 	.word	0x24001700
 8003cf8:	24001768 	.word	0x24001768
 8003cfc:	2400000c 	.word	0x2400000c

08003d00 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	4a05      	ldr	r2, [pc, #20]	; (8003d20 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	601a      	str	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7ff fb37 	bl	8003384 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	08028a40 	.word	0x08028a40

08003d24 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f7ff ffe7 	bl	8003d00 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8003d32:	2110      	movs	r1, #16
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f022 feae 	bl	8026a96 <_ZdlPvj>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3708      	adds	r7, #8
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8003d4c:	2301      	movs	r3, #1
    }
 8003d4e:	4618      	mov	r0, r3
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr

08003d5a <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8003d5a:	b480      	push	{r7}
 8003d5c:	b083      	sub	sp, #12
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8003d62:	230c      	movs	r3, #12
    }
 8003d64:	4618      	mov	r0, r3
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	460b      	mov	r3, r1
 8003d7a:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8003d7c:	887a      	ldrh	r2, [r7, #2]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	4413      	add	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	3308      	adds	r3, #8
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	4413      	add	r3, r2
    }
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	460b      	mov	r3, r1
 8003da2:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8003da4:	887a      	ldrh	r2, [r7, #2]
 8003da6:	4613      	mov	r3, r2
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	4413      	add	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	3308      	adds	r3, #8
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	4413      	add	r3, r2
    }
 8003db4:	4618      	mov	r0, r3
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8003dc8:	2301      	movs	r3, #1
    }
 8003dca:	4618      	mov	r0, r3
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8003dd6:	b480      	push	{r7}
 8003dd8:	b083      	sub	sp, #12
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8003dde:	23e0      	movs	r3, #224	; 0xe0
    }
 8003de0:	4618      	mov	r0, r3
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	460b      	mov	r3, r1
 8003df6:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003df8:	887a      	ldrh	r2, [r7, #2]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	00db      	lsls	r3, r3, #3
 8003dfe:	1a9b      	subs	r3, r3, r2
 8003e00:	015b      	lsls	r3, r3, #5
 8003e02:	3308      	adds	r3, #8
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	4413      	add	r3, r2
    }
 8003e08:	4618      	mov	r0, r3
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003e20:	887a      	ldrh	r2, [r7, #2]
 8003e22:	4613      	mov	r3, r2
 8003e24:	00db      	lsls	r3, r3, #3
 8003e26:	1a9b      	subs	r3, r3, r2
 8003e28:	015b      	lsls	r3, r3, #5
 8003e2a:	3308      	adds	r3, #8
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	4413      	add	r3, r2
    }
 8003e30:	4618      	mov	r0, r3
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8003e44:	2301      	movs	r3, #1
    }
 8003e46:	4618      	mov	r0, r3
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr

08003e52 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8003e52:	b480      	push	{r7}
 8003e54:	b083      	sub	sp, #12
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8003e5a:	2310      	movs	r3, #16
    }
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	460b      	mov	r3, r1
 8003e72:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003e74:	887b      	ldrh	r3, [r7, #2]
 8003e76:	011b      	lsls	r3, r3, #4
 8003e78:	3308      	adds	r3, #8
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	4413      	add	r3, r2
    }
 8003e7e:	4618      	mov	r0, r3
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8003e8a:	b480      	push	{r7}
 8003e8c:	b083      	sub	sp, #12
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
 8003e92:	460b      	mov	r3, r1
 8003e94:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003e96:	887b      	ldrh	r3, [r7, #2]
 8003e98:	011b      	lsls	r3, r3, #4
 8003e9a:	3308      	adds	r3, #8
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	4413      	add	r3, r2
    }
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	68d2      	ldr	r2, [r2, #12]
 8003ebc:	1052      	asrs	r2, r2, #1
 8003ebe:	1899      	adds	r1, r3, r2
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d102      	bne.n	8003ed2 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	e00a      	b.n	8003ee8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	68d2      	ldr	r2, [r2, #12]
 8003eda:	1052      	asrs	r2, r2, #1
 8003edc:	4413      	add	r3, r2
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	6892      	ldr	r2, [r2, #8]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4608      	mov	r0, r1
 8003eea:	4798      	blx	r3
    }
 8003eec:	bf00      	nop
 8003eee:	3708      	adds	r7, #8
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d010      	beq.n	8003f26 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d107      	bne.n	8003f1c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	f003 0301 	and.w	r3, r3, #1
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d101      	bne.n	8003f1c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e000      	b.n	8003f1e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d001      	beq.n	8003f26 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8003f22:	2301      	movs	r3, #1
 8003f24:	e000      	b.n	8003f28 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 8003f26:	2300      	movs	r3, #0
    }
 8003f28:	4618      	mov	r0, r3
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <_GLOBAL__sub_I_touchgfx_init>:
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003f3c:	2001      	movs	r0, #1
 8003f3e:	f7ff fe97 	bl	8003c70 <_Z41__static_initialization_and_destruction_0ii>
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <_GLOBAL__sub_D_touchgfx_init>:
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003f4c:	2000      	movs	r0, #0
 8003f4e:	f7ff fe8f 	bl	8003c70 <_Z41__static_initialization_and_destruction_0ii>
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	3320      	adds	r3, #32
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	4798      	blx	r3
    }
 8003f68:	bf00      	nop
 8003f6a:	3708      	adds	r7, #8
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8003f7e:	3301      	adds	r3, #1
 8003f80:	b2da      	uxtb	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
    }
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <__NVIC_EnableIRQ>:
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003f9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	db0b      	blt.n	8003fbe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fa6:	88fb      	ldrh	r3, [r7, #6]
 8003fa8:	f003 021f 	and.w	r2, r3, #31
 8003fac:	4907      	ldr	r1, [pc, #28]	; (8003fcc <__NVIC_EnableIRQ+0x38>)
 8003fae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fb2:	095b      	lsrs	r3, r3, #5
 8003fb4:	2001      	movs	r0, #1
 8003fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8003fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003fbe:	bf00      	nop
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	e000e100 	.word	0xe000e100

08003fd0 <__NVIC_DisableIRQ>:
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003fda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	db12      	blt.n	8004008 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fe2:	88fb      	ldrh	r3, [r7, #6]
 8003fe4:	f003 021f 	and.w	r2, r3, #31
 8003fe8:	490a      	ldr	r1, [pc, #40]	; (8004014 <__NVIC_DisableIRQ+0x44>)
 8003fea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fee:	095b      	lsrs	r3, r3, #5
 8003ff0:	2001      	movs	r0, #1
 8003ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ff6:	3320      	adds	r3, #32
 8003ff8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003ffc:	f3bf 8f4f 	dsb	sy
}
 8004000:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004002:	f3bf 8f6f 	isb	sy
}
 8004006:	bf00      	nop
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr
 8004014:	e000e100 	.word	0xe000e100

08004018 <__NVIC_SetPriority>:
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	4603      	mov	r3, r0
 8004020:	6039      	str	r1, [r7, #0]
 8004022:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004024:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004028:	2b00      	cmp	r3, #0
 800402a:	db0a      	blt.n	8004042 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	b2da      	uxtb	r2, r3
 8004030:	490c      	ldr	r1, [pc, #48]	; (8004064 <__NVIC_SetPriority+0x4c>)
 8004032:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004036:	0112      	lsls	r2, r2, #4
 8004038:	b2d2      	uxtb	r2, r2
 800403a:	440b      	add	r3, r1
 800403c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004040:	e00a      	b.n	8004058 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	b2da      	uxtb	r2, r3
 8004046:	4908      	ldr	r1, [pc, #32]	; (8004068 <__NVIC_SetPriority+0x50>)
 8004048:	88fb      	ldrh	r3, [r7, #6]
 800404a:	f003 030f 	and.w	r3, r3, #15
 800404e:	3b04      	subs	r3, #4
 8004050:	0112      	lsls	r2, r2, #4
 8004052:	b2d2      	uxtb	r2, r2
 8004054:	440b      	add	r3, r1
 8004056:	761a      	strb	r2, [r3, #24]
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr
 8004064:	e000e100 	.word	0xe000e100
 8004068:	e000ed00 	.word	0xe000ed00

0800406c <_ZN20TouchGFXGeneratedHAL10initializeEv>:
static uint16_t lcd_int_active_line;
static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 800406c:	b5b0      	push	{r4, r5, r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4618      	mov	r0, r3
 8004078:	f013 fdfb 	bl	8017c72 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 800407c:	687d      	ldr	r5, [r7, #4]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	3364      	adds	r3, #100	; 0x64
 8004084:	681c      	ldr	r4, [r3, #0]
 8004086:	f016 fd6f 	bl	801ab68 <_ZN8touchgfx11Application11getInstanceEv>
 800408a:	4603      	mov	r3, r0
 800408c:	4619      	mov	r1, r3
 800408e:	4628      	mov	r0, r5
 8004090:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	3388      	adds	r3, #136	; 0x88
 800409a:	681c      	ldr	r4, [r3, #0]
 800409c:	4a03      	ldr	r2, [pc, #12]	; (80040ac <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 800409e:	2300      	movs	r3, #0
 80040a0:	4903      	ldr	r1, [pc, #12]	; (80040b0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 80040a2:	47a0      	blx	r4
}
 80040a4:	bf00      	nop
 80040a6:	3708      	adds	r7, #8
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bdb0      	pop	{r4, r5, r7, pc}
 80040ac:	2409fa00 	.word	0x2409fa00
 80040b0:	24040000 	.word	0x24040000

080040b4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 80040bc:	2109      	movs	r1, #9
 80040be:	205a      	movs	r0, #90	; 0x5a
 80040c0:	f7ff ffaa 	bl	8004018 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 80040c4:	2109      	movs	r1, #9
 80040c6:	2058      	movs	r0, #88	; 0x58
 80040c8:	f7ff ffa6 	bl	8004018 <__NVIC_SetPriority>
}
 80040cc:	bf00      	nop
 80040ce:	3708      	adds	r7, #8
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 80040dc:	205a      	movs	r0, #90	; 0x5a
 80040de:	f7ff ff59 	bl	8003f94 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 80040e2:	2058      	movs	r0, #88	; 0x58
 80040e4:	f7ff ff56 	bl	8003f94 <__NVIC_EnableIRQ>
}
 80040e8:	bf00      	nop
 80040ea:	3708      	adds	r7, #8
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 80040f8:	205a      	movs	r0, #90	; 0x5a
 80040fa:	f7ff ff69 	bl	8003fd0 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 80040fe:	2058      	movs	r0, #88	; 0x58
 8004100:	f7ff ff66 	bl	8003fd0 <__NVIC_DisableIRQ>
}
 8004104:	bf00      	nop
 8004106:	3708      	adds	r7, #8
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8004114:	4b11      	ldr	r3, [pc, #68]	; (800415c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	b29b      	uxth	r3, r3
 800411a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800411e:	b29b      	uxth	r3, r3
 8004120:	3b01      	subs	r3, #1
 8004122:	b29a      	uxth	r2, r3
 8004124:	4b0e      	ldr	r3, [pc, #56]	; (8004160 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8004126:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8004128:	4b0c      	ldr	r3, [pc, #48]	; (800415c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	b29b      	uxth	r3, r3
 800412e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004132:	b29b      	uxth	r3, r3
 8004134:	3b01      	subs	r3, #1
 8004136:	b29a      	uxth	r2, r3
 8004138:	4b0a      	ldr	r3, [pc, #40]	; (8004164 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 800413a:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 800413c:	4b08      	ldr	r3, [pc, #32]	; (8004160 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800413e:	881a      	ldrh	r2, [r3, #0]
 8004140:	4b06      	ldr	r3, [pc, #24]	; (800415c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8004142:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8004144:	4b05      	ldr	r3, [pc, #20]	; (800415c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8004146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004148:	4a04      	ldr	r2, [pc, #16]	; (800415c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800414a:	f043 0301 	orr.w	r3, r3, #1
 800414e:	6353      	str	r3, [r2, #52]	; 0x34
}
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr
 800415c:	50001000 	.word	0x50001000
 8004160:	240017e4 	.word	0x240017e4
 8004164:	240017e6 	.word	0x240017e6

08004168 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4618      	mov	r0, r3
 8004174:	f013 fd64 	bl	8017c40 <_ZN8touchgfx3HAL10beginFrameEv>
 8004178:	4603      	mov	r3, r0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3708      	adds	r7, #8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8004182:	b580      	push	{r7, lr}
 8004184:	b082      	sub	sp, #8
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4618      	mov	r0, r3
 800418e:	f013 fd63 	bl	8017c58 <_ZN8touchgfx3HAL8endFrameEv>
}
 8004192:	bf00      	nop
 8004194:	3708      	adds	r7, #8
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
	...

0800419c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 80041a4:	4b03      	ldr	r3, [pc, #12]	; (80041b4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 80041a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr
 80041b4:	50001084 	.word	0x50001084

080041b8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80041c2:	4a06      	ldr	r2, [pc, #24]	; (80041dc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80041c8:	4b05      	ldr	r3, [pc, #20]	; (80041e0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 80041ca:	2201      	movs	r2, #1
 80041cc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80041ce:	bf00      	nop
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	50001084 	.word	0x50001084
 80041e0:	50001000 	.word	0x50001000

080041e4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6839      	ldr	r1, [r7, #0]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f013 fcee 	bl	8017bd4 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 80041f8:	bf00      	nop
 80041fa:	3708      	adds	r7, #8
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
 800420c:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	68b9      	ldr	r1, [r7, #8]
 8004216:	f013 fe4e 	bl	8017eb6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 800421a:	4603      	mov	r3, r0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3710      	adds	r7, #16
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 8004224:	b480      	push	{r7}
 8004226:	b087      	sub	sp, #28
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 800422c:	4b25      	ldr	r3, [pc, #148]	; (80042c4 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 800422e:	695b      	ldr	r3, [r3, #20]
 8004230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004234:	2b00      	cmp	r3, #0
 8004236:	bf14      	ite	ne
 8004238:	2301      	movne	r3, #1
 800423a:	2300      	moveq	r3, #0
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d03a      	beq.n	80042b8 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x94>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8004242:	4b20      	ldr	r3, [pc, #128]	; (80042c4 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8004244:	2200      	movs	r2, #0
 8004246:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800424a:	f3bf 8f4f 	dsb	sy
}
 800424e:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8004250:	4b1c      	ldr	r3, [pc, #112]	; (80042c4 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8004252:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004256:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	0b5b      	lsrs	r3, r3, #13
 800425c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004260:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	08db      	lsrs	r3, r3, #3
 8004266:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800426a:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	015a      	lsls	r2, r3, #5
 8004270:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8004274:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800427a:	4912      	ldr	r1, [pc, #72]	; (80042c4 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 800427c:	4313      	orrs	r3, r2
 800427e:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	1e5a      	subs	r2, r3, #1
 8004286:	60fa      	str	r2, [r7, #12]
 8004288:	2b00      	cmp	r3, #0
 800428a:	bf14      	ite	ne
 800428c:	2301      	movne	r3, #1
 800428e:	2300      	moveq	r3, #0
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1ea      	bne.n	800426c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x48>
    } while(sets-- != 0U);
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1e5a      	subs	r2, r3, #1
 800429a:	613a      	str	r2, [r7, #16]
 800429c:	2b00      	cmp	r3, #0
 800429e:	bf14      	ite	ne
 80042a0:	2301      	movne	r3, #1
 80042a2:	2300      	moveq	r3, #0
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1db      	bne.n	8004262 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 80042aa:	f3bf 8f4f 	dsb	sy
}
 80042ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80042b0:	f3bf 8f6f 	isb	sy
}
 80042b4:	bf00      	nop
}
 80042b6:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 80042b8:	bf00      	nop
 80042ba:	371c      	adds	r7, #28
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	e000ed00 	.word	0xe000ed00

080042c8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 80042c8:	b480      	push	{r7}
 80042ca:	b087      	sub	sp, #28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80042d0:	4b25      	ldr	r3, [pc, #148]	; (8004368 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	bf14      	ite	ne
 80042dc:	2301      	movne	r3, #1
 80042de:	2300      	moveq	r3, #0
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d03a      	beq.n	800435c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x94>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80042e6:	4b20      	ldr	r3, [pc, #128]	; (8004368 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80042ee:	f3bf 8f4f 	dsb	sy
}
 80042f2:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 80042f4:	4b1c      	ldr	r3, [pc, #112]	; (8004368 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 80042f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042fa:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	0b5b      	lsrs	r3, r3, #13
 8004300:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004304:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	08db      	lsrs	r3, r3, #3
 800430a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800430e:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	015a      	lsls	r2, r3, #5
 8004314:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8004318:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800431e:	4912      	ldr	r1, [pc, #72]	; (8004368 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 8004320:	4313      	orrs	r3, r2
 8004322:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	1e5a      	subs	r2, r3, #1
 800432a:	60fa      	str	r2, [r7, #12]
 800432c:	2b00      	cmp	r3, #0
 800432e:	bf14      	ite	ne
 8004330:	2301      	movne	r3, #1
 8004332:	2300      	moveq	r3, #0
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1ea      	bne.n	8004310 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    } while(sets-- != 0U);
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	1e5a      	subs	r2, r3, #1
 800433e:	613a      	str	r2, [r7, #16]
 8004340:	2b00      	cmp	r3, #0
 8004342:	bf14      	ite	ne
 8004344:	2301      	movne	r3, #1
 8004346:	2300      	moveq	r3, #0
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1db      	bne.n	8004306 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 800434e:	f3bf 8f4f 	dsb	sy
}
 8004352:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004354:	f3bf 8f6f 	isb	sy
}
 8004358:	bf00      	nop
}
 800435a:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 800435c:	bf00      	nop
 800435e:	371c      	adds	r7, #28
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr
 8004368:	e000ed00 	.word	0xe000ed00

0800436c <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
        if (!HAL::getInstance())
 8004374:	f7fe fb8c 	bl	8002a90 <_ZN8touchgfx3HAL11getInstanceEv>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	bf0c      	ite	eq
 800437e:	2301      	moveq	r3, #1
 8004380:	2300      	movne	r3, #0
 8004382:	b2db      	uxtb	r3, r3
 8004384:	2b00      	cmp	r3, #0
 8004386:	d132      	bne.n	80043ee <HAL_LTDC_LineEventCallback+0x82>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8004388:	4b1b      	ldr	r3, [pc, #108]	; (80043f8 <HAL_LTDC_LineEventCallback+0x8c>)
 800438a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438c:	4a1b      	ldr	r2, [pc, #108]	; (80043fc <HAL_LTDC_LineEventCallback+0x90>)
 800438e:	8812      	ldrh	r2, [r2, #0]
 8004390:	4293      	cmp	r3, r2
 8004392:	bf0c      	ite	eq
 8004394:	2301      	moveq	r3, #1
 8004396:	2300      	movne	r3, #0
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d017      	beq.n	80043ce <HAL_LTDC_LineEventCallback+0x62>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 800439e:	4b18      	ldr	r3, [pc, #96]	; (8004400 <HAL_LTDC_LineEventCallback+0x94>)
 80043a0:	881b      	ldrh	r3, [r3, #0]
 80043a2:	4619      	mov	r1, r3
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f006 fca1 	bl	800acec <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 80043aa:	f7fe fb71 	bl	8002a90 <_ZN8touchgfx3HAL11getInstanceEv>
 80043ae:	4603      	mov	r3, r0
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7ff fddd 	bl	8003f70 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 80043b6:	f7fe fa65 	bl	8002884 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 80043ba:	f7fe fb69 	bl	8002a90 <_ZN8touchgfx3HAL11getInstanceEv>
 80043be:	4603      	mov	r3, r0
 80043c0:	4618      	mov	r0, r3
 80043c2:	f014 f9a3 	bl	801870c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 80043c6:	2000      	movs	r0, #0
 80043c8:	f7fd feba 	bl	8002140 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80043cc:	e010      	b.n	80043f0 <HAL_LTDC_LineEventCallback+0x84>
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 80043ce:	4b0b      	ldr	r3, [pc, #44]	; (80043fc <HAL_LTDC_LineEventCallback+0x90>)
 80043d0:	881b      	ldrh	r3, [r3, #0]
 80043d2:	4619      	mov	r1, r3
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f006 fc89 	bl	800acec <HAL_LTDC_ProgramLineEvent>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
 80043da:	f7fe fb59 	bl	8002a90 <_ZN8touchgfx3HAL11getInstanceEv>
 80043de:	4603      	mov	r3, r0
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7ff fdb7 	bl	8003f54 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
            GPIO::clear(GPIO::VSYNC_FREQ);
 80043e6:	2000      	movs	r0, #0
 80043e8:	f7fd fee4 	bl	80021b4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80043ec:	e000      	b.n	80043f0 <HAL_LTDC_LineEventCallback+0x84>
            return;
 80043ee:	bf00      	nop
        }
    }
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	50001000 	.word	0x50001000
 80043fc:	240017e4 	.word	0x240017e4
 8004400:	240017e6 	.word	0x240017e6

08004404 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	460b      	mov	r3, r1
 800440e:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8004410:	887b      	ldrh	r3, [r7, #2]
 8004412:	2b02      	cmp	r3, #2
 8004414:	d010      	beq.n	8004438 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 8004416:	2b02      	cmp	r3, #2
 8004418:	dc13      	bgt.n	8004442 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 800441a:	2b00      	cmp	r3, #0
 800441c:	d002      	beq.n	8004424 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 800441e:	2b01      	cmp	r3, #1
 8004420:	d005      	beq.n	800442e <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 8004422:	e00e      	b.n	8004442 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8004424:	f001 fd0a 	bl	8005e3c <_ZN17TypedTextDatabase8getFontsEv>
 8004428:	4603      	mov	r3, r0
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	e00a      	b.n	8004444 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800442e:	f001 fd05 	bl	8005e3c <_ZN17TypedTextDatabase8getFontsEv>
 8004432:	4603      	mov	r3, r0
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	e005      	b.n	8004444 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8004438:	f001 fd00 	bl	8005e3c <_ZN17TypedTextDatabase8getFontsEv>
 800443c:	4603      	mov	r3, r0
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	e000      	b.n	8004444 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 8004442:	2300      	movs	r3, #0
    }
}
 8004444:	4618      	mov	r0, r3
 8004446:	3708      	adds	r7, #8
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 800444c:	b480      	push	{r7}
 800444e:	af00      	add	r7, sp, #0
    return bitmap_database;
 8004450:	4b02      	ldr	r3, [pc, #8]	; (800445c <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8004452:	4618      	mov	r0, r3
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr
 800445c:	08028bf4 	.word	0x08028bf4

08004460 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8004460:	b480      	push	{r7}
 8004462:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8004464:	2301      	movs	r3, #1
}
 8004466:	4618      	mov	r0, r3
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
    {
 8004478:	4a04      	ldr	r2, [pc, #16]	; (800448c <_ZN8touchgfx4FontD1Ev+0x1c>)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	601a      	str	r2, [r3, #0]
    }
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4618      	mov	r0, r3
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr
 800448c:	08028d98 	.word	0x08028d98

08004490 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
    }
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f7ff ffe9 	bl	8004470 <_ZN8touchgfx4FontD1Ev>
 800449e:	2114      	movs	r1, #20
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f022 faf8 	bl	8026a96 <_ZdlPvj>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4618      	mov	r0, r3
 80044aa:	3708      	adds	r7, #8
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 80044b0:	b590      	push	{r4, r7, lr}
 80044b2:	b087      	sub	sp, #28
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	460b      	mov	r3, r1
 80044ba:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 80044bc:	887b      	ldrh	r3, [r7, #2]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 80044c2:	2300      	movs	r3, #0
 80044c4:	e010      	b.n	80044e8 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 80044c6:	2300      	movs	r3, #0
 80044c8:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 80044ca:	2300      	movs	r3, #0
 80044cc:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	3308      	adds	r3, #8
 80044d4:	681c      	ldr	r4, [r3, #0]
 80044d6:	f107 030f 	add.w	r3, r7, #15
 80044da:	f107 0210 	add.w	r2, r7, #16
 80044de:	8879      	ldrh	r1, [r7, #2]
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	47a0      	blx	r4
 80044e4:	6178      	str	r0, [r7, #20]
        return glyph;
 80044e6:	697b      	ldr	r3, [r7, #20]
    }
 80044e8:	4618      	mov	r0, r3
 80044ea:	371c      	adds	r7, #28
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd90      	pop	{r4, r7, pc}

080044f0 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	89db      	ldrh	r3, [r3, #14]
    }
 80044fc:	4618      	mov	r0, r3
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	8a1b      	ldrh	r3, [r3, #16]
    }
 8004514:	4618      	mov	r0, r3
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The baseline position.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	88db      	ldrh	r3, [r3, #6]
    }
 800452c:	4618      	mov	r0, r3
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	889b      	ldrh	r3, [r3, #4]
    }
 8004544:	4618      	mov	r0, r3
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	7a9b      	ldrb	r3, [r3, #10]
 800455c:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8004560:	b2db      	uxtb	r3, r3
    }
 8004562:	4618      	mov	r0, r3
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr

0800456e <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800456e:	b480      	push	{r7}
 8004570:	b083      	sub	sp, #12
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	7a9b      	ldrb	r3, [r3, #10]
 800457a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800457e:	b2db      	uxtb	r3, r3
    }
 8004580:	4618      	mov	r0, r3
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	4a05      	ldr	r2, [pc, #20]	; (80045ac <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	601a      	str	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4618      	mov	r0, r3
 800459e:	f7ff ff67 	bl	8004470 <_ZN8touchgfx4FontD1Ev>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4618      	mov	r0, r3
 80045a6:	3708      	adds	r7, #8
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	0802935c 	.word	0x0802935c

080045b0 <_ZN8touchgfx9ConstFontD0Ev>:
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f7ff ffe7 	bl	800458c <_ZN8touchgfx9ConstFontD1Ev>
 80045be:	211c      	movs	r1, #28
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f022 fa68 	bl	8026a96 <_ZdlPvj>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4618      	mov	r0, r3
 80045ca:	3708      	adds	r7, #8
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	4a05      	ldr	r2, [pc, #20]	; (80045f0 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	601a      	str	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7ff ffd3 	bl	800458c <_ZN8touchgfx9ConstFontD1Ev>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4618      	mov	r0, r3
 80045ea:	3708      	adds	r7, #8
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	08028c68 	.word	0x08028c68

080045f4 <_ZN8touchgfx13GeneratedFontD0Ev>:
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f7ff ffe7 	bl	80045d0 <_ZN8touchgfx13GeneratedFontD1Ev>
 8004602:	212c      	movs	r1, #44	; 0x2c
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f022 fa46 	bl	8026a96 <_ZdlPvj>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4618      	mov	r0, r3
 800460e:	3708      	adds	r7, #8
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <_ZN8touchgfx9TypedTextD1Ev>:
    virtual ~TypedText()
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
    {
 800461c:	4a04      	ldr	r2, [pc, #16]	; (8004630 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	601a      	str	r2, [r3, #0]
    }
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4618      	mov	r0, r3
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr
 8004630:	08028c10 	.word	0x08028c10

08004634 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
    }
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f7ff ffe9 	bl	8004614 <_ZN8touchgfx9TypedTextD1Ev>
 8004642:	2108      	movs	r1, #8
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f022 fa26 	bl	8026a96 <_ZdlPvj>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4618      	mov	r0, r3
 800464e:	3708      	adds	r7, #8
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	4618      	mov	r0, r3
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
        timerWidgets.add(w);
    }

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
    {
        timerWidgets.clear();
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	3304      	adds	r3, #4
 8004678:	4618      	mov	r0, r3
 800467a:	f016 fa9a 	bl	801abb2 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    }
 800467e:	bf00      	nop
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
	...

08004688 <_ZN8touchgfx3HAL3lcdEv>:
    static LCD& lcd()
 8004688:	b480      	push	{r7}
 800468a:	af00      	add	r7, sp, #0
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800468c:	4b0b      	ldr	r3, [pc, #44]	; (80046bc <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004694:	2b00      	cmp	r3, #0
 8004696:	d008      	beq.n	80046aa <_ZN8touchgfx3HAL3lcdEv+0x22>
 8004698:	4b08      	ldr	r3, [pc, #32]	; (80046bc <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d003      	beq.n	80046aa <_ZN8touchgfx3HAL3lcdEv+0x22>
            return *instance->auxiliaryLCD;
 80046a2:	4b06      	ldr	r3, [pc, #24]	; (80046bc <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046a8:	e002      	b.n	80046b0 <_ZN8touchgfx3HAL3lcdEv+0x28>
        return instance->lcdRef;
 80046aa:	4b04      	ldr	r3, [pc, #16]	; (80046bc <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	689b      	ldr	r3, [r3, #8]
    }
 80046b0:	4618      	mov	r0, r3
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	24006d38 	.word	0x24006d38

080046c0 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 80046c8:	4a07      	ldr	r2, [pc, #28]	; (80046e8 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	601a      	str	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	605a      	str	r2, [r3, #4]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	721a      	strb	r2, [r3, #8]
    {
    }
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4618      	mov	r0, r3
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr
 80046e8:	08028c44 	.word	0x08028c44

080046ec <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
    {
 80046f4:	4a04      	ldr	r2, [pc, #16]	; (8004708 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	601a      	str	r2, [r3, #0]
    }
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4618      	mov	r0, r3
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr
 8004708:	08028c44 	.word	0x08028c44

0800470c <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
    }
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f7ff ffe9 	bl	80046ec <_ZN8touchgfx10TransitionD1Ev>
 800471a:	210c      	movs	r1, #12
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f022 f9ba 	bl	8026a96 <_ZdlPvj>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4618      	mov	r0, r3
 8004726:	3708      	adds	r7, #8
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
    {
    }
 8004734:	bf00      	nop
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
    {
    }
 8004748:	bf00      	nop
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
    {
    }
 800475c:	bf00      	nop
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 8004770:	f016 f9fa 	bl	801ab68 <_ZN8touchgfx11Application11getInstanceEv>
 8004774:	4603      	mov	r3, r0
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	323c      	adds	r2, #60	; 0x3c
 800477a:	6812      	ldr	r2, [r2, #0]
 800477c:	4618      	mov	r0, r3
 800477e:	4790      	blx	r2
    }
 8004780:	bf00      	nop
 8004782:	3708      	adds	r7, #8
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	683a      	ldr	r2, [r7, #0]
 8004796:	605a      	str	r2, [r3, #4]
    }
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <_ZN8touchgfx14MVPApplicationC1Ev>:
    MVPApplication()
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
          pendingScreenTransitionCallback(0)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f016 faa0 	bl	801acf4 <_ZN8touchgfx11ApplicationC1Ev>
 80047b4:	4a09      	ldr	r2, [pc, #36]	; (80047dc <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	601a      	str	r2, [r3, #0]
        : currentPresenter(0),
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
          pendingScreenTransitionCallback(0)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
        instance = this;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a04      	ldr	r2, [pc, #16]	; (80047e0 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 80047ce:	6013      	str	r3, [r2, #0]
    }
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4618      	mov	r0, r3
 80047d4:	3708      	adds	r7, #8
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	08028a58 	.word	0x08028a58
 80047e0:	24006d84 	.word	0x24006d84

080047e4 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	683a      	ldr	r2, [r7, #0]
 80047f2:	601a      	str	r2, [r3, #0]
    }
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	721a      	strb	r2, [r3, #8]
    }
 800480e:	bf00      	nop
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr

0800481a <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800481a:	b480      	push	{r7}
 800481c:	b083      	sub	sp, #12
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
 8004822:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	683a      	ldr	r2, [r7, #0]
 8004828:	605a      	str	r2, [r3, #4]
    }
 800482a:	bf00      	nop
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
	...

08004838 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	4618      	mov	r0, r3
 8004848:	f7ff ffac 	bl	80047a4 <_ZN8touchgfx14MVPApplicationC1Ev>
 800484c:	4a16      	ldr	r2, [pc, #88]	; (80048a8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x70>)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	601a      	str	r2, [r3, #0]
      transitionCallback(),
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004858:	4618      	mov	r0, r3
 800485a:	f000 f8a5 	bl	80049a8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
      frontendHeap(heap),
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
      model(m)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800486e:	f7fe f90f 	bl	8002a90 <_ZN8touchgfx3HAL11getInstanceEv>
 8004872:	4603      	mov	r3, r0
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	3208      	adds	r2, #8
 8004878:	6812      	ldr	r2, [r2, #0]
 800487a:	2100      	movs	r1, #0
 800487c:	4618      	mov	r0, r3
 800487e:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 8004880:	2000      	movs	r0, #0
 8004882:	f001 fa63 	bl	8005d4c <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8004886:	f7ff feff 	bl	8004688 <_ZN8touchgfx3HAL3lcdEv>
 800488a:	4603      	mov	r3, r0
 800488c:	4618      	mov	r0, r3
 800488e:	f01d f822 	bl	80218d6 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 8004892:	f7ff fef9 	bl	8004688 <_ZN8touchgfx3HAL3lcdEv>
 8004896:	4603      	mov	r3, r0
 8004898:	4618      	mov	r0, r3
 800489a:	f01d f893 	bl	80219c4 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>
}
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	4618      	mov	r0, r3
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	080289ec 	.word	0x080289ec

080048ac <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4618      	mov	r0, r3
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	683a      	ldr	r2, [r7, #0]
 80048d2:	4611      	mov	r1, r2
 80048d4:	4618      	mov	r0, r3
 80048d6:	f7ff ffe9 	bl	80048ac <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	685a      	ldr	r2, [r3, #4]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	605a      	str	r2, [r3, #4]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	683a      	ldr	r2, [r7, #0]
 80048e6:	3308      	adds	r3, #8
 80048e8:	3208      	adds	r2, #8
 80048ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80048ee:	e883 0003 	stmia.w	r3, {r0, r1}
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4618      	mov	r0, r3
 80048f6:	3708      	adds	r7, #8
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 80048fc:	b590      	push	{r4, r7, lr}
 80048fe:	b089      	sub	sp, #36	; 0x24
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 800490a:	4b10      	ldr	r3, [pc, #64]	; (800494c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 800490c:	61bb      	str	r3, [r7, #24]
 800490e:	2300      	movs	r3, #0
 8004910:	61fb      	str	r3, [r7, #28]
 8004912:	f107 0008 	add.w	r0, r7, #8
 8004916:	f107 0318 	add.w	r3, r7, #24
 800491a:	cb0c      	ldmia	r3, {r2, r3}
 800491c:	6879      	ldr	r1, [r7, #4]
 800491e:	f000 f85f 	bl	80049e0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8004922:	f107 0308 	add.w	r3, r7, #8
 8004926:	4619      	mov	r1, r3
 8004928:	4620      	mov	r0, r4
 800492a:	f7ff ffcb 	bl	80048c4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800492e:	f107 0308 	add.w	r3, r7, #8
 8004932:	4618      	mov	r0, r3
 8004934:	f7ff f9e4 	bl	8003d00 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 8004944:	bf00      	nop
 8004946:	3724      	adds	r7, #36	; 0x24
 8004948:	46bd      	mov	sp, r7
 800494a:	bd90      	pop	{r4, r7, pc}
 800494c:	08004951 	.word	0x08004951

08004950 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af02      	add	r7, sp, #8
 8004956:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f503 719e 	add.w	r1, r3, #316	; 0x13c
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004964:	461a      	mov	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800496c:	9300      	str	r3, [sp, #0]
 800496e:	4b04      	ldr	r3, [pc, #16]	; (8004980 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 8004970:	4804      	ldr	r0, [pc, #16]	; (8004984 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 8004972:	f000 f867 	bl	8004a44 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8004976:	bf00      	nop
 8004978:	3708      	adds	r7, #8
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	24006d78 	.word	0x24006d78
 8004984:	24006d74 	.word	0x24006d74

08004988 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	4a04      	ldr	r2, [pc, #16]	; (80049a4 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	601a      	str	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4618      	mov	r0, r3
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr
 80049a4:	08028aac 	.word	0x08028aac

080049a8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
    Callback()
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7ff ffe8 	bl	8004988 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 80049b8:	4a08      	ldr	r2, [pc, #32]	; (80049dc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	601a      	str	r2, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	605a      	str	r2, [r3, #4]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	609a      	str	r2, [r3, #8]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	60da      	str	r2, [r3, #12]
    }
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4618      	mov	r0, r3
 80049d4:	3708      	adds	r7, #8
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	08028a40 	.word	0x08028a40

080049e0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	4639      	mov	r1, r7
 80049ec:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7ff ffc8 	bl	8004988 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 80049f8:	4a08      	ldr	r2, [pc, #32]	; (8004a1c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	601a      	str	r2, [r3, #0]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	68ba      	ldr	r2, [r7, #8]
 8004a02:	605a      	str	r2, [r3, #4]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	3308      	adds	r3, #8
 8004a08:	463a      	mov	r2, r7
 8004a0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004a0e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	4618      	mov	r0, r3
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	08028a40 	.word	0x08028a40

08004a20 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7ff fe48 	bl	80046c0 <_ZN8touchgfx10TransitionC1Ev>
 8004a30:	4a03      	ldr	r2, [pc, #12]	; (8004a40 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	601a      	str	r2, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3708      	adds	r7, #8
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	08028c20 	.word	0x08028c20

08004a44 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8004a44:	b590      	push	{r4, r7, lr}
 8004a46:	b08f      	sub	sp, #60	; 0x3c
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	607a      	str	r2, [r7, #4]
 8004a50:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	689a      	ldr	r2, [r3, #8]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	3320      	adds	r3, #32
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4610      	mov	r0, r2
 8004a62:	4798      	blx	r3
 8004a64:	4603      	mov	r3, r0
 8004a66:	2bdf      	cmp	r3, #223	; 0xdf
 8004a68:	d805      	bhi.n	8004a76 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 8004a6a:	4b7d      	ldr	r3, [pc, #500]	; (8004c60 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x21c>)
 8004a6c:	4a7d      	ldr	r2, [pc, #500]	; (8004c64 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 8004a6e:	21a3      	movs	r1, #163	; 0xa3
 8004a70:	487d      	ldr	r0, [pc, #500]	; (8004c68 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004a72:	f022 f83f 	bl	8026af4 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	3320      	adds	r3, #32
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4610      	mov	r0, r2
 8004a86:	4798      	blx	r3
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b0f      	cmp	r3, #15
 8004a8c:	d805      	bhi.n	8004a9a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x56>
 8004a8e:	4b77      	ldr	r3, [pc, #476]	; (8004c6c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004a90:	4a74      	ldr	r2, [pc, #464]	; (8004c64 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 8004a92:	21a4      	movs	r1, #164	; 0xa4
 8004a94:	4874      	ldr	r0, [pc, #464]	; (8004c68 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004a96:	f022 f82d 	bl	8026af4 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	68da      	ldr	r2, [r3, #12]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	3320      	adds	r3, #32
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4610      	mov	r0, r2
 8004aaa:	4798      	blx	r3
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b0b      	cmp	r3, #11
 8004ab0:	d805      	bhi.n	8004abe <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7a>
 8004ab2:	4b6f      	ldr	r3, [pc, #444]	; (8004c70 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004ab4:	4a6b      	ldr	r2, [pc, #428]	; (8004c64 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 8004ab6:	21a5      	movs	r1, #165	; 0xa5
 8004ab8:	486b      	ldr	r0, [pc, #428]	; (8004c68 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004aba:	f022 f81b 	bl	8026af4 <__assert_func>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8004aca:	f016 f84d 	bl	801ab68 <_ZN8touchgfx11Application11getInstanceEv>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7ff fdcb 	bl	800466c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8004ad6:	6a3b      	ldr	r3, [r7, #32]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d008      	beq.n	8004af0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xac>
        (*currentTrans)->tearDown();
 8004ade:	6a3b      	ldr	r3, [r7, #32]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	6a3b      	ldr	r3, [r7, #32]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	330c      	adds	r3, #12
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4610      	mov	r0, r2
 8004aee:	4798      	blx	r3
    if (*currentTrans)
 8004af0:	6a3b      	ldr	r3, [r7, #32]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d007      	beq.n	8004b08 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc4>
        (*currentTrans)->~Transition();
 8004af8:	6a3b      	ldr	r3, [r7, #32]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	6a3b      	ldr	r3, [r7, #32]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4610      	mov	r0, r2
 8004b06:	4798      	blx	r3
    if (*currentScreen)
 8004b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d008      	beq.n	8004b22 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xde>
        (*currentScreen)->tearDownScreen();
 8004b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	3314      	adds	r3, #20
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4610      	mov	r0, r2
 8004b20:	4798      	blx	r3
    if (*currentPresenter)
 8004b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d008      	beq.n	8004b3c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xf8>
        (*currentPresenter)->deactivate();
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	3304      	adds	r3, #4
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4610      	mov	r0, r2
 8004b3a:	4798      	blx	r3
    if (*currentScreen)
 8004b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d007      	beq.n	8004b54 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x110>
        (*currentScreen)->~Screen();
 8004b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4610      	mov	r0, r2
 8004b52:	4798      	blx	r3
    if (*currentPresenter)
 8004b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d008      	beq.n	8004b6e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12a>
        (*currentPresenter)->~Presenter();
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	3308      	adds	r3, #8
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4610      	mov	r0, r2
 8004b6c:	4798      	blx	r3
}
 8004b6e:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	2100      	movs	r1, #0
 8004b76:	4618      	mov	r0, r3
 8004b78:	f000 f87c 	bl	8004c74 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	4619      	mov	r1, r3
 8004b80:	200c      	movs	r0, #12
 8004b82:	f7ff fd67 	bl	8004654 <_ZnwjPv>
 8004b86:	4604      	mov	r4, r0
 8004b88:	4620      	mov	r0, r4
 8004b8a:	f7ff ff49 	bl	8004a20 <_ZN8touchgfx12NoTransitionC1Ev>
 8004b8e:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	2100      	movs	r1, #0
 8004b96:	4618      	mov	r0, r3
 8004b98:	f000 f87f 	bl	8004c9a <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	20e0      	movs	r0, #224	; 0xe0
 8004ba2:	f7ff fd57 	bl	8004654 <_ZnwjPv>
 8004ba6:	4604      	mov	r4, r0
 8004ba8:	4620      	mov	r0, r4
 8004baa:	f001 faab 	bl	8006104 <_ZN11Screen1ViewC1Ev>
 8004bae:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	2100      	movs	r1, #0
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f000 f882 	bl	8004cc0 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	2010      	movs	r0, #16
 8004bc2:	f7ff fd47 	bl	8004654 <_ZnwjPv>
 8004bc6:	4604      	mov	r4, r0
 8004bc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004bca:	4620      	mov	r0, r4
 8004bcc:	f001 fa44 	bl	8006058 <_ZN16Screen1PresenterC1ER11Screen1View>
 8004bd0:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bd6:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bdc:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004be2:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8004be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d002      	beq.n	8004bf0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ac>
 8004bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bec:	3304      	adds	r3, #4
 8004bee:	e000      	b.n	8004bf2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ae>
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004bf6:	f7ff fdf5 	bl	80047e4 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8004bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bfc:	3304      	adds	r3, #4
 8004bfe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004c00:	4618      	mov	r0, r3
 8004c02:	f7ff fe0a 	bl	800481a <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8004c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f000 f86b 	bl	8004ce6 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 8004c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c12:	61fb      	str	r3, [r7, #28]
 8004c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c16:	61bb      	str	r3, [r7, #24]
 8004c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c1a:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	330c      	adds	r3, #12
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	69f8      	ldr	r0, [r7, #28]
 8004c26:	4798      	blx	r3
    newPresenter->activate();
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	69b8      	ldr	r0, [r7, #24]
 8004c30:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8004c32:	6979      	ldr	r1, [r7, #20]
 8004c34:	69f8      	ldr	r0, [r7, #28]
 8004c36:	f017 fc5b 	bl	801c4f0 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	3310      	adds	r3, #16
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	6978      	ldr	r0, [r7, #20]
 8004c44:	4798      	blx	r3
    newTransition->invalidate();
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	3314      	adds	r3, #20
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	6978      	ldr	r0, [r7, #20]
 8004c50:	4798      	blx	r3
}
 8004c52:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 8004c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	373c      	adds	r7, #60	; 0x3c
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd90      	pop	{r4, r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	080280ac 	.word	0x080280ac
 8004c64:	0802813c 	.word	0x0802813c
 8004c68:	08028240 	.word	0x08028240
 8004c6c:	08028288 	.word	0x08028288
 8004c70:	0802832c 	.word	0x0802832c

08004c74 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	3324      	adds	r3, #36	; 0x24
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	887a      	ldrh	r2, [r7, #2]
 8004c8a:	4611      	mov	r1, r2
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	4798      	blx	r3
 8004c90:	4603      	mov	r3, r0
    }
 8004c92:	4618      	mov	r0, r3
 8004c94:	3708      	adds	r7, #8
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 8004c9a:	b580      	push	{r7, lr}
 8004c9c:	b082      	sub	sp, #8
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	3324      	adds	r3, #36	; 0x24
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	887a      	ldrh	r2, [r7, #2]
 8004cb0:	4611      	mov	r1, r2
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	4798      	blx	r3
 8004cb6:	4603      	mov	r3, r0
    }
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3708      	adds	r7, #8
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	460b      	mov	r3, r1
 8004cca:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	3324      	adds	r3, #36	; 0x24
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	887a      	ldrh	r2, [r7, #2]
 8004cd6:	4611      	mov	r1, r2
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	4798      	blx	r3
 8004cdc:	4603      	mov	r3, r0
    }
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3708      	adds	r7, #8
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 8004ce6:	b480      	push	{r7}
 8004ce8:	b083      	sub	sp, #12
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
 8004cee:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	683a      	ldr	r2, [r7, #0]
 8004cf4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8004cf6:	bf00      	nop
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
	...

08004d04 <_ZN8touchgfx12NoTransitionD1Ev>:
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	4a05      	ldr	r2, [pc, #20]	; (8004d24 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	601a      	str	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7ff fce9 	bl	80046ec <_ZN8touchgfx10TransitionD1Ev>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3708      	adds	r7, #8
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	08028c20 	.word	0x08028c20

08004d28 <_ZN8touchgfx12NoTransitionD0Ev>:
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f7ff ffe7 	bl	8004d04 <_ZN8touchgfx12NoTransitionD1Ev>
 8004d36:	210c      	movs	r1, #12
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f021 feac 	bl	8026a96 <_ZdlPvj>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4618      	mov	r0, r3
 8004d42:	3708      	adds	r7, #8
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 8004d54:	4618      	mov	r0, r3
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b08e      	sub	sp, #56	; 0x38
 8004d7c:	af0a      	add	r7, sp, #40	; 0x28
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	4611      	mov	r1, r2
 8004d84:	461a      	mov	r2, r3
 8004d86:	460b      	mov	r3, r1
 8004d88:	80fb      	strh	r3, [r7, #6]
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	88b9      	ldrh	r1, [r7, #4]
 8004d92:	88fa      	ldrh	r2, [r7, #6]
 8004d94:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004d98:	9308      	str	r3, [sp, #32]
 8004d9a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004d9c:	9307      	str	r3, [sp, #28]
 8004d9e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004da2:	9306      	str	r3, [sp, #24]
 8004da4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004da8:	9305      	str	r3, [sp, #20]
 8004daa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004dae:	9304      	str	r3, [sp, #16]
 8004db0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004db4:	9303      	str	r3, [sp, #12]
 8004db6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004dba:	9302      	str	r3, [sp, #8]
 8004dbc:	7f3b      	ldrb	r3, [r7, #28]
 8004dbe:	9301      	str	r3, [sp, #4]
 8004dc0:	8b3b      	ldrh	r3, [r7, #24]
 8004dc2:	9300      	str	r3, [sp, #0]
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	68b9      	ldr	r1, [r7, #8]
 8004dc8:	f016 fff4 	bl	801bdb4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8004dcc:	4a09      	ldr	r2, [pc, #36]	; (8004df4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	601a      	str	r2, [r3, #0]
      glyphData(glyphDataInternalFlash),
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dd6:	61da      	str	r2, [r3, #28]
      kerningData(kerningList),
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ddc:	621a      	str	r2, [r3, #32]
      gsubTable(gsubData),
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004de2:	625a      	str	r2, [r3, #36]	; 0x24
      arabicTable(formsTable)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004de8:	629a      	str	r2, [r3, #40]	; 0x28
{
}
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	4618      	mov	r0, r3
 8004dee:	3710      	adds	r7, #16
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	08028c68 	.word	0x08028c68

08004df8 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	69db      	ldr	r3, [r3, #28]
 8004e06:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	889b      	ldrh	r3, [r3, #4]
 8004e0c:	0adb      	lsrs	r3, r3, #11
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	4413      	add	r3, r2
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4413      	add	r3, r2
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3714      	adds	r7, #20
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr

08004e2a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8004e2a:	b480      	push	{r7}
 8004e2c:	b089      	sub	sp, #36	; 0x24
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	60f8      	str	r0, [r7, #12]
 8004e32:	460b      	mov	r3, r1
 8004e34:	607a      	str	r2, [r7, #4]
 8004e36:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d003      	beq.n	8004e46 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	7b1b      	ldrb	r3, [r3, #12]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 8004e46:	2300      	movs	r3, #0
 8004e48:	e031      	b.n	8004eae <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6a1a      	ldr	r2, [r3, #32]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	7b5b      	ldrb	r3, [r3, #13]
 8004e56:	021b      	lsls	r3, r3, #8
 8004e58:	b21b      	sxth	r3, r3
 8004e5a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e5e:	b219      	sxth	r1, r3
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	7adb      	ldrb	r3, [r3, #11]
 8004e64:	b21b      	sxth	r3, r3
 8004e66:	430b      	orrs	r3, r1
 8004e68:	b21b      	sxth	r3, r3
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	4413      	add	r3, r2
 8004e70:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	7b1b      	ldrb	r3, [r3, #12]
 8004e76:	837b      	strh	r3, [r7, #26]
 8004e78:	e013      	b.n	8004ea2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x78>
    {
        if (prevChar == kerndata->unicodePrevChar)
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	881b      	ldrh	r3, [r3, #0]
 8004e7e:	897a      	ldrh	r2, [r7, #10]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d103      	bne.n	8004e8c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x62>
        {
            return kerndata->distance;
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8004e8a:	e010      	b.n	8004eae <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
        }
        if (prevChar < kerndata->unicodePrevChar)
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	881b      	ldrh	r3, [r3, #0]
 8004e90:	897a      	ldrh	r2, [r7, #10]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d309      	bcc.n	8004eaa <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8004e96:	8b7b      	ldrh	r3, [r7, #26]
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	837b      	strh	r3, [r7, #26]
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	3304      	adds	r3, #4
 8004ea0:	61fb      	str	r3, [r7, #28]
 8004ea2:	8b7b      	ldrh	r3, [r7, #26]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1e8      	bne.n	8004e7a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x50>
 8004ea8:	e000      	b.n	8004eac <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        {
            break;
 8004eaa:	bf00      	nop
        }
    }
    return 0;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3724      	adds	r7, #36	; 0x24
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr

08004eba <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 8004eba:	b480      	push	{r7}
 8004ebc:	b083      	sub	sp, #12
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
 8004ec2:	6039      	str	r1, [r7, #0]
        : color(col)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	683a      	ldr	r2, [r7, #0]
 8004ec8:	601a      	str	r2, [r3, #0]
    }
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4618      	mov	r0, r3
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <_ZN8touchgfx4RectC1Essss>:
     * @param  rectX      The x coordinate.
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	4608      	mov	r0, r1
 8004ee2:	4611      	mov	r1, r2
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	817b      	strh	r3, [r7, #10]
 8004eea:	460b      	mov	r3, r1
 8004eec:	813b      	strh	r3, [r7, #8]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	80fb      	strh	r3, [r7, #6]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	897a      	ldrh	r2, [r7, #10]
 8004ef6:	801a      	strh	r2, [r3, #0]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	893a      	ldrh	r2, [r7, #8]
 8004efc:	805a      	strh	r2, [r3, #2]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	88fa      	ldrh	r2, [r7, #6]
 8004f02:	809a      	strh	r2, [r3, #4]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	8b3a      	ldrh	r2, [r7, #24]
 8004f08:	80da      	strh	r2, [r3, #6]
    {
    }
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3714      	adds	r7, #20
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 8004f20:	4a14      	ldr	r2, [pc, #80]	; (8004f74 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	601a      	str	r2, [r3, #0]
        : rect(),
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	3304      	adds	r3, #4
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7fe f8f8 	bl	8003120 <_ZN8touchgfx4RectC1Ev>
          cachedVisibleRect(),
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	330c      	adds	r3, #12
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7fe f8f3 	bl	8003120 <_ZN8touchgfx4RectC1Ev>
          parent(0),
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	615a      	str	r2, [r3, #20]
          nextSibling(0),
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	619a      	str	r2, [r3, #24]
          nextDrawChainElement(0),
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	61da      	str	r2, [r3, #28]
          cachedAbsX(0),
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	841a      	strh	r2, [r3, #32]
          cachedAbsY(0),
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	845a      	strh	r2, [r3, #34]	; 0x22
          touchable(false),
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          visible(true)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	080292f4 	.word	0x080292f4

08004f78 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
    {
 8004f80:	4a04      	ldr	r2, [pc, #16]	; (8004f94 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	601a      	str	r2, [r3, #0]
    }
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr
 8004f94:	080292f4 	.word	0x080292f4

08004f98 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
    }
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f7ff ffe9 	bl	8004f78 <_ZN8touchgfx8DrawableD1Ev>
 8004fa6:	2128      	movs	r1, #40	; 0x28
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f021 fd74 	bl	8026a96 <_ZdlPvj>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3708      	adds	r7, #8
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d005      	beq.n	8004fd6 <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	3314      	adds	r3, #20
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	4798      	blx	r3
        }
    }
 8004fd6:	bf00      	nop
 8004fd8:	3708      	adds	r7, #8
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 8004fde:	b480      	push	{r7}
 8004fe0:	b083      	sub	sp, #12
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8004fe6:	2300      	movs	r3, #0
    }
 8004fe8:	4618      	mov	r0, r3
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	4608      	mov	r0, r1
 8004ffe:	4611      	mov	r1, r2
 8005000:	461a      	mov	r2, r3
 8005002:	4603      	mov	r3, r0
 8005004:	817b      	strh	r3, [r7, #10]
 8005006:	460b      	mov	r3, r1
 8005008:	813b      	strh	r3, [r7, #8]
 800500a:	4613      	mov	r3, r2
 800500c:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800500e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005012:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005016:	4619      	mov	r1, r3
 8005018:	68f8      	ldr	r0, [r7, #12]
 800501a:	f000 f82a 	bl	8005072 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 800501e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8005022:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005026:	4619      	mov	r1, r3
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f000 f87e 	bl	800512a <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 800502e:	bf00      	nop
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 8005036:	b480      	push	{r7}
 8005038:	b083      	sub	sp, #12
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
 800503e:	460b      	mov	r3, r1
 8005040:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	887a      	ldrh	r2, [r7, #2]
 8005046:	809a      	strh	r2, [r3, #4]
    }
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	460b      	mov	r3, r1
 800505e:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	887a      	ldrh	r2, [r7, #2]
 8005064:	80da      	strh	r2, [r3, #6]
    }
 8005066:	bf00      	nop
 8005068:	370c      	adds	r7, #12
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr

08005072 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 8005072:	b580      	push	{r7, lr}
 8005074:	b082      	sub	sp, #8
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
 800507a:	460b      	mov	r3, r1
 800507c:	807b      	strh	r3, [r7, #2]
 800507e:	4613      	mov	r3, r2
 8005080:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	3330      	adds	r3, #48	; 0x30
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800508e:	4611      	mov	r1, r2
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	4798      	blx	r3
        setY(y);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	3334      	adds	r3, #52	; 0x34
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f9b7 2000 	ldrsh.w	r2, [r7]
 80050a0:	4611      	mov	r1, r2
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	4798      	blx	r3
    }
 80050a6:	bf00      	nop
 80050a8:	3708      	adds	r7, #8
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}

080050ae <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 80050ae:	b480      	push	{r7}
 80050b0:	b083      	sub	sp, #12
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
 80050b6:	460b      	mov	r3, r1
 80050b8:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	887a      	ldrh	r2, [r7, #2]
 80050be:	811a      	strh	r2, [r3, #8]
    }
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	460b      	mov	r3, r1
 80050d6:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	887a      	ldrh	r2, [r7, #2]
 80050dc:	815a      	strh	r2, [r3, #10]
    }
 80050de:	bf00      	nop
 80050e0:	370c      	adds	r7, #12
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr

080050ea <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 80050ea:	b480      	push	{r7}
 80050ec:	b083      	sub	sp, #12
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
    {
    }
 80050f2:	bf00      	nop
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80050fe:	b480      	push	{r7}
 8005100:	b083      	sub	sp, #12
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
 8005106:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800511e:	bf00      	nop
 8005120:	370c      	adds	r7, #12
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr

0800512a <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 800512a:	b580      	push	{r7, lr}
 800512c:	b082      	sub	sp, #8
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
 8005132:	460b      	mov	r3, r1
 8005134:	807b      	strh	r3, [r7, #2]
 8005136:	4613      	mov	r3, r2
 8005138:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	3338      	adds	r3, #56	; 0x38
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005146:	4611      	mov	r1, r2
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	4798      	blx	r3
        setHeight(height);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	333c      	adds	r3, #60	; 0x3c
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005158:	4611      	mov	r1, r2
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	4798      	blx	r3
    }
 800515e:	bf00      	nop
 8005160:	3708      	adds	r7, #8
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8005166:	b480      	push	{r7}
 8005168:	b083      	sub	sp, #12
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
 800516e:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
    {
    }
 8005184:	bf00      	nop
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800519e:	4618      	mov	r0, r3
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr

080051aa <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 80051aa:	b480      	push	{r7}
 80051ac:	b083      	sub	sp, #12
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 80051b8:	4618      	mov	r0, r3
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	460b      	mov	r3, r1
 80051ce:	807b      	strh	r3, [r7, #2]
 80051d0:	4613      	mov	r3, r2
 80051d2:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	3354      	adds	r3, #84	; 0x54
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	8879      	ldrh	r1, [r7, #2]
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80051e4:	b292      	uxth	r2, r2
 80051e6:	1a8a      	subs	r2, r1, r2
 80051e8:	b292      	uxth	r2, r2
 80051ea:	b210      	sxth	r0, r2
 80051ec:	8839      	ldrh	r1, [r7, #0]
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80051f4:	b292      	uxth	r2, r2
 80051f6:	1a8a      	subs	r2, r1, r2
 80051f8:	b292      	uxth	r2, r2
 80051fa:	b212      	sxth	r2, r2
 80051fc:	4601      	mov	r1, r0
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	4798      	blx	r3
    }
 8005202:	bf00      	nop
 8005204:	3708      	adds	r7, #8
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}

0800520a <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800520a:	b480      	push	{r7}
 800520c:	b083      	sub	sp, #12
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005218:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005220:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005228:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800522a:	bf00      	nop
 800522c:	370c      	adds	r7, #12
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr

08005236 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8005236:	b580      	push	{r7, lr}
 8005238:	b084      	sub	sp, #16
 800523a:	af00      	add	r7, sp, #0
 800523c:	60f8      	str	r0, [r7, #12]
 800523e:	60b9      	str	r1, [r7, #8]
 8005240:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 8005242:	68f8      	ldr	r0, [r7, #12]
 8005244:	f7ff ffe1 	bl	800520a <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	601a      	str	r2, [r3, #0]
    }
 8005256:	bf00      	nop
 8005258:	3710      	adds	r7, #16
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
	...

08005260 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
    {
 8005268:	4a06      	ldr	r2, [pc, #24]	; (8005284 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	601a      	str	r2, [r3, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	3304      	adds	r3, #4
 8005272:	4618      	mov	r0, r3
 8005274:	f000 fab4 	bl	80057e0 <_ZN8touchgfx9ContainerD1Ev>
    }
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4618      	mov	r0, r3
 800527c:	3708      	adds	r7, #8
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	080293f8 	.word	0x080293f8

08005288 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
    }
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f7ff ffe5 	bl	8005260 <_ZN8touchgfx6ScreenD1Ev>
 8005296:	213c      	movs	r1, #60	; 0x3c
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f021 fbfc 	bl	8026a96 <_ZdlPvj>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4618      	mov	r0, r3
 80052a2:	3708      	adds	r7, #8
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
    {
    }
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
    {
    }
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
    {
    }
 80052d8:	bf00      	nop
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
    {
    }
 80052ec:	bf00      	nop
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	460b      	mov	r3, r1
 8005302:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	3304      	adds	r3, #4
 800531e:	6839      	ldr	r1, [r7, #0]
 8005320:	4618      	mov	r0, r3
 8005322:	f012 f9c3 	bl	80176ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8005326:	bf00      	nop
 8005328:	3708      	adds	r7, #8
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 800532e:	b580      	push	{r7, lr}
 8005330:	b084      	sub	sp, #16
 8005332:	af00      	add	r7, sp, #0
 8005334:	60f8      	str	r0, [r7, #12]
 8005336:	607b      	str	r3, [r7, #4]
 8005338:	460b      	mov	r3, r1
 800533a:	817b      	strh	r3, [r7, #10]
 800533c:	4613      	mov	r3, r2
 800533e:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	4618      	mov	r0, r3
 8005344:	f7ff ff24 	bl	8005190 <_ZNK8touchgfx8Drawable9isVisibleEv>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d008      	beq.n	8005360 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	4618      	mov	r0, r3
 8005352:	f7ff ff2a 	bl	80051aa <_ZNK8touchgfx8Drawable11isTouchableEv>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d001      	beq.n	8005360 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800535c:	2301      	movs	r3, #1
 800535e:	e000      	b.n	8005362 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8005360:	2300      	movs	r3, #0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d002      	beq.n	800536c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	601a      	str	r2, [r3, #0]
        }
    }
 800536c:	bf00      	nop
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4618      	mov	r0, r3
 8005380:	f7ff fdca 	bl	8004f18 <_ZN8touchgfx8DrawableC1Ev>
 8005384:	4a03      	ldr	r2, [pc, #12]	; (8005394 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	601a      	str	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4618      	mov	r0, r3
 800538e:	3708      	adds	r7, #8
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}
 8005394:	08028d30 	.word	0x08028d30

08005398 <_ZN8touchgfx6WidgetD1Ev>:
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	4a05      	ldr	r2, [pc, #20]	; (80053b8 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	601a      	str	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4618      	mov	r0, r3
 80053aa:	f7ff fde5 	bl	8004f78 <_ZN8touchgfx8DrawableD1Ev>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4618      	mov	r0, r3
 80053b2:	3708      	adds	r7, #8
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	08028d30 	.word	0x08028d30

080053bc <_ZN8touchgfx6WidgetD0Ev>:
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f7ff ffe7 	bl	8005398 <_ZN8touchgfx6WidgetD1Ev>
 80053ca:	2128      	movs	r1, #40	; 0x28
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f021 fb62 	bl	8026a96 <_ZdlPvj>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4618      	mov	r0, r3
 80053d6:	3708      	adds	r7, #8
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4618      	mov	r0, r3
 80053e8:	2326      	movs	r3, #38	; 0x26
 80053ea:	461a      	mov	r2, r3
 80053ec:	2100      	movs	r1, #0
 80053ee:	f021 fd86 	bl	8026efe <memset>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4618      	mov	r0, r3
 80053f6:	f7ff ffbd 	bl	8005374 <_ZN8touchgfx6WidgetC1Ev>
 80053fa:	4a09      	ldr	r2, [pc, #36]	; (8005420 <_ZN8touchgfx3BoxC1Ev+0x44>)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	601a      	str	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	22ff      	movs	r2, #255	; 0xff
 8005404:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	3328      	adds	r3, #40	; 0x28
 800540c:	2100      	movs	r1, #0
 800540e:	4618      	mov	r0, r3
 8005410:	f7ff fd53 	bl	8004eba <_ZN8touchgfx9colortypeC1Em>
    {
    }
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4618      	mov	r0, r3
 8005418:	3708      	adds	r7, #8
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	080291e0 	.word	0x080291e0

08005424 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	683a      	ldr	r2, [r7, #0]
 8005432:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8005434:	bf00      	nop
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <_ZN8touchgfx9TypedTextC1Et>:
    TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	460b      	mov	r3, r1
 800544a:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 800544c:	4a06      	ldr	r2, [pc, #24]	; (8005468 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	601a      	str	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	887a      	ldrh	r2, [r7, #2]
 8005456:	809a      	strh	r2, [r3, #4]
    }
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4618      	mov	r0, r3
 800545c:	370c      	adds	r7, #12
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	08028c10 	.word	0x08028c10

0800546c <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4618      	mov	r0, r3
 8005478:	2326      	movs	r3, #38	; 0x26
 800547a:	461a      	mov	r2, r3
 800547c:	2100      	movs	r1, #0
 800547e:	f021 fd3e 	bl	8026efe <memset>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4618      	mov	r0, r3
 8005486:	f7ff ff75 	bl	8005374 <_ZN8touchgfx6WidgetC1Ev>
 800548a:	4a16      	ldr	r2, [pc, #88]	; (80054e4 <_ZN8touchgfx8TextAreaC1Ev+0x78>)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	601a      	str	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	3328      	adds	r3, #40	; 0x28
 8005494:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005498:	4618      	mov	r0, r3
 800549a:	f7ff ffd1 	bl	8005440 <_ZN8touchgfx9TypedTextC1Et>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	3330      	adds	r3, #48	; 0x30
 80054a2:	2100      	movs	r1, #0
 80054a4:	4618      	mov	r0, r3
 80054a6:	f7ff fd08 	bl	8004eba <_ZN8touchgfx9colortypeC1Em>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	869a      	strh	r2, [r3, #52]	; 0x34
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	22ff      	movs	r2, #255	; 0xff
 80054b4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	333c      	adds	r3, #60	; 0x3c
 80054d4:	4618      	mov	r0, r3
 80054d6:	f000 f807 	bl	80054e8 <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    {
    }
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4618      	mov	r0, r3
 80054de:	3708      	adds	r7, #8
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	08029150 	.word	0x08029150

080054e8 <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>:
        }

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af02      	add	r7, sp, #8
 80054ee:	6078      	str	r0, [r7, #4]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f04f 33ff 	mov.w	r3, #4294967295
 80054f6:	9300      	str	r3, [sp, #0]
 80054f8:	f04f 33ff 	mov.w	r3, #4294967295
 80054fc:	2200      	movs	r2, #0
 80054fe:	2100      	movs	r1, #0
 8005500:	f7ff fcea 	bl	8004ed8 <_ZN8touchgfx4RectC1Essss>
              text(0)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	609a      	str	r2, [r3, #8]
        {
        }
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4618      	mov	r0, r3
 800550e:	3708      	adds	r7, #8
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	4a05      	ldr	r2, [pc, #20]	; (8005534 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	601a      	str	r2, [r3, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4618      	mov	r0, r3
 8005526:	f7ff fe9b 	bl	8005260 <_ZN8touchgfx6ScreenD1Ev>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4618      	mov	r0, r3
 800552e:	3708      	adds	r7, #8
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	08028cfc 	.word	0x08028cfc

08005538 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f7ff ffe7 	bl	8005514 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 8005546:	2140      	movs	r1, #64	; 0x40
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f021 faa4 	bl	8026a96 <_ZdlPvj>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4618      	mov	r0, r3
 8005552:	3708      	adds	r7, #8
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <_ZN15Screen1ViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen1ViewBase::Screen1ViewBase()
 8005558:	b590      	push	{r4, r7, lr}
 800555a:	b095      	sub	sp, #84	; 0x54
 800555c:	af02      	add	r7, sp, #8
 800555e:	6178      	str	r0, [r7, #20]
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	4618      	mov	r0, r3
 8005564:	f000 f926 	bl	80057b4 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 8005568:	4a73      	ldr	r2, [pc, #460]	; (8005738 <_ZN15Screen1ViewBaseC1Ev+0x1e0>)
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	601a      	str	r2, [r3, #0]
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	3340      	adds	r3, #64	; 0x40
 8005572:	4618      	mov	r0, r3
 8005574:	f7ff ff32 	bl	80053dc <_ZN8touchgfx3BoxC1Ev>
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	336c      	adds	r3, #108	; 0x6c
 800557c:	4618      	mov	r0, r3
 800557e:	f7ff ff2d 	bl	80053dc <_ZN8touchgfx3BoxC1Ev>
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	3398      	adds	r3, #152	; 0x98
 8005586:	4618      	mov	r0, r3
 8005588:	f7ff ff70 	bl	800546c <_ZN8touchgfx8TextAreaC1Ev>
{
    __background.setPosition(0, 0, 480, 272);
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8005592:	f44f 7388 	mov.w	r3, #272	; 0x110
 8005596:	9300      	str	r3, [sp, #0]
 8005598:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800559c:	2200      	movs	r2, #0
 800559e:	2100      	movs	r1, #0
 80055a0:	f7ff fd28 	bl	8004ff4 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80055aa:	2300      	movs	r3, #0
 80055ac:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80055b0:	2300      	movs	r3, #0
 80055b2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80055b6:	2300      	movs	r3, #0
 80055b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80055bc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80055c0:	041b      	lsls	r3, r3, #16
 80055c2:	461a      	mov	r2, r3
 80055c4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80055c8:	021b      	lsls	r3, r3, #8
 80055ca:	431a      	orrs	r2, r3
 80055cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80055d0:	4313      	orrs	r3, r2
 80055d2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80055d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80055da:	4611      	mov	r1, r2
 80055dc:	4618      	mov	r0, r3
 80055de:	f7ff fc6c 	bl	8004eba <_ZN8touchgfx9colortypeC1Em>
 80055e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e4:	4619      	mov	r1, r3
 80055e6:	4620      	mov	r0, r4
 80055e8:	f7ff ff1c 	bl	8005424 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 80055ec:	697a      	ldr	r2, [r7, #20]
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	3340      	adds	r3, #64	; 0x40
 80055f2:	4619      	mov	r1, r3
 80055f4:	4610      	mov	r0, r2
 80055f6:	f7ff fe8b 	bl	8005310 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    background.setPosition(0, 0, 480, 272);
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8005600:	f44f 7388 	mov.w	r3, #272	; 0x110
 8005604:	9300      	str	r3, [sp, #0]
 8005606:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800560a:	2200      	movs	r2, #0
 800560c:	2100      	movs	r1, #0
 800560e:	f7ff fcf1 	bl	8004ff4 <_ZN8touchgfx8Drawable11setPositionEssss>
    background.setColor(touchgfx::Color::getColorFromRGB(16, 8, 94));
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8005618:	2310      	movs	r3, #16
 800561a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800561e:	2308      	movs	r3, #8
 8005620:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005624:	235e      	movs	r3, #94	; 0x5e
 8005626:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800562a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800562e:	041b      	lsls	r3, r3, #16
 8005630:	461a      	mov	r2, r3
 8005632:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005636:	021b      	lsls	r3, r3, #8
 8005638:	431a      	orrs	r2, r3
 800563a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800563e:	4313      	orrs	r3, r2
 8005640:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005644:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005648:	4611      	mov	r1, r2
 800564a:	4618      	mov	r0, r3
 800564c:	f7ff fc35 	bl	8004eba <_ZN8touchgfx9colortypeC1Em>
 8005650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005652:	4619      	mov	r1, r3
 8005654:	4620      	mov	r0, r4
 8005656:	f7ff fee5 	bl	8005424 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(background);
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	336c      	adds	r3, #108	; 0x6c
 8005660:	4619      	mov	r1, r3
 8005662:	4610      	mov	r0, r2
 8005664:	f7ff fe54 	bl	8005310 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    textHello.setXY(184, 116);
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	3398      	adds	r3, #152	; 0x98
 800566c:	2274      	movs	r2, #116	; 0x74
 800566e:	21b8      	movs	r1, #184	; 0xb8
 8005670:	4618      	mov	r0, r3
 8005672:	f7ff fcfe 	bl	8005072 <_ZN8touchgfx8Drawable5setXYEss>
    textHello.setColor(touchgfx::Color::getColorFromRGB(250, 247, 247));
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800567c:	23fa      	movs	r3, #250	; 0xfa
 800567e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005682:	23f7      	movs	r3, #247	; 0xf7
 8005684:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8005688:	23f7      	movs	r3, #247	; 0xf7
 800568a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800568e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005692:	041b      	lsls	r3, r3, #16
 8005694:	461a      	mov	r2, r3
 8005696:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800569a:	021b      	lsls	r3, r3, #8
 800569c:	431a      	orrs	r2, r3
 800569e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80056a2:	4313      	orrs	r3, r2
 80056a4:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80056a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056ac:	4611      	mov	r1, r2
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7ff fc03 	bl	8004eba <_ZN8touchgfx9colortypeC1Em>
 80056b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b6:	63fc      	str	r4, [r7, #60]	; 0x3c
 80056b8:	61bb      	str	r3, [r7, #24]
        color = newColor;
 80056ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056bc:	69ba      	ldr	r2, [r7, #24]
 80056be:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80056c0:	bf00      	nop
    textHello.setLinespacing(0);
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	3398      	adds	r3, #152	; 0x98
 80056c6:	647b      	str	r3, [r7, #68]	; 0x44
 80056c8:	2300      	movs	r3, #0
 80056ca:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        linespace = space;
 80056ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80056d4:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 80056d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	3384      	adds	r3, #132	; 0x84
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 80056e0:	463a      	mov	r2, r7
 80056e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80056e4:	4610      	mov	r0, r2
 80056e6:	4798      	blx	r3
 80056e8:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 80056ec:	463a      	mov	r2, r7
 80056ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80056f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 80056f4:	bf00      	nop
    textHello.setTypedText(touchgfx::TypedText(T___SINGLEUSE_GJT6));
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	f103 0498 	add.w	r4, r3, #152	; 0x98
 80056fc:	f107 031c 	add.w	r3, r7, #28
 8005700:	2100      	movs	r1, #0
 8005702:	4618      	mov	r0, r3
 8005704:	f7ff fe9c 	bl	8005440 <_ZN8touchgfx9TypedTextC1Et>
 8005708:	f107 031c 	add.w	r3, r7, #28
 800570c:	4619      	mov	r1, r3
 800570e:	4620      	mov	r0, r4
 8005710:	f013 fd12 	bl	8019138 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8005714:	f107 031c 	add.w	r3, r7, #28
 8005718:	4618      	mov	r0, r3
 800571a:	f7fe ff7b 	bl	8004614 <_ZN8touchgfx9TypedTextD1Ev>
    add(textHello);
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	3398      	adds	r3, #152	; 0x98
 8005724:	4619      	mov	r1, r3
 8005726:	4610      	mov	r0, r2
 8005728:	f7ff fdf2 	bl	8005310 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	4618      	mov	r0, r3
 8005730:	374c      	adds	r7, #76	; 0x4c
 8005732:	46bd      	mov	sp, r7
 8005734:	bd90      	pop	{r4, r7, pc}
 8005736:	bf00      	nop
 8005738:	08028cc8 	.word	0x08028cc8

0800573c <_ZN15Screen1ViewBaseD1Ev>:

Screen1ViewBase::~Screen1ViewBase()
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	4a0d      	ldr	r2, [pc, #52]	; (800577c <_ZN15Screen1ViewBaseD1Ev+0x40>)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	601a      	str	r2, [r3, #0]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	3398      	adds	r3, #152	; 0x98
 800574e:	4618      	mov	r0, r3
 8005750:	f000 f88a 	bl	8005868 <_ZN8touchgfx8TextAreaD1Ev>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	336c      	adds	r3, #108	; 0x6c
 8005758:	4618      	mov	r0, r3
 800575a:	f000 f863 	bl	8005824 <_ZN8touchgfx3BoxD1Ev>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	3340      	adds	r3, #64	; 0x40
 8005762:	4618      	mov	r0, r3
 8005764:	f000 f85e 	bl	8005824 <_ZN8touchgfx3BoxD1Ev>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4618      	mov	r0, r3
 800576c:	f7ff fed2 	bl	8005514 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
{

}
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4618      	mov	r0, r3
 8005774:	3708      	adds	r7, #8
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	08028cc8 	.word	0x08028cc8

08005780 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
}
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f7ff ffd7 	bl	800573c <_ZN15Screen1ViewBaseD1Ev>
 800578e:	21e0      	movs	r1, #224	; 0xe0
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f021 f980 	bl	8026a96 <_ZdlPvj>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4618      	mov	r0, r3
 800579a:	3708      	adds	r7, #8
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]

}
 80057a8:	bf00      	nop
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
        : presenter(0)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4618      	mov	r0, r3
 80057c0:	f016 fcea 	bl	801c198 <_ZN8touchgfx6ScreenC1Ev>
 80057c4:	4a05      	ldr	r2, [pc, #20]	; (80057dc <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	601a      	str	r2, [r3, #0]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4618      	mov	r0, r3
 80057d4:	3708      	adds	r7, #8
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	08028cfc 	.word	0x08028cfc

080057e0 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	4a05      	ldr	r2, [pc, #20]	; (8005800 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	601a      	str	r2, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4618      	mov	r0, r3
 80057f2:	f7ff fbc1 	bl	8004f78 <_ZN8touchgfx8DrawableD1Ev>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4618      	mov	r0, r3
 80057fa:	3708      	adds	r7, #8
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	08028f68 	.word	0x08028f68

08005804 <_ZN8touchgfx9ContainerD0Ev>:
 8005804:	b580      	push	{r7, lr}
 8005806:	b082      	sub	sp, #8
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f7ff ffe7 	bl	80057e0 <_ZN8touchgfx9ContainerD1Ev>
 8005812:	212c      	movs	r1, #44	; 0x2c
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f021 f93e 	bl	8026a96 <_ZdlPvj>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4618      	mov	r0, r3
 800581e:	3708      	adds	r7, #8
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	4a05      	ldr	r2, [pc, #20]	; (8005844 <_ZN8touchgfx3BoxD1Ev+0x20>)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	601a      	str	r2, [r3, #0]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4618      	mov	r0, r3
 8005836:	f7ff fdaf 	bl	8005398 <_ZN8touchgfx6WidgetD1Ev>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4618      	mov	r0, r3
 800583e:	3708      	adds	r7, #8
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	080291e0 	.word	0x080291e0

08005848 <_ZN8touchgfx3BoxD0Ev>:
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f7ff ffe7 	bl	8005824 <_ZN8touchgfx3BoxD1Ev>
 8005856:	212c      	movs	r1, #44	; 0x2c
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f021 f91c 	bl	8026a96 <_ZdlPvj>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4618      	mov	r0, r3
 8005862:	3708      	adds	r7, #8
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	4a08      	ldr	r2, [pc, #32]	; (8005894 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	601a      	str	r2, [r3, #0]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	3328      	adds	r3, #40	; 0x28
 800587a:	4618      	mov	r0, r3
 800587c:	f7fe feca 	bl	8004614 <_ZN8touchgfx9TypedTextD1Ev>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4618      	mov	r0, r3
 8005884:	f7ff fd88 	bl	8005398 <_ZN8touchgfx6WidgetD1Ev>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4618      	mov	r0, r3
 800588c:	3708      	adds	r7, #8
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	08029150 	.word	0x08029150

08005898 <_ZN8touchgfx8TextAreaD0Ev>:
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f7ff ffe1 	bl	8005868 <_ZN8touchgfx8TextAreaD1Ev>
 80058a6:	2148      	movs	r1, #72	; 0x48
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f021 f8f4 	bl	8026a96 <_ZdlPvj>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4618      	mov	r0, r3
 80058b2:	3708      	adds	r7, #8
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80058b8:	b580      	push	{r7, lr}
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	4801      	ldr	r0, [pc, #4]	; (80058c4 <__tcf_0+0xc>)
 80058be:	f7fe fe87 	bl	80045d0 <_ZN8touchgfx13GeneratedFontD1Ev>
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	240017e8 	.word	0x240017e8

080058c8 <_Z23getFont_verdana_10_4bppv>:
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b08e      	sub	sp, #56	; 0x38
 80058cc:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80058ce:	4b21      	ldr	r3, [pc, #132]	; (8005954 <_Z23getFont_verdana_10_4bppv+0x8c>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f3bf 8f5b 	dmb	ish
 80058d6:	f003 0301 	and.w	r3, r3, #1
 80058da:	2b00      	cmp	r3, #0
 80058dc:	bf0c      	ite	eq
 80058de:	2301      	moveq	r3, #1
 80058e0:	2300      	movne	r3, #0
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d030      	beq.n	800594a <_Z23getFont_verdana_10_4bppv+0x82>
 80058e8:	481a      	ldr	r0, [pc, #104]	; (8005954 <_Z23getFont_verdana_10_4bppv+0x8c>)
 80058ea:	f021 f8d6 	bl	8026a9a <__cxa_guard_acquire>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	bf14      	ite	ne
 80058f4:	2301      	movne	r3, #1
 80058f6:	2300      	moveq	r3, #0
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d025      	beq.n	800594a <_Z23getFont_verdana_10_4bppv+0x82>
 80058fe:	2300      	movs	r3, #0
 8005900:	930c      	str	r3, [sp, #48]	; 0x30
 8005902:	2300      	movs	r3, #0
 8005904:	930b      	str	r3, [sp, #44]	; 0x2c
 8005906:	2300      	movs	r3, #0
 8005908:	930a      	str	r3, [sp, #40]	; 0x28
 800590a:	233f      	movs	r3, #63	; 0x3f
 800590c:	9309      	str	r3, [sp, #36]	; 0x24
 800590e:	4b12      	ldr	r3, [pc, #72]	; (8005958 <_Z23getFont_verdana_10_4bppv+0x90>)
 8005910:	9308      	str	r3, [sp, #32]
 8005912:	4b12      	ldr	r3, [pc, #72]	; (800595c <_Z23getFont_verdana_10_4bppv+0x94>)
 8005914:	9307      	str	r3, [sp, #28]
 8005916:	2300      	movs	r3, #0
 8005918:	9306      	str	r3, [sp, #24]
 800591a:	2300      	movs	r3, #0
 800591c:	9305      	str	r3, [sp, #20]
 800591e:	2301      	movs	r3, #1
 8005920:	9304      	str	r3, [sp, #16]
 8005922:	2304      	movs	r3, #4
 8005924:	9303      	str	r3, [sp, #12]
 8005926:	2300      	movs	r3, #0
 8005928:	9302      	str	r3, [sp, #8]
 800592a:	2300      	movs	r3, #0
 800592c:	9301      	str	r3, [sp, #4]
 800592e:	230a      	movs	r3, #10
 8005930:	9300      	str	r3, [sp, #0]
 8005932:	230a      	movs	r3, #10
 8005934:	2201      	movs	r2, #1
 8005936:	490a      	ldr	r1, [pc, #40]	; (8005960 <_Z23getFont_verdana_10_4bppv+0x98>)
 8005938:	480a      	ldr	r0, [pc, #40]	; (8005964 <_Z23getFont_verdana_10_4bppv+0x9c>)
 800593a:	f7ff fa1d 	bl	8004d78 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800593e:	480a      	ldr	r0, [pc, #40]	; (8005968 <_Z23getFont_verdana_10_4bppv+0xa0>)
 8005940:	f021 f8f6 	bl	8026b30 <atexit>
 8005944:	4803      	ldr	r0, [pc, #12]	; (8005954 <_Z23getFont_verdana_10_4bppv+0x8c>)
 8005946:	f021 f8b4 	bl	8026ab2 <__cxa_guard_release>
    return verdana_10_4bpp;
 800594a:	4b06      	ldr	r3, [pc, #24]	; (8005964 <_Z23getFont_verdana_10_4bppv+0x9c>)
}
 800594c:	4618      	mov	r0, r3
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	24001814 	.word	0x24001814
 8005958:	080296c8 	.word	0x080296c8
 800595c:	080296d8 	.word	0x080296d8
 8005960:	90000364 	.word	0x90000364
 8005964:	240017e8 	.word	0x240017e8
 8005968:	080058b9 	.word	0x080058b9

0800596c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 9, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800596c:	b580      	push	{r7, lr}
 800596e:	af00      	add	r7, sp, #0
 8005970:	4801      	ldr	r0, [pc, #4]	; (8005978 <__tcf_0+0xc>)
 8005972:	f7fe fe2d 	bl	80045d0 <_ZN8touchgfx13GeneratedFontD1Ev>
 8005976:	bd80      	pop	{r7, pc}
 8005978:	24001818 	.word	0x24001818

0800597c <_Z23getFont_verdana_20_4bppv>:
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b08e      	sub	sp, #56	; 0x38
 8005980:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 9, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8005982:	4b21      	ldr	r3, [pc, #132]	; (8005a08 <_Z23getFont_verdana_20_4bppv+0x8c>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f3bf 8f5b 	dmb	ish
 800598a:	f003 0301 	and.w	r3, r3, #1
 800598e:	2b00      	cmp	r3, #0
 8005990:	bf0c      	ite	eq
 8005992:	2301      	moveq	r3, #1
 8005994:	2300      	movne	r3, #0
 8005996:	b2db      	uxtb	r3, r3
 8005998:	2b00      	cmp	r3, #0
 800599a:	d030      	beq.n	80059fe <_Z23getFont_verdana_20_4bppv+0x82>
 800599c:	481a      	ldr	r0, [pc, #104]	; (8005a08 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800599e:	f021 f87c 	bl	8026a9a <__cxa_guard_acquire>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	bf14      	ite	ne
 80059a8:	2301      	movne	r3, #1
 80059aa:	2300      	moveq	r3, #0
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d025      	beq.n	80059fe <_Z23getFont_verdana_20_4bppv+0x82>
 80059b2:	2300      	movs	r3, #0
 80059b4:	930c      	str	r3, [sp, #48]	; 0x30
 80059b6:	2300      	movs	r3, #0
 80059b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80059ba:	2300      	movs	r3, #0
 80059bc:	930a      	str	r3, [sp, #40]	; 0x28
 80059be:	233f      	movs	r3, #63	; 0x3f
 80059c0:	9309      	str	r3, [sp, #36]	; 0x24
 80059c2:	4b12      	ldr	r3, [pc, #72]	; (8005a0c <_Z23getFont_verdana_20_4bppv+0x90>)
 80059c4:	9308      	str	r3, [sp, #32]
 80059c6:	4b12      	ldr	r3, [pc, #72]	; (8005a10 <_Z23getFont_verdana_20_4bppv+0x94>)
 80059c8:	9307      	str	r3, [sp, #28]
 80059ca:	2300      	movs	r3, #0
 80059cc:	9306      	str	r3, [sp, #24]
 80059ce:	2300      	movs	r3, #0
 80059d0:	9305      	str	r3, [sp, #20]
 80059d2:	2301      	movs	r3, #1
 80059d4:	9304      	str	r3, [sp, #16]
 80059d6:	2304      	movs	r3, #4
 80059d8:	9303      	str	r3, [sp, #12]
 80059da:	2300      	movs	r3, #0
 80059dc:	9302      	str	r3, [sp, #8]
 80059de:	2300      	movs	r3, #0
 80059e0:	9301      	str	r3, [sp, #4]
 80059e2:	2314      	movs	r3, #20
 80059e4:	9300      	str	r3, [sp, #0]
 80059e6:	2314      	movs	r3, #20
 80059e8:	2209      	movs	r2, #9
 80059ea:	490a      	ldr	r1, [pc, #40]	; (8005a14 <_Z23getFont_verdana_20_4bppv+0x98>)
 80059ec:	480a      	ldr	r0, [pc, #40]	; (8005a18 <_Z23getFont_verdana_20_4bppv+0x9c>)
 80059ee:	f7ff f9c3 	bl	8004d78 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80059f2:	480a      	ldr	r0, [pc, #40]	; (8005a1c <_Z23getFont_verdana_20_4bppv+0xa0>)
 80059f4:	f021 f89c 	bl	8026b30 <atexit>
 80059f8:	4803      	ldr	r0, [pc, #12]	; (8005a08 <_Z23getFont_verdana_20_4bppv+0x8c>)
 80059fa:	f021 f85a 	bl	8026ab2 <__cxa_guard_release>
    return verdana_20_4bpp;
 80059fe:	4b06      	ldr	r3, [pc, #24]	; (8005a18 <_Z23getFont_verdana_20_4bppv+0x9c>)
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	24001844 	.word	0x24001844
 8005a0c:	080296cc 	.word	0x080296cc
 8005a10:	080296dc 	.word	0x080296dc
 8005a14:	90000374 	.word	0x90000374
 8005a18:	24001818 	.word	0x24001818
 8005a1c:	0800596d 	.word	0x0800596d

08005a20 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8005a20:	b580      	push	{r7, lr}
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	4801      	ldr	r0, [pc, #4]	; (8005a2c <__tcf_0+0xc>)
 8005a26:	f7fe fdd3 	bl	80045d0 <_ZN8touchgfx13GeneratedFontD1Ev>
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	24001848 	.word	0x24001848

08005a30 <_Z23getFont_verdana_40_4bppv>:
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b08e      	sub	sp, #56	; 0x38
 8005a34:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8005a36:	4b21      	ldr	r3, [pc, #132]	; (8005abc <_Z23getFont_verdana_40_4bppv+0x8c>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f3bf 8f5b 	dmb	ish
 8005a3e:	f003 0301 	and.w	r3, r3, #1
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	bf0c      	ite	eq
 8005a46:	2301      	moveq	r3, #1
 8005a48:	2300      	movne	r3, #0
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d030      	beq.n	8005ab2 <_Z23getFont_verdana_40_4bppv+0x82>
 8005a50:	481a      	ldr	r0, [pc, #104]	; (8005abc <_Z23getFont_verdana_40_4bppv+0x8c>)
 8005a52:	f021 f822 	bl	8026a9a <__cxa_guard_acquire>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	bf14      	ite	ne
 8005a5c:	2301      	movne	r3, #1
 8005a5e:	2300      	moveq	r3, #0
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d025      	beq.n	8005ab2 <_Z23getFont_verdana_40_4bppv+0x82>
 8005a66:	2300      	movs	r3, #0
 8005a68:	930c      	str	r3, [sp, #48]	; 0x30
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a6e:	2300      	movs	r3, #0
 8005a70:	930a      	str	r3, [sp, #40]	; 0x28
 8005a72:	233f      	movs	r3, #63	; 0x3f
 8005a74:	9309      	str	r3, [sp, #36]	; 0x24
 8005a76:	4b12      	ldr	r3, [pc, #72]	; (8005ac0 <_Z23getFont_verdana_40_4bppv+0x90>)
 8005a78:	9308      	str	r3, [sp, #32]
 8005a7a:	4b12      	ldr	r3, [pc, #72]	; (8005ac4 <_Z23getFont_verdana_40_4bppv+0x94>)
 8005a7c:	9307      	str	r3, [sp, #28]
 8005a7e:	2300      	movs	r3, #0
 8005a80:	9306      	str	r3, [sp, #24]
 8005a82:	2300      	movs	r3, #0
 8005a84:	9305      	str	r3, [sp, #20]
 8005a86:	2301      	movs	r3, #1
 8005a88:	9304      	str	r3, [sp, #16]
 8005a8a:	2304      	movs	r3, #4
 8005a8c:	9303      	str	r3, [sp, #12]
 8005a8e:	2300      	movs	r3, #0
 8005a90:	9302      	str	r3, [sp, #8]
 8005a92:	2300      	movs	r3, #0
 8005a94:	9301      	str	r3, [sp, #4]
 8005a96:	2328      	movs	r3, #40	; 0x28
 8005a98:	9300      	str	r3, [sp, #0]
 8005a9a:	2328      	movs	r3, #40	; 0x28
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	490a      	ldr	r1, [pc, #40]	; (8005ac8 <_Z23getFont_verdana_40_4bppv+0x98>)
 8005aa0:	480a      	ldr	r0, [pc, #40]	; (8005acc <_Z23getFont_verdana_40_4bppv+0x9c>)
 8005aa2:	f7ff f969 	bl	8004d78 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8005aa6:	480a      	ldr	r0, [pc, #40]	; (8005ad0 <_Z23getFont_verdana_40_4bppv+0xa0>)
 8005aa8:	f021 f842 	bl	8026b30 <atexit>
 8005aac:	4803      	ldr	r0, [pc, #12]	; (8005abc <_Z23getFont_verdana_40_4bppv+0x8c>)
 8005aae:	f021 f800 	bl	8026ab2 <__cxa_guard_release>
    return verdana_40_4bpp;
 8005ab2:	4b06      	ldr	r3, [pc, #24]	; (8005acc <_Z23getFont_verdana_40_4bppv+0x9c>)
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	24001874 	.word	0x24001874
 8005ac0:	080296d4 	.word	0x080296d4
 8005ac4:	080296e0 	.word	0x080296e0
 8005ac8:	900003f4 	.word	0x900003f4
 8005acc:	24001848 	.word	0x24001848
 8005ad0:	08005a21 	.word	0x08005a21

08005ad4 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	460b      	mov	r3, r1
 8005ade:	607a      	str	r2, [r7, #4]
 8005ae0:	817b      	strh	r3, [r7, #10]
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
 8005ae2:	2300      	movs	r3, #0
    }
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3714      	adds	r7, #20
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8005af8:	2300      	movs	r3, #0
    }
 8005afa:	4618      	mov	r0, r3
 8005afc:	370c      	adds	r7, #12
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr

08005b06 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8005b06:	b480      	push	{r7}
 8005b08:	b083      	sub	sp, #12
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8005b0e:	2300      	movs	r3, #0
    }
 8005b10:	4618      	mov	r0, r3
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	4613      	mov	r3, r2
 8005b28:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 8005b2a:	4a07      	ldr	r2, [pc, #28]	; (8005b48 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6013      	str	r3, [r2, #0]
        fonts = f;
 8005b30:	4a06      	ldr	r2, [pc, #24]	; (8005b4c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8005b36:	4a06      	ldr	r2, [pc, #24]	; (8005b50 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8005b38:	88fb      	ldrh	r3, [r7, #6]
 8005b3a:	8013      	strh	r3, [r2, #0]
    }
 8005b3c:	bf00      	nop
 8005b3e:	3714      	adds	r7, #20
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr
 8005b48:	24006d88 	.word	0x24006d88
 8005b4c:	24006d90 	.word	0x24006d90
 8005b50:	24006d8c 	.word	0x24006d8c

08005b54 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8005b54:	b40e      	push	{r1, r2, r3}
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b085      	sub	sp, #20
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8005b5e:	f107 0320 	add.w	r3, r7, #32
 8005b62:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	69fa      	ldr	r2, [r7, #28]
 8005b68:	2100      	movs	r1, #0
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f015 ff4a 	bl	801ba04 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8005b70:	4603      	mov	r3, r0
 8005b72:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8005b74:	89fb      	ldrh	r3, [r7, #14]
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3714      	adds	r7, #20
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b80:	b003      	add	sp, #12
 8005b82:	4770      	bx	lr

08005b84 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8005b84:	b40c      	push	{r2, r3}
 8005b86:	b580      	push	{r7, lr}
 8005b88:	b084      	sub	sp, #16
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
 8005b8e:	460b      	mov	r3, r1
 8005b90:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8005b92:	f107 031c 	add.w	r3, r7, #28
 8005b96:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8005b98:	78f9      	ldrb	r1, [r7, #3]
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	69ba      	ldr	r2, [r7, #24]
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f015 ff30 	bl	801ba04 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8005ba8:	89fb      	ldrh	r3, [r7, #14]
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3710      	adds	r7, #16
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005bb4:	b002      	add	sp, #8
 8005bb6:	4770      	bx	lr

08005bb8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b08a      	sub	sp, #40	; 0x28
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d016      	beq.n	8005bfa <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	3322      	adds	r3, #34	; 0x22
 8005bd0:	627b      	str	r3, [r7, #36]	; 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8005bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd4:	8adb      	ldrh	r3, [r3, #22]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d105      	bne.n	8005be6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8005bda:	4b43      	ldr	r3, [pc, #268]	; (8005ce8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8005bdc:	4a43      	ldr	r2, [pc, #268]	; (8005cec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8005bde:	21c5      	movs	r1, #197	; 0xc5
 8005be0:	4843      	ldr	r0, [pc, #268]	; (8005cf0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8005be2:	f020 ff87 	bl	8026af4 <__assert_func>
            return buffer[pos];
 8005be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be8:	8a9b      	ldrh	r3, [r3, #20]
 8005bea:	461a      	mov	r2, r3
 8005bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bee:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d001      	beq.n	8005bfa <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e000      	b.n	8005bfc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d06a      	beq.n	8005cd6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f017 f9a5 	bl	801cf50 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	3322      	adds	r3, #34	; 0x22
 8005c0a:	623b      	str	r3, [r7, #32]
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8005c10:	6a3b      	ldr	r3, [r7, #32]
 8005c12:	8adb      	ldrh	r3, [r3, #22]
 8005c14:	8bfa      	ldrh	r2, [r7, #30]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d305      	bcc.n	8005c26 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8005c1a:	4b36      	ldr	r3, [pc, #216]	; (8005cf4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8005c1c:	4a36      	ldr	r2, [pc, #216]	; (8005cf8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8005c1e:	21cb      	movs	r1, #203	; 0xcb
 8005c20:	4833      	ldr	r0, [pc, #204]	; (8005cf0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8005c22:	f020 ff67 	bl	8026af4 <__assert_func>
            const uint16_t index = pos + offset;
 8005c26:	6a3b      	ldr	r3, [r7, #32]
 8005c28:	8a9a      	ldrh	r2, [r3, #20]
 8005c2a:	8bfb      	ldrh	r3, [r7, #30]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8005c30:	8bbb      	ldrh	r3, [r7, #28]
 8005c32:	2b09      	cmp	r3, #9
 8005c34:	d801      	bhi.n	8005c3a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8005c36:	8bbb      	ldrh	r3, [r7, #28]
 8005c38:	e001      	b.n	8005c3e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8005c3a:	8bbb      	ldrh	r3, [r7, #28]
 8005c3c:	3b0a      	subs	r3, #10
 8005c3e:	6a3a      	ldr	r2, [r7, #32]
 8005c40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c44:	f640 123f 	movw	r2, #2367	; 0x93f
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	bf0c      	ite	eq
 8005c4c:	2301      	moveq	r3, #1
 8005c4e:	2300      	movne	r3, #0
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d03f      	beq.n	8005cd6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	3322      	adds	r3, #34	; 0x22
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	3222      	adds	r2, #34	; 0x22
 8005c5e:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8005c60:	68ba      	ldr	r2, [r7, #8]
 8005c62:	8ad2      	ldrh	r2, [r2, #22]
 8005c64:	2a00      	cmp	r2, #0
 8005c66:	d105      	bne.n	8005c74 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8005c68:	4b1f      	ldr	r3, [pc, #124]	; (8005ce8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8005c6a:	4a20      	ldr	r2, [pc, #128]	; (8005cec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8005c6c:	21c5      	movs	r1, #197	; 0xc5
 8005c6e:	4820      	ldr	r0, [pc, #128]	; (8005cf0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8005c70:	f020 ff40 	bl	8026af4 <__assert_func>
            return buffer[pos];
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	8a92      	ldrh	r2, [r2, #20]
 8005c78:	4611      	mov	r1, r2
 8005c7a:	68ba      	ldr	r2, [r7, #8]
 8005c7c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8005c80:	613b      	str	r3, [r7, #16]
 8005c82:	4613      	mov	r3, r2
 8005c84:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	8adb      	ldrh	r3, [r3, #22]
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d806      	bhi.n	8005c9c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8005c8e:	4b1b      	ldr	r3, [pc, #108]	; (8005cfc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8005c90:	4a1b      	ldr	r2, [pc, #108]	; (8005d00 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8005c92:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8005c96:	4816      	ldr	r0, [pc, #88]	; (8005cf0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8005c98:	f020 ff2c 	bl	8026af4 <__assert_func>
            const uint16_t index = pos + 1;
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	8a9b      	ldrh	r3, [r3, #20]
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8005ca4:	89bb      	ldrh	r3, [r7, #12]
 8005ca6:	2b09      	cmp	r3, #9
 8005ca8:	d801      	bhi.n	8005cae <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8005caa:	89bb      	ldrh	r3, [r7, #12]
 8005cac:	e000      	b.n	8005cb0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8005cae:	2300      	movs	r3, #0
 8005cb0:	693a      	ldr	r2, [r7, #16]
 8005cb2:	89f9      	ldrh	r1, [r7, #14]
 8005cb4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8005cb8:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	3322      	adds	r3, #34	; 0x22
 8005cbe:	61bb      	str	r3, [r7, #24]
 8005cc0:	f640 133f 	movw	r3, #2367	; 0x93f
 8005cc4:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	8a9b      	ldrh	r3, [r3, #20]
 8005cca:	4619      	mov	r1, r3
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	8afa      	ldrh	r2, [r7, #22]
 8005cd0:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8005cd4:	bf00      	nop
        }
    }
    return getNextChar();
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f017 f83c 	bl	801cd54 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8005cdc:	4603      	mov	r3, r0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3728      	adds	r7, #40	; 0x28
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	080283d0 	.word	0x080283d0
 8005cec:	080283dc 	.word	0x080283dc
 8005cf0:	08028488 	.word	0x08028488
 8005cf4:	080284d4 	.word	0x080284d4
 8005cf8:	080284e4 	.word	0x080284e4
 8005cfc:	080285b8 	.word	0x080285b8
 8005d00:	080285c4 	.word	0x080285c4

08005d04 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f016 ffea 	bl	801cce6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8005d12:	bf00      	nop
 8005d14:	3708      	adds	r7, #8
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}

08005d1a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8005d1a:	b580      	push	{r7, lr}
 8005d1c:	b088      	sub	sp, #32
 8005d1e:	af02      	add	r7, sp, #8
 8005d20:	60f8      	str	r0, [r7, #12]
 8005d22:	1d38      	adds	r0, r7, #4
 8005d24:	e880 0006 	stmia.w	r0, {r1, r2}
 8005d28:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 8005d2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d2e:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8005d30:	1d39      	adds	r1, r7, #4
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	9301      	str	r3, [sp, #4]
 8005d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d38:	9300      	str	r3, [sp, #0]
 8005d3a:	6a3b      	ldr	r3, [r7, #32]
 8005d3c:	683a      	ldr	r2, [r7, #0]
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	f014 faba 	bl	801a2b8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8005d44:	bf00      	nop
 8005d46:	3718      	adds	r7, #24
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8005d4c:	b590      	push	{r4, r7, lr}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	4603      	mov	r3, r0
 8005d54:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8005d56:	2300      	movs	r3, #0
 8005d58:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8005d5a:	88fb      	ldrh	r3, [r7, #6]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d127      	bne.n	8005db0 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8005d60:	88fb      	ldrh	r3, [r7, #6]
 8005d62:	4a1e      	ldr	r2, [pc, #120]	; (8005ddc <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8005d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d016      	beq.n	8005d9a <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8005d6c:	88fb      	ldrh	r3, [r7, #6]
 8005d6e:	4a1b      	ldr	r2, [pc, #108]	; (8005ddc <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8005d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d74:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	4a18      	ldr	r2, [pc, #96]	; (8005de0 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8005d80:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	68ba      	ldr	r2, [r7, #8]
 8005d88:	4413      	add	r3, r2
 8005d8a:	4a16      	ldr	r2, [pc, #88]	; (8005de4 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8005d8c:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	68ba      	ldr	r2, [r7, #8]
 8005d94:	4413      	add	r3, r2
 8005d96:	60fb      	str	r3, [r7, #12]
 8005d98:	e00a      	b.n	8005db0 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8005d9a:	4b11      	ldr	r3, [pc, #68]	; (8005de0 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8005d9c:	4a12      	ldr	r2, [pc, #72]	; (8005de8 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8005d9e:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8005da0:	4a12      	ldr	r2, [pc, #72]	; (8005dec <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8005da2:	4b10      	ldr	r3, [pc, #64]	; (8005de4 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8005da4:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8005da6:	88fb      	ldrh	r3, [r7, #6]
 8005da8:	4a11      	ldr	r2, [pc, #68]	; (8005df0 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8005daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dae:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00d      	beq.n	8005dd2 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8005db6:	4a0f      	ldr	r2, [pc, #60]	; (8005df4 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8005db8:	88fb      	ldrh	r3, [r7, #6]
 8005dba:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8005dbc:	f000 f83e 	bl	8005e3c <_ZN17TypedTextDatabase8getFontsEv>
 8005dc0:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8005dc2:	f000 f833 	bl	8005e2c <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	461a      	mov	r2, r3
 8005dca:	4621      	mov	r1, r4
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	f7ff fea5 	bl	8005b1c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8005dd2:	bf00      	nop
 8005dd4:	3714      	adds	r7, #20
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd90      	pop	{r4, r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	24001878 	.word	0x24001878
 8005de0:	24001880 	.word	0x24001880
 8005de4:	24001884 	.word	0x24001884
 8005de8:	90000408 	.word	0x90000408
 8005dec:	90000404 	.word	0x90000404
 8005df0:	90000424 	.word	0x90000424
 8005df4:	2400187c 	.word	0x2400187c

08005df8 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	460b      	mov	r3, r1
 8005e02:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8005e04:	4b07      	ldr	r3, [pc, #28]	; (8005e24 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	4b07      	ldr	r3, [pc, #28]	; (8005e28 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8005e0a:	6819      	ldr	r1, [r3, #0]
 8005e0c:	887b      	ldrh	r3, [r7, #2]
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	440b      	add	r3, r1
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	005b      	lsls	r3, r3, #1
 8005e16:	4413      	add	r3, r2
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr
 8005e24:	24001880 	.word	0x24001880
 8005e28:	24001884 	.word	0x24001884

08005e2c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8005e30:	2301      	movs	r3, #1
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8005e40:	4b02      	ldr	r3, [pc, #8]	; (8005e4c <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr
 8005e4c:	24001888 	.word	0x24001888

08005e50 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d113      	bne.n	8005e88 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d10e      	bne.n	8005e88 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 8005e6a:	f7ff fd87 	bl	800597c <_Z23getFont_verdana_20_4bppv>
 8005e6e:	4603      	mov	r3, r0
};
 8005e70:	4a07      	ldr	r2, [pc, #28]	; (8005e90 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8005e72:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 8005e74:	f7ff fddc 	bl	8005a30 <_Z23getFont_verdana_40_4bppv>
 8005e78:	4603      	mov	r3, r0
};
 8005e7a:	4a05      	ldr	r2, [pc, #20]	; (8005e90 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8005e7c:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 8005e7e:	f7ff fd23 	bl	80058c8 <_Z23getFont_verdana_10_4bppv>
 8005e82:	4603      	mov	r3, r0
};
 8005e84:	4a02      	ldr	r2, [pc, #8]	; (8005e90 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8005e86:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 8005e88:	bf00      	nop
 8005e8a:	3708      	adds	r7, #8
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	24001888 	.word	0x24001888

08005e94 <_GLOBAL__sub_I_touchgfx_fonts>:
 8005e94:	b580      	push	{r7, lr}
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005e9c:	2001      	movs	r0, #1
 8005e9e:	f7ff ffd7 	bl	8005e50 <_Z41__static_initialization_and_destruction_0ii>
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	68b9      	ldr	r1, [r7, #8]
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7fe fcbe 	bl	8004838 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8005ebc:	4a03      	ldr	r2, [pc, #12]	; (8005ecc <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	601a      	str	r2, [r3, #0]
{

}
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3710      	adds	r7, #16
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	08028998 	.word	0x08028998

08005ed0 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	601a      	str	r2, [r3, #0]
{

}
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <_ZN5Model4tickEv>:

void Model::tick()
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]

}
 8005ef4:	bf00      	nop
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
    {
    }
 8005f08:	bf00      	nop
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
    {
    }
 8005f1c:	bf00      	nop
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
    {
 8005f30:	4a04      	ldr	r2, [pc, #16]	; (8005f44 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	601a      	str	r2, [r3, #0]
    }
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4618      	mov	r0, r3
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr
 8005f44:	08028e2c 	.word	0x08028e2c

08005f48 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
    }
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f7ff ffe9 	bl	8005f28 <_ZN8touchgfx9PresenterD1Ev>
 8005f56:	2104      	movs	r1, #4
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f020 fd9c 	bl	8026a96 <_ZdlPvj>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4618      	mov	r0, r3
 8005f62:	3708      	adds	r7, #8
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
    {
 8005f70:	4a04      	ldr	r2, [pc, #16]	; (8005f84 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	601a      	str	r2, [r3, #0]
    }
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4618      	mov	r0, r3
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr
 8005f84:	08028e2c 	.word	0x08028e2c

08005f88 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	4a06      	ldr	r2, [pc, #24]	; (8005fac <_ZN13ModelListenerC1Ev+0x24>)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	601a      	str	r2, [r3, #0]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	605a      	str	r2, [r3, #4]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	370c      	adds	r7, #12
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	08028e1c 	.word	0x08028e1c

08005fb0 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	4a04      	ldr	r2, [pc, #16]	; (8005fcc <_ZN13ModelListenerD1Ev+0x1c>)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	601a      	str	r2, [r3, #0]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr
 8005fcc:	08028e1c 	.word	0x08028e1c

08005fd0 <_ZN13ModelListenerD0Ev>:
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f7ff ffe9 	bl	8005fb0 <_ZN13ModelListenerD1Ev>
 8005fde:	2108      	movs	r1, #8
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f020 fd58 	bl	8026a96 <_ZdlPvj>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3708      	adds	r7, #8
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {}
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	4a09      	ldr	r2, [pc, #36]	; (8006020 <_ZN16Screen1PresenterD1Ev+0x30>)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	601a      	str	r2, [r3, #0]
 8005ffe:	4a09      	ldr	r2, [pc, #36]	; (8006024 <_ZN16Screen1PresenterD1Ev+0x34>)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	605a      	str	r2, [r3, #4]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	3304      	adds	r3, #4
 8006008:	4618      	mov	r0, r3
 800600a:	f7ff ffd1 	bl	8005fb0 <_ZN13ModelListenerD1Ev>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4618      	mov	r0, r3
 8006012:	f7ff ff89 	bl	8005f28 <_ZN8touchgfx9PresenterD1Ev>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4618      	mov	r0, r3
 800601a:	3708      	adds	r7, #8
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}
 8006020:	08028df4 	.word	0x08028df4
 8006024:	08028e0c 	.word	0x08028e0c

08006028 <_ZThn4_N16Screen1PresenterD1Ev>:
 8006028:	f1a0 0004 	sub.w	r0, r0, #4
 800602c:	e7e0      	b.n	8005ff0 <_ZN16Screen1PresenterD1Ev>
 800602e:	bf00      	nop

08006030 <_ZN16Screen1PresenterD0Ev>:
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f7ff ffd9 	bl	8005ff0 <_ZN16Screen1PresenterD1Ev>
 800603e:	2110      	movs	r1, #16
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f020 fd28 	bl	8026a96 <_ZdlPvj>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4618      	mov	r0, r3
 800604a:	3708      	adds	r7, #8
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <_ZThn4_N16Screen1PresenterD0Ev>:
 8006050:	f1a0 0004 	sub.w	r0, r0, #4
 8006054:	e7ec      	b.n	8006030 <_ZN16Screen1PresenterD0Ev>
	...

08006058 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 8006058:	b580      	push	{r7, lr}
 800605a:	b082      	sub	sp, #8
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
    : view(v)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4618      	mov	r0, r3
 8006066:	f7ff ff7f 	bl	8005f68 <_ZN8touchgfx9PresenterC1Ev>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	3304      	adds	r3, #4
 800606e:	4618      	mov	r0, r3
 8006070:	f7ff ff8a 	bl	8005f88 <_ZN13ModelListenerC1Ev>
 8006074:	4a06      	ldr	r2, [pc, #24]	; (8006090 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	601a      	str	r2, [r3, #0]
 800607a:	4a06      	ldr	r2, [pc, #24]	; (8006094 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	605a      	str	r2, [r3, #4]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	683a      	ldr	r2, [r7, #0]
 8006084:	60da      	str	r2, [r3, #12]
{

}
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4618      	mov	r0, r3
 800608a:	3708      	adds	r7, #8
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}
 8006090:	08028df4 	.word	0x08028df4
 8006094:	08028e0c 	.word	0x08028e0c

08006098 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]

}
 80060a0:	bf00      	nop
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]

}
 80060b4:	bf00      	nop
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	4a05      	ldr	r2, [pc, #20]	; (80060e0 <_ZN11Screen1ViewD1Ev+0x20>)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	601a      	str	r2, [r3, #0]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4618      	mov	r0, r3
 80060d2:	f7ff fb33 	bl	800573c <_ZN15Screen1ViewBaseD1Ev>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4618      	mov	r0, r3
 80060da:	3708      	adds	r7, #8
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	08028e44 	.word	0x08028e44

080060e4 <_ZN11Screen1ViewD0Ev>:
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b082      	sub	sp, #8
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f7ff ffe7 	bl	80060c0 <_ZN11Screen1ViewD1Ev>
 80060f2:	21e0      	movs	r1, #224	; 0xe0
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f020 fcce 	bl	8026a96 <_ZdlPvj>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4618      	mov	r0, r3
 80060fe:	3708      	adds	r7, #8
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4618      	mov	r0, r3
 8006110:	f7ff fa22 	bl	8005558 <_ZN15Screen1ViewBaseC1Ev>
 8006114:	4a03      	ldr	r2, [pc, #12]	; (8006124 <_ZN11Screen1ViewC1Ev+0x20>)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	601a      	str	r2, [r3, #0]
{

}
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4618      	mov	r0, r3
 800611e:	3708      	adds	r7, #8
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}
 8006124:	08028e44 	.word	0x08028e44

08006128 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4618      	mov	r0, r3
 8006134:	f7ff fb34 	bl	80057a0 <_ZN15Screen1ViewBase11setupScreenEv>

}
 8006138:	bf00      	nop
 800613a:	3708      	adds	r7, #8
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4618      	mov	r0, r3
 800614c:	f7ff f8c0 	bl	80052d0 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8006150:	bf00      	nop
 8006152:	3708      	adds	r7, #8
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d103      	bne.n	8006170 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 8006168:	f04f 33ff 	mov.w	r3, #4294967295
 800616c:	60fb      	str	r3, [r7, #12]
 800616e:	e02c      	b.n	80061ca <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	685a      	ldr	r2, [r3, #4]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	891a      	ldrh	r2, [r3, #8]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	68da      	ldr	r2, [r3, #12]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	691a      	ldr	r2, [r3, #16]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	695a      	ldr	r2, [r3, #20]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a0c      	ldr	r2, [pc, #48]	; (80061d4 <FT5336_RegisterBusIO+0x7c>)
 80061a4:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a0b      	ldr	r2, [pc, #44]	; (80061d8 <FT5336_RegisterBusIO+0x80>)
 80061aa:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d004      	beq.n	80061c4 <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4798      	blx	r3
 80061c0:	60f8      	str	r0, [r7, #12]
 80061c2:	e002      	b.n	80061ca <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 80061c4:	f04f 33ff 	mov.w	r3, #4294967295
 80061c8:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80061ca:	68fb      	ldr	r3, [r7, #12]
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	080065d1 	.word	0x080065d1
 80061d8:	08006605 	.word	0x08006605

080061dc <FT5336_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT5336 sensor capabilities
  * @retval Component status
  */
int32_t FT5336_GetCapabilities(FT5336_Object_t *pObj, FT5336_Capabilities_t *Capabilities)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	2201      	movs	r2, #1
 80061ea:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 1;
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	2201      	movs	r2, #1
 80061f0:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	2205      	movs	r2, #5
 80061f6:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80061fe:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	f44f 7288 	mov.w	r2, #272	; 0x110
 8006206:	609a      	str	r2, [r3, #8]

  return FT5336_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	370c      	adds	r7, #12
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr

08006216 <FT5336_Init>:
  * @param  pObj Component object pointer
  * @param  GestureInit: Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_Init(FT5336_Object_t *pObj)
{
 8006216:	b580      	push	{r7, lr}
 8006218:	b084      	sub	sp, #16
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 800621e:	2300      	movs	r3, #0
 8006220:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006228:	2b00      	cmp	r3, #0
 800622a:	d10d      	bne.n	8006248 <FT5336_Init+0x32>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT5336_TS_Calibration(pObj);
#endif /* (FT5336_AUTO_CALIBRATION_ENABLED == 1) */
    /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT5336_DisableIT(pObj);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 f987 	bl	8006546 <FT5336_DisableIT>
 8006238:	4602      	mov	r2, r0
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	4413      	add	r3, r2
 800623e:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 1;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  if(ret != FT5336_OK)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d002      	beq.n	8006254 <FT5336_Init+0x3e>
  {
    ret = FT5336_ERROR;
 800624e:	f04f 33ff 	mov.w	r3, #4294967295
 8006252:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006254:	68fb      	ldr	r3, [r7, #12]
}
 8006256:	4618      	mov	r0, r3
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <FT5336_DeInit>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval FT5336_OK
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
 800625e:	b480      	push	{r7}
 8006260:	b085      	sub	sp, #20
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 8006266:	2300      	movs	r3, #0
 8006268:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 1U)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006270:	2b01      	cmp	r3, #1
 8006272:	d103      	bne.n	800627c <FT5336_DeInit+0x1e>
  {
    pObj->IsInitialized = 0;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return ret;
 800627c:	68fb      	ldr	r3, [r7, #12]
}
 800627e:	4618      	mov	r0, r3
 8006280:	3714      	adds	r7, #20
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr

0800628a <FT5336_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_GestureConfig(FT5336_Object_t *pObj, FT5336_Gesture_Init_t *GestureInit)
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b084      	sub	sp, #16
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
 8006292:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f103 0218 	add.w	r2, r3, #24
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	4619      	mov	r1, r3
 80062a2:	4610      	mov	r0, r2
 80062a4:	f000 fa25 	bl	80066f2 <ft5336_radian_value>
 80062a8:	60f8      	str	r0, [r7, #12]
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f103 0218 	add.w	r2, r3, #24
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	4619      	mov	r1, r3
 80062b8:	4610      	mov	r0, r2
 80062ba:	f000 fa2b 	bl	8006714 <ft5336_offset_left_right>
 80062be:	4602      	mov	r2, r0
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	4413      	add	r3, r2
 80062c4:	60fb      	str	r3, [r7, #12]
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f103 0218 	add.w	r2, r3, #24
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	4619      	mov	r1, r3
 80062d4:	4610      	mov	r0, r2
 80062d6:	f000 fa2e 	bl	8006736 <ft5336_offset_up_down>
 80062da:	4602      	mov	r2, r0
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	4413      	add	r3, r2
 80062e0:	60fb      	str	r3, [r7, #12]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f103 0218 	add.w	r2, r3, #24
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	4619      	mov	r1, r3
 80062f0:	4610      	mov	r0, r2
 80062f2:	f000 fa31 	bl	8006758 <ft5336_disatnce_left_right>
 80062f6:	4602      	mov	r2, r0
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	4413      	add	r3, r2
 80062fc:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f103 0218 	add.w	r2, r3, #24
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	b2db      	uxtb	r3, r3
 800630a:	4619      	mov	r1, r3
 800630c:	4610      	mov	r0, r2
 800630e:	f000 fa34 	bl	800677a <ft5336_distance_up_down>
 8006312:	4602      	mov	r2, r0
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	4413      	add	r3, r2
 8006318:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f103 0218 	add.w	r2, r3, #24
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	695b      	ldr	r3, [r3, #20]
 8006324:	b2db      	uxtb	r3, r3
 8006326:	4619      	mov	r1, r3
 8006328:	4610      	mov	r0, r2
 800632a:	f000 fa37 	bl	800679c <ft5336_distance_zoom>
 800632e:	4602      	mov	r2, r0
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	4413      	add	r3, r2
 8006334:	60fb      	str	r3, [r7, #12]

  if(ret != FT5336_OK)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d002      	beq.n	8006342 <FT5336_GestureConfig+0xb8>
  {
    ret = FT5336_ERROR;
 800633c:	f04f 33ff 	mov.w	r3, #4294967295
 8006340:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006342:	68fb      	ldr	r3, [r7, #12]
}
 8006344:	4618      	mov	r0, r3
 8006346:	3710      	adds	r7, #16
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	3318      	adds	r3, #24
 800635a:	6839      	ldr	r1, [r7, #0]
 800635c:	4618      	mov	r0, r3
 800635e:	f000 fa3f 	bl	80067e0 <ft5336_chip_id>
 8006362:	4603      	mov	r3, r0
}
 8006364:	4618      	mov	r0, r3
 8006366:	3708      	adds	r7, #8
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <FT5336_GetState>:
  * @param  pObj Component object pointer
  * @param  State: Single Touch stucture pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetState(FT5336_Object_t *pObj, FT5336_State_t *State)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 8006376:	2300      	movs	r3, #0
 8006378:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 f908 	bl	8006590 <FT5336_DetectTouch>
 8006380:	4603      	mov	r3, r0
 8006382:	461a      	mov	r2, r3
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	601a      	str	r2, [r3, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f103 0018 	add.w	r0, r3, #24
 800638e:	f107 0208 	add.w	r2, r7, #8
 8006392:	2304      	movs	r3, #4
 8006394:	2103      	movs	r1, #3
 8006396:	f000 f94f 	bl	8006638 <ft5336_read_reg>
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d003      	beq.n	80063a8 <FT5336_GetState+0x3c>
  {
    ret = FT5336_ERROR;
 80063a0:	f04f 33ff 	mov.w	r3, #4294967295
 80063a4:	60fb      	str	r3, [r7, #12]
 80063a6:	e00f      	b.n	80063c8 <FT5336_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 80063a8:	7a3b      	ldrb	r3, [r7, #8]
 80063aa:	021b      	lsls	r3, r3, #8
 80063ac:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80063b0:	7a7a      	ldrb	r2, [r7, #9]
 80063b2:	431a      	orrs	r2, r3
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 80063b8:	7abb      	ldrb	r3, [r7, #10]
 80063ba:	021b      	lsls	r3, r3, #8
 80063bc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80063c0:	7afa      	ldrb	r2, [r7, #11]
 80063c2:	431a      	orrs	r2, r3
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80063c8:	68fb      	ldr	r3, [r7, #12]
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3710      	adds	r7, #16
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <FT5336_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetMultiTouchState(FT5336_Object_t *pObj, FT5336_MultiTouch_State_t *State)
{
 80063d2:	b580      	push	{r7, lr}
 80063d4:	b08c      	sub	sp, #48	; 0x30
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
 80063da:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 80063dc:	2300      	movs	r3, #0
 80063de:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t  data[30];
  uint32_t i;

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 f8d5 	bl	8006590 <FT5336_DetectTouch>
 80063e6:	4603      	mov	r3, r0
 80063e8:	461a      	mov	r2, r3
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	601a      	str	r2, [r3, #0]

  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f103 0018 	add.w	r0, r3, #24
 80063f4:	f107 0208 	add.w	r2, r7, #8
 80063f8:	231e      	movs	r3, #30
 80063fa:	2103      	movs	r1, #3
 80063fc:	f000 f91c 	bl	8006638 <ft5336_read_reg>
 8006400:	4603      	mov	r3, r0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d003      	beq.n	800640e <FT5336_GetMultiTouchState+0x3c>
  {
    ret = FT5336_ERROR;
 8006406:	f04f 33ff 	mov.w	r3, #4294967295
 800640a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800640c:	e077      	b.n	80064fe <FT5336_GetMultiTouchState+0x12c>
  }
  else
  {
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 800640e:	2300      	movs	r3, #0
 8006410:	62bb      	str	r3, [r7, #40]	; 0x28
 8006412:	e071      	b.n	80064f8 <FT5336_GetMultiTouchState+0x126>
    {
    /* Send back first ready X position to caller */
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8006414:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006416:	4613      	mov	r3, r2
 8006418:	005b      	lsls	r3, r3, #1
 800641a:	4413      	add	r3, r2
 800641c:	005b      	lsls	r3, r3, #1
 800641e:	3330      	adds	r3, #48	; 0x30
 8006420:	443b      	add	r3, r7
 8006422:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006426:	021b      	lsls	r3, r3, #8
 8006428:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 800642c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800642e:	4613      	mov	r3, r2
 8006430:	005b      	lsls	r3, r3, #1
 8006432:	4413      	add	r3, r2
 8006434:	005b      	lsls	r3, r3, #1
 8006436:	3301      	adds	r3, #1
 8006438:	3330      	adds	r3, #48	; 0x30
 800643a:	443b      	add	r3, r7
 800643c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006440:	ea41 0203 	orr.w	r2, r1, r3
 8006444:	6839      	ldr	r1, [r7, #0]
 8006446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	440b      	add	r3, r1
 800644c:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 800644e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006450:	4613      	mov	r3, r2
 8006452:	005b      	lsls	r3, r3, #1
 8006454:	4413      	add	r3, r2
 8006456:	005b      	lsls	r3, r3, #1
 8006458:	3302      	adds	r3, #2
 800645a:	3330      	adds	r3, #48	; 0x30
 800645c:	443b      	add	r3, r7
 800645e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006462:	021b      	lsls	r3, r3, #8
 8006464:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 8006468:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800646a:	4613      	mov	r3, r2
 800646c:	005b      	lsls	r3, r3, #1
 800646e:	4413      	add	r3, r2
 8006470:	005b      	lsls	r3, r3, #1
 8006472:	3303      	adds	r3, #3
 8006474:	3330      	adds	r3, #48	; 0x30
 8006476:	443b      	add	r3, r7
 8006478:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800647c:	4319      	orrs	r1, r3
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006482:	3206      	adds	r2, #6
 8006484:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Event to caller */
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 8006488:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800648a:	4613      	mov	r3, r2
 800648c:	005b      	lsls	r3, r3, #1
 800648e:	4413      	add	r3, r2
 8006490:	005b      	lsls	r3, r3, #1
 8006492:	3330      	adds	r3, #48	; 0x30
 8006494:	443b      	add	r3, r7
 8006496:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800649a:	099b      	lsrs	r3, r3, #6
 800649c:	b2db      	uxtb	r3, r3
 800649e:	4619      	mov	r1, r3
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064a4:	3210      	adds	r2, #16
 80064a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Weight to caller */
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 80064aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064ac:	4613      	mov	r3, r2
 80064ae:	005b      	lsls	r3, r3, #1
 80064b0:	4413      	add	r3, r2
 80064b2:	005b      	lsls	r3, r3, #1
 80064b4:	3304      	adds	r3, #4
 80064b6:	3330      	adds	r3, #48	; 0x30
 80064b8:	443b      	add	r3, r7
 80064ba:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80064be:	4619      	mov	r1, r3
 80064c0:	683a      	ldr	r2, [r7, #0]
 80064c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c4:	330a      	adds	r3, #10
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	4413      	add	r3, r2
 80064ca:	6059      	str	r1, [r3, #4]
    /* Send back first ready Area to caller */
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 80064cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064ce:	4613      	mov	r3, r2
 80064d0:	005b      	lsls	r3, r3, #1
 80064d2:	4413      	add	r3, r2
 80064d4:	005b      	lsls	r3, r3, #1
 80064d6:	3305      	adds	r3, #5
 80064d8:	3330      	adds	r3, #48	; 0x30
 80064da:	443b      	add	r3, r7
 80064dc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80064e0:	091b      	lsrs	r3, r3, #4
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	4619      	mov	r1, r3
 80064e6:	683a      	ldr	r2, [r7, #0]
 80064e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ea:	3314      	adds	r3, #20
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	4413      	add	r3, r2
 80064f0:	6059      	str	r1, [r3, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 80064f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f4:	3301      	adds	r3, #1
 80064f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80064f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fa:	2b04      	cmp	r3, #4
 80064fc:	d98a      	bls.n	8006414 <FT5336_GetMultiTouchState+0x42>
    }
  }

  return ret;
 80064fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006500:	4618      	mov	r0, r3
 8006502:	3730      	adds	r7, #48	; 0x30
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <FT5336_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId: gesture ID
  * @retval Gesture ID.
  */
int32_t FT5336_GetGesture(FT5336_Object_t *pObj, uint8_t *GestureId)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	3318      	adds	r3, #24
 8006516:	6839      	ldr	r1, [r7, #0]
 8006518:	4618      	mov	r0, r3
 800651a:	f000 f8bb 	bl	8006694 <ft5336_gest_id>
 800651e:	4603      	mov	r3, r0
}
 8006520:	4618      	mov	r0, r3
 8006522:	3708      	adds	r7, #8
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <FT5336_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_EnableIT(FT5336_Object_t *pObj)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	3318      	adds	r3, #24
 8006534:	2101      	movs	r1, #1
 8006536:	4618      	mov	r0, r3
 8006538:	f000 f941 	bl	80067be <ft5336_g_mode>
 800653c:	4603      	mov	r3, r0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3708      	adds	r7, #8
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <FT5336_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_DisableIT(FT5336_Object_t *pObj)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b082      	sub	sp, #8
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	3318      	adds	r3, #24
 8006552:	2100      	movs	r1, #0
 8006554:	4618      	mov	r0, r3
 8006556:	f000 f932 	bl	80067be <ft5336_g_mode>
 800655a:	4603      	mov	r3, r0
}
 800655c:	4618      	mov	r0, r3
 800655e:	3708      	adds	r7, #8
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <FT5336_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval TS interrupts status : always return 0 here
  */
int32_t FT5336_ITStatus(FT5336_Object_t *pObj)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	370c      	adds	r7, #12
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr

0800657a <FT5336_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
{
 800657a:	b480      	push	{r7}
 800657c:	b083      	sub	sp, #12
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 8006582:	2300      	movs	r3, #0
}
 8006584:	4618      	mov	r0, r3
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <FT5336_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT5336_ERROR
  *         in case of error
  */
static int32_t FT5336_DetectTouch(FT5336_Object_t *pObj)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	3318      	adds	r3, #24
 800659c:	f107 020b 	add.w	r2, r7, #11
 80065a0:	4611      	mov	r1, r2
 80065a2:	4618      	mov	r0, r3
 80065a4:	f000 f886 	bl	80066b4 <ft5336_td_status>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d003      	beq.n	80065b6 <FT5336_DetectTouch+0x26>
  {
    ret = FT5336_ERROR;
 80065ae:	f04f 33ff 	mov.w	r3, #4294967295
 80065b2:	60fb      	str	r3, [r7, #12]
 80065b4:	e007      	b.n	80065c6 <FT5336_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 80065b6:	7afb      	ldrb	r3, [r7, #11]
 80065b8:	2b05      	cmp	r3, #5
 80065ba:	d902      	bls.n	80065c2 <FT5336_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
 80065bc:	2300      	movs	r3, #0
 80065be:	60fb      	str	r3, [r7, #12]
 80065c0:	e001      	b.n	80065c6 <FT5336_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
 80065c2:	7afb      	ldrb	r3, [r7, #11]
 80065c4:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 80065c6:	68fb      	ldr	r3, [r7, #12]
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3710      	adds	r7, #16
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80065d0:	b590      	push	{r4, r7, lr}
 80065d2:	b087      	sub	sp, #28
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	607a      	str	r2, [r7, #4]
 80065da:	461a      	mov	r2, r3
 80065dc:	460b      	mov	r3, r1
 80065de:	72fb      	strb	r3, [r7, #11]
 80065e0:	4613      	mov	r3, r2
 80065e2:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	691c      	ldr	r4, [r3, #16]
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	8918      	ldrh	r0, [r3, #8]
 80065f0:	7afb      	ldrb	r3, [r7, #11]
 80065f2:	b299      	uxth	r1, r3
 80065f4:	893b      	ldrh	r3, [r7, #8]
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	47a0      	blx	r4
 80065fa:	4603      	mov	r3, r0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	371c      	adds	r7, #28
 8006600:	46bd      	mov	sp, r7
 8006602:	bd90      	pop	{r4, r7, pc}

08006604 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8006604:	b590      	push	{r4, r7, lr}
 8006606:	b087      	sub	sp, #28
 8006608:	af00      	add	r7, sp, #0
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	607a      	str	r2, [r7, #4]
 800660e:	461a      	mov	r2, r3
 8006610:	460b      	mov	r3, r1
 8006612:	72fb      	strb	r3, [r7, #11]
 8006614:	4613      	mov	r3, r2
 8006616:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	68dc      	ldr	r4, [r3, #12]
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	8918      	ldrh	r0, [r3, #8]
 8006624:	7afb      	ldrb	r3, [r7, #11]
 8006626:	b299      	uxth	r1, r3
 8006628:	893b      	ldrh	r3, [r7, #8]
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	47a0      	blx	r4
 800662e:	4603      	mov	r3, r0
}
 8006630:	4618      	mov	r0, r3
 8006632:	371c      	adds	r7, #28
 8006634:	46bd      	mov	sp, r7
 8006636:	bd90      	pop	{r4, r7, pc}

08006638 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8006638:	b590      	push	{r4, r7, lr}
 800663a:	b085      	sub	sp, #20
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	607a      	str	r2, [r7, #4]
 8006642:	461a      	mov	r2, r3
 8006644:	460b      	mov	r3, r1
 8006646:	72fb      	strb	r3, [r7, #11]
 8006648:	4613      	mov	r3, r2
 800664a:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	685c      	ldr	r4, [r3, #4]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6898      	ldr	r0, [r3, #8]
 8006654:	893b      	ldrh	r3, [r7, #8]
 8006656:	7af9      	ldrb	r1, [r7, #11]
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	47a0      	blx	r4
 800665c:	4603      	mov	r3, r0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3714      	adds	r7, #20
 8006662:	46bd      	mov	sp, r7
 8006664:	bd90      	pop	{r4, r7, pc}

08006666 <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8006666:	b590      	push	{r4, r7, lr}
 8006668:	b085      	sub	sp, #20
 800666a:	af00      	add	r7, sp, #0
 800666c:	60f8      	str	r0, [r7, #12]
 800666e:	607a      	str	r2, [r7, #4]
 8006670:	461a      	mov	r2, r3
 8006672:	460b      	mov	r3, r1
 8006674:	72fb      	strb	r3, [r7, #11]
 8006676:	4613      	mov	r3, r2
 8006678:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681c      	ldr	r4, [r3, #0]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6898      	ldr	r0, [r3, #8]
 8006682:	893b      	ldrh	r3, [r7, #8]
 8006684:	7af9      	ldrb	r1, [r7, #11]
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	47a0      	blx	r4
 800668a:	4603      	mov	r3, r0
}
 800668c:	4618      	mov	r0, r3
 800668e:	3714      	adds	r7, #20
 8006690:	46bd      	mov	sp, r7
 8006692:	bd90      	pop	{r4, r7, pc}

08006694 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 800669e:	2301      	movs	r3, #1
 80066a0:	683a      	ldr	r2, [r7, #0]
 80066a2:	2101      	movs	r1, #1
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f7ff ffc7 	bl	8006638 <ft5336_read_reg>
 80066aa:	4603      	mov	r3, r0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3708      	adds	r7, #8
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 80066be:	2301      	movs	r3, #1
 80066c0:	683a      	ldr	r2, [r7, #0]
 80066c2:	2102      	movs	r1, #2
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f7ff ffb7 	bl	8006638 <ft5336_read_reg>
 80066ca:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d10a      	bne.n	80066e8 <ft5336_td_status+0x34>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	f003 030f 	and.w	r3, r3, #15
 80066da:	b2da      	uxtb	r2, r3
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	781a      	ldrb	r2, [r3, #0]
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 80066e8:	68fb      	ldr	r3, [r7, #12]
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3710      	adds	r7, #16
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 80066f2:	b580      	push	{r7, lr}
 80066f4:	b082      	sub	sp, #8
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
 80066fa:	460b      	mov	r3, r1
 80066fc:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 80066fe:	1cfa      	adds	r2, r7, #3
 8006700:	2301      	movs	r3, #1
 8006702:	2191      	movs	r1, #145	; 0x91
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f7ff ffae 	bl	8006666 <ft5336_write_reg>
 800670a:	4603      	mov	r3, r0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3708      	adds	r7, #8
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	460b      	mov	r3, r1
 800671e:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 8006720:	1cfa      	adds	r2, r7, #3
 8006722:	2301      	movs	r3, #1
 8006724:	2192      	movs	r1, #146	; 0x92
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f7ff ff9d 	bl	8006666 <ft5336_write_reg>
 800672c:	4603      	mov	r3, r0
}
 800672e:	4618      	mov	r0, r3
 8006730:	3708      	adds	r7, #8
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}

08006736 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8006736:	b580      	push	{r7, lr}
 8006738:	b082      	sub	sp, #8
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
 800673e:	460b      	mov	r3, r1
 8006740:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 8006742:	1cfa      	adds	r2, r7, #3
 8006744:	2301      	movs	r3, #1
 8006746:	2193      	movs	r1, #147	; 0x93
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f7ff ff8c 	bl	8006666 <ft5336_write_reg>
 800674e:	4603      	mov	r3, r0
}
 8006750:	4618      	mov	r0, r3
 8006752:	3708      	adds	r7, #8
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	460b      	mov	r3, r1
 8006762:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 8006764:	1cfa      	adds	r2, r7, #3
 8006766:	2301      	movs	r3, #1
 8006768:	2194      	movs	r1, #148	; 0x94
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f7ff ff7b 	bl	8006666 <ft5336_write_reg>
 8006770:	4603      	mov	r3, r0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3708      	adds	r7, #8
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 800677a:	b580      	push	{r7, lr}
 800677c:	b082      	sub	sp, #8
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
 8006782:	460b      	mov	r3, r1
 8006784:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 8006786:	1cfa      	adds	r2, r7, #3
 8006788:	2301      	movs	r3, #1
 800678a:	2195      	movs	r1, #149	; 0x95
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f7ff ff6a 	bl	8006666 <ft5336_write_reg>
 8006792:	4603      	mov	r3, r0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3708      	adds	r7, #8
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	460b      	mov	r3, r1
 80067a6:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 80067a8:	1cfa      	adds	r2, r7, #3
 80067aa:	2301      	movs	r3, #1
 80067ac:	2196      	movs	r1, #150	; 0x96
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f7ff ff59 	bl	8006666 <ft5336_write_reg>
 80067b4:	4603      	mov	r3, r0
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3708      	adds	r7, #8
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}

080067be <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 80067be:	b580      	push	{r7, lr}
 80067c0:	b082      	sub	sp, #8
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
 80067c6:	460b      	mov	r3, r1
 80067c8:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 80067ca:	1cfa      	adds	r2, r7, #3
 80067cc:	2301      	movs	r3, #1
 80067ce:	21a4      	movs	r1, #164	; 0xa4
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f7ff ff48 	bl	8006666 <ft5336_write_reg>
 80067d6:	4603      	mov	r3, r0
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3708      	adds	r7, #8
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 80067ea:	2301      	movs	r3, #1
 80067ec:	683a      	ldr	r2, [r7, #0]
 80067ee:	21a8      	movs	r1, #168	; 0xa8
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f7ff ff21 	bl	8006638 <ft5336_read_reg>
 80067f6:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d107      	bne.n	800680e <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	781a      	ldrb	r2, [r3, #0]
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	781a      	ldrb	r2, [r3, #0]
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 800680e:	68fb      	ldr	r3, [r7, #12]
}
 8006810:	4618      	mov	r0, r3
 8006812:	3710      	adds	r7, #16
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <MX25LM51245G_GetFlashInfo>:
  * @brief  Get Flash information
  * @param  pInfo pointer to information structure
  * @retval error status
  */
int32_t MX25LM51245G_GetFlashInfo(MX25LM51245G_Info_t *pInfo)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25LM51245G_FLASH_SIZE;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006826:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800682e:	605a      	str	r2, [r3, #4]
  pInfo->EraseSectorsNumber     = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SECTOR_64K);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006836:	609a      	str	r2, [r3, #8]
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800683e:	60da      	str	r2, [r3, #12]
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006846:	611a      	str	r2, [r3, #16]
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800684e:	615a      	str	r2, [r3, #20]
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006856:	619a      	str	r2, [r3, #24]
  pInfo->ProgPageSize           = MX25LM51245G_PAGE_SIZE;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800685e:	61da      	str	r2, [r3, #28]
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_PAGE_SIZE);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006866:	621a      	str	r2, [r3, #32]

  return MX25LM51245G_OK;
 8006868:	2300      	movs	r3, #0
};
 800686a:	4618      	mov	r0, r3
 800686c:	370c      	adds	r7, #12
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr

08006876 <MX25LM51245G_AutoPollingMemReady>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25LM51245G_AutoPollingMemReady(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8006876:	b580      	push	{r7, lr}
 8006878:	b09c      	sub	sp, #112	; 0x70
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
 800687e:	460b      	mov	r3, r1
 8006880:	70fb      	strb	r3, [r7, #3]
 8006882:	4613      	mov	r3, r2
 8006884:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef  s_command = {0};
 8006886:	f107 0320 	add.w	r3, r7, #32
 800688a:	2250      	movs	r2, #80	; 0x50
 800688c:	2100      	movs	r1, #0
 800688e:	4618      	mov	r0, r3
 8006890:	f020 fb35 	bl	8026efe <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 8006894:	f107 030c 	add.w	r3, r7, #12
 8006898:	2200      	movs	r2, #0
 800689a:	601a      	str	r2, [r3, #0]
 800689c:	605a      	str	r2, [r3, #4]
 800689e:	609a      	str	r2, [r3, #8]
 80068a0:	60da      	str	r2, [r3, #12]
 80068a2:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80068a4:	78fb      	ldrb	r3, [r7, #3]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d105      	bne.n	80068b6 <MX25LM51245G_AutoPollingMemReady+0x40>
 80068aa:	78bb      	ldrb	r3, [r7, #2]
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d102      	bne.n	80068b6 <MX25LM51245G_AutoPollingMemReady+0x40>
  {
    return MX25LM51245G_ERROR;
 80068b0:	f04f 33ff 	mov.w	r3, #4294967295
 80068b4:	e088      	b.n	80069c8 <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  /* Configure automatic polling mode to wait for memory ready */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80068b6:	2300      	movs	r3, #0
 80068b8:	623b      	str	r3, [r7, #32]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80068ba:	2300      	movs	r3, #0
 80068bc:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80068be:	78fb      	ldrb	r3, [r7, #3]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d101      	bne.n	80068c8 <MX25LM51245G_AutoPollingMemReady+0x52>
 80068c4:	2301      	movs	r3, #1
 80068c6:	e000      	b.n	80068ca <MX25LM51245G_AutoPollingMemReady+0x54>
 80068c8:	2304      	movs	r3, #4
 80068ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80068cc:	78bb      	ldrb	r3, [r7, #2]
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d101      	bne.n	80068d6 <MX25LM51245G_AutoPollingMemReady+0x60>
 80068d2:	2308      	movs	r3, #8
 80068d4:	e000      	b.n	80068d8 <MX25LM51245G_AutoPollingMemReady+0x62>
 80068d6:	2300      	movs	r3, #0
 80068d8:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80068da:	78fb      	ldrb	r3, [r7, #3]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d101      	bne.n	80068e4 <MX25LM51245G_AutoPollingMemReady+0x6e>
 80068e0:	2300      	movs	r3, #0
 80068e2:	e000      	b.n	80068e6 <MX25LM51245G_AutoPollingMemReady+0x70>
 80068e4:	2310      	movs	r3, #16
 80068e6:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 80068e8:	78fb      	ldrb	r3, [r7, #3]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d101      	bne.n	80068f2 <MX25LM51245G_AutoPollingMemReady+0x7c>
 80068ee:	2305      	movs	r3, #5
 80068f0:	e001      	b.n	80068f6 <MX25LM51245G_AutoPollingMemReady+0x80>
 80068f2:	f240 53fa 	movw	r3, #1530	; 0x5fa
 80068f6:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 80068f8:	78fb      	ldrb	r3, [r7, #3]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d101      	bne.n	8006902 <MX25LM51245G_AutoPollingMemReady+0x8c>
 80068fe:	2300      	movs	r3, #0
 8006900:	e001      	b.n	8006906 <MX25LM51245G_AutoPollingMemReady+0x90>
 8006902:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006906:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8006908:	78bb      	ldrb	r3, [r7, #2]
 800690a:	2b01      	cmp	r3, #1
 800690c:	d102      	bne.n	8006914 <MX25LM51245G_AutoPollingMemReady+0x9e>
 800690e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006912:	e000      	b.n	8006916 <MX25LM51245G_AutoPollingMemReady+0xa0>
 8006914:	2300      	movs	r3, #0
 8006916:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8006918:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800691c:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Address            = 0U;
 800691e:	2300      	movs	r3, #0
 8006920:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8006922:	2300      	movs	r3, #0
 8006924:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8006926:	78fb      	ldrb	r3, [r7, #3]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d102      	bne.n	8006932 <MX25LM51245G_AutoPollingMemReady+0xbc>
 800692c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006930:	e001      	b.n	8006936 <MX25LM51245G_AutoPollingMemReady+0xc0>
 8006932:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006936:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8006938:	78bb      	ldrb	r3, [r7, #2]
 800693a:	2b01      	cmp	r3, #1
 800693c:	d102      	bne.n	8006944 <MX25LM51245G_AutoPollingMemReady+0xce>
 800693e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006942:	e000      	b.n	8006946 <MX25LM51245G_AutoPollingMemReady+0xd0>
 8006944:	2300      	movs	r3, #0
 8006946:	663b      	str	r3, [r7, #96]	; 0x60
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8006948:	78fb      	ldrb	r3, [r7, #3]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d101      	bne.n	8006952 <MX25LM51245G_AutoPollingMemReady+0xdc>
 800694e:	2300      	movs	r3, #0
 8006950:	e000      	b.n	8006954 <MX25LM51245G_AutoPollingMemReady+0xde>
 8006952:	2305      	movs	r3, #5
 8006954:	667b      	str	r3, [r7, #100]	; 0x64
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8006956:	78bb      	ldrb	r3, [r7, #2]
 8006958:	2b01      	cmp	r3, #1
 800695a:	d101      	bne.n	8006960 <MX25LM51245G_AutoPollingMemReady+0xea>
 800695c:	2302      	movs	r3, #2
 800695e:	e000      	b.n	8006962 <MX25LM51245G_AutoPollingMemReady+0xec>
 8006960:	2301      	movs	r3, #1
 8006962:	65fb      	str	r3, [r7, #92]	; 0x5c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8006964:	78bb      	ldrb	r3, [r7, #2]
 8006966:	2b01      	cmp	r3, #1
 8006968:	d102      	bne.n	8006970 <MX25LM51245G_AutoPollingMemReady+0xfa>
 800696a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800696e:	e000      	b.n	8006972 <MX25LM51245G_AutoPollingMemReady+0xfc>
 8006970:	2300      	movs	r3, #0
 8006972:	66bb      	str	r3, [r7, #104]	; 0x68
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8006974:	2300      	movs	r3, #0
 8006976:	66fb      	str	r3, [r7, #108]	; 0x6c

  s_config.Match         = 0U;
 8006978:	2300      	movs	r3, #0
 800697a:	60fb      	str	r3, [r7, #12]
  s_config.Mask          = MX25LM51245G_SR_WIP;
 800697c:	2301      	movs	r3, #1
 800697e:	613b      	str	r3, [r7, #16]
  s_config.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 8006980:	2300      	movs	r3, #0
 8006982:	617b      	str	r3, [r7, #20]
  s_config.Interval      = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 8006984:	2310      	movs	r3, #16
 8006986:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8006988:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800698c:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800698e:	f107 0320 	add.w	r3, r7, #32
 8006992:	f241 3288 	movw	r2, #5000	; 0x1388
 8006996:	4619      	mov	r1, r3
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f004 fe21 	bl	800b5e0 <HAL_OSPI_Command>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d002      	beq.n	80069aa <MX25LM51245G_AutoPollingMemReady+0x134>
  {
    return MX25LM51245G_ERROR;
 80069a4:	f04f 33ff 	mov.w	r3, #4294967295
 80069a8:	e00e      	b.n	80069c8 <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80069aa:	f107 030c 	add.w	r3, r7, #12
 80069ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80069b2:	4619      	mov	r1, r3
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f004 ffb6 	bl	800b926 <HAL_OSPI_AutoPolling>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d002      	beq.n	80069c6 <MX25LM51245G_AutoPollingMemReady+0x150>
  {
    return MX25LM51245G_ERROR;
 80069c0:	f04f 33ff 	mov.w	r3, #4294967295
 80069c4:	e000      	b.n	80069c8 <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  return MX25LM51245G_OK;
 80069c6:	2300      	movs	r3, #0
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3770      	adds	r7, #112	; 0x70
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <MX25LM51245G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @param  AddressSize Address size
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableMemoryMappedModeSTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_AddressSize_t AddressSize)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b098      	sub	sp, #96	; 0x60
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	460b      	mov	r3, r1
 80069da:	70fb      	strb	r3, [r7, #3]
 80069dc:	4613      	mov	r3, r2
 80069de:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef      s_command = {0};
 80069e0:	f107 0310 	add.w	r3, r7, #16
 80069e4:	2250      	movs	r2, #80	; 0x50
 80069e6:	2100      	movs	r1, #0
 80069e8:	4618      	mov	r0, r3
 80069ea:	f020 fa88 	bl	8026efe <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 80069ee:	f107 0308 	add.w	r3, r7, #8
 80069f2:	2200      	movs	r2, #0
 80069f4:	601a      	str	r2, [r3, #0]
 80069f6:	605a      	str	r2, [r3, #4]

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 80069f8:	78fb      	ldrb	r3, [r7, #3]
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d105      	bne.n	8006a0a <MX25LM51245G_EnableMemoryMappedModeSTR+0x3a>
 80069fe:	78bb      	ldrb	r3, [r7, #2]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d102      	bne.n	8006a0a <MX25LM51245G_EnableMemoryMappedModeSTR+0x3a>
  {
    return MX25LM51245G_ERROR;
 8006a04:	f04f 33ff 	mov.w	r3, #4294967295
 8006a08:	e088      	b.n	8006b1c <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8006a12:	78fb      	ldrb	r3, [r7, #3]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d101      	bne.n	8006a1c <MX25LM51245G_EnableMemoryMappedModeSTR+0x4c>
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e000      	b.n	8006a1e <MX25LM51245G_EnableMemoryMappedModeSTR+0x4e>
 8006a1c:	2304      	movs	r3, #4
 8006a1e:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8006a20:	2300      	movs	r3, #0
 8006a22:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8006a24:	78fb      	ldrb	r3, [r7, #3]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d101      	bne.n	8006a2e <MX25LM51245G_EnableMemoryMappedModeSTR+0x5e>
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	e000      	b.n	8006a30 <MX25LM51245G_EnableMemoryMappedModeSTR+0x60>
 8006a2e:	2310      	movs	r3, #16
 8006a30:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 8006a32:	78fb      	ldrb	r3, [r7, #3]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d106      	bne.n	8006a46 <MX25LM51245G_EnableMemoryMappedModeSTR+0x76>
 8006a38:	78bb      	ldrb	r3, [r7, #2]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d101      	bne.n	8006a42 <MX25LM51245G_EnableMemoryMappedModeSTR+0x72>
 8006a3e:	230b      	movs	r3, #11
 8006a40:	e003      	b.n	8006a4a <MX25LM51245G_EnableMemoryMappedModeSTR+0x7a>
 8006a42:	230c      	movs	r3, #12
 8006a44:	e001      	b.n	8006a4a <MX25LM51245G_EnableMemoryMappedModeSTR+0x7a>
 8006a46:	f64e 4313 	movw	r3, #60435	; 0xec13
 8006a4a:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8006a4c:	78fb      	ldrb	r3, [r7, #3]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d102      	bne.n	8006a58 <MX25LM51245G_EnableMemoryMappedModeSTR+0x88>
 8006a52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a56:	e001      	b.n	8006a5c <MX25LM51245G_EnableMemoryMappedModeSTR+0x8c>
 8006a58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 8006a62:	78bb      	ldrb	r3, [r7, #2]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d102      	bne.n	8006a6e <MX25LM51245G_EnableMemoryMappedModeSTR+0x9e>
 8006a68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006a6c:	e001      	b.n	8006a72 <MX25LM51245G_EnableMemoryMappedModeSTR+0xa2>
 8006a6e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006a72:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8006a74:	2300      	movs	r3, #0
 8006a76:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8006a78:	78fb      	ldrb	r3, [r7, #3]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d102      	bne.n	8006a84 <MX25LM51245G_EnableMemoryMappedModeSTR+0xb4>
 8006a7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a82:	e001      	b.n	8006a88 <MX25LM51245G_EnableMemoryMappedModeSTR+0xb8>
 8006a84:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006a88:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 8006a8e:	78fb      	ldrb	r3, [r7, #3]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d101      	bne.n	8006a98 <MX25LM51245G_EnableMemoryMappedModeSTR+0xc8>
 8006a94:	2308      	movs	r3, #8
 8006a96:	e000      	b.n	8006a9a <MX25LM51245G_EnableMemoryMappedModeSTR+0xca>
 8006a98:	2306      	movs	r3, #6
 8006a9a:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the read command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006aa4:	f107 0310 	add.w	r3, r7, #16
 8006aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006aac:	4619      	mov	r1, r3
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f004 fd96 	bl	800b5e0 <HAL_OSPI_Command>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d002      	beq.n	8006ac0 <MX25LM51245G_EnableMemoryMappedModeSTR+0xf0>
  {
    return MX25LM51245G_ERROR;
 8006aba:	f04f 33ff 	mov.w	r3, #4294967295
 8006abe:	e02d      	b.n	8006b1c <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  /* Initialize the program command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_WRITE_CFG;
 8006ac0:	2302      	movs	r3, #2
 8006ac2:	613b      	str	r3, [r7, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8006ac4:	78fb      	ldrb	r3, [r7, #3]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d106      	bne.n	8006ad8 <MX25LM51245G_EnableMemoryMappedModeSTR+0x108>
 8006aca:	78bb      	ldrb	r3, [r7, #2]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d101      	bne.n	8006ad4 <MX25LM51245G_EnableMemoryMappedModeSTR+0x104>
 8006ad0:	2302      	movs	r3, #2
 8006ad2:	e003      	b.n	8006adc <MX25LM51245G_EnableMemoryMappedModeSTR+0x10c>
 8006ad4:	2312      	movs	r3, #18
 8006ad6:	e001      	b.n	8006adc <MX25LM51245G_EnableMemoryMappedModeSTR+0x10c>
 8006ad8:	f241 23ed 	movw	r3, #4845	; 0x12ed
 8006adc:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles        = 0U;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the write command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006ae2:	f107 0310 	add.w	r3, r7, #16
 8006ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006aea:	4619      	mov	r1, r3
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f004 fd77 	bl	800b5e0 <HAL_OSPI_Command>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d002      	beq.n	8006afe <MX25LM51245G_EnableMemoryMappedModeSTR+0x12e>
  {
    return MX25LM51245G_ERROR;
 8006af8:	f04f 33ff 	mov.w	r3, #4294967295
 8006afc:	e00e      	b.n	8006b1c <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8006afe:	2300      	movs	r3, #0
 8006b00:	60bb      	str	r3, [r7, #8]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8006b02:	f107 0308 	add.w	r3, r7, #8
 8006b06:	4619      	mov	r1, r3
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f004 ff93 	bl	800ba34 <HAL_OSPI_MemoryMapped>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d002      	beq.n	8006b1a <MX25LM51245G_EnableMemoryMappedModeSTR+0x14a>
  {
    return MX25LM51245G_ERROR;
 8006b14:	f04f 33ff 	mov.w	r3, #4294967295
 8006b18:	e000      	b.n	8006b1c <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  return MX25LM51245G_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3760      	adds	r7, #96	; 0x60
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <MX25LM51245G_EnableMemoryMappedModeDTR>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableMemoryMappedModeDTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b098      	sub	sp, #96	; 0x60
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  OSPI_RegularCmdTypeDef      s_command = {0};
 8006b30:	f107 0310 	add.w	r3, r7, #16
 8006b34:	2250      	movs	r2, #80	; 0x50
 8006b36:	2100      	movs	r1, #0
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f020 f9e0 	bl	8026efe <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8006b3e:	f107 0308 	add.w	r3, r7, #8
 8006b42:	2200      	movs	r2, #0
 8006b44:	601a      	str	r2, [r3, #0]
 8006b46:	605a      	str	r2, [r3, #4]

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 8006b50:	2304      	movs	r3, #4
 8006b52:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_ENABLE;
 8006b54:	2308      	movs	r3, #8
 8006b56:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 8006b58:	2310      	movs	r3, #16
 8006b5a:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 8006b5c:	f64e 6311 	movw	r3, #60945	; 0xee11
 8006b60:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 8006b62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
 8006b68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006b6c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8006b6e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006b72:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8006b74:	2300      	movs	r3, #0
 8006b76:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 8006b78:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006b7c:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
 8006b7e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006b82:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 8006b84:	2306      	movs	r3, #6
 8006b86:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
 8006b88:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8006b8c:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006b92:	f107 0310 	add.w	r3, r7, #16
 8006b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f004 fd1f 	bl	800b5e0 <HAL_OSPI_Command>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d002      	beq.n	8006bae <MX25LM51245G_EnableMemoryMappedModeDTR+0x8a>
  {
    return MX25LM51245G_ERROR;
 8006ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8006bac:	e025      	b.n	8006bfa <MX25LM51245G_EnableMemoryMappedModeDTR+0xd6>
  }

  /* Initialize the program command */
  s_command.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 8006bae:	2302      	movs	r3, #2
 8006bb0:	613b      	str	r3, [r7, #16]
  s_command.Instruction   = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8006bb2:	f241 23ed 	movw	r3, #4845	; 0x12ed
 8006bb6:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles   = 0U;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode       = HAL_OSPI_DQS_DISABLE;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006bc0:	f107 0310 	add.w	r3, r7, #16
 8006bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bc8:	4619      	mov	r1, r3
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f004 fd08 	bl	800b5e0 <HAL_OSPI_Command>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d002      	beq.n	8006bdc <MX25LM51245G_EnableMemoryMappedModeDTR+0xb8>
  {
    return MX25LM51245G_ERROR;
 8006bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8006bda:	e00e      	b.n	8006bfa <MX25LM51245G_EnableMemoryMappedModeDTR+0xd6>
  }
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	60bb      	str	r3, [r7, #8]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8006be0:	f107 0308 	add.w	r3, r7, #8
 8006be4:	4619      	mov	r1, r3
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f004 ff24 	bl	800ba34 <HAL_OSPI_MemoryMapped>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d002      	beq.n	8006bf8 <MX25LM51245G_EnableMemoryMappedModeDTR+0xd4>
  {
    return MX25LM51245G_ERROR;
 8006bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8006bf6:	e000      	b.n	8006bfa <MX25LM51245G_EnableMemoryMappedModeDTR+0xd6>
  }

  return MX25LM51245G_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3760      	adds	r7, #96	; 0x60
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <MX25LM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_WriteEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b09c      	sub	sp, #112	; 0x70
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	70fb      	strb	r3, [r7, #3]
 8006c0e:	4613      	mov	r3, r2
 8006c10:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef     s_command = {0};
 8006c12:	f107 0320 	add.w	r3, r7, #32
 8006c16:	2250      	movs	r2, #80	; 0x50
 8006c18:	2100      	movs	r1, #0
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f020 f96f 	bl	8026efe <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 8006c20:	f107 030c 	add.w	r3, r7, #12
 8006c24:	2200      	movs	r2, #0
 8006c26:	601a      	str	r2, [r3, #0]
 8006c28:	605a      	str	r2, [r3, #4]
 8006c2a:	609a      	str	r2, [r3, #8]
 8006c2c:	60da      	str	r2, [r3, #12]
 8006c2e:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8006c30:	78fb      	ldrb	r3, [r7, #3]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d105      	bne.n	8006c42 <MX25LM51245G_WriteEnable+0x40>
 8006c36:	78bb      	ldrb	r3, [r7, #2]
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d102      	bne.n	8006c42 <MX25LM51245G_WriteEnable+0x40>
  {
    return MX25LM51245G_ERROR;
 8006c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c40:	e0a6      	b.n	8006d90 <MX25LM51245G_WriteEnable+0x18e>
  }

  /* Initialize the write enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8006c42:	2300      	movs	r3, #0
 8006c44:	623b      	str	r3, [r7, #32]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8006c46:	2300      	movs	r3, #0
 8006c48:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8006c4a:	78fb      	ldrb	r3, [r7, #3]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d101      	bne.n	8006c54 <MX25LM51245G_WriteEnable+0x52>
 8006c50:	2301      	movs	r3, #1
 8006c52:	e000      	b.n	8006c56 <MX25LM51245G_WriteEnable+0x54>
 8006c54:	2304      	movs	r3, #4
 8006c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8006c58:	78bb      	ldrb	r3, [r7, #2]
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d101      	bne.n	8006c62 <MX25LM51245G_WriteEnable+0x60>
 8006c5e:	2308      	movs	r3, #8
 8006c60:	e000      	b.n	8006c64 <MX25LM51245G_WriteEnable+0x62>
 8006c62:	2300      	movs	r3, #0
 8006c64:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8006c66:	78fb      	ldrb	r3, [r7, #3]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d101      	bne.n	8006c70 <MX25LM51245G_WriteEnable+0x6e>
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	e000      	b.n	8006c72 <MX25LM51245G_WriteEnable+0x70>
 8006c70:	2310      	movs	r3, #16
 8006c72:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_ENABLE_CMD : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 8006c74:	78fb      	ldrb	r3, [r7, #3]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d101      	bne.n	8006c7e <MX25LM51245G_WriteEnable+0x7c>
 8006c7a:	2306      	movs	r3, #6
 8006c7c:	e001      	b.n	8006c82 <MX25LM51245G_WriteEnable+0x80>
 8006c7e:	f240 63f9 	movw	r3, #1785	; 0x6f9
 8006c82:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8006c84:	2300      	movs	r3, #0
 8006c86:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DummyCycles        = 0U;
 8006c90:	2300      	movs	r3, #0
 8006c92:	667b      	str	r3, [r7, #100]	; 0x64
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8006c94:	2300      	movs	r3, #0
 8006c96:	66bb      	str	r3, [r7, #104]	; 0x68
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006c9c:	f107 0320 	add.w	r3, r7, #32
 8006ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f004 fc9a 	bl	800b5e0 <HAL_OSPI_Command>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d002      	beq.n	8006cb8 <MX25LM51245G_WriteEnable+0xb6>
  {
    return MX25LM51245G_ERROR;
 8006cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8006cb6:	e06b      	b.n	8006d90 <MX25LM51245G_WriteEnable+0x18e>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8006cb8:	78fb      	ldrb	r3, [r7, #3]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d101      	bne.n	8006cc2 <MX25LM51245G_WriteEnable+0xc0>
 8006cbe:	2305      	movs	r3, #5
 8006cc0:	e001      	b.n	8006cc6 <MX25LM51245G_WriteEnable+0xc4>
 8006cc2:	f240 53fa 	movw	r3, #1530	; 0x5fa
 8006cc6:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8006cc8:	78fb      	ldrb	r3, [r7, #3]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d101      	bne.n	8006cd2 <MX25LM51245G_WriteEnable+0xd0>
 8006cce:	2300      	movs	r3, #0
 8006cd0:	e001      	b.n	8006cd6 <MX25LM51245G_WriteEnable+0xd4>
 8006cd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8006cd8:	78bb      	ldrb	r3, [r7, #2]
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d102      	bne.n	8006ce4 <MX25LM51245G_WriteEnable+0xe2>
 8006cde:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006ce2:	e000      	b.n	8006ce6 <MX25LM51245G_WriteEnable+0xe4>
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AddressSize    = HAL_OSPI_ADDRESS_32_BITS;
 8006ce8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006cec:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Address        = 0U;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8006cf2:	78fb      	ldrb	r3, [r7, #3]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d102      	bne.n	8006cfe <MX25LM51245G_WriteEnable+0xfc>
 8006cf8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006cfc:	e001      	b.n	8006d02 <MX25LM51245G_WriteEnable+0x100>
 8006cfe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006d02:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8006d04:	78bb      	ldrb	r3, [r7, #2]
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d102      	bne.n	8006d10 <MX25LM51245G_WriteEnable+0x10e>
 8006d0a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006d0e:	e000      	b.n	8006d12 <MX25LM51245G_WriteEnable+0x110>
 8006d10:	2300      	movs	r3, #0
 8006d12:	663b      	str	r3, [r7, #96]	; 0x60
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8006d14:	78fb      	ldrb	r3, [r7, #3]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d101      	bne.n	8006d1e <MX25LM51245G_WriteEnable+0x11c>
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	e000      	b.n	8006d20 <MX25LM51245G_WriteEnable+0x11e>
 8006d1e:	2305      	movs	r3, #5
 8006d20:	667b      	str	r3, [r7, #100]	; 0x64
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8006d22:	78bb      	ldrb	r3, [r7, #2]
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d101      	bne.n	8006d2c <MX25LM51245G_WriteEnable+0x12a>
 8006d28:	2302      	movs	r3, #2
 8006d2a:	e000      	b.n	8006d2e <MX25LM51245G_WriteEnable+0x12c>
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	65fb      	str	r3, [r7, #92]	; 0x5c
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8006d30:	78bb      	ldrb	r3, [r7, #2]
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d102      	bne.n	8006d3c <MX25LM51245G_WriteEnable+0x13a>
 8006d36:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8006d3a:	e000      	b.n	8006d3e <MX25LM51245G_WriteEnable+0x13c>
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006d40:	f107 0320 	add.w	r3, r7, #32
 8006d44:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d48:	4619      	mov	r1, r3
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f004 fc48 	bl	800b5e0 <HAL_OSPI_Command>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d002      	beq.n	8006d5c <MX25LM51245G_WriteEnable+0x15a>
  {
    return MX25LM51245G_ERROR;
 8006d56:	f04f 33ff 	mov.w	r3, #4294967295
 8006d5a:	e019      	b.n	8006d90 <MX25LM51245G_WriteEnable+0x18e>
  }

  s_config.Match           = 2U;
 8006d5c:	2302      	movs	r3, #2
 8006d5e:	60fb      	str	r3, [r7, #12]
  s_config.Mask            = 2U;
 8006d60:	2302      	movs	r3, #2
 8006d62:	613b      	str	r3, [r7, #16]
  s_config.MatchMode       = HAL_OSPI_MATCH_MODE_AND;
 8006d64:	2300      	movs	r3, #0
 8006d66:	617b      	str	r3, [r7, #20]
  s_config.Interval        = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 8006d68:	2310      	movs	r3, #16
 8006d6a:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8006d6c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006d70:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006d72:	f107 030c 	add.w	r3, r7, #12
 8006d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f004 fdd2 	bl	800b926 <HAL_OSPI_AutoPolling>
 8006d82:	4603      	mov	r3, r0
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d002      	beq.n	8006d8e <MX25LM51245G_WriteEnable+0x18c>
  {
    return MX25LM51245G_ERROR;
 8006d88:	f04f 33ff 	mov.w	r3, #4294967295
 8006d8c:	e000      	b.n	8006d90 <MX25LM51245G_WriteEnable+0x18e>
  }

  return MX25LM51245G_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3770      	adds	r7, #112	; 0x70
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <MX25LM51245G_WriteCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25LM51245G_WriteCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b098      	sub	sp, #96	; 0x60
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	607b      	str	r3, [r7, #4]
 8006da2:	460b      	mov	r3, r1
 8006da4:	72fb      	strb	r3, [r7, #11]
 8006da6:	4613      	mov	r3, r2
 8006da8:	72bb      	strb	r3, [r7, #10]
  OSPI_RegularCmdTypeDef s_command = {0};
 8006daa:	f107 0310 	add.w	r3, r7, #16
 8006dae:	2250      	movs	r2, #80	; 0x50
 8006db0:	2100      	movs	r1, #0
 8006db2:	4618      	mov	r0, r3
 8006db4:	f020 f8a3 	bl	8026efe <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8006db8:	7afb      	ldrb	r3, [r7, #11]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d105      	bne.n	8006dca <MX25LM51245G_WriteCfg2Register+0x32>
 8006dbe:	7abb      	ldrb	r3, [r7, #10]
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d102      	bne.n	8006dca <MX25LM51245G_WriteCfg2Register+0x32>
  {
    return MX25LM51245G_ERROR;
 8006dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8006dc8:	e077      	b.n	8006eba <MX25LM51245G_WriteCfg2Register+0x122>
  }

  /* Initialize the writing of configuration register 2 */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8006dd2:	7afb      	ldrb	r3, [r7, #11]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d101      	bne.n	8006ddc <MX25LM51245G_WriteCfg2Register+0x44>
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e000      	b.n	8006dde <MX25LM51245G_WriteCfg2Register+0x46>
 8006ddc:	2304      	movs	r3, #4
 8006dde:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8006de0:	7abb      	ldrb	r3, [r7, #10]
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d101      	bne.n	8006dea <MX25LM51245G_WriteCfg2Register+0x52>
 8006de6:	2308      	movs	r3, #8
 8006de8:	e000      	b.n	8006dec <MX25LM51245G_WriteCfg2Register+0x54>
 8006dea:	2300      	movs	r3, #0
 8006dec:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8006dee:	7afb      	ldrb	r3, [r7, #11]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d101      	bne.n	8006df8 <MX25LM51245G_WriteCfg2Register+0x60>
 8006df4:	2300      	movs	r3, #0
 8006df6:	e000      	b.n	8006dfa <MX25LM51245G_WriteCfg2Register+0x62>
 8006df8:	2310      	movs	r3, #16
 8006dfa:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_CFG_REG2_CMD : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 8006dfc:	7afb      	ldrb	r3, [r7, #11]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d101      	bne.n	8006e06 <MX25LM51245G_WriteCfg2Register+0x6e>
 8006e02:	2372      	movs	r3, #114	; 0x72
 8006e04:	e001      	b.n	8006e0a <MX25LM51245G_WriteCfg2Register+0x72>
 8006e06:	f247 238d 	movw	r3, #29325	; 0x728d
 8006e0a:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8006e0c:	7afb      	ldrb	r3, [r7, #11]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d102      	bne.n	8006e18 <MX25LM51245G_WriteCfg2Register+0x80>
 8006e12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e16:	e001      	b.n	8006e1c <MX25LM51245G_WriteCfg2Register+0x84>
 8006e18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8006e1e:	7abb      	ldrb	r3, [r7, #10]
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d102      	bne.n	8006e2a <MX25LM51245G_WriteCfg2Register+0x92>
 8006e24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006e28:	e000      	b.n	8006e2c <MX25LM51245G_WriteCfg2Register+0x94>
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8006e2e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006e32:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Address            = WriteAddr;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8006e3c:	7afb      	ldrb	r3, [r7, #11]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d102      	bne.n	8006e48 <MX25LM51245G_WriteCfg2Register+0xb0>
 8006e42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e46:	e001      	b.n	8006e4c <MX25LM51245G_WriteCfg2Register+0xb4>
 8006e48:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006e4c:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8006e4e:	7abb      	ldrb	r3, [r7, #10]
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d102      	bne.n	8006e5a <MX25LM51245G_WriteCfg2Register+0xc2>
 8006e54:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e58:	e000      	b.n	8006e5c <MX25LM51245G_WriteCfg2Register+0xc4>
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = 0U;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 8006e62:	7afb      	ldrb	r3, [r7, #11]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d006      	beq.n	8006e76 <MX25LM51245G_WriteCfg2Register+0xde>
 8006e68:	7abb      	ldrb	r3, [r7, #10]
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d101      	bne.n	8006e72 <MX25LM51245G_WriteCfg2Register+0xda>
 8006e6e:	2302      	movs	r3, #2
 8006e70:	e002      	b.n	8006e78 <MX25LM51245G_WriteCfg2Register+0xe0>
 8006e72:	2301      	movs	r3, #1
 8006e74:	e000      	b.n	8006e78 <MX25LM51245G_WriteCfg2Register+0xe0>
 8006e76:	2301      	movs	r3, #1
 8006e78:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006e82:	f107 0310 	add.w	r3, r7, #16
 8006e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	68f8      	ldr	r0, [r7, #12]
 8006e8e:	f004 fba7 	bl	800b5e0 <HAL_OSPI_Command>
 8006e92:	4603      	mov	r3, r0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d002      	beq.n	8006e9e <MX25LM51245G_WriteCfg2Register+0x106>
  {
    return MX25LM51245G_ERROR;
 8006e98:	f04f 33ff 	mov.w	r3, #4294967295
 8006e9c:	e00d      	b.n	8006eba <MX25LM51245G_WriteCfg2Register+0x122>
  }

  if (HAL_OSPI_Transmit(Ctx, &Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ea2:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8006ea6:	68f8      	ldr	r0, [r7, #12]
 8006ea8:	f004 fc27 	bl	800b6fa <HAL_OSPI_Transmit>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d002      	beq.n	8006eb8 <MX25LM51245G_WriteCfg2Register+0x120>
  {
    return MX25LM51245G_ERROR;
 8006eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8006eb6:	e000      	b.n	8006eba <MX25LM51245G_WriteCfg2Register+0x122>
  }

  return MX25LM51245G_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3760      	adds	r7, #96	; 0x60
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}

08006ec2 <MX25LM51245G_ReadCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25LM51245G_ReadCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b098      	sub	sp, #96	; 0x60
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	60f8      	str	r0, [r7, #12]
 8006eca:	607b      	str	r3, [r7, #4]
 8006ecc:	460b      	mov	r3, r1
 8006ece:	72fb      	strb	r3, [r7, #11]
 8006ed0:	4613      	mov	r3, r2
 8006ed2:	72bb      	strb	r3, [r7, #10]
  OSPI_RegularCmdTypeDef s_command = {0};
 8006ed4:	f107 0310 	add.w	r3, r7, #16
 8006ed8:	2250      	movs	r2, #80	; 0x50
 8006eda:	2100      	movs	r1, #0
 8006edc:	4618      	mov	r0, r3
 8006ede:	f020 f80e 	bl	8026efe <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8006ee2:	7afb      	ldrb	r3, [r7, #11]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d105      	bne.n	8006ef4 <MX25LM51245G_ReadCfg2Register+0x32>
 8006ee8:	7abb      	ldrb	r3, [r7, #10]
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d102      	bne.n	8006ef4 <MX25LM51245G_ReadCfg2Register+0x32>
  {
    return MX25LM51245G_ERROR;
 8006eee:	f04f 33ff 	mov.w	r3, #4294967295
 8006ef2:	e07c      	b.n	8006fee <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  /* Initialize the reading of status register */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8006efc:	7afb      	ldrb	r3, [r7, #11]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d101      	bne.n	8006f06 <MX25LM51245G_ReadCfg2Register+0x44>
 8006f02:	2301      	movs	r3, #1
 8006f04:	e000      	b.n	8006f08 <MX25LM51245G_ReadCfg2Register+0x46>
 8006f06:	2304      	movs	r3, #4
 8006f08:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8006f0a:	7abb      	ldrb	r3, [r7, #10]
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d101      	bne.n	8006f14 <MX25LM51245G_ReadCfg2Register+0x52>
 8006f10:	2308      	movs	r3, #8
 8006f12:	e000      	b.n	8006f16 <MX25LM51245G_ReadCfg2Register+0x54>
 8006f14:	2300      	movs	r3, #0
 8006f16:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8006f18:	7afb      	ldrb	r3, [r7, #11]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d101      	bne.n	8006f22 <MX25LM51245G_ReadCfg2Register+0x60>
 8006f1e:	2300      	movs	r3, #0
 8006f20:	e000      	b.n	8006f24 <MX25LM51245G_ReadCfg2Register+0x62>
 8006f22:	2310      	movs	r3, #16
 8006f24:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_CFG_REG2_CMD : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 8006f26:	7afb      	ldrb	r3, [r7, #11]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d101      	bne.n	8006f30 <MX25LM51245G_ReadCfg2Register+0x6e>
 8006f2c:	2371      	movs	r3, #113	; 0x71
 8006f2e:	e001      	b.n	8006f34 <MX25LM51245G_ReadCfg2Register+0x72>
 8006f30:	f247 138e 	movw	r3, #29070	; 0x718e
 8006f34:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8006f36:	7afb      	ldrb	r3, [r7, #11]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d102      	bne.n	8006f42 <MX25LM51245G_ReadCfg2Register+0x80>
 8006f3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f40:	e001      	b.n	8006f46 <MX25LM51245G_ReadCfg2Register+0x84>
 8006f42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f46:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8006f48:	7abb      	ldrb	r3, [r7, #10]
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d102      	bne.n	8006f54 <MX25LM51245G_ReadCfg2Register+0x92>
 8006f4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006f52:	e000      	b.n	8006f56 <MX25LM51245G_ReadCfg2Register+0x94>
 8006f54:	2300      	movs	r3, #0
 8006f56:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8006f58:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006f5c:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Address            = ReadAddr;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8006f62:	2300      	movs	r3, #0
 8006f64:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8006f66:	7afb      	ldrb	r3, [r7, #11]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d102      	bne.n	8006f72 <MX25LM51245G_ReadCfg2Register+0xb0>
 8006f6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f70:	e001      	b.n	8006f76 <MX25LM51245G_ReadCfg2Register+0xb4>
 8006f72:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006f76:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8006f78:	7abb      	ldrb	r3, [r7, #10]
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d102      	bne.n	8006f84 <MX25LM51245G_ReadCfg2Register+0xc2>
 8006f7e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006f82:	e000      	b.n	8006f86 <MX25LM51245G_ReadCfg2Register+0xc4>
 8006f84:	2300      	movs	r3, #0
 8006f86:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8006f88:	7afb      	ldrb	r3, [r7, #11]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d101      	bne.n	8006f92 <MX25LM51245G_ReadCfg2Register+0xd0>
 8006f8e:	2300      	movs	r3, #0
 8006f90:	e000      	b.n	8006f94 <MX25LM51245G_ReadCfg2Register+0xd2>
 8006f92:	2305      	movs	r3, #5
 8006f94:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8006f96:	7abb      	ldrb	r3, [r7, #10]
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d101      	bne.n	8006fa0 <MX25LM51245G_ReadCfg2Register+0xde>
 8006f9c:	2302      	movs	r3, #2
 8006f9e:	e000      	b.n	8006fa2 <MX25LM51245G_ReadCfg2Register+0xe0>
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8006fa4:	7abb      	ldrb	r3, [r7, #10]
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d102      	bne.n	8006fb0 <MX25LM51245G_ReadCfg2Register+0xee>
 8006faa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8006fae:	e000      	b.n	8006fb2 <MX25LM51245G_ReadCfg2Register+0xf0>
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006fb8:	f107 0310 	add.w	r3, r7, #16
 8006fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	68f8      	ldr	r0, [r7, #12]
 8006fc4:	f004 fb0c 	bl	800b5e0 <HAL_OSPI_Command>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d002      	beq.n	8006fd4 <MX25LM51245G_ReadCfg2Register+0x112>
  {
    return MX25LM51245G_ERROR;
 8006fce:	f04f 33ff 	mov.w	r3, #4294967295
 8006fd2:	e00c      	b.n	8006fee <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  /* Reception of the data */
  if (HAL_OSPI_Receive(Ctx, Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fd8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006fda:	68f8      	ldr	r0, [r7, #12]
 8006fdc:	f004 fc00 	bl	800b7e0 <HAL_OSPI_Receive>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d002      	beq.n	8006fec <MX25LM51245G_ReadCfg2Register+0x12a>
  {
    return MX25LM51245G_ERROR;
 8006fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8006fea:	e000      	b.n	8006fee <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  return MX25LM51245G_OK;
 8006fec:	2300      	movs	r3, #0
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3760      	adds	r7, #96	; 0x60
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}

08006ff6 <MX25LM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8006ff6:	b580      	push	{r7, lr}
 8006ff8:	b096      	sub	sp, #88	; 0x58
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
 8006ffe:	460b      	mov	r3, r1
 8007000:	70fb      	strb	r3, [r7, #3]
 8007002:	4613      	mov	r3, r2
 8007004:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef s_command = {0};
 8007006:	f107 0308 	add.w	r3, r7, #8
 800700a:	2250      	movs	r2, #80	; 0x50
 800700c:	2100      	movs	r1, #0
 800700e:	4618      	mov	r0, r3
 8007010:	f01f ff75 	bl	8026efe <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8007014:	78fb      	ldrb	r3, [r7, #3]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d105      	bne.n	8007026 <MX25LM51245G_ResetEnable+0x30>
 800701a:	78bb      	ldrb	r3, [r7, #2]
 800701c:	2b01      	cmp	r3, #1
 800701e:	d102      	bne.n	8007026 <MX25LM51245G_ResetEnable+0x30>
  {
    return MX25LM51245G_ERROR;
 8007020:	f04f 33ff 	mov.w	r3, #4294967295
 8007024:	e03b      	b.n	800709e <MX25LM51245G_ResetEnable+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8007026:	2300      	movs	r3, #0
 8007028:	60bb      	str	r3, [r7, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800702a:	2300      	movs	r3, #0
 800702c:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800702e:	78fb      	ldrb	r3, [r7, #3]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d101      	bne.n	8007038 <MX25LM51245G_ResetEnable+0x42>
 8007034:	2301      	movs	r3, #1
 8007036:	e000      	b.n	800703a <MX25LM51245G_ResetEnable+0x44>
 8007038:	2304      	movs	r3, #4
 800703a:	617b      	str	r3, [r7, #20]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800703c:	78bb      	ldrb	r3, [r7, #2]
 800703e:	2b01      	cmp	r3, #1
 8007040:	d101      	bne.n	8007046 <MX25LM51245G_ResetEnable+0x50>
 8007042:	2308      	movs	r3, #8
 8007044:	e000      	b.n	8007048 <MX25LM51245G_ResetEnable+0x52>
 8007046:	2300      	movs	r3, #0
 8007048:	61fb      	str	r3, [r7, #28]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800704a:	78fb      	ldrb	r3, [r7, #3]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d101      	bne.n	8007054 <MX25LM51245G_ResetEnable+0x5e>
 8007050:	2300      	movs	r3, #0
 8007052:	e000      	b.n	8007056 <MX25LM51245G_ResetEnable+0x60>
 8007054:	2310      	movs	r3, #16
 8007056:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_ENABLE_CMD : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 8007058:	78fb      	ldrb	r3, [r7, #3]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d101      	bne.n	8007062 <MX25LM51245G_ResetEnable+0x6c>
 800705e:	2366      	movs	r3, #102	; 0x66
 8007060:	e001      	b.n	8007066 <MX25LM51245G_ResetEnable+0x70>
 8007062:	f246 6399 	movw	r3, #26265	; 0x6699
 8007066:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8007068:	2300      	movs	r3, #0
 800706a:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800706c:	2300      	movs	r3, #0
 800706e:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 8007070:	2300      	movs	r3, #0
 8007072:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DummyCycles        = 0U;
 8007074:	2300      	movs	r3, #0
 8007076:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8007078:	2300      	movs	r3, #0
 800707a:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800707c:	2300      	movs	r3, #0
 800707e:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007080:	f107 0308 	add.w	r3, r7, #8
 8007084:	f241 3288 	movw	r2, #5000	; 0x1388
 8007088:	4619      	mov	r1, r3
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f004 faa8 	bl	800b5e0 <HAL_OSPI_Command>
 8007090:	4603      	mov	r3, r0
 8007092:	2b00      	cmp	r3, #0
 8007094:	d002      	beq.n	800709c <MX25LM51245G_ResetEnable+0xa6>
  {
    return MX25LM51245G_ERROR;
 8007096:	f04f 33ff 	mov.w	r3, #4294967295
 800709a:	e000      	b.n	800709e <MX25LM51245G_ResetEnable+0xa8>
  }

  return MX25LM51245G_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3758      	adds	r7, #88	; 0x58
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <MX25LM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetMemory(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b096      	sub	sp, #88	; 0x58
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
 80070ae:	460b      	mov	r3, r1
 80070b0:	70fb      	strb	r3, [r7, #3]
 80070b2:	4613      	mov	r3, r2
 80070b4:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef s_command = {0};
 80070b6:	f107 0308 	add.w	r3, r7, #8
 80070ba:	2250      	movs	r2, #80	; 0x50
 80070bc:	2100      	movs	r1, #0
 80070be:	4618      	mov	r0, r3
 80070c0:	f01f ff1d 	bl	8026efe <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80070c4:	78fb      	ldrb	r3, [r7, #3]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d105      	bne.n	80070d6 <MX25LM51245G_ResetMemory+0x30>
 80070ca:	78bb      	ldrb	r3, [r7, #2]
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d102      	bne.n	80070d6 <MX25LM51245G_ResetMemory+0x30>
  {
    return MX25LM51245G_ERROR;
 80070d0:	f04f 33ff 	mov.w	r3, #4294967295
 80070d4:	e03b      	b.n	800714e <MX25LM51245G_ResetMemory+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80070d6:	2300      	movs	r3, #0
 80070d8:	60bb      	str	r3, [r7, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80070da:	2300      	movs	r3, #0
 80070dc:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80070de:	78fb      	ldrb	r3, [r7, #3]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d101      	bne.n	80070e8 <MX25LM51245G_ResetMemory+0x42>
 80070e4:	2301      	movs	r3, #1
 80070e6:	e000      	b.n	80070ea <MX25LM51245G_ResetMemory+0x44>
 80070e8:	2304      	movs	r3, #4
 80070ea:	617b      	str	r3, [r7, #20]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80070ec:	78bb      	ldrb	r3, [r7, #2]
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d101      	bne.n	80070f6 <MX25LM51245G_ResetMemory+0x50>
 80070f2:	2308      	movs	r3, #8
 80070f4:	e000      	b.n	80070f8 <MX25LM51245G_ResetMemory+0x52>
 80070f6:	2300      	movs	r3, #0
 80070f8:	61fb      	str	r3, [r7, #28]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80070fa:	78fb      	ldrb	r3, [r7, #3]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d101      	bne.n	8007104 <MX25LM51245G_ResetMemory+0x5e>
 8007100:	2300      	movs	r3, #0
 8007102:	e000      	b.n	8007106 <MX25LM51245G_ResetMemory+0x60>
 8007104:	2310      	movs	r3, #16
 8007106:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_MEMORY_CMD : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 8007108:	78fb      	ldrb	r3, [r7, #3]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d101      	bne.n	8007112 <MX25LM51245G_ResetMemory+0x6c>
 800710e:	2399      	movs	r3, #153	; 0x99
 8007110:	e001      	b.n	8007116 <MX25LM51245G_ResetMemory+0x70>
 8007112:	f649 1366 	movw	r3, #39270	; 0x9966
 8007116:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8007118:	2300      	movs	r3, #0
 800711a:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800711c:	2300      	movs	r3, #0
 800711e:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 8007120:	2300      	movs	r3, #0
 8007122:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DummyCycles        = 0U;
 8007124:	2300      	movs	r3, #0
 8007126:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8007128:	2300      	movs	r3, #0
 800712a:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800712c:	2300      	movs	r3, #0
 800712e:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007130:	f107 0308 	add.w	r3, r7, #8
 8007134:	f241 3288 	movw	r2, #5000	; 0x1388
 8007138:	4619      	mov	r1, r3
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f004 fa50 	bl	800b5e0 <HAL_OSPI_Command>
 8007140:	4603      	mov	r3, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	d002      	beq.n	800714c <MX25LM51245G_ResetMemory+0xa6>
  {
    return MX25LM51245G_ERROR;
 8007146:	f04f 33ff 	mov.w	r3, #4294967295
 800714a:	e000      	b.n	800714e <MX25LM51245G_ResetMemory+0xa8>
  }

  return MX25LM51245G_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3758      	adds	r7, #88	; 0x58
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
	...

08007158 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800715e:	2300      	movs	r3, #0
 8007160:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 8007162:	4b16      	ldr	r3, [pc, #88]	; (80071bc <BSP_I2C4_Init+0x64>)
 8007164:	4a16      	ldr	r2, [pc, #88]	; (80071c0 <BSP_I2C4_Init+0x68>)
 8007166:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 8007168:	4b16      	ldr	r3, [pc, #88]	; (80071c4 <BSP_I2C4_Init+0x6c>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d11f      	bne.n	80071b0 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 8007170:	4b14      	ldr	r3, [pc, #80]	; (80071c4 <BSP_I2C4_Init+0x6c>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	3301      	adds	r3, #1
 8007176:	4a13      	ldr	r2, [pc, #76]	; (80071c4 <BSP_I2C4_Init+0x6c>)
 8007178:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800717a:	4810      	ldr	r0, [pc, #64]	; (80071bc <BSP_I2C4_Init+0x64>)
 800717c:	f003 f886 	bl	800a28c <HAL_I2C_GetState>
 8007180:	4603      	mov	r3, r0
 8007182:	2b00      	cmp	r3, #0
 8007184:	d114      	bne.n	80071b0 <BSP_I2C4_Init+0x58>
    {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 8007186:	480d      	ldr	r0, [pc, #52]	; (80071bc <BSP_I2C4_Init+0x64>)
 8007188:	f000 fb60 	bl	800784c <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800718c:	f005 ff64 	bl	800d058 <HAL_RCC_GetPCLK2Freq>
 8007190:	4603      	mov	r3, r0
 8007192:	490d      	ldr	r1, [pc, #52]	; (80071c8 <BSP_I2C4_Init+0x70>)
 8007194:	4618      	mov	r0, r3
 8007196:	f000 f8e3 	bl	8007360 <I2C_GetTiming>
 800719a:	4603      	mov	r3, r0
 800719c:	4619      	mov	r1, r3
 800719e:	4807      	ldr	r0, [pc, #28]	; (80071bc <BSP_I2C4_Init+0x64>)
 80071a0:	f000 f838 	bl	8007214 <MX_I2C4_Init>
 80071a4:	4603      	mov	r3, r0
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d002      	beq.n	80071b0 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80071aa:	f06f 0307 	mvn.w	r3, #7
 80071ae:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 80071b0:	687b      	ldr	r3, [r7, #4]
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3708      	adds	r7, #8
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	2400229c 	.word	0x2400229c
 80071c0:	58001c00 	.word	0x58001c00
 80071c4:	24001894 	.word	0x24001894
 80071c8:	000186a0 	.word	0x000186a0

080071cc <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 80071d2:	2300      	movs	r3, #0
 80071d4:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 80071d6:	4b0d      	ldr	r3, [pc, #52]	; (800720c <BSP_I2C4_DeInit+0x40>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	3b01      	subs	r3, #1
 80071dc:	4a0b      	ldr	r2, [pc, #44]	; (800720c <BSP_I2C4_DeInit+0x40>)
 80071de:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 80071e0:	4b0a      	ldr	r3, [pc, #40]	; (800720c <BSP_I2C4_DeInit+0x40>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d10b      	bne.n	8007200 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 80071e8:	4809      	ldr	r0, [pc, #36]	; (8007210 <BSP_I2C4_DeInit+0x44>)
 80071ea:	f000 fb9b 	bl	8007924 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 80071ee:	4808      	ldr	r0, [pc, #32]	; (8007210 <BSP_I2C4_DeInit+0x44>)
 80071f0:	f002 fdee 	bl	8009dd0 <HAL_I2C_DeInit>
 80071f4:	4603      	mov	r3, r0
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d002      	beq.n	8007200 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 80071fa:	f06f 0307 	mvn.w	r3, #7
 80071fe:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 8007200:	687b      	ldr	r3, [r7, #4]
}
 8007202:	4618      	mov	r0, r3
 8007204:	3708      	adds	r7, #8
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	24001894 	.word	0x24001894
 8007210:	2400229c 	.word	0x2400229c

08007214 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800721e:	2300      	movs	r3, #0
 8007220:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	683a      	ldr	r2, [r7, #0]
 8007226:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2201      	movs	r2, #1
 8007232:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f002 fd2c 	bl	8009cb0 <HAL_I2C_Init>
 8007258:	4603      	mov	r3, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d002      	beq.n	8007264 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	73fb      	strb	r3, [r7, #15]
 8007262:	e014      	b.n	800728e <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 8007264:	2300      	movs	r3, #0
 8007266:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8007268:	68b9      	ldr	r1, [r7, #8]
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f003 fae0 	bl	800a830 <HAL_I2CEx_ConfigAnalogFilter>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d002      	beq.n	800727c <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	73fb      	strb	r3, [r7, #15]
 800727a:	e008      	b.n	800728e <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 800727c:	2100      	movs	r1, #0
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f003 fb21 	bl	800a8c6 <HAL_I2CEx_ConfigDigitalFilter>
 8007284:	4603      	mov	r3, r0
 8007286:	2b00      	cmp	r3, #0
 8007288:	d001      	beq.n	800728e <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 800728e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007290:	4618      	mov	r0, r3
 8007292:	3710      	adds	r7, #16
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <BSP_I2C4_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b088      	sub	sp, #32
 800729c:	af02      	add	r7, sp, #8
 800729e:	60ba      	str	r2, [r7, #8]
 80072a0:	461a      	mov	r2, r3
 80072a2:	4603      	mov	r3, r0
 80072a4:	81fb      	strh	r3, [r7, #14]
 80072a6:	460b      	mov	r3, r1
 80072a8:	81bb      	strh	r3, [r7, #12]
 80072aa:	4613      	mov	r3, r2
 80072ac:	80fb      	strh	r3, [r7, #6]
  int32_t ret;

  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 80072ae:	89b9      	ldrh	r1, [r7, #12]
 80072b0:	89f8      	ldrh	r0, [r7, #14]
 80072b2:	88fb      	ldrh	r3, [r7, #6]
 80072b4:	9300      	str	r3, [sp, #0]
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	2201      	movs	r2, #1
 80072ba:	f000 fb57 	bl	800796c <I2C4_WriteReg>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d102      	bne.n	80072ca <BSP_I2C4_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 80072c4:	2300      	movs	r3, #0
 80072c6:	617b      	str	r3, [r7, #20]
 80072c8:	e00c      	b.n	80072e4 <BSP_I2C4_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80072ca:	4809      	ldr	r0, [pc, #36]	; (80072f0 <BSP_I2C4_WriteReg+0x58>)
 80072cc:	f002 ffec 	bl	800a2a8 <HAL_I2C_GetError>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b04      	cmp	r3, #4
 80072d4:	d103      	bne.n	80072de <BSP_I2C4_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80072d6:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80072da:	617b      	str	r3, [r7, #20]
 80072dc:	e002      	b.n	80072e4 <BSP_I2C4_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80072de:	f06f 0303 	mvn.w	r3, #3
 80072e2:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80072e4:	697b      	ldr	r3, [r7, #20]
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3718      	adds	r7, #24
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop
 80072f0:	2400229c 	.word	0x2400229c

080072f4 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b088      	sub	sp, #32
 80072f8:	af02      	add	r7, sp, #8
 80072fa:	60ba      	str	r2, [r7, #8]
 80072fc:	461a      	mov	r2, r3
 80072fe:	4603      	mov	r3, r0
 8007300:	81fb      	strh	r3, [r7, #14]
 8007302:	460b      	mov	r3, r1
 8007304:	81bb      	strh	r3, [r7, #12]
 8007306:	4613      	mov	r3, r2
 8007308:	80fb      	strh	r3, [r7, #6]
  int32_t ret;

  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800730a:	89b9      	ldrh	r1, [r7, #12]
 800730c:	89f8      	ldrh	r0, [r7, #14]
 800730e:	88fb      	ldrh	r3, [r7, #6]
 8007310:	9300      	str	r3, [sp, #0]
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	2201      	movs	r2, #1
 8007316:	f000 fb4f 	bl	80079b8 <I2C4_ReadReg>
 800731a:	4603      	mov	r3, r0
 800731c:	2b00      	cmp	r3, #0
 800731e:	d102      	bne.n	8007326 <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8007320:	2300      	movs	r3, #0
 8007322:	617b      	str	r3, [r7, #20]
 8007324:	e00c      	b.n	8007340 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8007326:	4809      	ldr	r0, [pc, #36]	; (800734c <BSP_I2C4_ReadReg+0x58>)
 8007328:	f002 ffbe 	bl	800a2a8 <HAL_I2C_GetError>
 800732c:	4603      	mov	r3, r0
 800732e:	2b04      	cmp	r3, #4
 8007330:	d103      	bne.n	800733a <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8007332:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8007336:	617b      	str	r3, [r7, #20]
 8007338:	e002      	b.n	8007340 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800733a:	f06f 0303 	mvn.w	r3, #3
 800733e:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8007340:	697b      	ldr	r3, [r7, #20]
}
 8007342:	4618      	mov	r0, r3
 8007344:	3718      	adds	r7, #24
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	2400229c 	.word	0x2400229c

08007350 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8007354:	f001 fcba 	bl	8008ccc <HAL_GetTick>
 8007358:	4603      	mov	r3, r0
}
 800735a:	4618      	mov	r0, r3
 800735c:	bd80      	pop	{r7, pc}
	...

08007360 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b086      	sub	sp, #24
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 800736a:	2300      	movs	r3, #0
 800736c:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d06b      	beq.n	800744c <I2C_GetTiming+0xec>
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d068      	beq.n	800744c <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800737a:	2300      	movs	r3, #0
 800737c:	613b      	str	r3, [r7, #16]
 800737e:	e060      	b.n	8007442 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8007380:	4a35      	ldr	r2, [pc, #212]	; (8007458 <I2C_GetTiming+0xf8>)
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	212c      	movs	r1, #44	; 0x2c
 8007386:	fb01 f303 	mul.w	r3, r1, r3
 800738a:	4413      	add	r3, r2
 800738c:	3304      	adds	r3, #4
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	683a      	ldr	r2, [r7, #0]
 8007392:	429a      	cmp	r2, r3
 8007394:	d352      	bcc.n	800743c <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8007396:	4a30      	ldr	r2, [pc, #192]	; (8007458 <I2C_GetTiming+0xf8>)
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	212c      	movs	r1, #44	; 0x2c
 800739c:	fb01 f303 	mul.w	r3, r1, r3
 80073a0:	4413      	add	r3, r2
 80073a2:	3308      	adds	r3, #8
 80073a4:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 80073a6:	683a      	ldr	r2, [r7, #0]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d847      	bhi.n	800743c <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 80073ac:	6939      	ldr	r1, [r7, #16]
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 f856 	bl	8007460 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 80073b4:	6939      	ldr	r1, [r7, #16]
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 f940 	bl	800763c <I2C_Compute_SCLL_SCLH>
 80073bc:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2b7f      	cmp	r3, #127	; 0x7f
 80073c2:	d842      	bhi.n	800744a <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80073c4:	4925      	ldr	r1, [pc, #148]	; (800745c <I2C_GetTiming+0xfc>)
 80073c6:	68fa      	ldr	r2, [r7, #12]
 80073c8:	4613      	mov	r3, r2
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	4413      	add	r3, r2
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	440b      	add	r3, r1
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80073d6:	4821      	ldr	r0, [pc, #132]	; (800745c <I2C_GetTiming+0xfc>)
 80073d8:	68fa      	ldr	r2, [r7, #12]
 80073da:	4613      	mov	r3, r2
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	4413      	add	r3, r2
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	4403      	add	r3, r0
 80073e4:	3304      	adds	r3, #4
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	051b      	lsls	r3, r3, #20
 80073ea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80073ee:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80073f0:	481a      	ldr	r0, [pc, #104]	; (800745c <I2C_GetTiming+0xfc>)
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	4613      	mov	r3, r2
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	4413      	add	r3, r2
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	4403      	add	r3, r0
 80073fe:	3308      	adds	r3, #8
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	041b      	lsls	r3, r3, #16
 8007404:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8007408:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800740a:	4814      	ldr	r0, [pc, #80]	; (800745c <I2C_GetTiming+0xfc>)
 800740c:	68fa      	ldr	r2, [r7, #12]
 800740e:	4613      	mov	r3, r2
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	4413      	add	r3, r2
 8007414:	009b      	lsls	r3, r3, #2
 8007416:	4403      	add	r3, r0
 8007418:	330c      	adds	r3, #12
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	021b      	lsls	r3, r3, #8
 800741e:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8007420:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8007422:	480e      	ldr	r0, [pc, #56]	; (800745c <I2C_GetTiming+0xfc>)
 8007424:	68fa      	ldr	r2, [r7, #12]
 8007426:	4613      	mov	r3, r2
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	4413      	add	r3, r2
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	4403      	add	r3, r0
 8007430:	3310      	adds	r3, #16
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8007436:	430b      	orrs	r3, r1
 8007438:	617b      	str	r3, [r7, #20]
        }
        break;
 800743a:	e006      	b.n	800744a <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	3301      	adds	r3, #1
 8007440:	613b      	str	r3, [r7, #16]
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	2b02      	cmp	r3, #2
 8007446:	d99b      	bls.n	8007380 <I2C_GetTiming+0x20>
 8007448:	e000      	b.n	800744c <I2C_GetTiming+0xec>
        break;
 800744a:	bf00      	nop
      }
    }
  }

  return ret;
 800744c:	697b      	ldr	r3, [r7, #20]
}
 800744e:	4618      	mov	r0, r3
 8007450:	3718      	adds	r7, #24
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	08028e70 	.word	0x08028e70
 800745c:	24001898 	.word	0x24001898

08007460 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8007460:	b480      	push	{r7}
 8007462:	b08f      	sub	sp, #60	; 0x3c
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 800746a:	2310      	movs	r3, #16
 800746c:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	085a      	lsrs	r2, r3, #1
 8007472:	4b6e      	ldr	r3, [pc, #440]	; (800762c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8007474:	4413      	add	r3, r2
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	fbb3 f3f2 	udiv	r3, r3, r2
 800747c:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800747e:	2332      	movs	r3, #50	; 0x32
 8007480:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 8007482:	f44f 7382 	mov.w	r3, #260	; 0x104
 8007486:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8007488:	4a69      	ldr	r2, [pc, #420]	; (8007630 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	212c      	movs	r1, #44	; 0x2c
 800748e:	fb01 f303 	mul.w	r3, r1, r3
 8007492:	4413      	add	r3, r2
 8007494:	3324      	adds	r3, #36	; 0x24
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4618      	mov	r0, r3
 800749a:	4a65      	ldr	r2, [pc, #404]	; (8007630 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	212c      	movs	r1, #44	; 0x2c
 80074a0:	fb01 f303 	mul.w	r3, r1, r3
 80074a4:	4413      	add	r3, r2
 80074a6:	330c      	adds	r3, #12
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80074ac:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80074ae:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80074b0:	495f      	ldr	r1, [pc, #380]	; (8007630 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	202c      	movs	r0, #44	; 0x2c
 80074b6:	fb00 f303 	mul.w	r3, r0, r3
 80074ba:	440b      	add	r3, r1
 80074bc:	3328      	adds	r3, #40	; 0x28
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	3303      	adds	r3, #3
 80074c2:	69f9      	ldr	r1, [r7, #28]
 80074c4:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80074c8:	1ad3      	subs	r3, r2, r3
 80074ca:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80074cc:	4a58      	ldr	r2, [pc, #352]	; (8007630 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	212c      	movs	r1, #44	; 0x2c
 80074d2:	fb01 f303 	mul.w	r3, r1, r3
 80074d6:	4413      	add	r3, r2
 80074d8:	3310      	adds	r3, #16
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4618      	mov	r0, r3
 80074de:	4a54      	ldr	r2, [pc, #336]	; (8007630 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	212c      	movs	r1, #44	; 0x2c
 80074e4:	fb01 f303 	mul.w	r3, r1, r3
 80074e8:	4413      	add	r3, r2
 80074ea:	3320      	adds	r3, #32
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80074f0:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80074f2:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80074f4:	494e      	ldr	r1, [pc, #312]	; (8007630 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	202c      	movs	r0, #44	; 0x2c
 80074fa:	fb00 f303 	mul.w	r3, r0, r3
 80074fe:	440b      	add	r3, r1
 8007500:	3328      	adds	r3, #40	; 0x28
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	3304      	adds	r3, #4
 8007506:	69f9      	ldr	r1, [r7, #28]
 8007508:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800750c:	1ad3      	subs	r3, r2, r3
 800750e:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8007510:	4a47      	ldr	r2, [pc, #284]	; (8007630 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	212c      	movs	r1, #44	; 0x2c
 8007516:	fb01 f303 	mul.w	r3, r1, r3
 800751a:	4413      	add	r3, r2
 800751c:	3320      	adds	r3, #32
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4618      	mov	r0, r3
 8007522:	4a43      	ldr	r2, [pc, #268]	; (8007630 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	212c      	movs	r1, #44	; 0x2c
 8007528:	fb01 f303 	mul.w	r3, r1, r3
 800752c:	4413      	add	r3, r2
 800752e:	3314      	adds	r3, #20
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4403      	add	r3, r0
 8007534:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 8007536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007538:	2b00      	cmp	r3, #0
 800753a:	dc01      	bgt.n	8007540 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 800753c:	2300      	movs	r3, #0
 800753e:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 8007540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007542:	2b00      	cmp	r3, #0
 8007544:	dc01      	bgt.n	800754a <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 8007546:	2300      	movs	r3, #0
 8007548:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800754a:	2300      	movs	r3, #0
 800754c:	62bb      	str	r3, [r7, #40]	; 0x28
 800754e:	e062      	b.n	8007616 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8007550:	2300      	movs	r3, #0
 8007552:	627b      	str	r3, [r7, #36]	; 0x24
 8007554:	e059      	b.n	800760a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8007556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007558:	3301      	adds	r3, #1
 800755a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800755c:	3201      	adds	r2, #1
 800755e:	fb03 f202 	mul.w	r2, r3, r2
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	fb02 f303 	mul.w	r3, r2, r3
 8007568:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	68fa      	ldr	r2, [r7, #12]
 800756e:	429a      	cmp	r2, r3
 8007570:	d348      	bcc.n	8007604 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8007572:	2300      	movs	r3, #0
 8007574:	623b      	str	r3, [r7, #32]
 8007576:	e042      	b.n	80075fe <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8007578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800757a:	3301      	adds	r3, #1
 800757c:	6a3a      	ldr	r2, [r7, #32]
 800757e:	fb03 f202 	mul.w	r2, r3, r2
 8007582:	69fb      	ldr	r3, [r7, #28]
 8007584:	fb02 f303 	mul.w	r3, r2, r3
 8007588:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800758a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800758c:	68ba      	ldr	r2, [r7, #8]
 800758e:	429a      	cmp	r2, r3
 8007590:	d332      	bcc.n	80075f8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 8007592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007594:	68ba      	ldr	r2, [r7, #8]
 8007596:	429a      	cmp	r2, r3
 8007598:	d82e      	bhi.n	80075f8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 800759a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800759c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800759e:	429a      	cmp	r2, r3
 80075a0:	d02a      	beq.n	80075f8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80075a2:	4b24      	ldr	r3, [pc, #144]	; (8007634 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	4924      	ldr	r1, [pc, #144]	; (8007638 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80075a8:	4613      	mov	r3, r2
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	4413      	add	r3, r2
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	440b      	add	r3, r1
 80075b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075b4:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80075b6:	4b1f      	ldr	r3, [pc, #124]	; (8007634 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	491f      	ldr	r1, [pc, #124]	; (8007638 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80075bc:	4613      	mov	r3, r2
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	4413      	add	r3, r2
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	440b      	add	r3, r1
 80075c6:	3304      	adds	r3, #4
 80075c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075ca:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80075cc:	4b19      	ldr	r3, [pc, #100]	; (8007634 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	4919      	ldr	r1, [pc, #100]	; (8007638 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80075d2:	4613      	mov	r3, r2
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	4413      	add	r3, r2
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	440b      	add	r3, r1
 80075dc:	3308      	adds	r3, #8
 80075de:	6a3a      	ldr	r2, [r7, #32]
 80075e0:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 80075e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e4:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 80075e6:	4b13      	ldr	r3, [pc, #76]	; (8007634 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	3301      	adds	r3, #1
 80075ec:	4a11      	ldr	r2, [pc, #68]	; (8007634 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80075ee:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80075f0:	4b10      	ldr	r3, [pc, #64]	; (8007634 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2b7f      	cmp	r3, #127	; 0x7f
 80075f6:	d812      	bhi.n	800761e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80075f8:	6a3b      	ldr	r3, [r7, #32]
 80075fa:	3301      	adds	r3, #1
 80075fc:	623b      	str	r3, [r7, #32]
 80075fe:	6a3b      	ldr	r3, [r7, #32]
 8007600:	2b0f      	cmp	r3, #15
 8007602:	d9b9      	bls.n	8007578 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8007604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007606:	3301      	adds	r3, #1
 8007608:	627b      	str	r3, [r7, #36]	; 0x24
 800760a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760c:	2b0f      	cmp	r3, #15
 800760e:	d9a2      	bls.n	8007556 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8007610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007612:	3301      	adds	r3, #1
 8007614:	62bb      	str	r3, [r7, #40]	; 0x28
 8007616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007618:	2b0f      	cmp	r3, #15
 800761a:	d999      	bls.n	8007550 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 800761c:	e000      	b.n	8007620 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 800761e:	bf00      	nop
          }
        }
      }
    }
  }
}
 8007620:	373c      	adds	r7, #60	; 0x3c
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr
 800762a:	bf00      	nop
 800762c:	3b9aca00 	.word	0x3b9aca00
 8007630:	08028e70 	.word	0x08028e70
 8007634:	24002298 	.word	0x24002298
 8007638:	24001898 	.word	0x24001898

0800763c <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800763c:	b480      	push	{r7}
 800763e:	b093      	sub	sp, #76	; 0x4c
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 8007646:	f04f 33ff 	mov.w	r3, #4294967295
 800764a:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	085a      	lsrs	r2, r3, #1
 8007650:	4b7a      	ldr	r3, [pc, #488]	; (800783c <I2C_Compute_SCLL_SCLH+0x200>)
 8007652:	4413      	add	r3, r2
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	fbb3 f3f2 	udiv	r3, r3, r2
 800765a:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 800765c:	4a78      	ldr	r2, [pc, #480]	; (8007840 <I2C_Compute_SCLL_SCLH+0x204>)
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	212c      	movs	r1, #44	; 0x2c
 8007662:	fb01 f303 	mul.w	r3, r1, r3
 8007666:	4413      	add	r3, r2
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	085a      	lsrs	r2, r3, #1
 800766c:	4b73      	ldr	r3, [pc, #460]	; (800783c <I2C_Compute_SCLL_SCLH+0x200>)
 800766e:	4413      	add	r3, r2
 8007670:	4973      	ldr	r1, [pc, #460]	; (8007840 <I2C_Compute_SCLL_SCLH+0x204>)
 8007672:	683a      	ldr	r2, [r7, #0]
 8007674:	202c      	movs	r0, #44	; 0x2c
 8007676:	fb00 f202 	mul.w	r2, r0, r2
 800767a:	440a      	add	r2, r1
 800767c:	6812      	ldr	r2, [r2, #0]
 800767e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007682:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8007684:	2332      	movs	r3, #50	; 0x32
 8007686:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8007688:	4a6d      	ldr	r2, [pc, #436]	; (8007840 <I2C_Compute_SCLL_SCLH+0x204>)
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	212c      	movs	r1, #44	; 0x2c
 800768e:	fb01 f303 	mul.w	r3, r1, r3
 8007692:	4413      	add	r3, r2
 8007694:	3328      	adds	r3, #40	; 0x28
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800769a:	fb02 f303 	mul.w	r3, r2, r3
 800769e:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 80076a0:	4a67      	ldr	r2, [pc, #412]	; (8007840 <I2C_Compute_SCLL_SCLH+0x204>)
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	212c      	movs	r1, #44	; 0x2c
 80076a6:	fb01 f303 	mul.w	r3, r1, r3
 80076aa:	4413      	add	r3, r2
 80076ac:	3304      	adds	r3, #4
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a62      	ldr	r2, [pc, #392]	; (800783c <I2C_Compute_SCLL_SCLH+0x200>)
 80076b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80076b6:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 80076b8:	4a61      	ldr	r2, [pc, #388]	; (8007840 <I2C_Compute_SCLL_SCLH+0x204>)
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	212c      	movs	r1, #44	; 0x2c
 80076be:	fb01 f303 	mul.w	r3, r1, r3
 80076c2:	4413      	add	r3, r2
 80076c4:	3308      	adds	r3, #8
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a5c      	ldr	r2, [pc, #368]	; (800783c <I2C_Compute_SCLL_SCLH+0x200>)
 80076ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80076ce:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 80076d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d2:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80076d4:	2300      	movs	r3, #0
 80076d6:	637b      	str	r3, [r7, #52]	; 0x34
 80076d8:	e0a3      	b.n	8007822 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80076da:	495a      	ldr	r1, [pc, #360]	; (8007844 <I2C_Compute_SCLL_SCLH+0x208>)
 80076dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076de:	4613      	mov	r3, r2
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	4413      	add	r3, r2
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	440b      	add	r3, r1
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	1c5a      	adds	r2, r3, #1
 80076ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ee:	fb02 f303 	mul.w	r3, r2, r3
 80076f2:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80076f4:	2300      	movs	r3, #0
 80076f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076f8:	e08c      	b.n	8007814 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80076fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076fc:	6a3b      	ldr	r3, [r7, #32]
 80076fe:	441a      	add	r2, r3
 8007700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007702:	3301      	adds	r3, #1
 8007704:	6979      	ldr	r1, [r7, #20]
 8007706:	fb03 f101 	mul.w	r1, r3, r1
 800770a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800770c:	005b      	lsls	r3, r3, #1
 800770e:	440b      	add	r3, r1
 8007710:	4413      	add	r3, r2
 8007712:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8007714:	4a4a      	ldr	r2, [pc, #296]	; (8007840 <I2C_Compute_SCLL_SCLH+0x204>)
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	212c      	movs	r1, #44	; 0x2c
 800771a:	fb01 f303 	mul.w	r3, r1, r3
 800771e:	4413      	add	r3, r2
 8007720:	3318      	adds	r3, #24
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	693a      	ldr	r2, [r7, #16]
 8007726:	429a      	cmp	r2, r3
 8007728:	d971      	bls.n	800780e <I2C_Compute_SCLL_SCLH+0x1d2>
 800772a:	693a      	ldr	r2, [r7, #16]
 800772c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772e:	1ad2      	subs	r2, r2, r3
 8007730:	6a3b      	ldr	r3, [r7, #32]
 8007732:	1ad3      	subs	r3, r2, r3
 8007734:	089b      	lsrs	r3, r3, #2
 8007736:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007738:	429a      	cmp	r2, r3
 800773a:	d268      	bcs.n	800780e <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800773c:	2300      	movs	r3, #0
 800773e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007740:	e062      	b.n	8007808 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8007742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007744:	6a3b      	ldr	r3, [r7, #32]
 8007746:	441a      	add	r2, r3
 8007748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800774a:	3301      	adds	r3, #1
 800774c:	6979      	ldr	r1, [r7, #20]
 800774e:	fb03 f101 	mul.w	r1, r3, r1
 8007752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007754:	005b      	lsls	r3, r3, #1
 8007756:	440b      	add	r3, r1
 8007758:	4413      	add	r3, r2
 800775a:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 800775c:	693a      	ldr	r2, [r7, #16]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	441a      	add	r2, r3
 8007762:	4937      	ldr	r1, [pc, #220]	; (8007840 <I2C_Compute_SCLL_SCLH+0x204>)
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	202c      	movs	r0, #44	; 0x2c
 8007768:	fb00 f303 	mul.w	r3, r0, r3
 800776c:	440b      	add	r3, r1
 800776e:	3320      	adds	r3, #32
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	441a      	add	r2, r3
 8007774:	4932      	ldr	r1, [pc, #200]	; (8007840 <I2C_Compute_SCLL_SCLH+0x204>)
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	202c      	movs	r0, #44	; 0x2c
 800777a:	fb00 f303 	mul.w	r3, r0, r3
 800777e:	440b      	add	r3, r1
 8007780:	3324      	adds	r3, #36	; 0x24
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4413      	add	r3, r2
 8007786:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8007788:	68ba      	ldr	r2, [r7, #8]
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	429a      	cmp	r2, r3
 800778e:	d338      	bcc.n	8007802 <I2C_Compute_SCLL_SCLH+0x1c6>
 8007790:	68ba      	ldr	r2, [r7, #8]
 8007792:	69fb      	ldr	r3, [r7, #28]
 8007794:	429a      	cmp	r2, r3
 8007796:	d834      	bhi.n	8007802 <I2C_Compute_SCLL_SCLH+0x1c6>
 8007798:	4a29      	ldr	r2, [pc, #164]	; (8007840 <I2C_Compute_SCLL_SCLH+0x204>)
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	212c      	movs	r1, #44	; 0x2c
 800779e:	fb01 f303 	mul.w	r3, r1, r3
 80077a2:	4413      	add	r3, r2
 80077a4:	331c      	adds	r3, #28
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d329      	bcc.n	8007802 <I2C_Compute_SCLL_SCLH+0x1c6>
 80077ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d225      	bcs.n	8007802 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 80077b6:	68ba      	ldr	r2, [r7, #8]
 80077b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ba:	1ad3      	subs	r3, r2, r3
 80077bc:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 80077be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	da02      	bge.n	80077ca <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 80077c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c6:	425b      	negs	r3, r3
 80077c8:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 80077ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d917      	bls.n	8007802 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 80077d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d4:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 80077d6:	491b      	ldr	r1, [pc, #108]	; (8007844 <I2C_Compute_SCLL_SCLH+0x208>)
 80077d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077da:	4613      	mov	r3, r2
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	4413      	add	r3, r2
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	440b      	add	r3, r1
 80077e4:	3310      	adds	r3, #16
 80077e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80077e8:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 80077ea:	4916      	ldr	r1, [pc, #88]	; (8007844 <I2C_Compute_SCLL_SCLH+0x208>)
 80077ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077ee:	4613      	mov	r3, r2
 80077f0:	009b      	lsls	r3, r3, #2
 80077f2:	4413      	add	r3, r2
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	440b      	add	r3, r1
 80077f8:	330c      	adds	r3, #12
 80077fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077fc:	601a      	str	r2, [r3, #0]
              ret = count;
 80077fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007800:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8007802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007804:	3301      	adds	r3, #1
 8007806:	63bb      	str	r3, [r7, #56]	; 0x38
 8007808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800780a:	2bff      	cmp	r3, #255	; 0xff
 800780c:	d999      	bls.n	8007742 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800780e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007810:	3301      	adds	r3, #1
 8007812:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007816:	2bff      	cmp	r3, #255	; 0xff
 8007818:	f67f af6f 	bls.w	80076fa <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800781c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800781e:	3301      	adds	r3, #1
 8007820:	637b      	str	r3, [r7, #52]	; 0x34
 8007822:	4b09      	ldr	r3, [pc, #36]	; (8007848 <I2C_Compute_SCLL_SCLH+0x20c>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007828:	429a      	cmp	r2, r3
 800782a:	f4ff af56 	bcc.w	80076da <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 800782e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8007830:	4618      	mov	r0, r3
 8007832:	374c      	adds	r7, #76	; 0x4c
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr
 800783c:	3b9aca00 	.word	0x3b9aca00
 8007840:	08028e70 	.word	0x08028e70
 8007844:	24001898 	.word	0x24001898
 8007848:	24002298 	.word	0x24002298

0800784c <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b08a      	sub	sp, #40	; 0x28
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8007854:	4b31      	ldr	r3, [pc, #196]	; (800791c <I2C4_MspInit+0xd0>)
 8007856:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800785a:	4a30      	ldr	r2, [pc, #192]	; (800791c <I2C4_MspInit+0xd0>)
 800785c:	f043 0308 	orr.w	r3, r3, #8
 8007860:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8007864:	4b2d      	ldr	r3, [pc, #180]	; (800791c <I2C4_MspInit+0xd0>)
 8007866:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800786a:	f003 0308 	and.w	r3, r3, #8
 800786e:	613b      	str	r3, [r7, #16]
 8007870:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8007872:	4b2a      	ldr	r3, [pc, #168]	; (800791c <I2C4_MspInit+0xd0>)
 8007874:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007878:	4a28      	ldr	r2, [pc, #160]	; (800791c <I2C4_MspInit+0xd0>)
 800787a:	f043 0308 	orr.w	r3, r3, #8
 800787e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8007882:	4b26      	ldr	r3, [pc, #152]	; (800791c <I2C4_MspInit+0xd0>)
 8007884:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007888:	f003 0308 	and.w	r3, r3, #8
 800788c:	60fb      	str	r3, [r7, #12]
 800788e:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8007890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007894:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8007896:	2312      	movs	r3, #18
 8007898:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800789a:	2300      	movs	r3, #0
 800789c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 800789e:	2302      	movs	r3, #2
 80078a0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 80078a2:	2304      	movs	r3, #4
 80078a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 80078a6:	f107 0314 	add.w	r3, r7, #20
 80078aa:	4619      	mov	r1, r3
 80078ac:	481c      	ldr	r0, [pc, #112]	; (8007920 <I2C4_MspInit+0xd4>)
 80078ae:	f001 fedf 	bl	8009670 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 80078b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80078b6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80078b8:	2312      	movs	r3, #18
 80078ba:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80078bc:	2300      	movs	r3, #0
 80078be:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 80078c0:	2302      	movs	r3, #2
 80078c2:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 80078c4:	2304      	movs	r3, #4
 80078c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 80078c8:	f107 0314 	add.w	r3, r7, #20
 80078cc:	4619      	mov	r1, r3
 80078ce:	4814      	ldr	r0, [pc, #80]	; (8007920 <I2C4_MspInit+0xd4>)
 80078d0:	f001 fece 	bl	8009670 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 80078d4:	4b11      	ldr	r3, [pc, #68]	; (800791c <I2C4_MspInit+0xd0>)
 80078d6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80078da:	4a10      	ldr	r2, [pc, #64]	; (800791c <I2C4_MspInit+0xd0>)
 80078dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078e0:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80078e4:	4b0d      	ldr	r3, [pc, #52]	; (800791c <I2C4_MspInit+0xd0>)
 80078e6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80078ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078ee:	60bb      	str	r3, [r7, #8]
 80078f0:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 80078f2:	4b0a      	ldr	r3, [pc, #40]	; (800791c <I2C4_MspInit+0xd0>)
 80078f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80078f8:	4a08      	ldr	r2, [pc, #32]	; (800791c <I2C4_MspInit+0xd0>)
 80078fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078fe:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 8007902:	4b06      	ldr	r3, [pc, #24]	; (800791c <I2C4_MspInit+0xd0>)
 8007904:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007908:	4a04      	ldr	r2, [pc, #16]	; (800791c <I2C4_MspInit+0xd0>)
 800790a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800790e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 8007912:	bf00      	nop
 8007914:	3728      	adds	r7, #40	; 0x28
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop
 800791c:	58024400 	.word	0x58024400
 8007920:	58020c00 	.word	0x58020c00

08007924 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b088      	sub	sp, #32
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 800792c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007930:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	4619      	mov	r1, r3
 8007936:	480b      	ldr	r0, [pc, #44]	; (8007964 <I2C4_MspDeInit+0x40>)
 8007938:	f002 f84a 	bl	80099d0 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 800793c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007940:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	4619      	mov	r1, r3
 8007946:	4807      	ldr	r0, [pc, #28]	; (8007964 <I2C4_MspDeInit+0x40>)
 8007948:	f002 f842 	bl	80099d0 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 800794c:	4b06      	ldr	r3, [pc, #24]	; (8007968 <I2C4_MspDeInit+0x44>)
 800794e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8007952:	4a05      	ldr	r2, [pc, #20]	; (8007968 <I2C4_MspDeInit+0x44>)
 8007954:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007958:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
}
 800795c:	bf00      	nop
 800795e:	3720      	adds	r7, #32
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}
 8007964:	58020c00 	.word	0x58020c00
 8007968:	58024400 	.word	0x58024400

0800796c <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b088      	sub	sp, #32
 8007970:	af04      	add	r7, sp, #16
 8007972:	607b      	str	r3, [r7, #4]
 8007974:	4603      	mov	r3, r0
 8007976:	81fb      	strh	r3, [r7, #14]
 8007978:	460b      	mov	r3, r1
 800797a:	81bb      	strh	r3, [r7, #12]
 800797c:	4613      	mov	r3, r2
 800797e:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8007980:	8978      	ldrh	r0, [r7, #10]
 8007982:	89ba      	ldrh	r2, [r7, #12]
 8007984:	89f9      	ldrh	r1, [r7, #14]
 8007986:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800798a:	9302      	str	r3, [sp, #8]
 800798c:	8b3b      	ldrh	r3, [r7, #24]
 800798e:	9301      	str	r3, [sp, #4]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	9300      	str	r3, [sp, #0]
 8007994:	4603      	mov	r3, r0
 8007996:	4807      	ldr	r0, [pc, #28]	; (80079b4 <I2C4_WriteReg+0x48>)
 8007998:	f002 fa4a 	bl	8009e30 <HAL_I2C_Mem_Write>
 800799c:	4603      	mov	r3, r0
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d101      	bne.n	80079a6 <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 80079a2:	2300      	movs	r3, #0
 80079a4:	e001      	b.n	80079aa <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 80079a6:	f06f 0307 	mvn.w	r3, #7
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3710      	adds	r7, #16
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	2400229c 	.word	0x2400229c

080079b8 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b088      	sub	sp, #32
 80079bc:	af04      	add	r7, sp, #16
 80079be:	607b      	str	r3, [r7, #4]
 80079c0:	4603      	mov	r3, r0
 80079c2:	81fb      	strh	r3, [r7, #14]
 80079c4:	460b      	mov	r3, r1
 80079c6:	81bb      	strh	r3, [r7, #12]
 80079c8:	4613      	mov	r3, r2
 80079ca:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80079cc:	8978      	ldrh	r0, [r7, #10]
 80079ce:	89ba      	ldrh	r2, [r7, #12]
 80079d0:	89f9      	ldrh	r1, [r7, #14]
 80079d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80079d6:	9302      	str	r3, [sp, #8]
 80079d8:	8b3b      	ldrh	r3, [r7, #24]
 80079da:	9301      	str	r3, [sp, #4]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	9300      	str	r3, [sp, #0]
 80079e0:	4603      	mov	r3, r0
 80079e2:	4807      	ldr	r0, [pc, #28]	; (8007a00 <I2C4_ReadReg+0x48>)
 80079e4:	f002 fb38 	bl	800a058 <HAL_I2C_Mem_Read>
 80079e8:	4603      	mov	r3, r0
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d101      	bne.n	80079f2 <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 80079ee:	2300      	movs	r3, #0
 80079f0:	e001      	b.n	80079f6 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 80079f2:	f06f 0307 	mvn.w	r3, #7
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3710      	adds	r7, #16
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	2400229c 	.word	0x2400229c

08007a04 <BSP_OSPI_NOR_Init>:
  * @param  Instance   OSPI Instance
  * @param  Init       OSPI Init structure
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_Init(uint32_t Instance, BSP_OSPI_NOR_Init_t *Init)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b094      	sub	sp, #80	; 0x50
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	64fb      	str	r3, [r7, #76]	; 0x4c
  BSP_OSPI_NOR_Info_t pInfo;
  MX_OSPI_Config ospi_config;

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d003      	beq.n	8007a20 <BSP_OSPI_NOR_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007a18:	f06f 0301 	mvn.w	r3, #1
 8007a1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a1e:	e071      	b.n	8007b04 <BSP_OSPI_NOR_Init+0x100>
  }
  else
  {
    /* Check if the instance is already initialized */
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 8007a20:	4a3b      	ldr	r2, [pc, #236]	; (8007b10 <BSP_OSPI_NOR_Init+0x10c>)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d16b      	bne.n	8007b04 <BSP_OSPI_NOR_Init+0x100>
    {
#if (USE_HAL_OSPI_REGISTER_CALLBACKS == 0)
      /* Msp OSPI initialization */
      OSPI_NOR_MspInit(&hospi_nor[Instance]);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	225c      	movs	r2, #92	; 0x5c
 8007a30:	fb02 f303 	mul.w	r3, r2, r3
 8007a34:	4a37      	ldr	r2, [pc, #220]	; (8007b14 <BSP_OSPI_NOR_Init+0x110>)
 8007a36:	4413      	add	r3, r2
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f000 fa09 	bl	8007e50 <OSPI_NOR_MspInit>
      if(ret == BSP_ERROR_NONE)
      {
#endif /* USE_HAL_OSPI_REGISTER_CALLBACKS */

        /* Get Flash informations of one memory */
        (void)MX25LM51245G_GetFlashInfo(&pInfo);
 8007a3e:	f107 031c 	add.w	r3, r7, #28
 8007a42:	4618      	mov	r0, r3
 8007a44:	f7fe fee8 	bl	8006818 <MX25LM51245G_GetFlashInfo>

        /* Fill config structure */
        ospi_config.ClockPrescaler = 3U;
 8007a48:	2303      	movs	r3, #3
 8007a4a:	613b      	str	r3, [r7, #16]
        ospi_config.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
 8007a4c:	69fb      	ldr	r3, [r7, #28]
 8007a4e:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a52:	fa93 f3a3 	rbit	r3, r3
 8007a56:	643b      	str	r3, [r7, #64]	; 0x40
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a5a:	64bb      	str	r3, [r7, #72]	; 0x48
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007a5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d101      	bne.n	8007a66 <BSP_OSPI_NOR_Init+0x62>
  {
    return 32U;
 8007a62:	2320      	movs	r3, #32
 8007a64:	e003      	b.n	8007a6e <BSP_OSPI_NOR_Init+0x6a>
  }
  return __builtin_clz(value);
 8007a66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a68:	fab3 f383 	clz	r3, r3
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	60fb      	str	r3, [r7, #12]
        ospi_config.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8007a70:	2300      	movs	r3, #0
 8007a72:	617b      	str	r3, [r7, #20]
        ospi_config.TransferRate   = (uint32_t)Init->TransferRate;
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	785b      	ldrb	r3, [r3, #1]
 8007a78:	61bb      	str	r3, [r7, #24]

        /* STM32 OSPI interface initialization */
        if (MX_OSPI_NOR_Init(&hospi_nor[Instance], &ospi_config) != HAL_OK)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	225c      	movs	r2, #92	; 0x5c
 8007a7e:	fb02 f303 	mul.w	r3, r2, r3
 8007a82:	4a24      	ldr	r2, [pc, #144]	; (8007b14 <BSP_OSPI_NOR_Init+0x110>)
 8007a84:	4413      	add	r3, r2
 8007a86:	f107 020c 	add.w	r2, r7, #12
 8007a8a:	4611      	mov	r1, r2
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f000 f895 	bl	8007bbc <MX_OSPI_NOR_Init>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d003      	beq.n	8007aa0 <BSP_OSPI_NOR_Init+0x9c>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8007a98:	f06f 0303 	mvn.w	r3, #3
 8007a9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a9e:	e031      	b.n	8007b04 <BSP_OSPI_NOR_Init+0x100>
        }
        /* OSPI memory reset */
        else if (OSPI_NOR_ResetMemory(Instance) != BSP_ERROR_NONE)
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 fb7f 	bl	80081a4 <OSPI_NOR_ResetMemory>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d003      	beq.n	8007ab4 <BSP_OSPI_NOR_Init+0xb0>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8007aac:	f06f 0304 	mvn.w	r3, #4
 8007ab0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ab2:	e027      	b.n	8007b04 <BSP_OSPI_NOR_Init+0x100>
        }
        /* Check if memory is ready */
        else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	225c      	movs	r2, #92	; 0x5c
 8007ab8:	fb02 f303 	mul.w	r3, r2, r3
 8007abc:	4a15      	ldr	r2, [pc, #84]	; (8007b14 <BSP_OSPI_NOR_Init+0x110>)
 8007abe:	1898      	adds	r0, r3, r2
 8007ac0:	4a13      	ldr	r2, [pc, #76]	; (8007b10 <BSP_OSPI_NOR_Init+0x10c>)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	00db      	lsls	r3, r3, #3
 8007ac6:	4413      	add	r3, r2
 8007ac8:	7859      	ldrb	r1, [r3, #1]
 8007aca:	4a11      	ldr	r2, [pc, #68]	; (8007b10 <BSP_OSPI_NOR_Init+0x10c>)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	00db      	lsls	r3, r3, #3
 8007ad0:	4413      	add	r3, r2
 8007ad2:	789b      	ldrb	r3, [r3, #2]
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	f7fe fece 	bl	8006876 <MX25LM51245G_AutoPollingMemReady>
 8007ada:	4603      	mov	r3, r0
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d003      	beq.n	8007ae8 <BSP_OSPI_NOR_Init+0xe4>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8007ae0:	f06f 0304 	mvn.w	r3, #4
 8007ae4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ae6:	e00d      	b.n	8007b04 <BSP_OSPI_NOR_Init+0x100>
        }
        else
        {
          /* Configure the memory */
          if (BSP_OSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	7819      	ldrb	r1, [r3, #0]
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	785b      	ldrb	r3, [r3, #1]
 8007af0:	461a      	mov	r2, r3
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 f936 	bl	8007d64 <BSP_OSPI_NOR_ConfigFlash>
 8007af8:	4603      	mov	r3, r0
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d002      	beq.n	8007b04 <BSP_OSPI_NOR_Init+0x100>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8007afe:	f06f 0304 	mvn.w	r3, #4
 8007b02:	64fb      	str	r3, [r7, #76]	; 0x4c
#endif
    }
  }

  /* Return BSP status */
  return ret;
 8007b04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3750      	adds	r7, #80	; 0x50
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	2400234c 	.word	0x2400234c
 8007b14:	240022f0 	.word	0x240022f0

08007b18 <BSP_OSPI_NOR_DeInit>:
  * @brief  De-Initializes the OSPI interface.
  * @param  Instance   OSPI Instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_DeInit(uint32_t Instance)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8007b20:	2300      	movs	r3, #0
 8007b22:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d003      	beq.n	8007b32 <BSP_OSPI_NOR_DeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007b2a:	f06f 0301 	mvn.w	r3, #1
 8007b2e:	60fb      	str	r3, [r7, #12]
 8007b30:	e03a      	b.n	8007ba8 <BSP_OSPI_NOR_DeInit+0x90>
  }
  else
  {
    /* Disable Memory mapped mode */
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 8007b32:	4a20      	ldr	r2, [pc, #128]	; (8007bb4 <BSP_OSPI_NOR_DeInit+0x9c>)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8007b3a:	2b02      	cmp	r3, #2
 8007b3c:	d108      	bne.n	8007b50 <BSP_OSPI_NOR_DeInit+0x38>
    {
      if(BSP_OSPI_NOR_DisableMemoryMappedMode(Instance) != BSP_ERROR_NONE)
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 f8da 	bl	8007cf8 <BSP_OSPI_NOR_DisableMemoryMappedMode>
 8007b44:	4603      	mov	r3, r0
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d002      	beq.n	8007b50 <BSP_OSPI_NOR_DeInit+0x38>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007b4a:	f06f 0304 	mvn.w	r3, #4
 8007b4e:	60fb      	str	r3, [r7, #12]
      }
    }

    if(ret == BSP_ERROR_NONE)
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d128      	bne.n	8007ba8 <BSP_OSPI_NOR_DeInit+0x90>
    {
      /* Set default Ospi_Nor_Ctx values */
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 8007b56:	4a17      	ldr	r2, [pc, #92]	; (8007bb4 <BSP_OSPI_NOR_DeInit+0x9c>)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2100      	movs	r1, #0
 8007b5c:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;
 8007b60:	4a14      	ldr	r2, [pc, #80]	; (8007bb4 <BSP_OSPI_NOR_DeInit+0x9c>)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	00db      	lsls	r3, r3, #3
 8007b66:	4413      	add	r3, r2
 8007b68:	2200      	movs	r2, #0
 8007b6a:	705a      	strb	r2, [r3, #1]
      Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;
 8007b6c:	4a11      	ldr	r2, [pc, #68]	; (8007bb4 <BSP_OSPI_NOR_DeInit+0x9c>)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	00db      	lsls	r3, r3, #3
 8007b72:	4413      	add	r3, r2
 8007b74:	2200      	movs	r2, #0
 8007b76:	709a      	strb	r2, [r3, #2]

#if (USE_HAL_OSPI_REGISTER_CALLBACKS == 0)
      OSPI_NOR_MspDeInit(&hospi_nor[Instance]);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	225c      	movs	r2, #92	; 0x5c
 8007b7c:	fb02 f303 	mul.w	r3, r2, r3
 8007b80:	4a0d      	ldr	r2, [pc, #52]	; (8007bb8 <BSP_OSPI_NOR_DeInit+0xa0>)
 8007b82:	4413      	add	r3, r2
 8007b84:	4618      	mov	r0, r3
 8007b86:	f000 fab3 	bl	80080f0 <OSPI_NOR_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS == 0) */

      /* Call the DeInit function to reset the driver */
      if (HAL_OSPI_DeInit(&hospi_nor[Instance]) != HAL_OK)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	225c      	movs	r2, #92	; 0x5c
 8007b8e:	fb02 f303 	mul.w	r3, r2, r3
 8007b92:	4a09      	ldr	r2, [pc, #36]	; (8007bb8 <BSP_OSPI_NOR_DeInit+0xa0>)
 8007b94:	4413      	add	r3, r2
 8007b96:	4618      	mov	r0, r3
 8007b98:	f003 fbb8 	bl	800b30c <HAL_OSPI_DeInit>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d002      	beq.n	8007ba8 <BSP_OSPI_NOR_DeInit+0x90>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8007ba2:	f06f 0303 	mvn.w	r3, #3
 8007ba6:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3710      	adds	r7, #16
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	2400234c 	.word	0x2400234c
 8007bb8:	240022f0 	.word	0x240022f0

08007bbc <MX_OSPI_NOR_Init>:
  * @param  hospi          OSPI handle
  * @param  Config         OSPI config structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_OSPI_NOR_Init(OSPI_HandleTypeDef *hospi, MX_OSPI_Config *Config)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b082      	sub	sp, #8
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
    /* OctoSPI initialization */
  hospi->Instance = OCTOSPI1;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4a20      	ldr	r2, [pc, #128]	; (8007c4c <MX_OSPI_NOR_Init+0x90>)
 8007bca:	601a      	str	r2, [r3, #0]

  hospi->Init.FifoThreshold      = 32;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2220      	movs	r2, #32
 8007bd0:	605a      	str	r2, [r3, #4]
  hospi->Init.DualQuad           = HAL_OSPI_DUALQUAD_DISABLE;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	609a      	str	r2, [r3, #8]
  hospi->Init.DeviceSize         = Config->MemorySize; /* 512 MBits */
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	611a      	str	r2, [r3, #16]
  hospi->Init.ChipSelectHighTime = 2;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2202      	movs	r2, #2
 8007be4:	615a      	str	r2, [r3, #20]
  hospi->Init.FreeRunningClock   = HAL_OSPI_FREERUNCLK_DISABLE;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2200      	movs	r2, #0
 8007bea:	619a      	str	r2, [r3, #24]
  hospi->Init.ClockMode          = HAL_OSPI_CLOCK_MODE_0;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	61da      	str	r2, [r3, #28]
  hospi->Init.WrapSize           = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	621a      	str	r2, [r3, #32]
  hospi->Init.ClockPrescaler     = Config->ClockPrescaler;
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	685a      	ldr	r2, [r3, #4]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	625a      	str	r2, [r3, #36]	; 0x24
  hospi->Init.SampleShifting     = Config->SampleShifting;
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	689a      	ldr	r2, [r3, #8]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	629a      	str	r2, [r3, #40]	; 0x28
  hospi->Init.ChipSelectBoundary = 0;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	631a      	str	r2, [r3, #48]	; 0x30
  hospi->Init.DelayBlockBypass   = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2208      	movs	r2, #8
 8007c12:	635a      	str	r2, [r3, #52]	; 0x34

  if (Config->TransferRate == (uint32_t)BSP_OSPI_NOR_DTR_TRANSFER)
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d108      	bne.n	8007c2e <MX_OSPI_NOR_Init+0x72>
  {
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007c22:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c2a:	62da      	str	r2, [r3, #44]	; 0x2c
 8007c2c:	e005      	b.n	8007c3a <MX_OSPI_NOR_Init+0x7e>
  }
  else
  {
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  return HAL_OSPI_Init(hospi);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f003 faaa 	bl	800b194 <HAL_OSPI_Init>
 8007c40:	4603      	mov	r3, r0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3708      	adds	r7, #8
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}
 8007c4a:	bf00      	nop
 8007c4c:	52005000 	.word	0x52005000

08007c50 <BSP_OSPI_NOR_EnableMemoryMappedMode>:
  * @brief  Configure the OSPI in memory-mapped mode
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_EnableMemoryMappedMode(uint32_t Instance)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d003      	beq.n	8007c6a <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007c62:	f06f 0301 	mvn.w	r3, #1
 8007c66:	60fb      	str	r3, [r7, #12]
 8007c68:	e03d      	b.n	8007ce6 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
  }
  else if(Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8007c6a:	4a21      	ldr	r2, [pc, #132]	; (8007cf0 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	00db      	lsls	r3, r3, #3
 8007c70:	4413      	add	r3, r2
 8007c72:	789b      	ldrb	r3, [r3, #2]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d11b      	bne.n	8007cb0 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x60>
  {
    if(MX25LM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE) != MX25LM51245G_OK)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	225c      	movs	r2, #92	; 0x5c
 8007c7c:	fb02 f303 	mul.w	r3, r2, r3
 8007c80:	4a1c      	ldr	r2, [pc, #112]	; (8007cf4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa4>)
 8007c82:	1898      	adds	r0, r3, r2
 8007c84:	4a1a      	ldr	r2, [pc, #104]	; (8007cf0 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	00db      	lsls	r3, r3, #3
 8007c8a:	4413      	add	r3, r2
 8007c8c:	785b      	ldrb	r3, [r3, #1]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	4619      	mov	r1, r3
 8007c92:	f7fe fe9d 	bl	80069d0 <MX25LM51245G_EnableMemoryMappedModeSTR>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d003      	beq.n	8007ca4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x54>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007c9c:	f06f 0304 	mvn.w	r3, #4
 8007ca0:	60fb      	str	r3, [r7, #12]
 8007ca2:	e020      	b.n	8007ce6 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
    }
    else /* Update OSPI context if all operations are well done */
    {
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 8007ca4:	4a12      	ldr	r2, [pc, #72]	; (8007cf0 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2102      	movs	r1, #2
 8007caa:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
 8007cae:	e01a      	b.n	8007ce6 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
    }
  }
  else
  {
    if(MX25LM51245G_EnableMemoryMappedModeDTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode) != MX25LM51245G_OK)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	225c      	movs	r2, #92	; 0x5c
 8007cb4:	fb02 f303 	mul.w	r3, r2, r3
 8007cb8:	4a0e      	ldr	r2, [pc, #56]	; (8007cf4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa4>)
 8007cba:	441a      	add	r2, r3
 8007cbc:	490c      	ldr	r1, [pc, #48]	; (8007cf0 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	00db      	lsls	r3, r3, #3
 8007cc2:	440b      	add	r3, r1
 8007cc4:	785b      	ldrb	r3, [r3, #1]
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	4610      	mov	r0, r2
 8007cca:	f7fe ff2b 	bl	8006b24 <MX25LM51245G_EnableMemoryMappedModeDTR>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d003      	beq.n	8007cdc <BSP_OSPI_NOR_EnableMemoryMappedMode+0x8c>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007cd4:	f06f 0304 	mvn.w	r3, #4
 8007cd8:	60fb      	str	r3, [r7, #12]
 8007cda:	e004      	b.n	8007ce6 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
    }
    else /* Update OSPI context if all operations are well done */
    {
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 8007cdc:	4a04      	ldr	r2, [pc, #16]	; (8007cf0 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2102      	movs	r1, #2
 8007ce2:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    }
  }

  /* Return BSP status */
  return ret;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3710      	adds	r7, #16
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	2400234c 	.word	0x2400234c
 8007cf4:	240022f0 	.word	0x240022f0

08007cf8 <BSP_OSPI_NOR_DisableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_DisableMemoryMappedMode(uint32_t Instance)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8007d00:	2300      	movs	r3, #0
 8007d02:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d003      	beq.n	8007d12 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007d0a:	f06f 0301 	mvn.w	r3, #1
 8007d0e:	60fb      	str	r3, [r7, #12]
 8007d10:	e01e      	b.n	8007d50 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x58>
  }
  else if(Ospi_Nor_Ctx[Instance].IsInitialized != OSPI_ACCESS_MMP)
 8007d12:	4a12      	ldr	r2, [pc, #72]	; (8007d5c <BSP_OSPI_NOR_DisableMemoryMappedMode+0x64>)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8007d1a:	2b02      	cmp	r3, #2
 8007d1c:	d003      	beq.n	8007d26 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x2e>
  {
    ret = BSP_ERROR_OSPI_MMP_UNLOCK_FAILURE;
 8007d1e:	f06f 031a 	mvn.w	r3, #26
 8007d22:	60fb      	str	r3, [r7, #12]
 8007d24:	e014      	b.n	8007d50 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x58>
  }/* Abort MMP back to indirect mode */
  else if(HAL_OSPI_Abort(&hospi_nor[Instance]) != HAL_OK)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	225c      	movs	r2, #92	; 0x5c
 8007d2a:	fb02 f303 	mul.w	r3, r2, r3
 8007d2e:	4a0c      	ldr	r2, [pc, #48]	; (8007d60 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x68>)
 8007d30:	4413      	add	r3, r2
 8007d32:	4618      	mov	r0, r3
 8007d34:	f003 ff1c 	bl	800bb70 <HAL_OSPI_Abort>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d003      	beq.n	8007d46 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x4e>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8007d3e:	f06f 0303 	mvn.w	r3, #3
 8007d42:	60fb      	str	r3, [r7, #12]
 8007d44:	e004      	b.n	8007d50 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x58>
  }
  else
  {
    /* Update OSPI context if all operations are well done */
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8007d46:	4a05      	ldr	r2, [pc, #20]	; (8007d5c <BSP_OSPI_NOR_DisableMemoryMappedMode+0x64>)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2101      	movs	r1, #1
 8007d4c:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
  }

  /* Return BSP status */
  return ret;
 8007d50:	68fb      	ldr	r3, [r7, #12]
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3710      	adds	r7, #16
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	2400234c 	.word	0x2400234c
 8007d60:	240022f0 	.word	0x240022f0

08007d64 <BSP_OSPI_NOR_ConfigFlash>:
  * @param  Mode      OSPI mode
  * @param  Rate      OSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_ConfigFlash(uint32_t Instance, BSP_OSPI_NOR_Interface_t Mode, BSP_OSPI_NOR_Transfer_t Rate)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	70fb      	strb	r3, [r7, #3]
 8007d70:	4613      	mov	r3, r2
 8007d72:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 8007d74:	2300      	movs	r3, #0
 8007d76:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d003      	beq.n	8007d86 <BSP_OSPI_NOR_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007d7e:	f06f 0301 	mvn.w	r3, #1
 8007d82:	60fb      	str	r3, [r7, #12]
 8007d84:	e05d      	b.n	8007e42 <BSP_OSPI_NOR_ConfigFlash+0xde>
  }/* Check if MMP mode locked ************************************************/
  else if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 8007d86:	4a31      	ldr	r2, [pc, #196]	; (8007e4c <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8007d8e:	2b02      	cmp	r3, #2
 8007d90:	d103      	bne.n	8007d9a <BSP_OSPI_NOR_ConfigFlash+0x36>
  {
    ret = BSP_ERROR_OSPI_MMP_LOCK_FAILURE;
 8007d92:	f06f 0319 	mvn.w	r3, #25
 8007d96:	60fb      	str	r3, [r7, #12]
 8007d98:	e053      	b.n	8007e42 <BSP_OSPI_NOR_ConfigFlash+0xde>
  }
  else
  {
    /* Setup Flash interface ***************************************************/
    switch(Ospi_Nor_Ctx[Instance].InterfaceMode)
 8007d9a:	4a2c      	ldr	r2, [pc, #176]	; (8007e4c <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	00db      	lsls	r3, r3, #3
 8007da0:	4413      	add	r3, r2
 8007da2:	785b      	ldrb	r3, [r3, #1]
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d125      	bne.n	8007df4 <BSP_OSPI_NOR_ConfigFlash+0x90>
    {
    case BSP_OSPI_NOR_OPI_MODE :  /* 8-8-8 commands */
      if((Mode != BSP_OSPI_NOR_OPI_MODE) || (Rate != Ospi_Nor_Ctx[Instance].TransferRate))
 8007da8:	78fb      	ldrb	r3, [r7, #3]
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d107      	bne.n	8007dbe <BSP_OSPI_NOR_ConfigFlash+0x5a>
 8007dae:	4a27      	ldr	r2, [pc, #156]	; (8007e4c <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	00db      	lsls	r3, r3, #3
 8007db4:	4413      	add	r3, r2
 8007db6:	789b      	ldrb	r3, [r3, #2]
 8007db8:	78ba      	ldrb	r2, [r7, #2]
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d02a      	beq.n	8007e14 <BSP_OSPI_NOR_ConfigFlash+0xb0>
      {
        /* Exit OPI mode */
        ret = OSPI_NOR_ExitOPIMode(Instance);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 fbfc 	bl	80085bc <OSPI_NOR_ExitOPIMode>
 8007dc4:	60f8      	str	r0, [r7, #12]

        if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d123      	bne.n	8007e14 <BSP_OSPI_NOR_ConfigFlash+0xb0>
 8007dcc:	78fb      	ldrb	r3, [r7, #3]
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d120      	bne.n	8007e14 <BSP_OSPI_NOR_ConfigFlash+0xb0>
        {

          if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8007dd2:	4a1e      	ldr	r2, [pc, #120]	; (8007e4c <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	00db      	lsls	r3, r3, #3
 8007dd8:	4413      	add	r3, r2
 8007dda:	789b      	ldrb	r3, [r3, #2]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d104      	bne.n	8007dea <BSP_OSPI_NOR_ConfigFlash+0x86>
          {
            /* Enter DTR OPI mode */
            ret = OSPI_NOR_EnterDOPIMode(Instance);
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f000 fa6f 	bl	80082c4 <OSPI_NOR_EnterDOPIMode>
 8007de6:	60f8      	str	r0, [r7, #12]
            /* Enter STR OPI mode */
            ret = OSPI_NOR_EnterSOPIMode(Instance);
          }
        }
      }
      break;
 8007de8:	e014      	b.n	8007e14 <BSP_OSPI_NOR_ConfigFlash+0xb0>
            ret = OSPI_NOR_EnterSOPIMode(Instance);
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 fb3a 	bl	8008464 <OSPI_NOR_EnterSOPIMode>
 8007df0:	60f8      	str	r0, [r7, #12]
      break;
 8007df2:	e00f      	b.n	8007e14 <BSP_OSPI_NOR_ConfigFlash+0xb0>

    case BSP_OSPI_NOR_SPI_MODE :  /* 1-1-1 commands, Power on H/W default setting */
    default :
      if(Mode == BSP_OSPI_NOR_OPI_MODE)
 8007df4:	78fb      	ldrb	r3, [r7, #3]
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	d10e      	bne.n	8007e18 <BSP_OSPI_NOR_ConfigFlash+0xb4>
      {
        if(Rate == BSP_OSPI_NOR_STR_TRANSFER)
 8007dfa:	78bb      	ldrb	r3, [r7, #2]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d104      	bne.n	8007e0a <BSP_OSPI_NOR_ConfigFlash+0xa6>
        {
          /* Enter STR OPI mode */
          ret = OSPI_NOR_EnterSOPIMode(Instance);
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 fb2f 	bl	8008464 <OSPI_NOR_EnterSOPIMode>
 8007e06:	60f8      	str	r0, [r7, #12]
        {
          /* Enter DTR OPI mode */
          ret = OSPI_NOR_EnterDOPIMode(Instance);
        }
      }
      break;
 8007e08:	e006      	b.n	8007e18 <BSP_OSPI_NOR_ConfigFlash+0xb4>
          ret = OSPI_NOR_EnterDOPIMode(Instance);
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 fa5a 	bl	80082c4 <OSPI_NOR_EnterDOPIMode>
 8007e10:	60f8      	str	r0, [r7, #12]
      break;
 8007e12:	e001      	b.n	8007e18 <BSP_OSPI_NOR_ConfigFlash+0xb4>
      break;
 8007e14:	bf00      	nop
 8007e16:	e000      	b.n	8007e1a <BSP_OSPI_NOR_ConfigFlash+0xb6>
      break;
 8007e18:	bf00      	nop
    }

    /* Update OSPI context if all operations are well done */
    if(ret == BSP_ERROR_NONE)
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d110      	bne.n	8007e42 <BSP_OSPI_NOR_ConfigFlash+0xde>
    {
      /* Update current status parameter *****************************************/
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8007e20:	4a0a      	ldr	r2, [pc, #40]	; (8007e4c <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2101      	movs	r1, #1
 8007e26:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      Ospi_Nor_Ctx[Instance].InterfaceMode = Mode;
 8007e2a:	4a08      	ldr	r2, [pc, #32]	; (8007e4c <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	00db      	lsls	r3, r3, #3
 8007e30:	4413      	add	r3, r2
 8007e32:	78fa      	ldrb	r2, [r7, #3]
 8007e34:	705a      	strb	r2, [r3, #1]
      Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 8007e36:	4a05      	ldr	r2, [pc, #20]	; (8007e4c <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	00db      	lsls	r3, r3, #3
 8007e3c:	4413      	add	r3, r2
 8007e3e:	78ba      	ldrb	r2, [r7, #2]
 8007e40:	709a      	strb	r2, [r3, #2]
    }
  }

  /* Return BSP status */
  return ret;
 8007e42:	68fb      	ldr	r3, [r7, #12]
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3710      	adds	r7, #16
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	2400234c 	.word	0x2400234c

08007e50 <OSPI_NOR_MspInit>:
  * @brief  Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspInit(OSPI_HandleTypeDef *hospi)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b094      	sub	sp, #80	; 0x50
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]

  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* Enable the OctoSPI memory interface clock */
  OSPI_CLK_ENABLE();
 8007e58:	4b9e      	ldr	r3, [pc, #632]	; (80080d4 <OSPI_NOR_MspInit+0x284>)
 8007e5a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8007e5e:	4a9d      	ldr	r2, [pc, #628]	; (80080d4 <OSPI_NOR_MspInit+0x284>)
 8007e60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e64:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8007e68:	4b9a      	ldr	r3, [pc, #616]	; (80080d4 <OSPI_NOR_MspInit+0x284>)
 8007e6a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8007e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e72:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38

  /* Reset the OctoSPI memory interface */
  OSPI_FORCE_RESET();
 8007e76:	4b97      	ldr	r3, [pc, #604]	; (80080d4 <OSPI_NOR_MspInit+0x284>)
 8007e78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e7a:	4a96      	ldr	r2, [pc, #600]	; (80080d4 <OSPI_NOR_MspInit+0x284>)
 8007e7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e80:	67d3      	str	r3, [r2, #124]	; 0x7c
  OSPI_RELEASE_RESET();
 8007e82:	4b94      	ldr	r3, [pc, #592]	; (80080d4 <OSPI_NOR_MspInit+0x284>)
 8007e84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e86:	4a93      	ldr	r2, [pc, #588]	; (80080d4 <OSPI_NOR_MspInit+0x284>)
 8007e88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e8c:	67d3      	str	r3, [r2, #124]	; 0x7c

  /* Enable GPIO clocks */
  OSPI_CLK_GPIO_CLK_ENABLE();
 8007e8e:	4b91      	ldr	r3, [pc, #580]	; (80080d4 <OSPI_NOR_MspInit+0x284>)
 8007e90:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007e94:	4a8f      	ldr	r2, [pc, #572]	; (80080d4 <OSPI_NOR_MspInit+0x284>)
 8007e96:	f043 0302 	orr.w	r3, r3, #2
 8007e9a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8007e9e:	4b8d      	ldr	r3, [pc, #564]	; (80080d4 <OSPI_NOR_MspInit+0x284>)
 8007ea0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007ea4:	f003 0302 	and.w	r3, r3, #2
 8007ea8:	637b      	str	r3, [r7, #52]	; 0x34
 8007eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  OSPI_DQS_GPIO_CLK_ENABLE();
 8007eac:	4b89      	ldr	r3, [pc, #548]	; (80080d4 <OSPI_NOR_MspInit+0x284>)
 8007eae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007eb2:	4a88      	ldr	r2, [pc, #544]	; (80080d4 <OSPI_NOR_MspInit+0x284>)
 8007eb4:	f043 0304 	orr.w	r3, r3, #4
 8007eb8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8007ebc:	4b85      	ldr	r3, [pc, #532]	; (80080d4 <OSPI_NOR_MspInit+0x284>)
 8007ebe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007ec2:	f003 0304 	and.w	r3, r3, #4
 8007ec6:	633b      	str	r3, [r7, #48]	; 0x30
 8007ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  OSPI_CS_GPIO_CLK_ENABLE();
 8007eca:	4b82      	ldr	r3, [pc, #520]	; (80080d4 <OSPI_NOR_MspInit+0x284>)
 8007ecc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007ed0:	4a80      	ldr	r2, [pc, #512]	; (80080d4 <OSPI_NOR_MspInit+0x284>)
 8007ed2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ed6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8007eda:	4b7e      	ldr	r3, [pc, #504]	; (80080d4 <OSPI_NOR_MspInit+0x284>)
 8007edc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  OSPI_D0_GPIO_CLK_ENABLE();
 8007ee8:	4b7a      	ldr	r3, [pc, #488]	; (80080d4 <OSPI_NOR_MspInit+0x284>)
 8007eea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007eee:	4a79      	ldr	r2, [pc, #484]	; (80080d4 <OSPI_NOR_MspInit+0x284>)
 8007ef0:	f043 0308 	orr.w	r3, r3, #8
 8007ef4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8007ef8:	4b76      	ldr	r3, [pc, #472]	; (80080d4 <OSPI_NOR_MspInit+0x284>)
 8007efa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007efe:	f003 0308 	and.w	r3, r3, #8
 8007f02:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
  OSPI_D1_GPIO_CLK_ENABLE();
 8007f06:	4b73      	ldr	r3, [pc, #460]	; (80080d4 <OSPI_NOR_MspInit+0x284>)
 8007f08:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007f0c:	4a71      	ldr	r2, [pc, #452]	; (80080d4 <OSPI_NOR_MspInit+0x284>)
 8007f0e:	f043 0320 	orr.w	r3, r3, #32
 8007f12:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8007f16:	4b6f      	ldr	r3, [pc, #444]	; (80080d4 <OSPI_NOR_MspInit+0x284>)
 8007f18:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007f1c:	f003 0320 	and.w	r3, r3, #32
 8007f20:	627b      	str	r3, [r7, #36]	; 0x24
 8007f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  OSPI_D2_GPIO_CLK_ENABLE();
 8007f24:	4b6b      	ldr	r3, [pc, #428]	; (80080d4 <OSPI_NOR_MspInit+0x284>)
 8007f26:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007f2a:	4a6a      	ldr	r2, [pc, #424]	; (80080d4 <OSPI_NOR_MspInit+0x284>)
 8007f2c:	f043 0320 	orr.w	r3, r3, #32
 8007f30:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8007f34:	4b67      	ldr	r3, [pc, #412]	; (80080d4 <OSPI_NOR_MspInit+0x284>)
 8007f36:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007f3a:	f003 0320 	and.w	r3, r3, #32
 8007f3e:	623b      	str	r3, [r7, #32]
 8007f40:	6a3b      	ldr	r3, [r7, #32]
  OSPI_D3_GPIO_CLK_ENABLE();
 8007f42:	4b64      	ldr	r3, [pc, #400]	; (80080d4 <OSPI_NOR_MspInit+0x284>)
 8007f44:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007f48:	4a62      	ldr	r2, [pc, #392]	; (80080d4 <OSPI_NOR_MspInit+0x284>)
 8007f4a:	f043 0320 	orr.w	r3, r3, #32
 8007f4e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8007f52:	4b60      	ldr	r3, [pc, #384]	; (80080d4 <OSPI_NOR_MspInit+0x284>)
 8007f54:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007f58:	f003 0320 	and.w	r3, r3, #32
 8007f5c:	61fb      	str	r3, [r7, #28]
 8007f5e:	69fb      	ldr	r3, [r7, #28]
  OSPI_D4_GPIO_CLK_ENABLE();
 8007f60:	4b5c      	ldr	r3, [pc, #368]	; (80080d4 <OSPI_NOR_MspInit+0x284>)
 8007f62:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007f66:	4a5b      	ldr	r2, [pc, #364]	; (80080d4 <OSPI_NOR_MspInit+0x284>)
 8007f68:	f043 0304 	orr.w	r3, r3, #4
 8007f6c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8007f70:	4b58      	ldr	r3, [pc, #352]	; (80080d4 <OSPI_NOR_MspInit+0x284>)
 8007f72:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007f76:	f003 0304 	and.w	r3, r3, #4
 8007f7a:	61bb      	str	r3, [r7, #24]
 8007f7c:	69bb      	ldr	r3, [r7, #24]
  OSPI_D5_GPIO_CLK_ENABLE();
 8007f7e:	4b55      	ldr	r3, [pc, #340]	; (80080d4 <OSPI_NOR_MspInit+0x284>)
 8007f80:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007f84:	4a53      	ldr	r2, [pc, #332]	; (80080d4 <OSPI_NOR_MspInit+0x284>)
 8007f86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f8a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8007f8e:	4b51      	ldr	r3, [pc, #324]	; (80080d4 <OSPI_NOR_MspInit+0x284>)
 8007f90:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f98:	617b      	str	r3, [r7, #20]
 8007f9a:	697b      	ldr	r3, [r7, #20]
  OSPI_D6_GPIO_CLK_ENABLE();
 8007f9c:	4b4d      	ldr	r3, [pc, #308]	; (80080d4 <OSPI_NOR_MspInit+0x284>)
 8007f9e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007fa2:	4a4c      	ldr	r2, [pc, #304]	; (80080d4 <OSPI_NOR_MspInit+0x284>)
 8007fa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fa8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8007fac:	4b49      	ldr	r3, [pc, #292]	; (80080d4 <OSPI_NOR_MspInit+0x284>)
 8007fae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fb6:	613b      	str	r3, [r7, #16]
 8007fb8:	693b      	ldr	r3, [r7, #16]
  OSPI_D7_GPIO_CLK_ENABLE();
 8007fba:	4b46      	ldr	r3, [pc, #280]	; (80080d4 <OSPI_NOR_MspInit+0x284>)
 8007fbc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007fc0:	4a44      	ldr	r2, [pc, #272]	; (80080d4 <OSPI_NOR_MspInit+0x284>)
 8007fc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fc6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8007fca:	4b42      	ldr	r3, [pc, #264]	; (80080d4 <OSPI_NOR_MspInit+0x284>)
 8007fcc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fd4:	60fb      	str	r3, [r7, #12]
 8007fd6:	68fb      	ldr	r3, [r7, #12]

  /* OctoSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CS_PIN;
 8007fd8:	2340      	movs	r3, #64	; 0x40
 8007fda:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8007fdc:	2302      	movs	r3, #2
 8007fde:	643b      	str	r3, [r7, #64]	; 0x40
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	647b      	str	r3, [r7, #68]	; 0x44
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8007fe4:	2303      	movs	r3, #3
 8007fe6:	64bb      	str	r3, [r7, #72]	; 0x48
  GPIO_InitStruct.Alternate = OSPI_CS_PIN_AF;
 8007fe8:	230a      	movs	r3, #10
 8007fea:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_CS_GPIO_PORT, &GPIO_InitStruct);
 8007fec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	4839      	ldr	r0, [pc, #228]	; (80080d8 <OSPI_NOR_MspInit+0x288>)
 8007ff4:	f001 fb3c 	bl	8009670 <HAL_GPIO_Init>

  /* OctoSPI DQS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_DQS_PIN;
 8007ff8:	2320      	movs	r3, #32
 8007ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_DQS_PIN_AF;
 8007ffc:	230a      	movs	r3, #10
 8007ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_DQS_GPIO_PORT, &GPIO_InitStruct);
 8008000:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008004:	4619      	mov	r1, r3
 8008006:	4835      	ldr	r0, [pc, #212]	; (80080dc <OSPI_NOR_MspInit+0x28c>)
 8008008:	f001 fb32 	bl	8009670 <HAL_GPIO_Init>

  /* OctoSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CLK_PIN;
 800800c:	2304      	movs	r3, #4
 800800e:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8008010:	2300      	movs	r3, #0
 8008012:	647b      	str	r3, [r7, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_CLK_PIN_AF;
 8008014:	2309      	movs	r3, #9
 8008016:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
 8008018:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800801c:	4619      	mov	r1, r3
 800801e:	4830      	ldr	r0, [pc, #192]	; (80080e0 <OSPI_NOR_MspInit+0x290>)
 8008020:	f001 fb26 	bl	8009670 <HAL_GPIO_Init>

  /* OctoSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D0_PIN;
 8008024:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008028:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D0_PIN_AF;
 800802a:	2309      	movs	r3, #9
 800802c:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D0_GPIO_PORT, &GPIO_InitStruct);
 800802e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008032:	4619      	mov	r1, r3
 8008034:	482b      	ldr	r0, [pc, #172]	; (80080e4 <OSPI_NOR_MspInit+0x294>)
 8008036:	f001 fb1b 	bl	8009670 <HAL_GPIO_Init>

  /* OctoSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D1_PIN;
 800803a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800803e:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D1_PIN_AF;
 8008040:	230a      	movs	r3, #10
 8008042:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D1_GPIO_PORT, &GPIO_InitStruct);
 8008044:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008048:	4619      	mov	r1, r3
 800804a:	4827      	ldr	r0, [pc, #156]	; (80080e8 <OSPI_NOR_MspInit+0x298>)
 800804c:	f001 fb10 	bl	8009670 <HAL_GPIO_Init>

  /* OctoSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D2_PIN;
 8008050:	2380      	movs	r3, #128	; 0x80
 8008052:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D2_PIN_AF;
 8008054:	230a      	movs	r3, #10
 8008056:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D2_GPIO_PORT, &GPIO_InitStruct);
 8008058:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800805c:	4619      	mov	r1, r3
 800805e:	4822      	ldr	r0, [pc, #136]	; (80080e8 <OSPI_NOR_MspInit+0x298>)
 8008060:	f001 fb06 	bl	8009670 <HAL_GPIO_Init>

  /* OctoSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D3_PIN;
 8008064:	2340      	movs	r3, #64	; 0x40
 8008066:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D3_PIN_AF;
 8008068:	230a      	movs	r3, #10
 800806a:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D3_GPIO_PORT, &GPIO_InitStruct);
 800806c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008070:	4619      	mov	r1, r3
 8008072:	481d      	ldr	r0, [pc, #116]	; (80080e8 <OSPI_NOR_MspInit+0x298>)
 8008074:	f001 fafc 	bl	8009670 <HAL_GPIO_Init>

  /* OctoSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D4_PIN;
 8008078:	2302      	movs	r3, #2
 800807a:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D4_PIN_AF;
 800807c:	230a      	movs	r3, #10
 800807e:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D4_GPIO_PORT, &GPIO_InitStruct);
 8008080:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008084:	4619      	mov	r1, r3
 8008086:	4815      	ldr	r0, [pc, #84]	; (80080dc <OSPI_NOR_MspInit+0x28c>)
 8008088:	f001 faf2 	bl	8009670 <HAL_GPIO_Init>

  /* OctoSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D5_PIN;
 800808c:	2308      	movs	r3, #8
 800808e:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D5_PIN_AF;
 8008090:	2309      	movs	r3, #9
 8008092:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D5_GPIO_PORT, &GPIO_InitStruct);
 8008094:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008098:	4619      	mov	r1, r3
 800809a:	4814      	ldr	r0, [pc, #80]	; (80080ec <OSPI_NOR_MspInit+0x29c>)
 800809c:	f001 fae8 	bl	8009670 <HAL_GPIO_Init>

  /* OctoSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D6_PIN;
 80080a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D6_PIN_AF;
 80080a6:	2309      	movs	r3, #9
 80080a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D6_GPIO_PORT, &GPIO_InitStruct);
 80080aa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80080ae:	4619      	mov	r1, r3
 80080b0:	4809      	ldr	r0, [pc, #36]	; (80080d8 <OSPI_NOR_MspInit+0x288>)
 80080b2:	f001 fadd 	bl	8009670 <HAL_GPIO_Init>

  /* OctoSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D7_PIN;
 80080b6:	2380      	movs	r3, #128	; 0x80
 80080b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D7_PIN_AF;
 80080ba:	230a      	movs	r3, #10
 80080bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D7_GPIO_PORT, &GPIO_InitStruct);
 80080be:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80080c2:	4619      	mov	r1, r3
 80080c4:	4807      	ldr	r0, [pc, #28]	; (80080e4 <OSPI_NOR_MspInit+0x294>)
 80080c6:	f001 fad3 	bl	8009670 <HAL_GPIO_Init>
}
 80080ca:	bf00      	nop
 80080cc:	3750      	adds	r7, #80	; 0x50
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	58024400 	.word	0x58024400
 80080d8:	58021800 	.word	0x58021800
 80080dc:	58020800 	.word	0x58020800
 80080e0:	58020400 	.word	0x58020400
 80080e4:	58020c00 	.word	0x58020c00
 80080e8:	58021400 	.word	0x58021400
 80080ec:	58021c00 	.word	0x58021c00

080080f0 <OSPI_NOR_MspDeInit>:
  * @brief  De-Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspDeInit(OSPI_HandleTypeDef *hospi)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b082      	sub	sp, #8
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* OctoSPI GPIO pins de-configuration  */
  HAL_GPIO_DeInit(OSPI_CLK_GPIO_PORT, OSPI_CLK_PIN);
 80080f8:	2104      	movs	r1, #4
 80080fa:	4823      	ldr	r0, [pc, #140]	; (8008188 <OSPI_NOR_MspDeInit+0x98>)
 80080fc:	f001 fc68 	bl	80099d0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_DQS_GPIO_PORT, OSPI_DQS_PIN);
 8008100:	2120      	movs	r1, #32
 8008102:	4822      	ldr	r0, [pc, #136]	; (800818c <OSPI_NOR_MspDeInit+0x9c>)
 8008104:	f001 fc64 	bl	80099d0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_CS_GPIO_PORT, OSPI_CS_PIN);
 8008108:	2140      	movs	r1, #64	; 0x40
 800810a:	4821      	ldr	r0, [pc, #132]	; (8008190 <OSPI_NOR_MspDeInit+0xa0>)
 800810c:	f001 fc60 	bl	80099d0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D0_GPIO_PORT, OSPI_D0_PIN);
 8008110:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008114:	481f      	ldr	r0, [pc, #124]	; (8008194 <OSPI_NOR_MspDeInit+0xa4>)
 8008116:	f001 fc5b 	bl	80099d0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D1_GPIO_PORT, OSPI_D1_PIN);
 800811a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800811e:	481e      	ldr	r0, [pc, #120]	; (8008198 <OSPI_NOR_MspDeInit+0xa8>)
 8008120:	f001 fc56 	bl	80099d0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D2_GPIO_PORT, OSPI_D2_PIN);
 8008124:	2180      	movs	r1, #128	; 0x80
 8008126:	481c      	ldr	r0, [pc, #112]	; (8008198 <OSPI_NOR_MspDeInit+0xa8>)
 8008128:	f001 fc52 	bl	80099d0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D3_GPIO_PORT, OSPI_D3_PIN);
 800812c:	2140      	movs	r1, #64	; 0x40
 800812e:	481a      	ldr	r0, [pc, #104]	; (8008198 <OSPI_NOR_MspDeInit+0xa8>)
 8008130:	f001 fc4e 	bl	80099d0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D4_GPIO_PORT, OSPI_D4_PIN);
 8008134:	2102      	movs	r1, #2
 8008136:	4815      	ldr	r0, [pc, #84]	; (800818c <OSPI_NOR_MspDeInit+0x9c>)
 8008138:	f001 fc4a 	bl	80099d0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D5_GPIO_PORT, OSPI_D5_PIN);
 800813c:	2108      	movs	r1, #8
 800813e:	4817      	ldr	r0, [pc, #92]	; (800819c <OSPI_NOR_MspDeInit+0xac>)
 8008140:	f001 fc46 	bl	80099d0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D6_GPIO_PORT, OSPI_D6_PIN);
 8008144:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008148:	4811      	ldr	r0, [pc, #68]	; (8008190 <OSPI_NOR_MspDeInit+0xa0>)
 800814a:	f001 fc41 	bl	80099d0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D7_GPIO_PORT, OSPI_D7_PIN);
 800814e:	2180      	movs	r1, #128	; 0x80
 8008150:	4810      	ldr	r0, [pc, #64]	; (8008194 <OSPI_NOR_MspDeInit+0xa4>)
 8008152:	f001 fc3d 	bl	80099d0 <HAL_GPIO_DeInit>

  /* Reset the OctoSPI memory interface */
  OSPI_FORCE_RESET();
 8008156:	4b12      	ldr	r3, [pc, #72]	; (80081a0 <OSPI_NOR_MspDeInit+0xb0>)
 8008158:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800815a:	4a11      	ldr	r2, [pc, #68]	; (80081a0 <OSPI_NOR_MspDeInit+0xb0>)
 800815c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008160:	67d3      	str	r3, [r2, #124]	; 0x7c
  OSPI_RELEASE_RESET();
 8008162:	4b0f      	ldr	r3, [pc, #60]	; (80081a0 <OSPI_NOR_MspDeInit+0xb0>)
 8008164:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008166:	4a0e      	ldr	r2, [pc, #56]	; (80081a0 <OSPI_NOR_MspDeInit+0xb0>)
 8008168:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800816c:	67d3      	str	r3, [r2, #124]	; 0x7c

  /* Disable the OctoSPI memory interface clock */
  OSPI_CLK_DISABLE();
 800816e:	4b0c      	ldr	r3, [pc, #48]	; (80081a0 <OSPI_NOR_MspDeInit+0xb0>)
 8008170:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8008174:	4a0a      	ldr	r2, [pc, #40]	; (80081a0 <OSPI_NOR_MspDeInit+0xb0>)
 8008176:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800817a:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
}
 800817e:	bf00      	nop
 8008180:	3708      	adds	r7, #8
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	58020400 	.word	0x58020400
 800818c:	58020800 	.word	0x58020800
 8008190:	58021800 	.word	0x58021800
 8008194:	58020c00 	.word	0x58020c00
 8008198:	58021400 	.word	0x58021400
 800819c:	58021c00 	.word	0x58021c00
 80081a0:	58024400 	.word	0x58024400

080081a4 <OSPI_NOR_ResetMemory>:
  * @brief  This function reset the OSPI memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ResetMemory (uint32_t Instance)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80081ac:	2300      	movs	r3, #0
 80081ae:	60fb      	str	r3, [r7, #12]

  /* Enable write operations */
  if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	225c      	movs	r2, #92	; 0x5c
 80081b4:	fb02 f303 	mul.w	r3, r2, r3
 80081b8:	4a40      	ldr	r2, [pc, #256]	; (80082bc <OSPI_NOR_ResetMemory+0x118>)
 80081ba:	4413      	add	r3, r2
 80081bc:	2200      	movs	r2, #0
 80081be:	2100      	movs	r1, #0
 80081c0:	4618      	mov	r0, r3
 80081c2:	f7fe ff18 	bl	8006ff6 <MX25LM51245G_ResetEnable>
 80081c6:	4603      	mov	r3, r0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d003      	beq.n	80081d4 <OSPI_NOR_ResetMemory+0x30>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80081cc:	f06f 0304 	mvn.w	r3, #4
 80081d0:	60fb      	str	r3, [r7, #12]
 80081d2:	e06d      	b.n	80082b0 <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	225c      	movs	r2, #92	; 0x5c
 80081d8:	fb02 f303 	mul.w	r3, r2, r3
 80081dc:	4a37      	ldr	r2, [pc, #220]	; (80082bc <OSPI_NOR_ResetMemory+0x118>)
 80081de:	4413      	add	r3, r2
 80081e0:	2200      	movs	r2, #0
 80081e2:	2100      	movs	r1, #0
 80081e4:	4618      	mov	r0, r3
 80081e6:	f7fe ff5e 	bl	80070a6 <MX25LM51245G_ResetMemory>
 80081ea:	4603      	mov	r3, r0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d003      	beq.n	80081f8 <OSPI_NOR_ResetMemory+0x54>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80081f0:	f06f 0304 	mvn.w	r3, #4
 80081f4:	60fb      	str	r3, [r7, #12]
 80081f6:	e05b      	b.n	80082b0 <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	225c      	movs	r2, #92	; 0x5c
 80081fc:	fb02 f303 	mul.w	r3, r2, r3
 8008200:	4a2e      	ldr	r2, [pc, #184]	; (80082bc <OSPI_NOR_ResetMemory+0x118>)
 8008202:	4413      	add	r3, r2
 8008204:	2200      	movs	r2, #0
 8008206:	2101      	movs	r1, #1
 8008208:	4618      	mov	r0, r3
 800820a:	f7fe fef4 	bl	8006ff6 <MX25LM51245G_ResetEnable>
 800820e:	4603      	mov	r3, r0
 8008210:	2b00      	cmp	r3, #0
 8008212:	d003      	beq.n	800821c <OSPI_NOR_ResetMemory+0x78>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8008214:	f06f 0304 	mvn.w	r3, #4
 8008218:	60fb      	str	r3, [r7, #12]
 800821a:	e049      	b.n	80082b0 <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	225c      	movs	r2, #92	; 0x5c
 8008220:	fb02 f303 	mul.w	r3, r2, r3
 8008224:	4a25      	ldr	r2, [pc, #148]	; (80082bc <OSPI_NOR_ResetMemory+0x118>)
 8008226:	4413      	add	r3, r2
 8008228:	2200      	movs	r2, #0
 800822a:	2101      	movs	r1, #1
 800822c:	4618      	mov	r0, r3
 800822e:	f7fe ff3a 	bl	80070a6 <MX25LM51245G_ResetMemory>
 8008232:	4603      	mov	r3, r0
 8008234:	2b00      	cmp	r3, #0
 8008236:	d003      	beq.n	8008240 <OSPI_NOR_ResetMemory+0x9c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8008238:	f06f 0304 	mvn.w	r3, #4
 800823c:	60fb      	str	r3, [r7, #12]
 800823e:	e037      	b.n	80082b0 <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	225c      	movs	r2, #92	; 0x5c
 8008244:	fb02 f303 	mul.w	r3, r2, r3
 8008248:	4a1c      	ldr	r2, [pc, #112]	; (80082bc <OSPI_NOR_ResetMemory+0x118>)
 800824a:	4413      	add	r3, r2
 800824c:	2201      	movs	r2, #1
 800824e:	2101      	movs	r1, #1
 8008250:	4618      	mov	r0, r3
 8008252:	f7fe fed0 	bl	8006ff6 <MX25LM51245G_ResetEnable>
 8008256:	4603      	mov	r3, r0
 8008258:	2b00      	cmp	r3, #0
 800825a:	d003      	beq.n	8008264 <OSPI_NOR_ResetMemory+0xc0>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800825c:	f06f 0304 	mvn.w	r3, #4
 8008260:	60fb      	str	r3, [r7, #12]
 8008262:	e025      	b.n	80082b0 <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	225c      	movs	r2, #92	; 0x5c
 8008268:	fb02 f303 	mul.w	r3, r2, r3
 800826c:	4a13      	ldr	r2, [pc, #76]	; (80082bc <OSPI_NOR_ResetMemory+0x118>)
 800826e:	4413      	add	r3, r2
 8008270:	2201      	movs	r2, #1
 8008272:	2101      	movs	r1, #1
 8008274:	4618      	mov	r0, r3
 8008276:	f7fe ff16 	bl	80070a6 <MX25LM51245G_ResetMemory>
 800827a:	4603      	mov	r3, r0
 800827c:	2b00      	cmp	r3, #0
 800827e:	d003      	beq.n	8008288 <OSPI_NOR_ResetMemory+0xe4>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8008280:	f06f 0304 	mvn.w	r3, #4
 8008284:	60fb      	str	r3, [r7, #12]
 8008286:	e013      	b.n	80082b0 <OSPI_NOR_ResetMemory+0x10c>
  }
  else
  {
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access   */
 8008288:	4a0d      	ldr	r2, [pc, #52]	; (80082c0 <OSPI_NOR_ResetMemory+0x11c>)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2101      	movs	r1, #1
 800828e:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;         /* After reset H/W back to SPI mode by default  */
 8008292:	4a0b      	ldr	r2, [pc, #44]	; (80082c0 <OSPI_NOR_ResetMemory+0x11c>)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	00db      	lsls	r3, r3, #3
 8008298:	4413      	add	r3, r2
 800829a:	2200      	movs	r2, #0
 800829c:	705a      	strb	r2, [r3, #1]
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;     /* After reset S/W setting to STR mode          */
 800829e:	4a08      	ldr	r2, [pc, #32]	; (80082c0 <OSPI_NOR_ResetMemory+0x11c>)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	00db      	lsls	r3, r3, #3
 80082a4:	4413      	add	r3, r2
 80082a6:	2200      	movs	r2, #0
 80082a8:	709a      	strb	r2, [r3, #2]

    /* After SWreset CMD, wait in case SWReset occurred during erase operation */
    HAL_Delay(MX25LM51245G_RESET_MAX_TIME);
 80082aa:	2064      	movs	r0, #100	; 0x64
 80082ac:	f000 fd1a 	bl	8008ce4 <HAL_Delay>
  }

  /* Return BSP status */
  return ret;
 80082b0:	68fb      	ldr	r3, [r7, #12]
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3710      	adds	r7, #16
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
 80082ba:	bf00      	nop
 80082bc:	240022f0 	.word	0x240022f0
 80082c0:	2400234c 	.word	0x2400234c

080082c4 <OSPI_NOR_EnterDOPIMode>:
  * @brief  This function enables the octal DTR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterDOPIMode(uint32_t Instance)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b086      	sub	sp, #24
 80082c8:	af02      	add	r7, sp, #8
 80082ca:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80082cc:	2300      	movs	r3, #0
 80082ce:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	225c      	movs	r2, #92	; 0x5c
 80082d4:	fb02 f303 	mul.w	r3, r2, r3
 80082d8:	4a60      	ldr	r2, [pc, #384]	; (800845c <OSPI_NOR_EnterDOPIMode+0x198>)
 80082da:	1898      	adds	r0, r3, r2
 80082dc:	4a60      	ldr	r2, [pc, #384]	; (8008460 <OSPI_NOR_EnterDOPIMode+0x19c>)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	00db      	lsls	r3, r3, #3
 80082e2:	4413      	add	r3, r2
 80082e4:	7859      	ldrb	r1, [r3, #1]
 80082e6:	4a5e      	ldr	r2, [pc, #376]	; (8008460 <OSPI_NOR_EnterDOPIMode+0x19c>)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	00db      	lsls	r3, r3, #3
 80082ec:	4413      	add	r3, r2
 80082ee:	789b      	ldrb	r3, [r3, #2]
 80082f0:	461a      	mov	r2, r3
 80082f2:	f7fe fc86 	bl	8006c02 <MX25LM51245G_WriteEnable>
 80082f6:	4603      	mov	r3, r0
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d003      	beq.n	8008304 <OSPI_NOR_EnterDOPIMode+0x40>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80082fc:	f06f 0304 	mvn.w	r3, #4
 8008300:	60fb      	str	r3, [r7, #12]
 8008302:	e0a6      	b.n	8008452 <OSPI_NOR_EnterDOPIMode+0x18e>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	225c      	movs	r2, #92	; 0x5c
 8008308:	fb02 f303 	mul.w	r3, r2, r3
 800830c:	4a53      	ldr	r2, [pc, #332]	; (800845c <OSPI_NOR_EnterDOPIMode+0x198>)
 800830e:	1898      	adds	r0, r3, r2
 8008310:	4a53      	ldr	r2, [pc, #332]	; (8008460 <OSPI_NOR_EnterDOPIMode+0x19c>)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	00db      	lsls	r3, r3, #3
 8008316:	4413      	add	r3, r2
 8008318:	7859      	ldrb	r1, [r3, #1]
 800831a:	4a51      	ldr	r2, [pc, #324]	; (8008460 <OSPI_NOR_EnterDOPIMode+0x19c>)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	00db      	lsls	r3, r3, #3
 8008320:	4413      	add	r3, r2
 8008322:	789a      	ldrb	r2, [r3, #2]
 8008324:	2307      	movs	r3, #7
 8008326:	9300      	str	r3, [sp, #0]
 8008328:	f44f 7340 	mov.w	r3, #768	; 0x300
 800832c:	f7fe fd34 	bl	8006d98 <MX25LM51245G_WriteCfg2Register>
 8008330:	4603      	mov	r3, r0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d003      	beq.n	800833e <OSPI_NOR_EnterDOPIMode+0x7a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8008336:	f06f 0304 	mvn.w	r3, #4
 800833a:	60fb      	str	r3, [r7, #12]
 800833c:	e089      	b.n	8008452 <OSPI_NOR_EnterDOPIMode+0x18e>
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	225c      	movs	r2, #92	; 0x5c
 8008342:	fb02 f303 	mul.w	r3, r2, r3
 8008346:	4a45      	ldr	r2, [pc, #276]	; (800845c <OSPI_NOR_EnterDOPIMode+0x198>)
 8008348:	1898      	adds	r0, r3, r2
 800834a:	4a45      	ldr	r2, [pc, #276]	; (8008460 <OSPI_NOR_EnterDOPIMode+0x19c>)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	00db      	lsls	r3, r3, #3
 8008350:	4413      	add	r3, r2
 8008352:	7859      	ldrb	r1, [r3, #1]
 8008354:	4a42      	ldr	r2, [pc, #264]	; (8008460 <OSPI_NOR_EnterDOPIMode+0x19c>)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	00db      	lsls	r3, r3, #3
 800835a:	4413      	add	r3, r2
 800835c:	789b      	ldrb	r3, [r3, #2]
 800835e:	461a      	mov	r2, r3
 8008360:	f7fe fc4f 	bl	8006c02 <MX25LM51245G_WriteEnable>
 8008364:	4603      	mov	r3, r0
 8008366:	2b00      	cmp	r3, #0
 8008368:	d003      	beq.n	8008372 <OSPI_NOR_EnterDOPIMode+0xae>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800836a:	f06f 0304 	mvn.w	r3, #4
 800836e:	60fb      	str	r3, [r7, #12]
 8008370:	e06f      	b.n	8008452 <OSPI_NOR_EnterDOPIMode+0x18e>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_DOPI) != MX25LM51245G_OK)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	225c      	movs	r2, #92	; 0x5c
 8008376:	fb02 f303 	mul.w	r3, r2, r3
 800837a:	4a38      	ldr	r2, [pc, #224]	; (800845c <OSPI_NOR_EnterDOPIMode+0x198>)
 800837c:	1898      	adds	r0, r3, r2
 800837e:	4a38      	ldr	r2, [pc, #224]	; (8008460 <OSPI_NOR_EnterDOPIMode+0x19c>)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	00db      	lsls	r3, r3, #3
 8008384:	4413      	add	r3, r2
 8008386:	7859      	ldrb	r1, [r3, #1]
 8008388:	4a35      	ldr	r2, [pc, #212]	; (8008460 <OSPI_NOR_EnterDOPIMode+0x19c>)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	00db      	lsls	r3, r3, #3
 800838e:	4413      	add	r3, r2
 8008390:	789a      	ldrb	r2, [r3, #2]
 8008392:	2302      	movs	r3, #2
 8008394:	9300      	str	r3, [sp, #0]
 8008396:	2300      	movs	r3, #0
 8008398:	f7fe fcfe 	bl	8006d98 <MX25LM51245G_WriteCfg2Register>
 800839c:	4603      	mov	r3, r0
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d003      	beq.n	80083aa <OSPI_NOR_EnterDOPIMode+0xe6>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80083a2:	f06f 0304 	mvn.w	r3, #4
 80083a6:	60fb      	str	r3, [r7, #12]
 80083a8:	e053      	b.n	8008452 <OSPI_NOR_EnterDOPIMode+0x18e>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 80083aa:	2028      	movs	r0, #40	; 0x28
 80083ac:	f000 fc9a 	bl	8008ce4 <HAL_Delay>

    /* Reconfigure the memory type of the peripheral */
    hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 80083b0:	4a2a      	ldr	r2, [pc, #168]	; (800845c <OSPI_NOR_EnterDOPIMode+0x198>)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	215c      	movs	r1, #92	; 0x5c
 80083b6:	fb01 f303 	mul.w	r3, r1, r3
 80083ba:	4413      	add	r3, r2
 80083bc:	330c      	adds	r3, #12
 80083be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80083c2:	601a      	str	r2, [r3, #0]
    hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 80083c4:	4a25      	ldr	r2, [pc, #148]	; (800845c <OSPI_NOR_EnterDOPIMode+0x198>)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	215c      	movs	r1, #92	; 0x5c
 80083ca:	fb01 f303 	mul.w	r3, r1, r3
 80083ce:	4413      	add	r3, r2
 80083d0:	332c      	adds	r3, #44	; 0x2c
 80083d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083d6:	601a      	str	r2, [r3, #0]
    if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	225c      	movs	r2, #92	; 0x5c
 80083dc:	fb02 f303 	mul.w	r3, r2, r3
 80083e0:	4a1e      	ldr	r2, [pc, #120]	; (800845c <OSPI_NOR_EnterDOPIMode+0x198>)
 80083e2:	4413      	add	r3, r2
 80083e4:	4618      	mov	r0, r3
 80083e6:	f002 fed5 	bl	800b194 <HAL_OSPI_Init>
 80083ea:	4603      	mov	r3, r0
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d003      	beq.n	80083f8 <OSPI_NOR_EnterDOPIMode+0x134>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80083f0:	f06f 0303 	mvn.w	r3, #3
 80083f4:	60fb      	str	r3, [r7, #12]
 80083f6:	e02c      	b.n	8008452 <OSPI_NOR_EnterDOPIMode+0x18e>
    }
    /* Check Flash busy ? */
    else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	225c      	movs	r2, #92	; 0x5c
 80083fc:	fb02 f303 	mul.w	r3, r2, r3
 8008400:	4a16      	ldr	r2, [pc, #88]	; (800845c <OSPI_NOR_EnterDOPIMode+0x198>)
 8008402:	4413      	add	r3, r2
 8008404:	2201      	movs	r2, #1
 8008406:	2101      	movs	r1, #1
 8008408:	4618      	mov	r0, r3
 800840a:	f7fe fa34 	bl	8006876 <MX25LM51245G_AutoPollingMemReady>
 800840e:	4603      	mov	r3, r0
 8008410:	2b00      	cmp	r3, #0
 8008412:	d003      	beq.n	800841c <OSPI_NOR_EnterDOPIMode+0x158>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008414:	f06f 0304 	mvn.w	r3, #4
 8008418:	60fb      	str	r3, [r7, #12]
 800841a:	e01a      	b.n	8008452 <OSPI_NOR_EnterDOPIMode+0x18e>
    }
    /* Check the configuration has been correctly done */
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	225c      	movs	r2, #92	; 0x5c
 8008420:	fb02 f303 	mul.w	r3, r2, r3
 8008424:	4a0d      	ldr	r2, [pc, #52]	; (800845c <OSPI_NOR_EnterDOPIMode+0x198>)
 8008426:	1898      	adds	r0, r3, r2
 8008428:	f107 0308 	add.w	r3, r7, #8
 800842c:	9300      	str	r3, [sp, #0]
 800842e:	2300      	movs	r3, #0
 8008430:	2201      	movs	r2, #1
 8008432:	2101      	movs	r1, #1
 8008434:	f7fe fd45 	bl	8006ec2 <MX25LM51245G_ReadCfg2Register>
 8008438:	4603      	mov	r3, r0
 800843a:	2b00      	cmp	r3, #0
 800843c:	d003      	beq.n	8008446 <OSPI_NOR_EnterDOPIMode+0x182>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800843e:	f06f 0304 	mvn.w	r3, #4
 8008442:	60fb      	str	r3, [r7, #12]
 8008444:	e005      	b.n	8008452 <OSPI_NOR_EnterDOPIMode+0x18e>
    }
    else
    {
      if (reg[0] != MX25LM51245G_CR2_DOPI)
 8008446:	7a3b      	ldrb	r3, [r7, #8]
 8008448:	2b02      	cmp	r3, #2
 800844a:	d002      	beq.n	8008452 <OSPI_NOR_EnterDOPIMode+0x18e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800844c:	f06f 0304 	mvn.w	r3, #4
 8008450:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8008452:	68fb      	ldr	r3, [r7, #12]
}
 8008454:	4618      	mov	r0, r3
 8008456:	3710      	adds	r7, #16
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	240022f0 	.word	0x240022f0
 8008460:	2400234c 	.word	0x2400234c

08008464 <OSPI_NOR_EnterSOPIMode>:
  * @brief  This function enables the octal STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterSOPIMode(uint32_t Instance)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b086      	sub	sp, #24
 8008468:	af02      	add	r7, sp, #8
 800846a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800846c:	2300      	movs	r3, #0
 800846e:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	225c      	movs	r2, #92	; 0x5c
 8008474:	fb02 f303 	mul.w	r3, r2, r3
 8008478:	4a4e      	ldr	r2, [pc, #312]	; (80085b4 <OSPI_NOR_EnterSOPIMode+0x150>)
 800847a:	1898      	adds	r0, r3, r2
 800847c:	4a4e      	ldr	r2, [pc, #312]	; (80085b8 <OSPI_NOR_EnterSOPIMode+0x154>)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	00db      	lsls	r3, r3, #3
 8008482:	4413      	add	r3, r2
 8008484:	7859      	ldrb	r1, [r3, #1]
 8008486:	4a4c      	ldr	r2, [pc, #304]	; (80085b8 <OSPI_NOR_EnterSOPIMode+0x154>)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	00db      	lsls	r3, r3, #3
 800848c:	4413      	add	r3, r2
 800848e:	789b      	ldrb	r3, [r3, #2]
 8008490:	461a      	mov	r2, r3
 8008492:	f7fe fbb6 	bl	8006c02 <MX25LM51245G_WriteEnable>
 8008496:	4603      	mov	r3, r0
 8008498:	2b00      	cmp	r3, #0
 800849a:	d003      	beq.n	80084a4 <OSPI_NOR_EnterSOPIMode+0x40>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800849c:	f06f 0304 	mvn.w	r3, #4
 80084a0:	60fb      	str	r3, [r7, #12]
 80084a2:	e082      	b.n	80085aa <OSPI_NOR_EnterSOPIMode+0x146>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	225c      	movs	r2, #92	; 0x5c
 80084a8:	fb02 f303 	mul.w	r3, r2, r3
 80084ac:	4a41      	ldr	r2, [pc, #260]	; (80085b4 <OSPI_NOR_EnterSOPIMode+0x150>)
 80084ae:	1898      	adds	r0, r3, r2
 80084b0:	4a41      	ldr	r2, [pc, #260]	; (80085b8 <OSPI_NOR_EnterSOPIMode+0x154>)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	00db      	lsls	r3, r3, #3
 80084b6:	4413      	add	r3, r2
 80084b8:	7859      	ldrb	r1, [r3, #1]
 80084ba:	4a3f      	ldr	r2, [pc, #252]	; (80085b8 <OSPI_NOR_EnterSOPIMode+0x154>)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	00db      	lsls	r3, r3, #3
 80084c0:	4413      	add	r3, r2
 80084c2:	789a      	ldrb	r2, [r3, #2]
 80084c4:	2307      	movs	r3, #7
 80084c6:	9300      	str	r3, [sp, #0]
 80084c8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80084cc:	f7fe fc64 	bl	8006d98 <MX25LM51245G_WriteCfg2Register>
 80084d0:	4603      	mov	r3, r0
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d003      	beq.n	80084de <OSPI_NOR_EnterSOPIMode+0x7a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80084d6:	f06f 0304 	mvn.w	r3, #4
 80084da:	60fb      	str	r3, [r7, #12]
 80084dc:	e065      	b.n	80085aa <OSPI_NOR_EnterSOPIMode+0x146>
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	225c      	movs	r2, #92	; 0x5c
 80084e2:	fb02 f303 	mul.w	r3, r2, r3
 80084e6:	4a33      	ldr	r2, [pc, #204]	; (80085b4 <OSPI_NOR_EnterSOPIMode+0x150>)
 80084e8:	1898      	adds	r0, r3, r2
 80084ea:	4a33      	ldr	r2, [pc, #204]	; (80085b8 <OSPI_NOR_EnterSOPIMode+0x154>)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	00db      	lsls	r3, r3, #3
 80084f0:	4413      	add	r3, r2
 80084f2:	7859      	ldrb	r1, [r3, #1]
 80084f4:	4a30      	ldr	r2, [pc, #192]	; (80085b8 <OSPI_NOR_EnterSOPIMode+0x154>)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	00db      	lsls	r3, r3, #3
 80084fa:	4413      	add	r3, r2
 80084fc:	789b      	ldrb	r3, [r3, #2]
 80084fe:	461a      	mov	r2, r3
 8008500:	f7fe fb7f 	bl	8006c02 <MX25LM51245G_WriteEnable>
 8008504:	4603      	mov	r3, r0
 8008506:	2b00      	cmp	r3, #0
 8008508:	d003      	beq.n	8008512 <OSPI_NOR_EnterSOPIMode+0xae>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800850a:	f06f 0304 	mvn.w	r3, #4
 800850e:	60fb      	str	r3, [r7, #12]
 8008510:	e04b      	b.n	80085aa <OSPI_NOR_EnterSOPIMode+0x146>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_SOPI) != MX25LM51245G_OK)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	225c      	movs	r2, #92	; 0x5c
 8008516:	fb02 f303 	mul.w	r3, r2, r3
 800851a:	4a26      	ldr	r2, [pc, #152]	; (80085b4 <OSPI_NOR_EnterSOPIMode+0x150>)
 800851c:	1898      	adds	r0, r3, r2
 800851e:	4a26      	ldr	r2, [pc, #152]	; (80085b8 <OSPI_NOR_EnterSOPIMode+0x154>)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	00db      	lsls	r3, r3, #3
 8008524:	4413      	add	r3, r2
 8008526:	7859      	ldrb	r1, [r3, #1]
 8008528:	4a23      	ldr	r2, [pc, #140]	; (80085b8 <OSPI_NOR_EnterSOPIMode+0x154>)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	00db      	lsls	r3, r3, #3
 800852e:	4413      	add	r3, r2
 8008530:	789a      	ldrb	r2, [r3, #2]
 8008532:	2301      	movs	r3, #1
 8008534:	9300      	str	r3, [sp, #0]
 8008536:	2300      	movs	r3, #0
 8008538:	f7fe fc2e 	bl	8006d98 <MX25LM51245G_WriteCfg2Register>
 800853c:	4603      	mov	r3, r0
 800853e:	2b00      	cmp	r3, #0
 8008540:	d003      	beq.n	800854a <OSPI_NOR_EnterSOPIMode+0xe6>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8008542:	f06f 0304 	mvn.w	r3, #4
 8008546:	60fb      	str	r3, [r7, #12]
 8008548:	e02f      	b.n	80085aa <OSPI_NOR_EnterSOPIMode+0x146>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 800854a:	2028      	movs	r0, #40	; 0x28
 800854c:	f000 fbca 	bl	8008ce4 <HAL_Delay>

    /* Check Flash busy ? */
    if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	225c      	movs	r2, #92	; 0x5c
 8008554:	fb02 f303 	mul.w	r3, r2, r3
 8008558:	4a16      	ldr	r2, [pc, #88]	; (80085b4 <OSPI_NOR_EnterSOPIMode+0x150>)
 800855a:	4413      	add	r3, r2
 800855c:	2200      	movs	r2, #0
 800855e:	2101      	movs	r1, #1
 8008560:	4618      	mov	r0, r3
 8008562:	f7fe f988 	bl	8006876 <MX25LM51245G_AutoPollingMemReady>
 8008566:	4603      	mov	r3, r0
 8008568:	2b00      	cmp	r3, #0
 800856a:	d003      	beq.n	8008574 <OSPI_NOR_EnterSOPIMode+0x110>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800856c:	f06f 0304 	mvn.w	r3, #4
 8008570:	60fb      	str	r3, [r7, #12]
 8008572:	e01a      	b.n	80085aa <OSPI_NOR_EnterSOPIMode+0x146>
    }
    /* Check the configuration has been correctly done */
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	225c      	movs	r2, #92	; 0x5c
 8008578:	fb02 f303 	mul.w	r3, r2, r3
 800857c:	4a0d      	ldr	r2, [pc, #52]	; (80085b4 <OSPI_NOR_EnterSOPIMode+0x150>)
 800857e:	1898      	adds	r0, r3, r2
 8008580:	f107 0308 	add.w	r3, r7, #8
 8008584:	9300      	str	r3, [sp, #0]
 8008586:	2300      	movs	r3, #0
 8008588:	2200      	movs	r2, #0
 800858a:	2101      	movs	r1, #1
 800858c:	f7fe fc99 	bl	8006ec2 <MX25LM51245G_ReadCfg2Register>
 8008590:	4603      	mov	r3, r0
 8008592:	2b00      	cmp	r3, #0
 8008594:	d003      	beq.n	800859e <OSPI_NOR_EnterSOPIMode+0x13a>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008596:	f06f 0304 	mvn.w	r3, #4
 800859a:	60fb      	str	r3, [r7, #12]
 800859c:	e005      	b.n	80085aa <OSPI_NOR_EnterSOPIMode+0x146>
    }
    else
    {
      if (reg[0] != MX25LM51245G_CR2_SOPI)
 800859e:	7a3b      	ldrb	r3, [r7, #8]
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d002      	beq.n	80085aa <OSPI_NOR_EnterSOPIMode+0x146>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80085a4:	f06f 0304 	mvn.w	r3, #4
 80085a8:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 80085aa:	68fb      	ldr	r3, [r7, #12]
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3710      	adds	r7, #16
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}
 80085b4:	240022f0 	.word	0x240022f0
 80085b8:	2400234c 	.word	0x2400234c

080085bc <OSPI_NOR_ExitOPIMode>:
  * @brief  This function disables the octal DTR or STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ExitOPIMode (uint32_t Instance)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b086      	sub	sp, #24
 80085c0:	af02      	add	r7, sp, #8
 80085c2:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80085c4:	2300      	movs	r3, #0
 80085c6:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	225c      	movs	r2, #92	; 0x5c
 80085cc:	fb02 f303 	mul.w	r3, r2, r3
 80085d0:	4a49      	ldr	r2, [pc, #292]	; (80086f8 <OSPI_NOR_ExitOPIMode+0x13c>)
 80085d2:	1898      	adds	r0, r3, r2
 80085d4:	4a49      	ldr	r2, [pc, #292]	; (80086fc <OSPI_NOR_ExitOPIMode+0x140>)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	00db      	lsls	r3, r3, #3
 80085da:	4413      	add	r3, r2
 80085dc:	7859      	ldrb	r1, [r3, #1]
 80085de:	4a47      	ldr	r2, [pc, #284]	; (80086fc <OSPI_NOR_ExitOPIMode+0x140>)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	00db      	lsls	r3, r3, #3
 80085e4:	4413      	add	r3, r2
 80085e6:	789b      	ldrb	r3, [r3, #2]
 80085e8:	461a      	mov	r2, r3
 80085ea:	f7fe fb0a 	bl	8006c02 <MX25LM51245G_WriteEnable>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d003      	beq.n	80085fc <OSPI_NOR_ExitOPIMode+0x40>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80085f4:	f06f 0304 	mvn.w	r3, #4
 80085f8:	60fb      	str	r3, [r7, #12]
 80085fa:	e077      	b.n	80086ec <OSPI_NOR_ExitOPIMode+0x130>
  }
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
 80085fc:	2300      	movs	r3, #0
 80085fe:	723b      	strb	r3, [r7, #8]
    reg[1] = 0;
 8008600:	2300      	movs	r3, #0
 8008602:	727b      	strb	r3, [r7, #9]
    if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, reg[0]) != MX25LM51245G_OK)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	225c      	movs	r2, #92	; 0x5c
 8008608:	fb02 f303 	mul.w	r3, r2, r3
 800860c:	4a3a      	ldr	r2, [pc, #232]	; (80086f8 <OSPI_NOR_ExitOPIMode+0x13c>)
 800860e:	1898      	adds	r0, r3, r2
 8008610:	4a3a      	ldr	r2, [pc, #232]	; (80086fc <OSPI_NOR_ExitOPIMode+0x140>)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	00db      	lsls	r3, r3, #3
 8008616:	4413      	add	r3, r2
 8008618:	7859      	ldrb	r1, [r3, #1]
 800861a:	4a38      	ldr	r2, [pc, #224]	; (80086fc <OSPI_NOR_ExitOPIMode+0x140>)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	00db      	lsls	r3, r3, #3
 8008620:	4413      	add	r3, r2
 8008622:	789a      	ldrb	r2, [r3, #2]
 8008624:	7a3b      	ldrb	r3, [r7, #8]
 8008626:	9300      	str	r3, [sp, #0]
 8008628:	2300      	movs	r3, #0
 800862a:	f7fe fbb5 	bl	8006d98 <MX25LM51245G_WriteCfg2Register>
 800862e:	4603      	mov	r3, r0
 8008630:	2b00      	cmp	r3, #0
 8008632:	d003      	beq.n	800863c <OSPI_NOR_ExitOPIMode+0x80>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008634:	f06f 0304 	mvn.w	r3, #4
 8008638:	60fb      	str	r3, [r7, #12]
 800863a:	e057      	b.n	80086ec <OSPI_NOR_ExitOPIMode+0x130>
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 800863c:	2028      	movs	r0, #40	; 0x28
 800863e:	f000 fb51 	bl	8008ce4 <HAL_Delay>

      if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 8008642:	4a2e      	ldr	r2, [pc, #184]	; (80086fc <OSPI_NOR_ExitOPIMode+0x140>)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	00db      	lsls	r3, r3, #3
 8008648:	4413      	add	r3, r2
 800864a:	789b      	ldrb	r3, [r3, #2]
 800864c:	2b01      	cmp	r3, #1
 800864e:	d120      	bne.n	8008692 <OSPI_NOR_ExitOPIMode+0xd6>
      {
        /* Reconfigure the memory type of the peripheral */
        hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 8008650:	4a29      	ldr	r2, [pc, #164]	; (80086f8 <OSPI_NOR_ExitOPIMode+0x13c>)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	215c      	movs	r1, #92	; 0x5c
 8008656:	fb01 f303 	mul.w	r3, r1, r3
 800865a:	4413      	add	r3, r2
 800865c:	330c      	adds	r3, #12
 800865e:	2200      	movs	r2, #0
 8008660:	601a      	str	r2, [r3, #0]
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8008662:	4a25      	ldr	r2, [pc, #148]	; (80086f8 <OSPI_NOR_ExitOPIMode+0x13c>)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	215c      	movs	r1, #92	; 0x5c
 8008668:	fb01 f303 	mul.w	r3, r1, r3
 800866c:	4413      	add	r3, r2
 800866e:	332c      	adds	r3, #44	; 0x2c
 8008670:	2200      	movs	r2, #0
 8008672:	601a      	str	r2, [r3, #0]
        if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	225c      	movs	r2, #92	; 0x5c
 8008678:	fb02 f303 	mul.w	r3, r2, r3
 800867c:	4a1e      	ldr	r2, [pc, #120]	; (80086f8 <OSPI_NOR_ExitOPIMode+0x13c>)
 800867e:	4413      	add	r3, r2
 8008680:	4618      	mov	r0, r3
 8008682:	f002 fd87 	bl	800b194 <HAL_OSPI_Init>
 8008686:	4603      	mov	r3, r0
 8008688:	2b00      	cmp	r3, #0
 800868a:	d002      	beq.n	8008692 <OSPI_NOR_ExitOPIMode+0xd6>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800868c:	f06f 0303 	mvn.w	r3, #3
 8008690:	60fb      	str	r3, [r7, #12]
        }
      }

      /* Check Flash busy ? */
      if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	225c      	movs	r2, #92	; 0x5c
 8008696:	fb02 f303 	mul.w	r3, r2, r3
 800869a:	4a17      	ldr	r2, [pc, #92]	; (80086f8 <OSPI_NOR_ExitOPIMode+0x13c>)
 800869c:	4413      	add	r3, r2
 800869e:	2200      	movs	r2, #0
 80086a0:	2100      	movs	r1, #0
 80086a2:	4618      	mov	r0, r3
 80086a4:	f7fe f8e7 	bl	8006876 <MX25LM51245G_AutoPollingMemReady>
 80086a8:	4603      	mov	r3, r0
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d003      	beq.n	80086b6 <OSPI_NOR_ExitOPIMode+0xfa>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80086ae:	f06f 0304 	mvn.w	r3, #4
 80086b2:	60fb      	str	r3, [r7, #12]
 80086b4:	e01a      	b.n	80086ec <OSPI_NOR_ExitOPIMode+0x130>
      }
      /* Check the configuration has been correctly done */
      else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	225c      	movs	r2, #92	; 0x5c
 80086ba:	fb02 f303 	mul.w	r3, r2, r3
 80086be:	4a0e      	ldr	r2, [pc, #56]	; (80086f8 <OSPI_NOR_ExitOPIMode+0x13c>)
 80086c0:	1898      	adds	r0, r3, r2
 80086c2:	f107 0308 	add.w	r3, r7, #8
 80086c6:	9300      	str	r3, [sp, #0]
 80086c8:	2300      	movs	r3, #0
 80086ca:	2200      	movs	r2, #0
 80086cc:	2100      	movs	r1, #0
 80086ce:	f7fe fbf8 	bl	8006ec2 <MX25LM51245G_ReadCfg2Register>
 80086d2:	4603      	mov	r3, r0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d003      	beq.n	80086e0 <OSPI_NOR_ExitOPIMode+0x124>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80086d8:	f06f 0304 	mvn.w	r3, #4
 80086dc:	60fb      	str	r3, [r7, #12]
 80086de:	e005      	b.n	80086ec <OSPI_NOR_ExitOPIMode+0x130>
      }
      else
      {
        if (reg[0] != 0U)
 80086e0:	7a3b      	ldrb	r3, [r7, #8]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d002      	beq.n	80086ec <OSPI_NOR_ExitOPIMode+0x130>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 80086e6:	f06f 0304 	mvn.w	r3, #4
 80086ea:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 80086ec:	68fb      	ldr	r3, [r7, #12]
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3710      	adds	r7, #16
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	bf00      	nop
 80086f8:	240022f0 	.word	0x240022f0
 80086fc:	2400234c 	.word	0x2400234c

08008700 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b088      	sub	sp, #32
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800870a:	2300      	movs	r3, #0
 800870c:	61fb      	str	r3, [r7, #28]

  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d11c      	bne.n	800874e <BSP_TS_Init+0x4e>
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d018      	beq.n	800874e <BSP_TS_Init+0x4e>
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8008724:	d813      	bhi.n	800874e <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	685b      	ldr	r3, [r3, #4]
  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800872a:	2b00      	cmp	r3, #0
 800872c:	d00f      	beq.n	800874e <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8008736:	d80a      	bhi.n	800874e <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	68da      	ldr	r2, [r3, #12]
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	6819      	ldr	r1, [r3, #0]
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	428b      	cmp	r3, r1
 8008746:	bf28      	it	cs
 8008748:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800874a:	429a      	cmp	r2, r3
 800874c:	d903      	bls.n	8008756 <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800874e:	f06f 0301 	mvn.w	r3, #1
 8008752:	61fb      	str	r3, [r7, #28]
 8008754:	e06e      	b.n	8008834 <BSP_TS_Init+0x134>
  }
  else
  {
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 f98c 	bl	8008a74 <FT5336_Probe>
 800875c:	4603      	mov	r3, r0
 800875e:	2b00      	cmp	r3, #0
 8008760:	d003      	beq.n	800876a <BSP_TS_Init+0x6a>
    {
      ret = BSP_ERROR_NO_INIT;
 8008762:	f04f 33ff 	mov.w	r3, #4294967295
 8008766:	61fb      	str	r3, [r7, #28]
 8008768:	e064      	b.n	8008834 <BSP_TS_Init+0x134>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	4934      	ldr	r1, [pc, #208]	; (8008840 <BSP_TS_Init+0x140>)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	015b      	lsls	r3, r3, #5
 8008774:	440b      	add	r3, r1
 8008776:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Height      = TS_Init->Height;
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	685a      	ldr	r2, [r3, #4]
 800877c:	4930      	ldr	r1, [pc, #192]	; (8008840 <BSP_TS_Init+0x140>)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	015b      	lsls	r3, r3, #5
 8008782:	440b      	add	r3, r1
 8008784:	3304      	adds	r3, #4
 8008786:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Orientation = TS_Init->Orientation;
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	689a      	ldr	r2, [r3, #8]
 800878c:	492c      	ldr	r1, [pc, #176]	; (8008840 <BSP_TS_Init+0x140>)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	015b      	lsls	r3, r3, #5
 8008792:	440b      	add	r3, r1
 8008794:	3308      	adds	r3, #8
 8008796:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Accuracy    = TS_Init->Accuracy;
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	68da      	ldr	r2, [r3, #12]
 800879c:	4928      	ldr	r1, [pc, #160]	; (8008840 <BSP_TS_Init+0x140>)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	015b      	lsls	r3, r3, #5
 80087a2:	440b      	add	r3, r1
 80087a4:	330c      	adds	r3, #12
 80087a6:	601a      	str	r2, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 80087a8:	4b26      	ldr	r3, [pc, #152]	; (8008844 <BSP_TS_Init+0x144>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	69db      	ldr	r3, [r3, #28]
 80087ae:	4926      	ldr	r1, [pc, #152]	; (8008848 <BSP_TS_Init+0x148>)
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80087b6:	f107 010c 	add.w	r1, r7, #12
 80087ba:	4610      	mov	r0, r2
 80087bc:	4798      	blx	r3
 80087be:	4603      	mov	r3, r0
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	da03      	bge.n	80087cc <BSP_TS_Init+0xcc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80087c4:	f06f 0304 	mvn.w	r3, #4
 80087c8:	61fb      	str	r3, [r7, #28]
 80087ca:	e033      	b.n	8008834 <BSP_TS_Init+0x134>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 80087cc:	693a      	ldr	r2, [r7, #16]
 80087ce:	491c      	ldr	r1, [pc, #112]	; (8008840 <BSP_TS_Init+0x140>)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	015b      	lsls	r3, r3, #5
 80087d4:	440b      	add	r3, r1
 80087d6:	3310      	adds	r3, #16
 80087d8:	601a      	str	r2, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 80087da:	697a      	ldr	r2, [r7, #20]
 80087dc:	4918      	ldr	r1, [pc, #96]	; (8008840 <BSP_TS_Init+0x140>)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	015b      	lsls	r3, r3, #5
 80087e2:	440b      	add	r3, r1
 80087e4:	3314      	adds	r3, #20
 80087e6:	601a      	str	r2, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for(i = 0; i < TS_TOUCH_NBR; i++)
 80087e8:	2300      	movs	r3, #0
 80087ea:	61bb      	str	r3, [r7, #24]
 80087ec:	e01f      	b.n	800882e <BSP_TS_Init+0x12e>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	681a      	ldr	r2, [r3, #0]
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	68db      	ldr	r3, [r3, #12]
 80087f6:	4413      	add	r3, r2
 80087f8:	1c5a      	adds	r2, r3, #1
 80087fa:	4811      	ldr	r0, [pc, #68]	; (8008840 <BSP_TS_Init+0x140>)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	00d9      	lsls	r1, r3, #3
 8008800:	69bb      	ldr	r3, [r7, #24]
 8008802:	440b      	add	r3, r1
 8008804:	3306      	adds	r3, #6
 8008806:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	685a      	ldr	r2, [r3, #4]
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	68db      	ldr	r3, [r3, #12]
 8008812:	4413      	add	r3, r2
 8008814:	1c5a      	adds	r2, r3, #1
 8008816:	480a      	ldr	r0, [pc, #40]	; (8008840 <BSP_TS_Init+0x140>)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	00d9      	lsls	r1, r3, #3
 800881c:	69bb      	ldr	r3, [r7, #24]
 800881e:	440b      	add	r3, r1
 8008820:	3306      	adds	r3, #6
 8008822:	009b      	lsls	r3, r3, #2
 8008824:	4403      	add	r3, r0
 8008826:	605a      	str	r2, [r3, #4]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 8008828:	69bb      	ldr	r3, [r7, #24]
 800882a:	3301      	adds	r3, #1
 800882c:	61bb      	str	r3, [r7, #24]
 800882e:	69bb      	ldr	r3, [r7, #24]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d0dc      	beq.n	80087ee <BSP_TS_Init+0xee>
        }
      }
    }
  }

  return ret;
 8008834:	69fb      	ldr	r3, [r7, #28]
}
 8008836:	4618      	mov	r0, r3
 8008838:	3720      	adds	r7, #32
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop
 8008840:	2400235c 	.word	0x2400235c
 8008844:	24002354 	.word	0x24002354
 8008848:	24002358 	.word	0x24002358

0800884c <BSP_TS_GetState>:
  * @param  Instance  TS instance. Could be only 0.
  * @param  TS_State  Pointer to touch screen current state structure
  * @retval BSP status
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b08a      	sub	sp, #40	; 0x28
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8008856:	2300      	movs	r3, #0
 8008858:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t x_oriented, y_oriented;
  uint32_t x_diff, y_diff;

  if(Instance >= TS_INSTANCES_NBR)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d003      	beq.n	8008868 <BSP_TS_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008860:	f06f 0301 	mvn.w	r3, #1
 8008864:	627b      	str	r3, [r7, #36]	; 0x24
 8008866:	e0f9      	b.n	8008a5c <BSP_TS_GetState+0x210>
  else
  {
    FT5336_State_t state;

    /* Get each touch coordinates */
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 8008868:	4b7f      	ldr	r3, [pc, #508]	; (8008a68 <BSP_TS_GetState+0x21c>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	691b      	ldr	r3, [r3, #16]
 800886e:	497f      	ldr	r1, [pc, #508]	; (8008a6c <BSP_TS_GetState+0x220>)
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008876:	f107 0108 	add.w	r1, r7, #8
 800887a:	4610      	mov	r0, r2
 800887c:	4798      	blx	r3
 800887e:	4603      	mov	r3, r0
 8008880:	2b00      	cmp	r3, #0
 8008882:	da03      	bge.n	800888c <BSP_TS_GetState+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008884:	f06f 0304 	mvn.w	r3, #4
 8008888:	627b      	str	r3, [r7, #36]	; 0x24
 800888a:	e0e7      	b.n	8008a5c <BSP_TS_GetState+0x210>
    }/* Check and update the number of touches active detected */
    else if(state.TouchDetected != 0U)
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	2b00      	cmp	r3, #0
 8008890:	f000 80d1 	beq.w	8008a36 <BSP_TS_GetState+0x1ea>
    {
      x_oriented = state.TouchX;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	623b      	str	r3, [r7, #32]
      y_oriented = state.TouchY;
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	61fb      	str	r3, [r7, #28]

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800889c:	4a74      	ldr	r2, [pc, #464]	; (8008a70 <BSP_TS_GetState+0x224>)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	015b      	lsls	r3, r3, #5
 80088a2:	4413      	add	r3, r2
 80088a4:	3308      	adds	r3, #8
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f003 0308 	and.w	r3, r3, #8
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d003      	beq.n	80088b8 <BSP_TS_GetState+0x6c>
      {
        x_oriented = state.TouchY;
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	623b      	str	r3, [r7, #32]
        y_oriented = state.TouchX;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	61fb      	str	r3, [r7, #28]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 80088b8:	4a6d      	ldr	r2, [pc, #436]	; (8008a70 <BSP_TS_GetState+0x224>)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	015b      	lsls	r3, r3, #5
 80088be:	4413      	add	r3, r2
 80088c0:	3308      	adds	r3, #8
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f003 0302 	and.w	r3, r3, #2
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d009      	beq.n	80088e0 <BSP_TS_GetState+0x94>
      {
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 80088cc:	4a68      	ldr	r2, [pc, #416]	; (8008a70 <BSP_TS_GetState+0x224>)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	015b      	lsls	r3, r3, #5
 80088d2:	4413      	add	r3, r2
 80088d4:	3310      	adds	r3, #16
 80088d6:	681a      	ldr	r2, [r3, #0]
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	1ad3      	subs	r3, r2, r3
 80088dc:	3b01      	subs	r3, #1
 80088de:	623b      	str	r3, [r7, #32]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 80088e0:	4a63      	ldr	r2, [pc, #396]	; (8008a70 <BSP_TS_GetState+0x224>)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	015b      	lsls	r3, r3, #5
 80088e6:	4413      	add	r3, r2
 80088e8:	3308      	adds	r3, #8
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f003 0304 	and.w	r3, r3, #4
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d008      	beq.n	8008906 <BSP_TS_GetState+0xba>
      {
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 80088f4:	4a5e      	ldr	r2, [pc, #376]	; (8008a70 <BSP_TS_GetState+0x224>)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	015b      	lsls	r3, r3, #5
 80088fa:	4413      	add	r3, r2
 80088fc:	3314      	adds	r3, #20
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	1ad3      	subs	r3, r2, r3
 8008904:	61fb      	str	r3, [r7, #28]
      }

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8008906:	4a5a      	ldr	r2, [pc, #360]	; (8008a70 <BSP_TS_GetState+0x224>)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	015b      	lsls	r3, r3, #5
 800890c:	4413      	add	r3, r2
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	6a3a      	ldr	r2, [r7, #32]
 8008912:	fb03 f202 	mul.w	r2, r3, r2
 8008916:	4956      	ldr	r1, [pc, #344]	; (8008a70 <BSP_TS_GetState+0x224>)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	015b      	lsls	r3, r3, #5
 800891c:	440b      	add	r3, r1
 800891e:	3310      	adds	r3, #16
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	fbb2 f2f3 	udiv	r2, r2, r3
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800892a:	4a51      	ldr	r2, [pc, #324]	; (8008a70 <BSP_TS_GetState+0x224>)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	015b      	lsls	r3, r3, #5
 8008930:	4413      	add	r3, r2
 8008932:	3304      	adds	r3, #4
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	69fa      	ldr	r2, [r7, #28]
 8008938:	fb03 f202 	mul.w	r2, r3, r2
 800893c:	494c      	ldr	r1, [pc, #304]	; (8008a70 <BSP_TS_GetState+0x224>)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	015b      	lsls	r3, r3, #5
 8008942:	440b      	add	r3, r1
 8008944:	3314      	adds	r3, #20
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	fbb2 f2f3 	udiv	r2, r2, r3
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 8008950:	68ba      	ldr	r2, [r7, #8]
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	685a      	ldr	r2, [r3, #4]
 800895a:	4945      	ldr	r1, [pc, #276]	; (8008a70 <BSP_TS_GetState+0x224>)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	015b      	lsls	r3, r3, #5
 8008960:	440b      	add	r3, r1
 8008962:	3318      	adds	r3, #24
 8008964:	681b      	ldr	r3, [r3, #0]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8008966:	429a      	cmp	r2, r3
 8008968:	d909      	bls.n	800897e <BSP_TS_GetState+0x132>
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	685a      	ldr	r2, [r3, #4]
 800896e:	4940      	ldr	r1, [pc, #256]	; (8008a70 <BSP_TS_GetState+0x224>)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	015b      	lsls	r3, r3, #5
 8008974:	440b      	add	r3, r1
 8008976:	3318      	adds	r3, #24
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	1ad3      	subs	r3, r2, r3
 800897c:	e008      	b.n	8008990 <BSP_TS_GetState+0x144>
        (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 800897e:	4a3c      	ldr	r2, [pc, #240]	; (8008a70 <BSP_TS_GetState+0x224>)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	015b      	lsls	r3, r3, #5
 8008984:	4413      	add	r3, r2
 8008986:	3318      	adds	r3, #24
 8008988:	681a      	ldr	r2, [r3, #0]
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	685b      	ldr	r3, [r3, #4]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800898e:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8008990:	61bb      	str	r3, [r7, #24]

        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	689a      	ldr	r2, [r3, #8]
 8008996:	4936      	ldr	r1, [pc, #216]	; (8008a70 <BSP_TS_GetState+0x224>)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	015b      	lsls	r3, r3, #5
 800899c:	440b      	add	r3, r1
 800899e:	331c      	adds	r3, #28
 80089a0:	681b      	ldr	r3, [r3, #0]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d909      	bls.n	80089ba <BSP_TS_GetState+0x16e>
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	689a      	ldr	r2, [r3, #8]
 80089aa:	4931      	ldr	r1, [pc, #196]	; (8008a70 <BSP_TS_GetState+0x224>)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	015b      	lsls	r3, r3, #5
 80089b0:	440b      	add	r3, r1
 80089b2:	331c      	adds	r3, #28
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	1ad3      	subs	r3, r2, r3
 80089b8:	e008      	b.n	80089cc <BSP_TS_GetState+0x180>
          (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 80089ba:	4a2d      	ldr	r2, [pc, #180]	; (8008a70 <BSP_TS_GetState+0x224>)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	015b      	lsls	r3, r3, #5
 80089c0:	4413      	add	r3, r2
 80089c2:	331c      	adds	r3, #28
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	689b      	ldr	r3, [r3, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 80089ca:	1ad3      	subs	r3, r2, r3
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 80089cc:	617b      	str	r3, [r7, #20]


          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 80089ce:	4a28      	ldr	r2, [pc, #160]	; (8008a70 <BSP_TS_GetState+0x224>)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	015b      	lsls	r3, r3, #5
 80089d4:	4413      	add	r3, r2
 80089d6:	330c      	adds	r3, #12
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	69ba      	ldr	r2, [r7, #24]
 80089dc:	429a      	cmp	r2, r3
 80089de:	d808      	bhi.n	80089f2 <BSP_TS_GetState+0x1a6>
 80089e0:	4a23      	ldr	r2, [pc, #140]	; (8008a70 <BSP_TS_GetState+0x224>)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	015b      	lsls	r3, r3, #5
 80089e6:	4413      	add	r3, r2
 80089e8:	330c      	adds	r3, #12
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	697a      	ldr	r2, [r7, #20]
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d910      	bls.n	8008a14 <BSP_TS_GetState+0x1c8>
          {
            /* New touch detected */
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	685a      	ldr	r2, [r3, #4]
 80089f6:	491e      	ldr	r1, [pc, #120]	; (8008a70 <BSP_TS_GetState+0x224>)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	015b      	lsls	r3, r3, #5
 80089fc:	440b      	add	r3, r1
 80089fe:	3318      	adds	r3, #24
 8008a00:	601a      	str	r2, [r3, #0]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	689a      	ldr	r2, [r3, #8]
 8008a06:	491a      	ldr	r1, [pc, #104]	; (8008a70 <BSP_TS_GetState+0x224>)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	015b      	lsls	r3, r3, #5
 8008a0c:	440b      	add	r3, r1
 8008a0e:	331c      	adds	r3, #28
 8008a10:	601a      	str	r2, [r3, #0]
 8008a12:	e023      	b.n	8008a5c <BSP_TS_GetState+0x210>
          }
          else
          {
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8008a14:	4a16      	ldr	r2, [pc, #88]	; (8008a70 <BSP_TS_GetState+0x224>)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	015b      	lsls	r3, r3, #5
 8008a1a:	4413      	add	r3, r2
 8008a1c:	3318      	adds	r3, #24
 8008a1e:	681a      	ldr	r2, [r3, #0]
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	605a      	str	r2, [r3, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8008a24:	4a12      	ldr	r2, [pc, #72]	; (8008a70 <BSP_TS_GetState+0x224>)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	015b      	lsls	r3, r3, #5
 8008a2a:	4413      	add	r3, r2
 8008a2c:	331c      	adds	r3, #28
 8008a2e:	681a      	ldr	r2, [r3, #0]
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	609a      	str	r2, [r3, #8]
 8008a34:	e012      	b.n	8008a5c <BSP_TS_GetState+0x210>
          }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8008a3c:	4a0c      	ldr	r2, [pc, #48]	; (8008a70 <BSP_TS_GetState+0x224>)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	015b      	lsls	r3, r3, #5
 8008a42:	4413      	add	r3, r2
 8008a44:	3318      	adds	r3, #24
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8008a4c:	4a08      	ldr	r2, [pc, #32]	; (8008a70 <BSP_TS_GetState+0x224>)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	015b      	lsls	r3, r3, #5
 8008a52:	4413      	add	r3, r2
 8008a54:	331c      	adds	r3, #28
 8008a56:	681a      	ldr	r2, [r3, #0]
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	609a      	str	r2, [r3, #8]
    }
  }

  return ret;
 8008a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3728      	adds	r7, #40	; 0x28
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	24002354 	.word	0x24002354
 8008a6c:	24002358 	.word	0x24002358
 8008a70:	2400235c 	.word	0x2400235c

08008a74 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b08a      	sub	sp, #40	; 0x28
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  int32_t ret              = BSP_ERROR_NONE;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	627b      	str	r3, [r7, #36]	; 0x24
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 8008a80:	2300      	movs	r3, #0
 8008a82:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 8008a84:	2370      	movs	r3, #112	; 0x70
 8008a86:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 8008a88:	4b23      	ldr	r3, [pc, #140]	; (8008b18 <FT5336_Probe+0xa4>)
 8008a8a:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8008a8c:	4b23      	ldr	r3, [pc, #140]	; (8008b1c <FT5336_Probe+0xa8>)
 8008a8e:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8008a90:	4b23      	ldr	r3, [pc, #140]	; (8008b20 <FT5336_Probe+0xac>)
 8008a92:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8008a94:	4b23      	ldr	r3, [pc, #140]	; (8008b24 <FT5336_Probe+0xb0>)
 8008a96:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 8008a98:	4b23      	ldr	r3, [pc, #140]	; (8008b28 <FT5336_Probe+0xb4>)
 8008a9a:	623b      	str	r3, [r7, #32]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8008a9c:	f107 030c 	add.w	r3, r7, #12
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	4822      	ldr	r0, [pc, #136]	; (8008b2c <FT5336_Probe+0xb8>)
 8008aa4:	f7fd fb58 	bl	8006158 <FT5336_RegisterBusIO>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d003      	beq.n	8008ab6 <FT5336_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8008aae:	f06f 0307 	mvn.w	r3, #7
 8008ab2:	627b      	str	r3, [r7, #36]	; 0x24
 8008ab4:	e02a      	b.n	8008b0c <FT5336_Probe+0x98>
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 8008ab6:	f107 0308 	add.w	r3, r7, #8
 8008aba:	4619      	mov	r1, r3
 8008abc:	481b      	ldr	r0, [pc, #108]	; (8008b2c <FT5336_Probe+0xb8>)
 8008abe:	f7fd fc45 	bl	800634c <FT5336_ReadID>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d003      	beq.n	8008ad0 <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8008ac8:	f06f 0304 	mvn.w	r3, #4
 8008acc:	627b      	str	r3, [r7, #36]	; 0x24
 8008ace:	e01d      	b.n	8008b0c <FT5336_Probe+0x98>
  }
  else if(ft5336_id != FT5336_ID)
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	2b51      	cmp	r3, #81	; 0x51
 8008ad4:	d003      	beq.n	8008ade <FT5336_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008ad6:	f06f 0306 	mvn.w	r3, #6
 8008ada:	627b      	str	r3, [r7, #36]	; 0x24
 8008adc:	e016      	b.n	8008b0c <FT5336_Probe+0x98>
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 8008ade:	4a14      	ldr	r2, [pc, #80]	; (8008b30 <FT5336_Probe+0xbc>)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	4912      	ldr	r1, [pc, #72]	; (8008b2c <FT5336_Probe+0xb8>)
 8008ae4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 8008ae8:	4b12      	ldr	r3, [pc, #72]	; (8008b34 <FT5336_Probe+0xc0>)
 8008aea:	4a13      	ldr	r2, [pc, #76]	; (8008b38 <FT5336_Probe+0xc4>)
 8008aec:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 8008aee:	4b11      	ldr	r3, [pc, #68]	; (8008b34 <FT5336_Probe+0xc0>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	490e      	ldr	r1, [pc, #56]	; (8008b30 <FT5336_Probe+0xbc>)
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008afc:	4610      	mov	r0, r2
 8008afe:	4798      	blx	r3
 8008b00:	4603      	mov	r3, r0
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d002      	beq.n	8008b0c <FT5336_Probe+0x98>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008b06:	f06f 0304 	mvn.w	r3, #4
 8008b0a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return ret;
 8008b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3728      	adds	r7, #40	; 0x28
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	08007159 	.word	0x08007159
 8008b1c:	080071cd 	.word	0x080071cd
 8008b20:	080072f5 	.word	0x080072f5
 8008b24:	08007299 	.word	0x08007299
 8008b28:	08007351 	.word	0x08007351
 8008b2c:	2400237c 	.word	0x2400237c
 8008b30:	24002358 	.word	0x24002358
 8008b34:	24002354 	.word	0x24002354
 8008b38:	24000010 	.word	0x24000010

08008b3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008b40:	4b32      	ldr	r3, [pc, #200]	; (8008c0c <SystemInit+0xd0>)
 8008b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b46:	4a31      	ldr	r2, [pc, #196]	; (8008c0c <SystemInit+0xd0>)
 8008b48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008b4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008b50:	4b2f      	ldr	r3, [pc, #188]	; (8008c10 <SystemInit+0xd4>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f003 030f 	and.w	r3, r3, #15
 8008b58:	2b02      	cmp	r3, #2
 8008b5a:	d807      	bhi.n	8008b6c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008b5c:	4b2c      	ldr	r3, [pc, #176]	; (8008c10 <SystemInit+0xd4>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f023 030f 	bic.w	r3, r3, #15
 8008b64:	4a2a      	ldr	r2, [pc, #168]	; (8008c10 <SystemInit+0xd4>)
 8008b66:	f043 0303 	orr.w	r3, r3, #3
 8008b6a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8008b6c:	4b29      	ldr	r3, [pc, #164]	; (8008c14 <SystemInit+0xd8>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a28      	ldr	r2, [pc, #160]	; (8008c14 <SystemInit+0xd8>)
 8008b72:	f043 0301 	orr.w	r3, r3, #1
 8008b76:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008b78:	4b26      	ldr	r3, [pc, #152]	; (8008c14 <SystemInit+0xd8>)
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8008b7e:	4b25      	ldr	r3, [pc, #148]	; (8008c14 <SystemInit+0xd8>)
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	4924      	ldr	r1, [pc, #144]	; (8008c14 <SystemInit+0xd8>)
 8008b84:	4b24      	ldr	r3, [pc, #144]	; (8008c18 <SystemInit+0xdc>)
 8008b86:	4013      	ands	r3, r2
 8008b88:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008b8a:	4b21      	ldr	r3, [pc, #132]	; (8008c10 <SystemInit+0xd4>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f003 030c 	and.w	r3, r3, #12
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d007      	beq.n	8008ba6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008b96:	4b1e      	ldr	r3, [pc, #120]	; (8008c10 <SystemInit+0xd4>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f023 030f 	bic.w	r3, r3, #15
 8008b9e:	4a1c      	ldr	r2, [pc, #112]	; (8008c10 <SystemInit+0xd4>)
 8008ba0:	f043 0303 	orr.w	r3, r3, #3
 8008ba4:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8008ba6:	4b1b      	ldr	r3, [pc, #108]	; (8008c14 <SystemInit+0xd8>)
 8008ba8:	2200      	movs	r2, #0
 8008baa:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8008bac:	4b19      	ldr	r3, [pc, #100]	; (8008c14 <SystemInit+0xd8>)
 8008bae:	2200      	movs	r2, #0
 8008bb0:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8008bb2:	4b18      	ldr	r3, [pc, #96]	; (8008c14 <SystemInit+0xd8>)
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8008bb8:	4b16      	ldr	r3, [pc, #88]	; (8008c14 <SystemInit+0xd8>)
 8008bba:	4a18      	ldr	r2, [pc, #96]	; (8008c1c <SystemInit+0xe0>)
 8008bbc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8008bbe:	4b15      	ldr	r3, [pc, #84]	; (8008c14 <SystemInit+0xd8>)
 8008bc0:	4a17      	ldr	r2, [pc, #92]	; (8008c20 <SystemInit+0xe4>)
 8008bc2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8008bc4:	4b13      	ldr	r3, [pc, #76]	; (8008c14 <SystemInit+0xd8>)
 8008bc6:	4a17      	ldr	r2, [pc, #92]	; (8008c24 <SystemInit+0xe8>)
 8008bc8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8008bca:	4b12      	ldr	r3, [pc, #72]	; (8008c14 <SystemInit+0xd8>)
 8008bcc:	2200      	movs	r2, #0
 8008bce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8008bd0:	4b10      	ldr	r3, [pc, #64]	; (8008c14 <SystemInit+0xd8>)
 8008bd2:	4a14      	ldr	r2, [pc, #80]	; (8008c24 <SystemInit+0xe8>)
 8008bd4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8008bd6:	4b0f      	ldr	r3, [pc, #60]	; (8008c14 <SystemInit+0xd8>)
 8008bd8:	2200      	movs	r2, #0
 8008bda:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8008bdc:	4b0d      	ldr	r3, [pc, #52]	; (8008c14 <SystemInit+0xd8>)
 8008bde:	4a11      	ldr	r2, [pc, #68]	; (8008c24 <SystemInit+0xe8>)
 8008be0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8008be2:	4b0c      	ldr	r3, [pc, #48]	; (8008c14 <SystemInit+0xd8>)
 8008be4:	2200      	movs	r2, #0
 8008be6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008be8:	4b0a      	ldr	r3, [pc, #40]	; (8008c14 <SystemInit+0xd8>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4a09      	ldr	r2, [pc, #36]	; (8008c14 <SystemInit+0xd8>)
 8008bee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008bf2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8008bf4:	4b07      	ldr	r3, [pc, #28]	; (8008c14 <SystemInit+0xd8>)
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8008bfa:	4b0b      	ldr	r3, [pc, #44]	; (8008c28 <SystemInit+0xec>)
 8008bfc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8008c00:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8008c02:	bf00      	nop
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr
 8008c0c:	e000ed00 	.word	0xe000ed00
 8008c10:	52002000 	.word	0x52002000
 8008c14:	58024400 	.word	0x58024400
 8008c18:	eaf6ed7f 	.word	0xeaf6ed7f
 8008c1c:	02020200 	.word	0x02020200
 8008c20:	01ff0000 	.word	0x01ff0000
 8008c24:	01010280 	.word	0x01010280
 8008c28:	52004000 	.word	0x52004000

08008c2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b082      	sub	sp, #8
 8008c30:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008c32:	2003      	movs	r0, #3
 8008c34:	f000 f94b 	bl	8008ece <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8008c38:	f004 f84e 	bl	800ccd8 <HAL_RCC_GetSysClockFreq>
 8008c3c:	4602      	mov	r2, r0
 8008c3e:	4b15      	ldr	r3, [pc, #84]	; (8008c94 <HAL_Init+0x68>)
 8008c40:	699b      	ldr	r3, [r3, #24]
 8008c42:	0a1b      	lsrs	r3, r3, #8
 8008c44:	f003 030f 	and.w	r3, r3, #15
 8008c48:	4913      	ldr	r1, [pc, #76]	; (8008c98 <HAL_Init+0x6c>)
 8008c4a:	5ccb      	ldrb	r3, [r1, r3]
 8008c4c:	f003 031f 	and.w	r3, r3, #31
 8008c50:	fa22 f303 	lsr.w	r3, r2, r3
 8008c54:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8008c56:	4b0f      	ldr	r3, [pc, #60]	; (8008c94 <HAL_Init+0x68>)
 8008c58:	699b      	ldr	r3, [r3, #24]
 8008c5a:	f003 030f 	and.w	r3, r3, #15
 8008c5e:	4a0e      	ldr	r2, [pc, #56]	; (8008c98 <HAL_Init+0x6c>)
 8008c60:	5cd3      	ldrb	r3, [r2, r3]
 8008c62:	f003 031f 	and.w	r3, r3, #31
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	fa22 f303 	lsr.w	r3, r2, r3
 8008c6c:	4a0b      	ldr	r2, [pc, #44]	; (8008c9c <HAL_Init+0x70>)
 8008c6e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008c70:	4a0b      	ldr	r2, [pc, #44]	; (8008ca0 <HAL_Init+0x74>)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008c76:	200f      	movs	r0, #15
 8008c78:	f7f8 fdda 	bl	8001830 <HAL_InitTick>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d001      	beq.n	8008c86 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8008c82:	2301      	movs	r3, #1
 8008c84:	e002      	b.n	8008c8c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8008c86:	f7f8 facf 	bl	8001228 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008c8a:	2300      	movs	r3, #0
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3708      	adds	r7, #8
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}
 8008c94:	58024400 	.word	0x58024400
 8008c98:	08028ef4 	.word	0x08028ef4
 8008c9c:	24000044 	.word	0x24000044
 8008ca0:	24000040 	.word	0x24000040

08008ca4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008ca8:	4b06      	ldr	r3, [pc, #24]	; (8008cc4 <HAL_IncTick+0x20>)
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	461a      	mov	r2, r3
 8008cae:	4b06      	ldr	r3, [pc, #24]	; (8008cc8 <HAL_IncTick+0x24>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4413      	add	r3, r2
 8008cb4:	4a04      	ldr	r2, [pc, #16]	; (8008cc8 <HAL_IncTick+0x24>)
 8008cb6:	6013      	str	r3, [r2, #0]
}
 8008cb8:	bf00      	nop
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr
 8008cc2:	bf00      	nop
 8008cc4:	2400004c 	.word	0x2400004c
 8008cc8:	240023a4 	.word	0x240023a4

08008ccc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	af00      	add	r7, sp, #0
  return uwTick;
 8008cd0:	4b03      	ldr	r3, [pc, #12]	; (8008ce0 <HAL_GetTick+0x14>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr
 8008cde:	bf00      	nop
 8008ce0:	240023a4 	.word	0x240023a4

08008ce4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b084      	sub	sp, #16
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008cec:	f7ff ffee 	bl	8008ccc <HAL_GetTick>
 8008cf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cfc:	d005      	beq.n	8008d0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008cfe:	4b0a      	ldr	r3, [pc, #40]	; (8008d28 <HAL_Delay+0x44>)
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	461a      	mov	r2, r3
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	4413      	add	r3, r2
 8008d08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008d0a:	bf00      	nop
 8008d0c:	f7ff ffde 	bl	8008ccc <HAL_GetTick>
 8008d10:	4602      	mov	r2, r0
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	1ad3      	subs	r3, r2, r3
 8008d16:	68fa      	ldr	r2, [r7, #12]
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d8f7      	bhi.n	8008d0c <HAL_Delay+0x28>
  {
  }
}
 8008d1c:	bf00      	nop
 8008d1e:	bf00      	nop
 8008d20:	3710      	adds	r7, #16
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
 8008d26:	bf00      	nop
 8008d28:	2400004c 	.word	0x2400004c

08008d2c <__NVIC_SetPriorityGrouping>:
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b085      	sub	sp, #20
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f003 0307 	and.w	r3, r3, #7
 8008d3a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008d3c:	4b0b      	ldr	r3, [pc, #44]	; (8008d6c <__NVIC_SetPriorityGrouping+0x40>)
 8008d3e:	68db      	ldr	r3, [r3, #12]
 8008d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008d42:	68ba      	ldr	r2, [r7, #8]
 8008d44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008d48:	4013      	ands	r3, r2
 8008d4a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8008d54:	4b06      	ldr	r3, [pc, #24]	; (8008d70 <__NVIC_SetPriorityGrouping+0x44>)
 8008d56:	4313      	orrs	r3, r2
 8008d58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008d5a:	4a04      	ldr	r2, [pc, #16]	; (8008d6c <__NVIC_SetPriorityGrouping+0x40>)
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	60d3      	str	r3, [r2, #12]
}
 8008d60:	bf00      	nop
 8008d62:	3714      	adds	r7, #20
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr
 8008d6c:	e000ed00 	.word	0xe000ed00
 8008d70:	05fa0000 	.word	0x05fa0000

08008d74 <__NVIC_GetPriorityGrouping>:
{
 8008d74:	b480      	push	{r7}
 8008d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008d78:	4b04      	ldr	r3, [pc, #16]	; (8008d8c <__NVIC_GetPriorityGrouping+0x18>)
 8008d7a:	68db      	ldr	r3, [r3, #12]
 8008d7c:	0a1b      	lsrs	r3, r3, #8
 8008d7e:	f003 0307 	and.w	r3, r3, #7
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr
 8008d8c:	e000ed00 	.word	0xe000ed00

08008d90 <__NVIC_EnableIRQ>:
{
 8008d90:	b480      	push	{r7}
 8008d92:	b083      	sub	sp, #12
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	4603      	mov	r3, r0
 8008d98:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008d9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	db0b      	blt.n	8008dba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008da2:	88fb      	ldrh	r3, [r7, #6]
 8008da4:	f003 021f 	and.w	r2, r3, #31
 8008da8:	4907      	ldr	r1, [pc, #28]	; (8008dc8 <__NVIC_EnableIRQ+0x38>)
 8008daa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008dae:	095b      	lsrs	r3, r3, #5
 8008db0:	2001      	movs	r0, #1
 8008db2:	fa00 f202 	lsl.w	r2, r0, r2
 8008db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008dba:	bf00      	nop
 8008dbc:	370c      	adds	r7, #12
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr
 8008dc6:	bf00      	nop
 8008dc8:	e000e100 	.word	0xe000e100

08008dcc <__NVIC_DisableIRQ>:
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b083      	sub	sp, #12
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008dd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	db12      	blt.n	8008e04 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008dde:	88fb      	ldrh	r3, [r7, #6]
 8008de0:	f003 021f 	and.w	r2, r3, #31
 8008de4:	490a      	ldr	r1, [pc, #40]	; (8008e10 <__NVIC_DisableIRQ+0x44>)
 8008de6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008dea:	095b      	lsrs	r3, r3, #5
 8008dec:	2001      	movs	r0, #1
 8008dee:	fa00 f202 	lsl.w	r2, r0, r2
 8008df2:	3320      	adds	r3, #32
 8008df4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8008df8:	f3bf 8f4f 	dsb	sy
}
 8008dfc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008dfe:	f3bf 8f6f 	isb	sy
}
 8008e02:	bf00      	nop
}
 8008e04:	bf00      	nop
 8008e06:	370c      	adds	r7, #12
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr
 8008e10:	e000e100 	.word	0xe000e100

08008e14 <__NVIC_SetPriority>:
{
 8008e14:	b480      	push	{r7}
 8008e16:	b083      	sub	sp, #12
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	6039      	str	r1, [r7, #0]
 8008e1e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008e20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	db0a      	blt.n	8008e3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	b2da      	uxtb	r2, r3
 8008e2c:	490c      	ldr	r1, [pc, #48]	; (8008e60 <__NVIC_SetPriority+0x4c>)
 8008e2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008e32:	0112      	lsls	r2, r2, #4
 8008e34:	b2d2      	uxtb	r2, r2
 8008e36:	440b      	add	r3, r1
 8008e38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008e3c:	e00a      	b.n	8008e54 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	b2da      	uxtb	r2, r3
 8008e42:	4908      	ldr	r1, [pc, #32]	; (8008e64 <__NVIC_SetPriority+0x50>)
 8008e44:	88fb      	ldrh	r3, [r7, #6]
 8008e46:	f003 030f 	and.w	r3, r3, #15
 8008e4a:	3b04      	subs	r3, #4
 8008e4c:	0112      	lsls	r2, r2, #4
 8008e4e:	b2d2      	uxtb	r2, r2
 8008e50:	440b      	add	r3, r1
 8008e52:	761a      	strb	r2, [r3, #24]
}
 8008e54:	bf00      	nop
 8008e56:	370c      	adds	r7, #12
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr
 8008e60:	e000e100 	.word	0xe000e100
 8008e64:	e000ed00 	.word	0xe000ed00

08008e68 <NVIC_EncodePriority>:
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b089      	sub	sp, #36	; 0x24
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	60f8      	str	r0, [r7, #12]
 8008e70:	60b9      	str	r1, [r7, #8]
 8008e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f003 0307 	and.w	r3, r3, #7
 8008e7a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008e7c:	69fb      	ldr	r3, [r7, #28]
 8008e7e:	f1c3 0307 	rsb	r3, r3, #7
 8008e82:	2b04      	cmp	r3, #4
 8008e84:	bf28      	it	cs
 8008e86:	2304      	movcs	r3, #4
 8008e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008e8a:	69fb      	ldr	r3, [r7, #28]
 8008e8c:	3304      	adds	r3, #4
 8008e8e:	2b06      	cmp	r3, #6
 8008e90:	d902      	bls.n	8008e98 <NVIC_EncodePriority+0x30>
 8008e92:	69fb      	ldr	r3, [r7, #28]
 8008e94:	3b03      	subs	r3, #3
 8008e96:	e000      	b.n	8008e9a <NVIC_EncodePriority+0x32>
 8008e98:	2300      	movs	r3, #0
 8008e9a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8008ea0:	69bb      	ldr	r3, [r7, #24]
 8008ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ea6:	43da      	mvns	r2, r3
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	401a      	ands	r2, r3
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8008eba:	43d9      	mvns	r1, r3
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008ec0:	4313      	orrs	r3, r2
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3724      	adds	r7, #36	; 0x24
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ecc:	4770      	bx	lr

08008ece <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008ece:	b580      	push	{r7, lr}
 8008ed0:	b082      	sub	sp, #8
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f7ff ff28 	bl	8008d2c <__NVIC_SetPriorityGrouping>
}
 8008edc:	bf00      	nop
 8008ede:	3708      	adds	r7, #8
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}

08008ee4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b086      	sub	sp, #24
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	4603      	mov	r3, r0
 8008eec:	60b9      	str	r1, [r7, #8]
 8008eee:	607a      	str	r2, [r7, #4]
 8008ef0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008ef2:	f7ff ff3f 	bl	8008d74 <__NVIC_GetPriorityGrouping>
 8008ef6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008ef8:	687a      	ldr	r2, [r7, #4]
 8008efa:	68b9      	ldr	r1, [r7, #8]
 8008efc:	6978      	ldr	r0, [r7, #20]
 8008efe:	f7ff ffb3 	bl	8008e68 <NVIC_EncodePriority>
 8008f02:	4602      	mov	r2, r0
 8008f04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008f08:	4611      	mov	r1, r2
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f7ff ff82 	bl	8008e14 <__NVIC_SetPriority>
}
 8008f10:	bf00      	nop
 8008f12:	3718      	adds	r7, #24
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b082      	sub	sp, #8
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	4603      	mov	r3, r0
 8008f20:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008f22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7ff ff32 	bl	8008d90 <__NVIC_EnableIRQ>
}
 8008f2c:	bf00      	nop
 8008f2e:	3708      	adds	r7, #8
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b082      	sub	sp, #8
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8008f3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008f42:	4618      	mov	r0, r3
 8008f44:	f7ff ff42 	bl	8008dcc <__NVIC_DisableIRQ>
}
 8008f48:	bf00      	nop
 8008f4a:	3708      	adds	r7, #8
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8008f50:	b480      	push	{r7}
 8008f52:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8008f54:	f3bf 8f5f 	dmb	sy
}
 8008f58:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8008f5a:	4b07      	ldr	r3, [pc, #28]	; (8008f78 <HAL_MPU_Disable+0x28>)
 8008f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f5e:	4a06      	ldr	r2, [pc, #24]	; (8008f78 <HAL_MPU_Disable+0x28>)
 8008f60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f64:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8008f66:	4b05      	ldr	r3, [pc, #20]	; (8008f7c <HAL_MPU_Disable+0x2c>)
 8008f68:	2200      	movs	r2, #0
 8008f6a:	605a      	str	r2, [r3, #4]
}
 8008f6c:	bf00      	nop
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f74:	4770      	bx	lr
 8008f76:	bf00      	nop
 8008f78:	e000ed00 	.word	0xe000ed00
 8008f7c:	e000ed90 	.word	0xe000ed90

08008f80 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b083      	sub	sp, #12
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8008f88:	4a0b      	ldr	r2, [pc, #44]	; (8008fb8 <HAL_MPU_Enable+0x38>)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f043 0301 	orr.w	r3, r3, #1
 8008f90:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8008f92:	4b0a      	ldr	r3, [pc, #40]	; (8008fbc <HAL_MPU_Enable+0x3c>)
 8008f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f96:	4a09      	ldr	r2, [pc, #36]	; (8008fbc <HAL_MPU_Enable+0x3c>)
 8008f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f9c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8008f9e:	f3bf 8f4f 	dsb	sy
}
 8008fa2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008fa4:	f3bf 8f6f 	isb	sy
}
 8008fa8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8008faa:	bf00      	nop
 8008fac:	370c      	adds	r7, #12
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb4:	4770      	bx	lr
 8008fb6:	bf00      	nop
 8008fb8:	e000ed90 	.word	0xe000ed90
 8008fbc:	e000ed00 	.word	0xe000ed00

08008fc0 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b083      	sub	sp, #12
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	785a      	ldrb	r2, [r3, #1]
 8008fcc:	4b1d      	ldr	r3, [pc, #116]	; (8009044 <HAL_MPU_ConfigRegion+0x84>)
 8008fce:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d029      	beq.n	800902c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8008fd8:	4a1a      	ldr	r2, [pc, #104]	; (8009044 <HAL_MPU_ConfigRegion+0x84>)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	7b1b      	ldrb	r3, [r3, #12]
 8008fe4:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	7adb      	ldrb	r3, [r3, #11]
 8008fea:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008fec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	7a9b      	ldrb	r3, [r3, #10]
 8008ff2:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8008ff4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	7b5b      	ldrb	r3, [r3, #13]
 8008ffa:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8008ffc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	7b9b      	ldrb	r3, [r3, #14]
 8009002:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8009004:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	7bdb      	ldrb	r3, [r3, #15]
 800900a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800900c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	7a5b      	ldrb	r3, [r3, #9]
 8009012:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8009014:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	7a1b      	ldrb	r3, [r3, #8]
 800901a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800901c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800901e:	687a      	ldr	r2, [r7, #4]
 8009020:	7812      	ldrb	r2, [r2, #0]
 8009022:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8009024:	4a07      	ldr	r2, [pc, #28]	; (8009044 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8009026:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8009028:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800902a:	e005      	b.n	8009038 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800902c:	4b05      	ldr	r3, [pc, #20]	; (8009044 <HAL_MPU_ConfigRegion+0x84>)
 800902e:	2200      	movs	r2, #0
 8009030:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8009032:	4b04      	ldr	r3, [pc, #16]	; (8009044 <HAL_MPU_ConfigRegion+0x84>)
 8009034:	2200      	movs	r2, #0
 8009036:	611a      	str	r2, [r3, #16]
}
 8009038:	bf00      	nop
 800903a:	370c      	adds	r7, #12
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr
 8009044:	e000ed90 	.word	0xe000ed90

08009048 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d101      	bne.n	800905a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8009056:	2301      	movs	r3, #1
 8009058:	e054      	b.n	8009104 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	7f5b      	ldrb	r3, [r3, #29]
 800905e:	b2db      	uxtb	r3, r3
 8009060:	2b00      	cmp	r3, #0
 8009062:	d105      	bne.n	8009070 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f7f8 f8fa 	bl	8001264 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2202      	movs	r2, #2
 8009074:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	791b      	ldrb	r3, [r3, #4]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d10c      	bne.n	8009098 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4a22      	ldr	r2, [pc, #136]	; (800910c <HAL_CRC_Init+0xc4>)
 8009084:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	689a      	ldr	r2, [r3, #8]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f022 0218 	bic.w	r2, r2, #24
 8009094:	609a      	str	r2, [r3, #8]
 8009096:	e00c      	b.n	80090b2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6899      	ldr	r1, [r3, #8]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	68db      	ldr	r3, [r3, #12]
 80090a0:	461a      	mov	r2, r3
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 f834 	bl	8009110 <HAL_CRCEx_Polynomial_Set>
 80090a8:	4603      	mov	r3, r0
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d001      	beq.n	80090b2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80090ae:	2301      	movs	r3, #1
 80090b0:	e028      	b.n	8009104 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	795b      	ldrb	r3, [r3, #5]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d105      	bne.n	80090c6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f04f 32ff 	mov.w	r2, #4294967295
 80090c2:	611a      	str	r2, [r3, #16]
 80090c4:	e004      	b.n	80090d0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	6912      	ldr	r2, [r2, #16]
 80090ce:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	689b      	ldr	r3, [r3, #8]
 80090d6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	695a      	ldr	r2, [r3, #20]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	430a      	orrs	r2, r1
 80090e4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	689b      	ldr	r3, [r3, #8]
 80090ec:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	699a      	ldr	r2, [r3, #24]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	430a      	orrs	r2, r1
 80090fa:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2201      	movs	r2, #1
 8009100:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8009102:	2300      	movs	r3, #0
}
 8009104:	4618      	mov	r0, r3
 8009106:	3708      	adds	r7, #8
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}
 800910c:	04c11db7 	.word	0x04c11db7

08009110 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8009110:	b480      	push	{r7}
 8009112:	b087      	sub	sp, #28
 8009114:	af00      	add	r7, sp, #0
 8009116:	60f8      	str	r0, [r7, #12]
 8009118:	60b9      	str	r1, [r7, #8]
 800911a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800911c:	2300      	movs	r3, #0
 800911e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8009120:	231f      	movs	r3, #31
 8009122:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	f003 0301 	and.w	r3, r3, #1
 800912a:	2b00      	cmp	r3, #0
 800912c:	d102      	bne.n	8009134 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800912e:	2301      	movs	r3, #1
 8009130:	75fb      	strb	r3, [r7, #23]
 8009132:	e063      	b.n	80091fc <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8009134:	bf00      	nop
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	1e5a      	subs	r2, r3, #1
 800913a:	613a      	str	r2, [r7, #16]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d009      	beq.n	8009154 <HAL_CRCEx_Polynomial_Set+0x44>
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	f003 031f 	and.w	r3, r3, #31
 8009146:	68ba      	ldr	r2, [r7, #8]
 8009148:	fa22 f303 	lsr.w	r3, r2, r3
 800914c:	f003 0301 	and.w	r3, r3, #1
 8009150:	2b00      	cmp	r3, #0
 8009152:	d0f0      	beq.n	8009136 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2b18      	cmp	r3, #24
 8009158:	d846      	bhi.n	80091e8 <HAL_CRCEx_Polynomial_Set+0xd8>
 800915a:	a201      	add	r2, pc, #4	; (adr r2, 8009160 <HAL_CRCEx_Polynomial_Set+0x50>)
 800915c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009160:	080091ef 	.word	0x080091ef
 8009164:	080091e9 	.word	0x080091e9
 8009168:	080091e9 	.word	0x080091e9
 800916c:	080091e9 	.word	0x080091e9
 8009170:	080091e9 	.word	0x080091e9
 8009174:	080091e9 	.word	0x080091e9
 8009178:	080091e9 	.word	0x080091e9
 800917c:	080091e9 	.word	0x080091e9
 8009180:	080091dd 	.word	0x080091dd
 8009184:	080091e9 	.word	0x080091e9
 8009188:	080091e9 	.word	0x080091e9
 800918c:	080091e9 	.word	0x080091e9
 8009190:	080091e9 	.word	0x080091e9
 8009194:	080091e9 	.word	0x080091e9
 8009198:	080091e9 	.word	0x080091e9
 800919c:	080091e9 	.word	0x080091e9
 80091a0:	080091d1 	.word	0x080091d1
 80091a4:	080091e9 	.word	0x080091e9
 80091a8:	080091e9 	.word	0x080091e9
 80091ac:	080091e9 	.word	0x080091e9
 80091b0:	080091e9 	.word	0x080091e9
 80091b4:	080091e9 	.word	0x080091e9
 80091b8:	080091e9 	.word	0x080091e9
 80091bc:	080091e9 	.word	0x080091e9
 80091c0:	080091c5 	.word	0x080091c5
    {
          
      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	2b06      	cmp	r3, #6
 80091c8:	d913      	bls.n	80091f2 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80091ca:	2301      	movs	r3, #1
 80091cc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80091ce:	e010      	b.n	80091f2 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	2b07      	cmp	r3, #7
 80091d4:	d90f      	bls.n	80091f6 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80091d6:	2301      	movs	r3, #1
 80091d8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80091da:	e00c      	b.n	80091f6 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	2b0f      	cmp	r3, #15
 80091e0:	d90b      	bls.n	80091fa <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80091e2:	2301      	movs	r3, #1
 80091e4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80091e6:	e008      	b.n	80091fa <HAL_CRCEx_Polynomial_Set+0xea>
 
      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80091e8:	2301      	movs	r3, #1
 80091ea:	75fb      	strb	r3, [r7, #23]
        break;
 80091ec:	e006      	b.n	80091fc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80091ee:	bf00      	nop
 80091f0:	e004      	b.n	80091fc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80091f2:	bf00      	nop
 80091f4:	e002      	b.n	80091fc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80091f6:	bf00      	nop
 80091f8:	e000      	b.n	80091fc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80091fa:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80091fc:	7dfb      	ldrb	r3, [r7, #23]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d10d      	bne.n	800921e <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	68ba      	ldr	r2, [r7, #8]
 8009208:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	689b      	ldr	r3, [r3, #8]
 8009210:	f023 0118 	bic.w	r1, r3, #24
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	430a      	orrs	r2, r1
 800921c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800921e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009220:	4618      	mov	r0, r3
 8009222:	371c      	adds	r7, #28
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr

0800922c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b082      	sub	sp, #8
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d101      	bne.n	800923e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800923a:	2301      	movs	r3, #1
 800923c:	e04f      	b.n	80092de <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8009244:	b2db      	uxtb	r3, r3
 8009246:	2b00      	cmp	r3, #0
 8009248:	d106      	bne.n	8009258 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2200      	movs	r2, #0
 800924e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f7f8 f828 	bl	80012a8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2202      	movs	r2, #2
 800925c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	4b20      	ldr	r3, [pc, #128]	; (80092e8 <HAL_DMA2D_Init+0xbc>)
 8009268:	4013      	ands	r3, r2
 800926a:	687a      	ldr	r2, [r7, #4]
 800926c:	6851      	ldr	r1, [r2, #4]
 800926e:	687a      	ldr	r2, [r7, #4]
 8009270:	69d2      	ldr	r2, [r2, #28]
 8009272:	4311      	orrs	r1, r2
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	6812      	ldr	r2, [r2, #0]
 8009278:	430b      	orrs	r3, r1
 800927a:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009282:	4b1a      	ldr	r3, [pc, #104]	; (80092ec <HAL_DMA2D_Init+0xc0>)
 8009284:	4013      	ands	r3, r2
 8009286:	687a      	ldr	r2, [r7, #4]
 8009288:	6891      	ldr	r1, [r2, #8]
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	6992      	ldr	r2, [r2, #24]
 800928e:	4311      	orrs	r1, r2
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	6812      	ldr	r2, [r2, #0]
 8009294:	430b      	orrs	r3, r1
 8009296:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800929e:	4b14      	ldr	r3, [pc, #80]	; (80092f0 <HAL_DMA2D_Init+0xc4>)
 80092a0:	4013      	ands	r3, r2
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	68d1      	ldr	r1, [r2, #12]
 80092a6:	687a      	ldr	r2, [r7, #4]
 80092a8:	6812      	ldr	r2, [r2, #0]
 80092aa:	430b      	orrs	r3, r1
 80092ac:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092b4:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	691b      	ldr	r3, [r3, #16]
 80092bc:	051a      	lsls	r2, r3, #20
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	695b      	ldr	r3, [r3, #20]
 80092c2:	055b      	lsls	r3, r3, #21
 80092c4:	431a      	orrs	r2, r3
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	430a      	orrs	r2, r1
 80092cc:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2200      	movs	r2, #0
 80092d2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2201      	movs	r2, #1
 80092d8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 80092dc:	2300      	movs	r3, #0
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3708      	adds	r7, #8
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
 80092e6:	bf00      	nop
 80092e8:	fff8ffbf 	.word	0xfff8ffbf
 80092ec:	fffffef8 	.word	0xfffffef8
 80092f0:	ffff0000 	.word	0xffff0000

080092f4 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b084      	sub	sp, #16
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f003 0301 	and.w	r3, r3, #1
 8009312:	2b00      	cmp	r3, #0
 8009314:	d026      	beq.n	8009364 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800931c:	2b00      	cmp	r3, #0
 800931e:	d021      	beq.n	8009364 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	681a      	ldr	r2, [r3, #0]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800932e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009334:	f043 0201 	orr.w	r2, r3, #1
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	2201      	movs	r2, #1
 8009342:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2204      	movs	r2, #4
 8009348:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2200      	movs	r2, #0
 8009350:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009358:	2b00      	cmp	r3, #0
 800935a:	d003      	beq.n	8009364 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f003 0320 	and.w	r3, r3, #32
 800936a:	2b00      	cmp	r3, #0
 800936c:	d026      	beq.n	80093bc <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009374:	2b00      	cmp	r3, #0
 8009376:	d021      	beq.n	80093bc <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009386:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	2220      	movs	r2, #32
 800938e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009394:	f043 0202 	orr.w	r2, r3, #2
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2204      	movs	r2, #4
 80093a0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2200      	movs	r2, #0
 80093a8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d003      	beq.n	80093bc <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	f003 0308 	and.w	r3, r3, #8
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d026      	beq.n	8009414 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d021      	beq.n	8009414 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	681a      	ldr	r2, [r3, #0]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80093de:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	2208      	movs	r2, #8
 80093e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093ec:	f043 0204 	orr.w	r2, r3, #4
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2204      	movs	r2, #4
 80093f8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2200      	movs	r2, #0
 8009400:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009408:	2b00      	cmp	r3, #0
 800940a:	d003      	beq.n	8009414 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f003 0304 	and.w	r3, r3, #4
 800941a:	2b00      	cmp	r3, #0
 800941c:	d013      	beq.n	8009446 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009424:	2b00      	cmp	r3, #0
 8009426:	d00e      	beq.n	8009446 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009436:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	2204      	movs	r2, #4
 800943e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f000 f853 	bl	80094ec <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	f003 0302 	and.w	r3, r3, #2
 800944c:	2b00      	cmp	r3, #0
 800944e:	d024      	beq.n	800949a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009456:	2b00      	cmp	r3, #0
 8009458:	d01f      	beq.n	800949a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	681a      	ldr	r2, [r3, #0]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009468:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	2202      	movs	r2, #2
 8009470:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2201      	movs	r2, #1
 800947e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2200      	movs	r2, #0
 8009486:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6a1b      	ldr	r3, [r3, #32]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d003      	beq.n	800949a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6a1b      	ldr	r3, [r3, #32]
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	f003 0310 	and.w	r3, r3, #16
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d01f      	beq.n	80094e4 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d01a      	beq.n	80094e4 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	681a      	ldr	r2, [r3, #0]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80094bc:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	2210      	movs	r2, #16
 80094c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2201      	movs	r2, #1
 80094d2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2200      	movs	r2, #0
 80094da:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 f80e 	bl	8009500 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80094e4:	bf00      	nop
 80094e6:	3710      	adds	r7, #16
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}

080094ec <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b083      	sub	sp, #12
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80094f4:	bf00      	nop
 80094f6:	370c      	adds	r7, #12
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr

08009500 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8009500:	b480      	push	{r7}
 8009502:	b083      	sub	sp, #12
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8009508:	bf00      	nop
 800950a:	370c      	adds	r7, #12
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr

08009514 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8009514:	b480      	push	{r7}
 8009516:	b087      	sub	sp, #28
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009530:	2b01      	cmp	r3, #1
 8009532:	d101      	bne.n	8009538 <HAL_DMA2D_ConfigLayer+0x24>
 8009534:	2302      	movs	r3, #2
 8009536:	e092      	b.n	800965e <HAL_DMA2D_ConfigLayer+0x14a>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2201      	movs	r2, #1
 800953c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2202      	movs	r2, #2
 8009544:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8009548:	683a      	ldr	r2, [r7, #0]
 800954a:	4613      	mov	r3, r2
 800954c:	00db      	lsls	r3, r3, #3
 800954e:	1a9b      	subs	r3, r3, r2
 8009550:	009b      	lsls	r3, r3, #2
 8009552:	3328      	adds	r3, #40	; 0x28
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	4413      	add	r3, r2
 8009558:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	685a      	ldr	r2, [r3, #4]
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	689b      	ldr	r3, [r3, #8]
 8009562:	041b      	lsls	r3, r3, #16
 8009564:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	691b      	ldr	r3, [r3, #16]
 800956a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800956c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	695b      	ldr	r3, [r3, #20]
 8009572:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8009574:	4313      	orrs	r3, r2
 8009576:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8009578:	4b3c      	ldr	r3, [pc, #240]	; (800966c <HAL_DMA2D_ConfigLayer+0x158>)
 800957a:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	2b0a      	cmp	r3, #10
 8009582:	d003      	beq.n	800958c <HAL_DMA2D_ConfigLayer+0x78>
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	2b09      	cmp	r3, #9
 800958a:	d107      	bne.n	800959c <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	68db      	ldr	r3, [r3, #12]
 8009590:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009594:	693a      	ldr	r2, [r7, #16]
 8009596:	4313      	orrs	r3, r2
 8009598:	613b      	str	r3, [r7, #16]
 800959a:	e005      	b.n	80095a8 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	68db      	ldr	r3, [r3, #12]
 80095a0:	061b      	lsls	r3, r3, #24
 80095a2:	693a      	ldr	r2, [r7, #16]
 80095a4:	4313      	orrs	r3, r2
 80095a6:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d120      	bne.n	80095f0 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	43db      	mvns	r3, r3
 80095b8:	ea02 0103 	and.w	r1, r2, r3
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	693a      	ldr	r2, [r7, #16]
 80095c2:	430a      	orrs	r2, r1
 80095c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	68fa      	ldr	r2, [r7, #12]
 80095cc:	6812      	ldr	r2, [r2, #0]
 80095ce:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	2b0a      	cmp	r3, #10
 80095d6:	d003      	beq.n	80095e0 <HAL_DMA2D_ConfigLayer+0xcc>
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	685b      	ldr	r3, [r3, #4]
 80095dc:	2b09      	cmp	r3, #9
 80095de:	d135      	bne.n	800964c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	68da      	ldr	r2, [r3, #12]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80095ec:	629a      	str	r2, [r3, #40]	; 0x28
 80095ee:	e02d      	b.n	800964c <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	2b0b      	cmp	r3, #11
 80095f6:	d109      	bne.n	800960c <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	699b      	ldr	r3, [r3, #24]
 80095fc:	049b      	lsls	r3, r3, #18
 80095fe:	693a      	ldr	r2, [r7, #16]
 8009600:	4313      	orrs	r3, r2
 8009602:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 800960a:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	69da      	ldr	r2, [r3, #28]
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	43db      	mvns	r3, r3
 8009616:	ea02 0103 	and.w	r1, r2, r3
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	693a      	ldr	r2, [r7, #16]
 8009620:	430a      	orrs	r2, r1
 8009622:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	68fa      	ldr	r2, [r7, #12]
 800962a:	6812      	ldr	r2, [r2, #0]
 800962c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	2b0a      	cmp	r3, #10
 8009634:	d003      	beq.n	800963e <HAL_DMA2D_ConfigLayer+0x12a>
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	685b      	ldr	r3, [r3, #4]
 800963a:	2b09      	cmp	r3, #9
 800963c:	d106      	bne.n	800964c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	68da      	ldr	r2, [r3, #12]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800964a:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2201      	movs	r2, #1
 8009650:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2200      	movs	r2, #0
 8009658:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800965c:	2300      	movs	r3, #0
}
 800965e:	4618      	mov	r0, r3
 8009660:	371c      	adds	r7, #28
 8009662:	46bd      	mov	sp, r7
 8009664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009668:	4770      	bx	lr
 800966a:	bf00      	nop
 800966c:	ff33000f 	.word	0xff33000f

08009670 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009670:	b480      	push	{r7}
 8009672:	b089      	sub	sp, #36	; 0x24
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800967a:	2300      	movs	r3, #0
 800967c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800967e:	4b89      	ldr	r3, [pc, #548]	; (80098a4 <HAL_GPIO_Init+0x234>)
 8009680:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009682:	e194      	b.n	80099ae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	681a      	ldr	r2, [r3, #0]
 8009688:	2101      	movs	r1, #1
 800968a:	69fb      	ldr	r3, [r7, #28]
 800968c:	fa01 f303 	lsl.w	r3, r1, r3
 8009690:	4013      	ands	r3, r2
 8009692:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	2b00      	cmp	r3, #0
 8009698:	f000 8186 	beq.w	80099a8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	f003 0303 	and.w	r3, r3, #3
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	d005      	beq.n	80096b4 <HAL_GPIO_Init+0x44>
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	685b      	ldr	r3, [r3, #4]
 80096ac:	f003 0303 	and.w	r3, r3, #3
 80096b0:	2b02      	cmp	r3, #2
 80096b2:	d130      	bne.n	8009716 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	689b      	ldr	r3, [r3, #8]
 80096b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80096ba:	69fb      	ldr	r3, [r7, #28]
 80096bc:	005b      	lsls	r3, r3, #1
 80096be:	2203      	movs	r2, #3
 80096c0:	fa02 f303 	lsl.w	r3, r2, r3
 80096c4:	43db      	mvns	r3, r3
 80096c6:	69ba      	ldr	r2, [r7, #24]
 80096c8:	4013      	ands	r3, r2
 80096ca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	68da      	ldr	r2, [r3, #12]
 80096d0:	69fb      	ldr	r3, [r7, #28]
 80096d2:	005b      	lsls	r3, r3, #1
 80096d4:	fa02 f303 	lsl.w	r3, r2, r3
 80096d8:	69ba      	ldr	r2, [r7, #24]
 80096da:	4313      	orrs	r3, r2
 80096dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	69ba      	ldr	r2, [r7, #24]
 80096e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	685b      	ldr	r3, [r3, #4]
 80096e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80096ea:	2201      	movs	r2, #1
 80096ec:	69fb      	ldr	r3, [r7, #28]
 80096ee:	fa02 f303 	lsl.w	r3, r2, r3
 80096f2:	43db      	mvns	r3, r3
 80096f4:	69ba      	ldr	r2, [r7, #24]
 80096f6:	4013      	ands	r3, r2
 80096f8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	685b      	ldr	r3, [r3, #4]
 80096fe:	091b      	lsrs	r3, r3, #4
 8009700:	f003 0201 	and.w	r2, r3, #1
 8009704:	69fb      	ldr	r3, [r7, #28]
 8009706:	fa02 f303 	lsl.w	r3, r2, r3
 800970a:	69ba      	ldr	r2, [r7, #24]
 800970c:	4313      	orrs	r3, r2
 800970e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	69ba      	ldr	r2, [r7, #24]
 8009714:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	685b      	ldr	r3, [r3, #4]
 800971a:	f003 0303 	and.w	r3, r3, #3
 800971e:	2b03      	cmp	r3, #3
 8009720:	d017      	beq.n	8009752 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	68db      	ldr	r3, [r3, #12]
 8009726:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009728:	69fb      	ldr	r3, [r7, #28]
 800972a:	005b      	lsls	r3, r3, #1
 800972c:	2203      	movs	r2, #3
 800972e:	fa02 f303 	lsl.w	r3, r2, r3
 8009732:	43db      	mvns	r3, r3
 8009734:	69ba      	ldr	r2, [r7, #24]
 8009736:	4013      	ands	r3, r2
 8009738:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	689a      	ldr	r2, [r3, #8]
 800973e:	69fb      	ldr	r3, [r7, #28]
 8009740:	005b      	lsls	r3, r3, #1
 8009742:	fa02 f303 	lsl.w	r3, r2, r3
 8009746:	69ba      	ldr	r2, [r7, #24]
 8009748:	4313      	orrs	r3, r2
 800974a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	69ba      	ldr	r2, [r7, #24]
 8009750:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	f003 0303 	and.w	r3, r3, #3
 800975a:	2b02      	cmp	r3, #2
 800975c:	d123      	bne.n	80097a6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800975e:	69fb      	ldr	r3, [r7, #28]
 8009760:	08da      	lsrs	r2, r3, #3
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	3208      	adds	r2, #8
 8009766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800976a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800976c:	69fb      	ldr	r3, [r7, #28]
 800976e:	f003 0307 	and.w	r3, r3, #7
 8009772:	009b      	lsls	r3, r3, #2
 8009774:	220f      	movs	r2, #15
 8009776:	fa02 f303 	lsl.w	r3, r2, r3
 800977a:	43db      	mvns	r3, r3
 800977c:	69ba      	ldr	r2, [r7, #24]
 800977e:	4013      	ands	r3, r2
 8009780:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	691a      	ldr	r2, [r3, #16]
 8009786:	69fb      	ldr	r3, [r7, #28]
 8009788:	f003 0307 	and.w	r3, r3, #7
 800978c:	009b      	lsls	r3, r3, #2
 800978e:	fa02 f303 	lsl.w	r3, r2, r3
 8009792:	69ba      	ldr	r2, [r7, #24]
 8009794:	4313      	orrs	r3, r2
 8009796:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009798:	69fb      	ldr	r3, [r7, #28]
 800979a:	08da      	lsrs	r2, r3, #3
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	3208      	adds	r2, #8
 80097a0:	69b9      	ldr	r1, [r7, #24]
 80097a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80097ac:	69fb      	ldr	r3, [r7, #28]
 80097ae:	005b      	lsls	r3, r3, #1
 80097b0:	2203      	movs	r2, #3
 80097b2:	fa02 f303 	lsl.w	r3, r2, r3
 80097b6:	43db      	mvns	r3, r3
 80097b8:	69ba      	ldr	r2, [r7, #24]
 80097ba:	4013      	ands	r3, r2
 80097bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	f003 0203 	and.w	r2, r3, #3
 80097c6:	69fb      	ldr	r3, [r7, #28]
 80097c8:	005b      	lsls	r3, r3, #1
 80097ca:	fa02 f303 	lsl.w	r3, r2, r3
 80097ce:	69ba      	ldr	r2, [r7, #24]
 80097d0:	4313      	orrs	r3, r2
 80097d2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	69ba      	ldr	r2, [r7, #24]
 80097d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	685b      	ldr	r3, [r3, #4]
 80097de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	f000 80e0 	beq.w	80099a8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80097e8:	4b2f      	ldr	r3, [pc, #188]	; (80098a8 <HAL_GPIO_Init+0x238>)
 80097ea:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80097ee:	4a2e      	ldr	r2, [pc, #184]	; (80098a8 <HAL_GPIO_Init+0x238>)
 80097f0:	f043 0302 	orr.w	r3, r3, #2
 80097f4:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80097f8:	4b2b      	ldr	r3, [pc, #172]	; (80098a8 <HAL_GPIO_Init+0x238>)
 80097fa:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80097fe:	f003 0302 	and.w	r3, r3, #2
 8009802:	60fb      	str	r3, [r7, #12]
 8009804:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009806:	4a29      	ldr	r2, [pc, #164]	; (80098ac <HAL_GPIO_Init+0x23c>)
 8009808:	69fb      	ldr	r3, [r7, #28]
 800980a:	089b      	lsrs	r3, r3, #2
 800980c:	3302      	adds	r3, #2
 800980e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009812:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009814:	69fb      	ldr	r3, [r7, #28]
 8009816:	f003 0303 	and.w	r3, r3, #3
 800981a:	009b      	lsls	r3, r3, #2
 800981c:	220f      	movs	r2, #15
 800981e:	fa02 f303 	lsl.w	r3, r2, r3
 8009822:	43db      	mvns	r3, r3
 8009824:	69ba      	ldr	r2, [r7, #24]
 8009826:	4013      	ands	r3, r2
 8009828:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	4a20      	ldr	r2, [pc, #128]	; (80098b0 <HAL_GPIO_Init+0x240>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d052      	beq.n	80098d8 <HAL_GPIO_Init+0x268>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	4a1f      	ldr	r2, [pc, #124]	; (80098b4 <HAL_GPIO_Init+0x244>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d031      	beq.n	800989e <HAL_GPIO_Init+0x22e>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	4a1e      	ldr	r2, [pc, #120]	; (80098b8 <HAL_GPIO_Init+0x248>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d02b      	beq.n	800989a <HAL_GPIO_Init+0x22a>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	4a1d      	ldr	r2, [pc, #116]	; (80098bc <HAL_GPIO_Init+0x24c>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d025      	beq.n	8009896 <HAL_GPIO_Init+0x226>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	4a1c      	ldr	r2, [pc, #112]	; (80098c0 <HAL_GPIO_Init+0x250>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d01f      	beq.n	8009892 <HAL_GPIO_Init+0x222>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	4a1b      	ldr	r2, [pc, #108]	; (80098c4 <HAL_GPIO_Init+0x254>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d019      	beq.n	800988e <HAL_GPIO_Init+0x21e>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	4a1a      	ldr	r2, [pc, #104]	; (80098c8 <HAL_GPIO_Init+0x258>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d013      	beq.n	800988a <HAL_GPIO_Init+0x21a>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	4a19      	ldr	r2, [pc, #100]	; (80098cc <HAL_GPIO_Init+0x25c>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d00d      	beq.n	8009886 <HAL_GPIO_Init+0x216>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	4a18      	ldr	r2, [pc, #96]	; (80098d0 <HAL_GPIO_Init+0x260>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d007      	beq.n	8009882 <HAL_GPIO_Init+0x212>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	4a17      	ldr	r2, [pc, #92]	; (80098d4 <HAL_GPIO_Init+0x264>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d101      	bne.n	800987e <HAL_GPIO_Init+0x20e>
 800987a:	2309      	movs	r3, #9
 800987c:	e02d      	b.n	80098da <HAL_GPIO_Init+0x26a>
 800987e:	230a      	movs	r3, #10
 8009880:	e02b      	b.n	80098da <HAL_GPIO_Init+0x26a>
 8009882:	2308      	movs	r3, #8
 8009884:	e029      	b.n	80098da <HAL_GPIO_Init+0x26a>
 8009886:	2307      	movs	r3, #7
 8009888:	e027      	b.n	80098da <HAL_GPIO_Init+0x26a>
 800988a:	2306      	movs	r3, #6
 800988c:	e025      	b.n	80098da <HAL_GPIO_Init+0x26a>
 800988e:	2305      	movs	r3, #5
 8009890:	e023      	b.n	80098da <HAL_GPIO_Init+0x26a>
 8009892:	2304      	movs	r3, #4
 8009894:	e021      	b.n	80098da <HAL_GPIO_Init+0x26a>
 8009896:	2303      	movs	r3, #3
 8009898:	e01f      	b.n	80098da <HAL_GPIO_Init+0x26a>
 800989a:	2302      	movs	r3, #2
 800989c:	e01d      	b.n	80098da <HAL_GPIO_Init+0x26a>
 800989e:	2301      	movs	r3, #1
 80098a0:	e01b      	b.n	80098da <HAL_GPIO_Init+0x26a>
 80098a2:	bf00      	nop
 80098a4:	58000080 	.word	0x58000080
 80098a8:	58024400 	.word	0x58024400
 80098ac:	58000400 	.word	0x58000400
 80098b0:	58020000 	.word	0x58020000
 80098b4:	58020400 	.word	0x58020400
 80098b8:	58020800 	.word	0x58020800
 80098bc:	58020c00 	.word	0x58020c00
 80098c0:	58021000 	.word	0x58021000
 80098c4:	58021400 	.word	0x58021400
 80098c8:	58021800 	.word	0x58021800
 80098cc:	58021c00 	.word	0x58021c00
 80098d0:	58022000 	.word	0x58022000
 80098d4:	58022400 	.word	0x58022400
 80098d8:	2300      	movs	r3, #0
 80098da:	69fa      	ldr	r2, [r7, #28]
 80098dc:	f002 0203 	and.w	r2, r2, #3
 80098e0:	0092      	lsls	r2, r2, #2
 80098e2:	4093      	lsls	r3, r2
 80098e4:	69ba      	ldr	r2, [r7, #24]
 80098e6:	4313      	orrs	r3, r2
 80098e8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80098ea:	4938      	ldr	r1, [pc, #224]	; (80099cc <HAL_GPIO_Init+0x35c>)
 80098ec:	69fb      	ldr	r3, [r7, #28]
 80098ee:	089b      	lsrs	r3, r3, #2
 80098f0:	3302      	adds	r3, #2
 80098f2:	69ba      	ldr	r2, [r7, #24]
 80098f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80098f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	43db      	mvns	r3, r3
 8009904:	69ba      	ldr	r2, [r7, #24]
 8009906:	4013      	ands	r3, r2
 8009908:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009912:	2b00      	cmp	r3, #0
 8009914:	d003      	beq.n	800991e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8009916:	69ba      	ldr	r2, [r7, #24]
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	4313      	orrs	r3, r2
 800991c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800991e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009922:	69bb      	ldr	r3, [r7, #24]
 8009924:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009926:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	43db      	mvns	r3, r3
 8009932:	69ba      	ldr	r2, [r7, #24]
 8009934:	4013      	ands	r3, r2
 8009936:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	685b      	ldr	r3, [r3, #4]
 800993c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009940:	2b00      	cmp	r3, #0
 8009942:	d003      	beq.n	800994c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8009944:	69ba      	ldr	r2, [r7, #24]
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	4313      	orrs	r3, r2
 800994a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800994c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009950:	69bb      	ldr	r3, [r7, #24]
 8009952:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	685b      	ldr	r3, [r3, #4]
 8009958:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	43db      	mvns	r3, r3
 800995e:	69ba      	ldr	r2, [r7, #24]
 8009960:	4013      	ands	r3, r2
 8009962:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800996c:	2b00      	cmp	r3, #0
 800996e:	d003      	beq.n	8009978 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8009970:	69ba      	ldr	r2, [r7, #24]
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	4313      	orrs	r3, r2
 8009976:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	69ba      	ldr	r2, [r7, #24]
 800997c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	43db      	mvns	r3, r3
 8009988:	69ba      	ldr	r2, [r7, #24]
 800998a:	4013      	ands	r3, r2
 800998c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009996:	2b00      	cmp	r3, #0
 8009998:	d003      	beq.n	80099a2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800999a:	69ba      	ldr	r2, [r7, #24]
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	4313      	orrs	r3, r2
 80099a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	69ba      	ldr	r2, [r7, #24]
 80099a6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80099a8:	69fb      	ldr	r3, [r7, #28]
 80099aa:	3301      	adds	r3, #1
 80099ac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	681a      	ldr	r2, [r3, #0]
 80099b2:	69fb      	ldr	r3, [r7, #28]
 80099b4:	fa22 f303 	lsr.w	r3, r2, r3
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	f47f ae63 	bne.w	8009684 <HAL_GPIO_Init+0x14>
  }
}
 80099be:	bf00      	nop
 80099c0:	bf00      	nop
 80099c2:	3724      	adds	r7, #36	; 0x24
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr
 80099cc:	58000400 	.word	0x58000400

080099d0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b087      	sub	sp, #28
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80099da:	2300      	movs	r3, #0
 80099dc:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80099de:	4b75      	ldr	r3, [pc, #468]	; (8009bb4 <HAL_GPIO_DeInit+0x1e4>)
 80099e0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 80099e2:	e0d9      	b.n	8009b98 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 80099e4:	2201      	movs	r2, #1
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	fa02 f303 	lsl.w	r3, r2, r3
 80099ec:	683a      	ldr	r2, [r7, #0]
 80099ee:	4013      	ands	r3, r2
 80099f0:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	f000 80cc 	beq.w	8009b92 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 80099fa:	4a6f      	ldr	r2, [pc, #444]	; (8009bb8 <HAL_GPIO_DeInit+0x1e8>)
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	089b      	lsrs	r3, r3, #2
 8009a00:	3302      	adds	r3, #2
 8009a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a06:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	f003 0303 	and.w	r3, r3, #3
 8009a0e:	009b      	lsls	r3, r3, #2
 8009a10:	220f      	movs	r2, #15
 8009a12:	fa02 f303 	lsl.w	r3, r2, r3
 8009a16:	68ba      	ldr	r2, [r7, #8]
 8009a18:	4013      	ands	r3, r2
 8009a1a:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	4a67      	ldr	r2, [pc, #412]	; (8009bbc <HAL_GPIO_DeInit+0x1ec>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d037      	beq.n	8009a94 <HAL_GPIO_DeInit+0xc4>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	4a66      	ldr	r2, [pc, #408]	; (8009bc0 <HAL_GPIO_DeInit+0x1f0>)
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d031      	beq.n	8009a90 <HAL_GPIO_DeInit+0xc0>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	4a65      	ldr	r2, [pc, #404]	; (8009bc4 <HAL_GPIO_DeInit+0x1f4>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d02b      	beq.n	8009a8c <HAL_GPIO_DeInit+0xbc>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	4a64      	ldr	r2, [pc, #400]	; (8009bc8 <HAL_GPIO_DeInit+0x1f8>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d025      	beq.n	8009a88 <HAL_GPIO_DeInit+0xb8>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	4a63      	ldr	r2, [pc, #396]	; (8009bcc <HAL_GPIO_DeInit+0x1fc>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d01f      	beq.n	8009a84 <HAL_GPIO_DeInit+0xb4>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	4a62      	ldr	r2, [pc, #392]	; (8009bd0 <HAL_GPIO_DeInit+0x200>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d019      	beq.n	8009a80 <HAL_GPIO_DeInit+0xb0>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	4a61      	ldr	r2, [pc, #388]	; (8009bd4 <HAL_GPIO_DeInit+0x204>)
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d013      	beq.n	8009a7c <HAL_GPIO_DeInit+0xac>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	4a60      	ldr	r2, [pc, #384]	; (8009bd8 <HAL_GPIO_DeInit+0x208>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d00d      	beq.n	8009a78 <HAL_GPIO_DeInit+0xa8>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	4a5f      	ldr	r2, [pc, #380]	; (8009bdc <HAL_GPIO_DeInit+0x20c>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d007      	beq.n	8009a74 <HAL_GPIO_DeInit+0xa4>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	4a5e      	ldr	r2, [pc, #376]	; (8009be0 <HAL_GPIO_DeInit+0x210>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d101      	bne.n	8009a70 <HAL_GPIO_DeInit+0xa0>
 8009a6c:	2309      	movs	r3, #9
 8009a6e:	e012      	b.n	8009a96 <HAL_GPIO_DeInit+0xc6>
 8009a70:	230a      	movs	r3, #10
 8009a72:	e010      	b.n	8009a96 <HAL_GPIO_DeInit+0xc6>
 8009a74:	2308      	movs	r3, #8
 8009a76:	e00e      	b.n	8009a96 <HAL_GPIO_DeInit+0xc6>
 8009a78:	2307      	movs	r3, #7
 8009a7a:	e00c      	b.n	8009a96 <HAL_GPIO_DeInit+0xc6>
 8009a7c:	2306      	movs	r3, #6
 8009a7e:	e00a      	b.n	8009a96 <HAL_GPIO_DeInit+0xc6>
 8009a80:	2305      	movs	r3, #5
 8009a82:	e008      	b.n	8009a96 <HAL_GPIO_DeInit+0xc6>
 8009a84:	2304      	movs	r3, #4
 8009a86:	e006      	b.n	8009a96 <HAL_GPIO_DeInit+0xc6>
 8009a88:	2303      	movs	r3, #3
 8009a8a:	e004      	b.n	8009a96 <HAL_GPIO_DeInit+0xc6>
 8009a8c:	2302      	movs	r3, #2
 8009a8e:	e002      	b.n	8009a96 <HAL_GPIO_DeInit+0xc6>
 8009a90:	2301      	movs	r3, #1
 8009a92:	e000      	b.n	8009a96 <HAL_GPIO_DeInit+0xc6>
 8009a94:	2300      	movs	r3, #0
 8009a96:	697a      	ldr	r2, [r7, #20]
 8009a98:	f002 0203 	and.w	r2, r2, #3
 8009a9c:	0092      	lsls	r2, r2, #2
 8009a9e:	4093      	lsls	r3, r2
 8009aa0:	68ba      	ldr	r2, [r7, #8]
 8009aa2:	429a      	cmp	r2, r3
 8009aa4:	d136      	bne.n	8009b14 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	681a      	ldr	r2, [r3, #0]
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	43db      	mvns	r3, r3
 8009aae:	401a      	ands	r2, r3
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	685a      	ldr	r2, [r3, #4]
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	43db      	mvns	r3, r3
 8009abc:	401a      	ands	r2, r3
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8009ac2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ac6:	685a      	ldr	r2, [r3, #4]
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	43db      	mvns	r3, r3
 8009acc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009ad0:	4013      	ands	r3, r2
 8009ad2:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8009ad4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	43db      	mvns	r3, r3
 8009ade:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009ae2:	4013      	ands	r3, r2
 8009ae4:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	f003 0303 	and.w	r3, r3, #3
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	220f      	movs	r2, #15
 8009af0:	fa02 f303 	lsl.w	r3, r2, r3
 8009af4:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8009af6:	4a30      	ldr	r2, [pc, #192]	; (8009bb8 <HAL_GPIO_DeInit+0x1e8>)
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	089b      	lsrs	r3, r3, #2
 8009afc:	3302      	adds	r3, #2
 8009afe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	43da      	mvns	r2, r3
 8009b06:	482c      	ldr	r0, [pc, #176]	; (8009bb8 <HAL_GPIO_DeInit+0x1e8>)
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	089b      	lsrs	r3, r3, #2
 8009b0c:	400a      	ands	r2, r1
 8009b0e:	3302      	adds	r3, #2
 8009b10:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681a      	ldr	r2, [r3, #0]
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	005b      	lsls	r3, r3, #1
 8009b1c:	2103      	movs	r1, #3
 8009b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8009b22:	431a      	orrs	r2, r3
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	08da      	lsrs	r2, r3, #3
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	3208      	adds	r2, #8
 8009b30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	f003 0307 	and.w	r3, r3, #7
 8009b3a:	009b      	lsls	r3, r3, #2
 8009b3c:	220f      	movs	r2, #15
 8009b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8009b42:	43db      	mvns	r3, r3
 8009b44:	697a      	ldr	r2, [r7, #20]
 8009b46:	08d2      	lsrs	r2, r2, #3
 8009b48:	4019      	ands	r1, r3
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	3208      	adds	r2, #8
 8009b4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	68da      	ldr	r2, [r3, #12]
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	005b      	lsls	r3, r3, #1
 8009b5a:	2103      	movs	r1, #3
 8009b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8009b60:	43db      	mvns	r3, r3
 8009b62:	401a      	ands	r2, r3
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	685a      	ldr	r2, [r3, #4]
 8009b6c:	2101      	movs	r1, #1
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	fa01 f303 	lsl.w	r3, r1, r3
 8009b74:	43db      	mvns	r3, r3
 8009b76:	401a      	ands	r2, r3
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	689a      	ldr	r2, [r3, #8]
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	005b      	lsls	r3, r3, #1
 8009b84:	2103      	movs	r1, #3
 8009b86:	fa01 f303 	lsl.w	r3, r1, r3
 8009b8a:	43db      	mvns	r3, r3
 8009b8c:	401a      	ands	r2, r3
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	609a      	str	r2, [r3, #8]
    }

    position++;
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	3301      	adds	r3, #1
 8009b96:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8009b98:	683a      	ldr	r2, [r7, #0]
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	f47f af1f 	bne.w	80099e4 <HAL_GPIO_DeInit+0x14>
  }
}
 8009ba6:	bf00      	nop
 8009ba8:	bf00      	nop
 8009baa:	371c      	adds	r7, #28
 8009bac:	46bd      	mov	sp, r7
 8009bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb2:	4770      	bx	lr
 8009bb4:	58000080 	.word	0x58000080
 8009bb8:	58000400 	.word	0x58000400
 8009bbc:	58020000 	.word	0x58020000
 8009bc0:	58020400 	.word	0x58020400
 8009bc4:	58020800 	.word	0x58020800
 8009bc8:	58020c00 	.word	0x58020c00
 8009bcc:	58021000 	.word	0x58021000
 8009bd0:	58021400 	.word	0x58021400
 8009bd4:	58021800 	.word	0x58021800
 8009bd8:	58021c00 	.word	0x58021c00
 8009bdc:	58022000 	.word	0x58022000
 8009be0:	58022400 	.word	0x58022400

08009be4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b085      	sub	sp, #20
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	460b      	mov	r3, r1
 8009bee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	691a      	ldr	r2, [r3, #16]
 8009bf4:	887b      	ldrh	r3, [r7, #2]
 8009bf6:	4013      	ands	r3, r2
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d002      	beq.n	8009c02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	73fb      	strb	r3, [r7, #15]
 8009c00:	e001      	b.n	8009c06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009c02:	2300      	movs	r3, #0
 8009c04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3714      	adds	r7, #20
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr

08009c14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b083      	sub	sp, #12
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	460b      	mov	r3, r1
 8009c1e:	807b      	strh	r3, [r7, #2]
 8009c20:	4613      	mov	r3, r2
 8009c22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009c24:	787b      	ldrb	r3, [r7, #1]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d003      	beq.n	8009c32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009c2a:	887a      	ldrh	r2, [r7, #2]
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009c30:	e003      	b.n	8009c3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009c32:	887b      	ldrh	r3, [r7, #2]
 8009c34:	041a      	lsls	r2, r3, #16
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	619a      	str	r2, [r3, #24]
}
 8009c3a:	bf00      	nop
 8009c3c:	370c      	adds	r7, #12
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c44:	4770      	bx	lr

08009c46 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009c46:	b480      	push	{r7}
 8009c48:	b085      	sub	sp, #20
 8009c4a:	af00      	add	r7, sp, #0
 8009c4c:	6078      	str	r0, [r7, #4]
 8009c4e:	460b      	mov	r3, r1
 8009c50:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	695b      	ldr	r3, [r3, #20]
 8009c56:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009c58:	887a      	ldrh	r2, [r7, #2]
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	4013      	ands	r3, r2
 8009c5e:	041a      	lsls	r2, r3, #16
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	43d9      	mvns	r1, r3
 8009c64:	887b      	ldrh	r3, [r7, #2]
 8009c66:	400b      	ands	r3, r1
 8009c68:	431a      	orrs	r2, r3
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	619a      	str	r2, [r3, #24]
}
 8009c6e:	bf00      	nop
 8009c70:	3714      	adds	r7, #20
 8009c72:	46bd      	mov	sp, r7
 8009c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c78:	4770      	bx	lr

08009c7a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009c7a:	b580      	push	{r7, lr}
 8009c7c:	b082      	sub	sp, #8
 8009c7e:	af00      	add	r7, sp, #0
 8009c80:	4603      	mov	r3, r0
 8009c82:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8009c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c88:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009c8c:	88fb      	ldrh	r3, [r7, #6]
 8009c8e:	4013      	ands	r3, r2
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d008      	beq.n	8009ca6 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009c94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009c98:	88fb      	ldrh	r3, [r7, #6]
 8009c9a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009c9e:	88fb      	ldrh	r3, [r7, #6]
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f7f7 fa01 	bl	80010a8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8009ca6:	bf00      	nop
 8009ca8:	3708      	adds	r7, #8
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}
	...

08009cb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b082      	sub	sp, #8
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d101      	bne.n	8009cc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	e07f      	b.n	8009dc2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009cc8:	b2db      	uxtb	r3, r3
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d106      	bne.n	8009cdc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f7f7 fb0e 	bl	80012f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2224      	movs	r2, #36	; 0x24
 8009ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	681a      	ldr	r2, [r3, #0]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f022 0201 	bic.w	r2, r2, #1
 8009cf2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	685a      	ldr	r2, [r3, #4]
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009d00:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	689a      	ldr	r2, [r3, #8]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009d10:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	68db      	ldr	r3, [r3, #12]
 8009d16:	2b01      	cmp	r3, #1
 8009d18:	d107      	bne.n	8009d2a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	689a      	ldr	r2, [r3, #8]
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009d26:	609a      	str	r2, [r3, #8]
 8009d28:	e006      	b.n	8009d38 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	689a      	ldr	r2, [r3, #8]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009d36:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	68db      	ldr	r3, [r3, #12]
 8009d3c:	2b02      	cmp	r3, #2
 8009d3e:	d104      	bne.n	8009d4a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009d48:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	6859      	ldr	r1, [r3, #4]
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681a      	ldr	r2, [r3, #0]
 8009d54:	4b1d      	ldr	r3, [pc, #116]	; (8009dcc <HAL_I2C_Init+0x11c>)
 8009d56:	430b      	orrs	r3, r1
 8009d58:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	68da      	ldr	r2, [r3, #12]
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009d68:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	691a      	ldr	r2, [r3, #16]
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	695b      	ldr	r3, [r3, #20]
 8009d72:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	699b      	ldr	r3, [r3, #24]
 8009d7a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	430a      	orrs	r2, r1
 8009d82:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	69d9      	ldr	r1, [r3, #28]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6a1a      	ldr	r2, [r3, #32]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	430a      	orrs	r2, r1
 8009d92:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	681a      	ldr	r2, [r3, #0]
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f042 0201 	orr.w	r2, r2, #1
 8009da2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2200      	movs	r2, #0
 8009da8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2220      	movs	r2, #32
 8009dae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2200      	movs	r2, #0
 8009db6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009dc0:	2300      	movs	r3, #0
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3708      	adds	r7, #8
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
 8009dca:	bf00      	nop
 8009dcc:	02008000 	.word	0x02008000

08009dd0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b082      	sub	sp, #8
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d101      	bne.n	8009de2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009dde:	2301      	movs	r3, #1
 8009de0:	e021      	b.n	8009e26 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2224      	movs	r2, #36	; 0x24
 8009de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	681a      	ldr	r2, [r3, #0]
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f022 0201 	bic.w	r2, r2, #1
 8009df8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f7f7 fae6 	bl	80013cc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2200      	movs	r2, #0
 8009e04:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2200      	movs	r2, #0
 8009e12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009e24:	2300      	movs	r3, #0
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	3708      	adds	r7, #8
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}
	...

08009e30 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b088      	sub	sp, #32
 8009e34:	af02      	add	r7, sp, #8
 8009e36:	60f8      	str	r0, [r7, #12]
 8009e38:	4608      	mov	r0, r1
 8009e3a:	4611      	mov	r1, r2
 8009e3c:	461a      	mov	r2, r3
 8009e3e:	4603      	mov	r3, r0
 8009e40:	817b      	strh	r3, [r7, #10]
 8009e42:	460b      	mov	r3, r1
 8009e44:	813b      	strh	r3, [r7, #8]
 8009e46:	4613      	mov	r3, r2
 8009e48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e50:	b2db      	uxtb	r3, r3
 8009e52:	2b20      	cmp	r3, #32
 8009e54:	f040 80f9 	bne.w	800a04a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e58:	6a3b      	ldr	r3, [r7, #32]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d002      	beq.n	8009e64 <HAL_I2C_Mem_Write+0x34>
 8009e5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d105      	bne.n	8009e70 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e6a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	e0ed      	b.n	800a04c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009e76:	2b01      	cmp	r3, #1
 8009e78:	d101      	bne.n	8009e7e <HAL_I2C_Mem_Write+0x4e>
 8009e7a:	2302      	movs	r3, #2
 8009e7c:	e0e6      	b.n	800a04c <HAL_I2C_Mem_Write+0x21c>
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	2201      	movs	r2, #1
 8009e82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009e86:	f7fe ff21 	bl	8008ccc <HAL_GetTick>
 8009e8a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009e8c:	697b      	ldr	r3, [r7, #20]
 8009e8e:	9300      	str	r3, [sp, #0]
 8009e90:	2319      	movs	r3, #25
 8009e92:	2201      	movs	r2, #1
 8009e94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009e98:	68f8      	ldr	r0, [r7, #12]
 8009e9a:	f000 fadd 	bl	800a458 <I2C_WaitOnFlagUntilTimeout>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d001      	beq.n	8009ea8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	e0d1      	b.n	800a04c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	2221      	movs	r2, #33	; 0x21
 8009eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2240      	movs	r2, #64	; 0x40
 8009eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	6a3a      	ldr	r2, [r7, #32]
 8009ec2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009ec8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009ed0:	88f8      	ldrh	r0, [r7, #6]
 8009ed2:	893a      	ldrh	r2, [r7, #8]
 8009ed4:	8979      	ldrh	r1, [r7, #10]
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	9301      	str	r3, [sp, #4]
 8009eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009edc:	9300      	str	r3, [sp, #0]
 8009ede:	4603      	mov	r3, r0
 8009ee0:	68f8      	ldr	r0, [r7, #12]
 8009ee2:	f000 f9ed 	bl	800a2c0 <I2C_RequestMemoryWrite>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d005      	beq.n	8009ef8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	e0a9      	b.n	800a04c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009efc:	b29b      	uxth	r3, r3
 8009efe:	2bff      	cmp	r3, #255	; 0xff
 8009f00:	d90e      	bls.n	8009f20 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	22ff      	movs	r2, #255	; 0xff
 8009f06:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f0c:	b2da      	uxtb	r2, r3
 8009f0e:	8979      	ldrh	r1, [r7, #10]
 8009f10:	2300      	movs	r3, #0
 8009f12:	9300      	str	r3, [sp, #0]
 8009f14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009f18:	68f8      	ldr	r0, [r7, #12]
 8009f1a:	f000 fc57 	bl	800a7cc <I2C_TransferConfig>
 8009f1e:	e00f      	b.n	8009f40 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f24:	b29a      	uxth	r2, r3
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f2e:	b2da      	uxtb	r2, r3
 8009f30:	8979      	ldrh	r1, [r7, #10]
 8009f32:	2300      	movs	r3, #0
 8009f34:	9300      	str	r3, [sp, #0]
 8009f36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009f3a:	68f8      	ldr	r0, [r7, #12]
 8009f3c:	f000 fc46 	bl	800a7cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f40:	697a      	ldr	r2, [r7, #20]
 8009f42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f44:	68f8      	ldr	r0, [r7, #12]
 8009f46:	f000 fad6 	bl	800a4f6 <I2C_WaitOnTXISFlagUntilTimeout>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d001      	beq.n	8009f54 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8009f50:	2301      	movs	r3, #1
 8009f52:	e07b      	b.n	800a04c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f58:	781a      	ldrb	r2, [r3, #0]
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f64:	1c5a      	adds	r2, r3, #1
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f6e:	b29b      	uxth	r3, r3
 8009f70:	3b01      	subs	r3, #1
 8009f72:	b29a      	uxth	r2, r3
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f7c:	3b01      	subs	r3, #1
 8009f7e:	b29a      	uxth	r2, r3
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d034      	beq.n	8009ff8 <HAL_I2C_Mem_Write+0x1c8>
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d130      	bne.n	8009ff8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	9300      	str	r3, [sp, #0]
 8009f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	2180      	movs	r1, #128	; 0x80
 8009fa0:	68f8      	ldr	r0, [r7, #12]
 8009fa2:	f000 fa59 	bl	800a458 <I2C_WaitOnFlagUntilTimeout>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d001      	beq.n	8009fb0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8009fac:	2301      	movs	r3, #1
 8009fae:	e04d      	b.n	800a04c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fb4:	b29b      	uxth	r3, r3
 8009fb6:	2bff      	cmp	r3, #255	; 0xff
 8009fb8:	d90e      	bls.n	8009fd8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	22ff      	movs	r2, #255	; 0xff
 8009fbe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fc4:	b2da      	uxtb	r2, r3
 8009fc6:	8979      	ldrh	r1, [r7, #10]
 8009fc8:	2300      	movs	r3, #0
 8009fca:	9300      	str	r3, [sp, #0]
 8009fcc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009fd0:	68f8      	ldr	r0, [r7, #12]
 8009fd2:	f000 fbfb 	bl	800a7cc <I2C_TransferConfig>
 8009fd6:	e00f      	b.n	8009ff8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fdc:	b29a      	uxth	r2, r3
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fe6:	b2da      	uxtb	r2, r3
 8009fe8:	8979      	ldrh	r1, [r7, #10]
 8009fea:	2300      	movs	r3, #0
 8009fec:	9300      	str	r3, [sp, #0]
 8009fee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009ff2:	68f8      	ldr	r0, [r7, #12]
 8009ff4:	f000 fbea 	bl	800a7cc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ffc:	b29b      	uxth	r3, r3
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d19e      	bne.n	8009f40 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a002:	697a      	ldr	r2, [r7, #20]
 800a004:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a006:	68f8      	ldr	r0, [r7, #12]
 800a008:	f000 fabc 	bl	800a584 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a00c:	4603      	mov	r3, r0
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d001      	beq.n	800a016 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800a012:	2301      	movs	r3, #1
 800a014:	e01a      	b.n	800a04c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	2220      	movs	r2, #32
 800a01c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	6859      	ldr	r1, [r3, #4]
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681a      	ldr	r2, [r3, #0]
 800a028:	4b0a      	ldr	r3, [pc, #40]	; (800a054 <HAL_I2C_Mem_Write+0x224>)
 800a02a:	400b      	ands	r3, r1
 800a02c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	2220      	movs	r2, #32
 800a032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	2200      	movs	r2, #0
 800a03a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	2200      	movs	r2, #0
 800a042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a046:	2300      	movs	r3, #0
 800a048:	e000      	b.n	800a04c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800a04a:	2302      	movs	r3, #2
  }
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3718      	adds	r7, #24
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}
 800a054:	fe00e800 	.word	0xfe00e800

0800a058 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b088      	sub	sp, #32
 800a05c:	af02      	add	r7, sp, #8
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	4608      	mov	r0, r1
 800a062:	4611      	mov	r1, r2
 800a064:	461a      	mov	r2, r3
 800a066:	4603      	mov	r3, r0
 800a068:	817b      	strh	r3, [r7, #10]
 800a06a:	460b      	mov	r3, r1
 800a06c:	813b      	strh	r3, [r7, #8]
 800a06e:	4613      	mov	r3, r2
 800a070:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a078:	b2db      	uxtb	r3, r3
 800a07a:	2b20      	cmp	r3, #32
 800a07c:	f040 80fd 	bne.w	800a27a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800a080:	6a3b      	ldr	r3, [r7, #32]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d002      	beq.n	800a08c <HAL_I2C_Mem_Read+0x34>
 800a086:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d105      	bne.n	800a098 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a092:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a094:	2301      	movs	r3, #1
 800a096:	e0f1      	b.n	800a27c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a09e:	2b01      	cmp	r3, #1
 800a0a0:	d101      	bne.n	800a0a6 <HAL_I2C_Mem_Read+0x4e>
 800a0a2:	2302      	movs	r3, #2
 800a0a4:	e0ea      	b.n	800a27c <HAL_I2C_Mem_Read+0x224>
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2201      	movs	r2, #1
 800a0aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a0ae:	f7fe fe0d 	bl	8008ccc <HAL_GetTick>
 800a0b2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	9300      	str	r3, [sp, #0]
 800a0b8:	2319      	movs	r3, #25
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a0c0:	68f8      	ldr	r0, [r7, #12]
 800a0c2:	f000 f9c9 	bl	800a458 <I2C_WaitOnFlagUntilTimeout>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d001      	beq.n	800a0d0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	e0d5      	b.n	800a27c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	2222      	movs	r2, #34	; 0x22
 800a0d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2240      	movs	r2, #64	; 0x40
 800a0dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	6a3a      	ldr	r2, [r7, #32]
 800a0ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a0f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a0f8:	88f8      	ldrh	r0, [r7, #6]
 800a0fa:	893a      	ldrh	r2, [r7, #8]
 800a0fc:	8979      	ldrh	r1, [r7, #10]
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	9301      	str	r3, [sp, #4]
 800a102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a104:	9300      	str	r3, [sp, #0]
 800a106:	4603      	mov	r3, r0
 800a108:	68f8      	ldr	r0, [r7, #12]
 800a10a:	f000 f92d 	bl	800a368 <I2C_RequestMemoryRead>
 800a10e:	4603      	mov	r3, r0
 800a110:	2b00      	cmp	r3, #0
 800a112:	d005      	beq.n	800a120 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	2200      	movs	r2, #0
 800a118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a11c:	2301      	movs	r3, #1
 800a11e:	e0ad      	b.n	800a27c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a124:	b29b      	uxth	r3, r3
 800a126:	2bff      	cmp	r3, #255	; 0xff
 800a128:	d90e      	bls.n	800a148 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	22ff      	movs	r2, #255	; 0xff
 800a12e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a134:	b2da      	uxtb	r2, r3
 800a136:	8979      	ldrh	r1, [r7, #10]
 800a138:	4b52      	ldr	r3, [pc, #328]	; (800a284 <HAL_I2C_Mem_Read+0x22c>)
 800a13a:	9300      	str	r3, [sp, #0]
 800a13c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a140:	68f8      	ldr	r0, [r7, #12]
 800a142:	f000 fb43 	bl	800a7cc <I2C_TransferConfig>
 800a146:	e00f      	b.n	800a168 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a14c:	b29a      	uxth	r2, r3
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a156:	b2da      	uxtb	r2, r3
 800a158:	8979      	ldrh	r1, [r7, #10]
 800a15a:	4b4a      	ldr	r3, [pc, #296]	; (800a284 <HAL_I2C_Mem_Read+0x22c>)
 800a15c:	9300      	str	r3, [sp, #0]
 800a15e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a162:	68f8      	ldr	r0, [r7, #12]
 800a164:	f000 fb32 	bl	800a7cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800a168:	697b      	ldr	r3, [r7, #20]
 800a16a:	9300      	str	r3, [sp, #0]
 800a16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a16e:	2200      	movs	r2, #0
 800a170:	2104      	movs	r1, #4
 800a172:	68f8      	ldr	r0, [r7, #12]
 800a174:	f000 f970 	bl	800a458 <I2C_WaitOnFlagUntilTimeout>
 800a178:	4603      	mov	r3, r0
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d001      	beq.n	800a182 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800a17e:	2301      	movs	r3, #1
 800a180:	e07c      	b.n	800a27c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a18c:	b2d2      	uxtb	r2, r2
 800a18e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a194:	1c5a      	adds	r2, r3, #1
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a19e:	3b01      	subs	r3, #1
 800a1a0:	b29a      	uxth	r2, r3
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1aa:	b29b      	uxth	r3, r3
 800a1ac:	3b01      	subs	r3, #1
 800a1ae:	b29a      	uxth	r2, r3
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1b8:	b29b      	uxth	r3, r3
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d034      	beq.n	800a228 <HAL_I2C_Mem_Read+0x1d0>
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d130      	bne.n	800a228 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	9300      	str	r3, [sp, #0]
 800a1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	2180      	movs	r1, #128	; 0x80
 800a1d0:	68f8      	ldr	r0, [r7, #12]
 800a1d2:	f000 f941 	bl	800a458 <I2C_WaitOnFlagUntilTimeout>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d001      	beq.n	800a1e0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800a1dc:	2301      	movs	r3, #1
 800a1de:	e04d      	b.n	800a27c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1e4:	b29b      	uxth	r3, r3
 800a1e6:	2bff      	cmp	r3, #255	; 0xff
 800a1e8:	d90e      	bls.n	800a208 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	22ff      	movs	r2, #255	; 0xff
 800a1ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1f4:	b2da      	uxtb	r2, r3
 800a1f6:	8979      	ldrh	r1, [r7, #10]
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	9300      	str	r3, [sp, #0]
 800a1fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a200:	68f8      	ldr	r0, [r7, #12]
 800a202:	f000 fae3 	bl	800a7cc <I2C_TransferConfig>
 800a206:	e00f      	b.n	800a228 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a20c:	b29a      	uxth	r2, r3
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a216:	b2da      	uxtb	r2, r3
 800a218:	8979      	ldrh	r1, [r7, #10]
 800a21a:	2300      	movs	r3, #0
 800a21c:	9300      	str	r3, [sp, #0]
 800a21e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a222:	68f8      	ldr	r0, [r7, #12]
 800a224:	f000 fad2 	bl	800a7cc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a22c:	b29b      	uxth	r3, r3
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d19a      	bne.n	800a168 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a232:	697a      	ldr	r2, [r7, #20]
 800a234:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a236:	68f8      	ldr	r0, [r7, #12]
 800a238:	f000 f9a4 	bl	800a584 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a23c:	4603      	mov	r3, r0
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d001      	beq.n	800a246 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800a242:	2301      	movs	r3, #1
 800a244:	e01a      	b.n	800a27c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	2220      	movs	r2, #32
 800a24c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	6859      	ldr	r1, [r3, #4]
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681a      	ldr	r2, [r3, #0]
 800a258:	4b0b      	ldr	r3, [pc, #44]	; (800a288 <HAL_I2C_Mem_Read+0x230>)
 800a25a:	400b      	ands	r3, r1
 800a25c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2220      	movs	r2, #32
 800a262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2200      	movs	r2, #0
 800a26a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2200      	movs	r2, #0
 800a272:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a276:	2300      	movs	r3, #0
 800a278:	e000      	b.n	800a27c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800a27a:	2302      	movs	r3, #2
  }
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3718      	adds	r7, #24
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}
 800a284:	80002400 	.word	0x80002400
 800a288:	fe00e800 	.word	0xfe00e800

0800a28c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b083      	sub	sp, #12
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a29a:	b2db      	uxtb	r3, r3
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	370c      	adds	r7, #12
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a6:	4770      	bx	lr

0800a2a8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b083      	sub	sp, #12
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	370c      	adds	r7, #12
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr

0800a2c0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b086      	sub	sp, #24
 800a2c4:	af02      	add	r7, sp, #8
 800a2c6:	60f8      	str	r0, [r7, #12]
 800a2c8:	4608      	mov	r0, r1
 800a2ca:	4611      	mov	r1, r2
 800a2cc:	461a      	mov	r2, r3
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	817b      	strh	r3, [r7, #10]
 800a2d2:	460b      	mov	r3, r1
 800a2d4:	813b      	strh	r3, [r7, #8]
 800a2d6:	4613      	mov	r3, r2
 800a2d8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a2da:	88fb      	ldrh	r3, [r7, #6]
 800a2dc:	b2da      	uxtb	r2, r3
 800a2de:	8979      	ldrh	r1, [r7, #10]
 800a2e0:	4b20      	ldr	r3, [pc, #128]	; (800a364 <I2C_RequestMemoryWrite+0xa4>)
 800a2e2:	9300      	str	r3, [sp, #0]
 800a2e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a2e8:	68f8      	ldr	r0, [r7, #12]
 800a2ea:	f000 fa6f 	bl	800a7cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2ee:	69fa      	ldr	r2, [r7, #28]
 800a2f0:	69b9      	ldr	r1, [r7, #24]
 800a2f2:	68f8      	ldr	r0, [r7, #12]
 800a2f4:	f000 f8ff 	bl	800a4f6 <I2C_WaitOnTXISFlagUntilTimeout>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d001      	beq.n	800a302 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800a2fe:	2301      	movs	r3, #1
 800a300:	e02c      	b.n	800a35c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a302:	88fb      	ldrh	r3, [r7, #6]
 800a304:	2b01      	cmp	r3, #1
 800a306:	d105      	bne.n	800a314 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a308:	893b      	ldrh	r3, [r7, #8]
 800a30a:	b2da      	uxtb	r2, r3
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	629a      	str	r2, [r3, #40]	; 0x28
 800a312:	e015      	b.n	800a340 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a314:	893b      	ldrh	r3, [r7, #8]
 800a316:	0a1b      	lsrs	r3, r3, #8
 800a318:	b29b      	uxth	r3, r3
 800a31a:	b2da      	uxtb	r2, r3
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a322:	69fa      	ldr	r2, [r7, #28]
 800a324:	69b9      	ldr	r1, [r7, #24]
 800a326:	68f8      	ldr	r0, [r7, #12]
 800a328:	f000 f8e5 	bl	800a4f6 <I2C_WaitOnTXISFlagUntilTimeout>
 800a32c:	4603      	mov	r3, r0
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d001      	beq.n	800a336 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800a332:	2301      	movs	r3, #1
 800a334:	e012      	b.n	800a35c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a336:	893b      	ldrh	r3, [r7, #8]
 800a338:	b2da      	uxtb	r2, r3
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a340:	69fb      	ldr	r3, [r7, #28]
 800a342:	9300      	str	r3, [sp, #0]
 800a344:	69bb      	ldr	r3, [r7, #24]
 800a346:	2200      	movs	r2, #0
 800a348:	2180      	movs	r1, #128	; 0x80
 800a34a:	68f8      	ldr	r0, [r7, #12]
 800a34c:	f000 f884 	bl	800a458 <I2C_WaitOnFlagUntilTimeout>
 800a350:	4603      	mov	r3, r0
 800a352:	2b00      	cmp	r3, #0
 800a354:	d001      	beq.n	800a35a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800a356:	2301      	movs	r3, #1
 800a358:	e000      	b.n	800a35c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800a35a:	2300      	movs	r3, #0
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	3710      	adds	r7, #16
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}
 800a364:	80002000 	.word	0x80002000

0800a368 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b086      	sub	sp, #24
 800a36c:	af02      	add	r7, sp, #8
 800a36e:	60f8      	str	r0, [r7, #12]
 800a370:	4608      	mov	r0, r1
 800a372:	4611      	mov	r1, r2
 800a374:	461a      	mov	r2, r3
 800a376:	4603      	mov	r3, r0
 800a378:	817b      	strh	r3, [r7, #10]
 800a37a:	460b      	mov	r3, r1
 800a37c:	813b      	strh	r3, [r7, #8]
 800a37e:	4613      	mov	r3, r2
 800a380:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a382:	88fb      	ldrh	r3, [r7, #6]
 800a384:	b2da      	uxtb	r2, r3
 800a386:	8979      	ldrh	r1, [r7, #10]
 800a388:	4b20      	ldr	r3, [pc, #128]	; (800a40c <I2C_RequestMemoryRead+0xa4>)
 800a38a:	9300      	str	r3, [sp, #0]
 800a38c:	2300      	movs	r3, #0
 800a38e:	68f8      	ldr	r0, [r7, #12]
 800a390:	f000 fa1c 	bl	800a7cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a394:	69fa      	ldr	r2, [r7, #28]
 800a396:	69b9      	ldr	r1, [r7, #24]
 800a398:	68f8      	ldr	r0, [r7, #12]
 800a39a:	f000 f8ac 	bl	800a4f6 <I2C_WaitOnTXISFlagUntilTimeout>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d001      	beq.n	800a3a8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	e02c      	b.n	800a402 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a3a8:	88fb      	ldrh	r3, [r7, #6]
 800a3aa:	2b01      	cmp	r3, #1
 800a3ac:	d105      	bne.n	800a3ba <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a3ae:	893b      	ldrh	r3, [r7, #8]
 800a3b0:	b2da      	uxtb	r2, r3
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	629a      	str	r2, [r3, #40]	; 0x28
 800a3b8:	e015      	b.n	800a3e6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a3ba:	893b      	ldrh	r3, [r7, #8]
 800a3bc:	0a1b      	lsrs	r3, r3, #8
 800a3be:	b29b      	uxth	r3, r3
 800a3c0:	b2da      	uxtb	r2, r3
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a3c8:	69fa      	ldr	r2, [r7, #28]
 800a3ca:	69b9      	ldr	r1, [r7, #24]
 800a3cc:	68f8      	ldr	r0, [r7, #12]
 800a3ce:	f000 f892 	bl	800a4f6 <I2C_WaitOnTXISFlagUntilTimeout>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d001      	beq.n	800a3dc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800a3d8:	2301      	movs	r3, #1
 800a3da:	e012      	b.n	800a402 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a3dc:	893b      	ldrh	r3, [r7, #8]
 800a3de:	b2da      	uxtb	r2, r3
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a3e6:	69fb      	ldr	r3, [r7, #28]
 800a3e8:	9300      	str	r3, [sp, #0]
 800a3ea:	69bb      	ldr	r3, [r7, #24]
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	2140      	movs	r1, #64	; 0x40
 800a3f0:	68f8      	ldr	r0, [r7, #12]
 800a3f2:	f000 f831 	bl	800a458 <I2C_WaitOnFlagUntilTimeout>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d001      	beq.n	800a400 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	e000      	b.n	800a402 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800a400:	2300      	movs	r3, #0
}
 800a402:	4618      	mov	r0, r3
 800a404:	3710      	adds	r7, #16
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}
 800a40a:	bf00      	nop
 800a40c:	80002000 	.word	0x80002000

0800a410 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a410:	b480      	push	{r7}
 800a412:	b083      	sub	sp, #12
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	699b      	ldr	r3, [r3, #24]
 800a41e:	f003 0302 	and.w	r3, r3, #2
 800a422:	2b02      	cmp	r3, #2
 800a424:	d103      	bne.n	800a42e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	2200      	movs	r2, #0
 800a42c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	699b      	ldr	r3, [r3, #24]
 800a434:	f003 0301 	and.w	r3, r3, #1
 800a438:	2b01      	cmp	r3, #1
 800a43a:	d007      	beq.n	800a44c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	699a      	ldr	r2, [r3, #24]
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f042 0201 	orr.w	r2, r2, #1
 800a44a:	619a      	str	r2, [r3, #24]
  }
}
 800a44c:	bf00      	nop
 800a44e:	370c      	adds	r7, #12
 800a450:	46bd      	mov	sp, r7
 800a452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a456:	4770      	bx	lr

0800a458 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b084      	sub	sp, #16
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	60f8      	str	r0, [r7, #12]
 800a460:	60b9      	str	r1, [r7, #8]
 800a462:	603b      	str	r3, [r7, #0]
 800a464:	4613      	mov	r3, r2
 800a466:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a468:	e031      	b.n	800a4ce <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a470:	d02d      	beq.n	800a4ce <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a472:	f7fe fc2b 	bl	8008ccc <HAL_GetTick>
 800a476:	4602      	mov	r2, r0
 800a478:	69bb      	ldr	r3, [r7, #24]
 800a47a:	1ad3      	subs	r3, r2, r3
 800a47c:	683a      	ldr	r2, [r7, #0]
 800a47e:	429a      	cmp	r2, r3
 800a480:	d302      	bcc.n	800a488 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d122      	bne.n	800a4ce <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	699a      	ldr	r2, [r3, #24]
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	4013      	ands	r3, r2
 800a492:	68ba      	ldr	r2, [r7, #8]
 800a494:	429a      	cmp	r2, r3
 800a496:	bf0c      	ite	eq
 800a498:	2301      	moveq	r3, #1
 800a49a:	2300      	movne	r3, #0
 800a49c:	b2db      	uxtb	r3, r3
 800a49e:	461a      	mov	r2, r3
 800a4a0:	79fb      	ldrb	r3, [r7, #7]
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	d113      	bne.n	800a4ce <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4aa:	f043 0220 	orr.w	r2, r3, #32
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	2220      	movs	r2, #32
 800a4b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	e00f      	b.n	800a4ee <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	699a      	ldr	r2, [r3, #24]
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	4013      	ands	r3, r2
 800a4d8:	68ba      	ldr	r2, [r7, #8]
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	bf0c      	ite	eq
 800a4de:	2301      	moveq	r3, #1
 800a4e0:	2300      	movne	r3, #0
 800a4e2:	b2db      	uxtb	r3, r3
 800a4e4:	461a      	mov	r2, r3
 800a4e6:	79fb      	ldrb	r3, [r7, #7]
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	d0be      	beq.n	800a46a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a4ec:	2300      	movs	r3, #0
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3710      	adds	r7, #16
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}

0800a4f6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a4f6:	b580      	push	{r7, lr}
 800a4f8:	b084      	sub	sp, #16
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	60f8      	str	r0, [r7, #12]
 800a4fe:	60b9      	str	r1, [r7, #8]
 800a500:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a502:	e033      	b.n	800a56c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a504:	687a      	ldr	r2, [r7, #4]
 800a506:	68b9      	ldr	r1, [r7, #8]
 800a508:	68f8      	ldr	r0, [r7, #12]
 800a50a:	f000 f87f 	bl	800a60c <I2C_IsErrorOccurred>
 800a50e:	4603      	mov	r3, r0
 800a510:	2b00      	cmp	r3, #0
 800a512:	d001      	beq.n	800a518 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a514:	2301      	movs	r3, #1
 800a516:	e031      	b.n	800a57c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a51e:	d025      	beq.n	800a56c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a520:	f7fe fbd4 	bl	8008ccc <HAL_GetTick>
 800a524:	4602      	mov	r2, r0
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	1ad3      	subs	r3, r2, r3
 800a52a:	68ba      	ldr	r2, [r7, #8]
 800a52c:	429a      	cmp	r2, r3
 800a52e:	d302      	bcc.n	800a536 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d11a      	bne.n	800a56c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	699b      	ldr	r3, [r3, #24]
 800a53c:	f003 0302 	and.w	r3, r3, #2
 800a540:	2b02      	cmp	r3, #2
 800a542:	d013      	beq.n	800a56c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a548:	f043 0220 	orr.w	r2, r3, #32
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	2220      	movs	r2, #32
 800a554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	2200      	movs	r2, #0
 800a55c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	2200      	movs	r2, #0
 800a564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800a568:	2301      	movs	r3, #1
 800a56a:	e007      	b.n	800a57c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	699b      	ldr	r3, [r3, #24]
 800a572:	f003 0302 	and.w	r3, r3, #2
 800a576:	2b02      	cmp	r3, #2
 800a578:	d1c4      	bne.n	800a504 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a57a:	2300      	movs	r3, #0
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3710      	adds	r7, #16
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}

0800a584 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b084      	sub	sp, #16
 800a588:	af00      	add	r7, sp, #0
 800a58a:	60f8      	str	r0, [r7, #12]
 800a58c:	60b9      	str	r1, [r7, #8]
 800a58e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a590:	e02f      	b.n	800a5f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a592:	687a      	ldr	r2, [r7, #4]
 800a594:	68b9      	ldr	r1, [r7, #8]
 800a596:	68f8      	ldr	r0, [r7, #12]
 800a598:	f000 f838 	bl	800a60c <I2C_IsErrorOccurred>
 800a59c:	4603      	mov	r3, r0
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d001      	beq.n	800a5a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	e02d      	b.n	800a602 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5a6:	f7fe fb91 	bl	8008ccc <HAL_GetTick>
 800a5aa:	4602      	mov	r2, r0
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	1ad3      	subs	r3, r2, r3
 800a5b0:	68ba      	ldr	r2, [r7, #8]
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	d302      	bcc.n	800a5bc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d11a      	bne.n	800a5f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	699b      	ldr	r3, [r3, #24]
 800a5c2:	f003 0320 	and.w	r3, r3, #32
 800a5c6:	2b20      	cmp	r3, #32
 800a5c8:	d013      	beq.n	800a5f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5ce:	f043 0220 	orr.w	r2, r3, #32
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	2220      	movs	r2, #32
 800a5da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	e007      	b.n	800a602 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	699b      	ldr	r3, [r3, #24]
 800a5f8:	f003 0320 	and.w	r3, r3, #32
 800a5fc:	2b20      	cmp	r3, #32
 800a5fe:	d1c8      	bne.n	800a592 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a600:	2300      	movs	r3, #0
}
 800a602:	4618      	mov	r0, r3
 800a604:	3710      	adds	r7, #16
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
	...

0800a60c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b08a      	sub	sp, #40	; 0x28
 800a610:	af00      	add	r7, sp, #0
 800a612:	60f8      	str	r0, [r7, #12]
 800a614:	60b9      	str	r1, [r7, #8]
 800a616:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a618:	2300      	movs	r3, #0
 800a61a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	699b      	ldr	r3, [r3, #24]
 800a624:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800a626:	2300      	movs	r3, #0
 800a628:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a62e:	69bb      	ldr	r3, [r7, #24]
 800a630:	f003 0310 	and.w	r3, r3, #16
 800a634:	2b00      	cmp	r3, #0
 800a636:	d068      	beq.n	800a70a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	2210      	movs	r2, #16
 800a63e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a640:	e049      	b.n	800a6d6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a648:	d045      	beq.n	800a6d6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a64a:	f7fe fb3f 	bl	8008ccc <HAL_GetTick>
 800a64e:	4602      	mov	r2, r0
 800a650:	69fb      	ldr	r3, [r7, #28]
 800a652:	1ad3      	subs	r3, r2, r3
 800a654:	68ba      	ldr	r2, [r7, #8]
 800a656:	429a      	cmp	r2, r3
 800a658:	d302      	bcc.n	800a660 <I2C_IsErrorOccurred+0x54>
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d13a      	bne.n	800a6d6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	685b      	ldr	r3, [r3, #4]
 800a666:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a66a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a672:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	699b      	ldr	r3, [r3, #24]
 800a67a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a67e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a682:	d121      	bne.n	800a6c8 <I2C_IsErrorOccurred+0xbc>
 800a684:	697b      	ldr	r3, [r7, #20]
 800a686:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a68a:	d01d      	beq.n	800a6c8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800a68c:	7cfb      	ldrb	r3, [r7, #19]
 800a68e:	2b20      	cmp	r3, #32
 800a690:	d01a      	beq.n	800a6c8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	685a      	ldr	r2, [r3, #4]
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a6a0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800a6a2:	f7fe fb13 	bl	8008ccc <HAL_GetTick>
 800a6a6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a6a8:	e00e      	b.n	800a6c8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a6aa:	f7fe fb0f 	bl	8008ccc <HAL_GetTick>
 800a6ae:	4602      	mov	r2, r0
 800a6b0:	69fb      	ldr	r3, [r7, #28]
 800a6b2:	1ad3      	subs	r3, r2, r3
 800a6b4:	2b19      	cmp	r3, #25
 800a6b6:	d907      	bls.n	800a6c8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800a6b8:	6a3b      	ldr	r3, [r7, #32]
 800a6ba:	f043 0320 	orr.w	r3, r3, #32
 800a6be:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800a6c6:	e006      	b.n	800a6d6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	699b      	ldr	r3, [r3, #24]
 800a6ce:	f003 0320 	and.w	r3, r3, #32
 800a6d2:	2b20      	cmp	r3, #32
 800a6d4:	d1e9      	bne.n	800a6aa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	699b      	ldr	r3, [r3, #24]
 800a6dc:	f003 0320 	and.w	r3, r3, #32
 800a6e0:	2b20      	cmp	r3, #32
 800a6e2:	d003      	beq.n	800a6ec <I2C_IsErrorOccurred+0xe0>
 800a6e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d0aa      	beq.n	800a642 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a6ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d103      	bne.n	800a6fc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	2220      	movs	r2, #32
 800a6fa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a6fc:	6a3b      	ldr	r3, [r7, #32]
 800a6fe:	f043 0304 	orr.w	r3, r3, #4
 800a702:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a704:	2301      	movs	r3, #1
 800a706:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	699b      	ldr	r3, [r3, #24]
 800a710:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a712:	69bb      	ldr	r3, [r7, #24]
 800a714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d00b      	beq.n	800a734 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a71c:	6a3b      	ldr	r3, [r7, #32]
 800a71e:	f043 0301 	orr.w	r3, r3, #1
 800a722:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a72c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a72e:	2301      	movs	r3, #1
 800a730:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a734:	69bb      	ldr	r3, [r7, #24]
 800a736:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d00b      	beq.n	800a756 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a73e:	6a3b      	ldr	r3, [r7, #32]
 800a740:	f043 0308 	orr.w	r3, r3, #8
 800a744:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a74e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a750:	2301      	movs	r3, #1
 800a752:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a756:	69bb      	ldr	r3, [r7, #24]
 800a758:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d00b      	beq.n	800a778 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a760:	6a3b      	ldr	r3, [r7, #32]
 800a762:	f043 0302 	orr.w	r3, r3, #2
 800a766:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a770:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a772:	2301      	movs	r3, #1
 800a774:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800a778:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d01c      	beq.n	800a7ba <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a780:	68f8      	ldr	r0, [r7, #12]
 800a782:	f7ff fe45 	bl	800a410 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	6859      	ldr	r1, [r3, #4]
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681a      	ldr	r2, [r3, #0]
 800a790:	4b0d      	ldr	r3, [pc, #52]	; (800a7c8 <I2C_IsErrorOccurred+0x1bc>)
 800a792:	400b      	ands	r3, r1
 800a794:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a79a:	6a3b      	ldr	r3, [r7, #32]
 800a79c:	431a      	orrs	r2, r3
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	2220      	movs	r2, #32
 800a7a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800a7ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3728      	adds	r7, #40	; 0x28
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}
 800a7c6:	bf00      	nop
 800a7c8:	fe00e800 	.word	0xfe00e800

0800a7cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b087      	sub	sp, #28
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	60f8      	str	r0, [r7, #12]
 800a7d4:	607b      	str	r3, [r7, #4]
 800a7d6:	460b      	mov	r3, r1
 800a7d8:	817b      	strh	r3, [r7, #10]
 800a7da:	4613      	mov	r3, r2
 800a7dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a7de:	897b      	ldrh	r3, [r7, #10]
 800a7e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a7e4:	7a7b      	ldrb	r3, [r7, #9]
 800a7e6:	041b      	lsls	r3, r3, #16
 800a7e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a7ec:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a7f2:	6a3b      	ldr	r3, [r7, #32]
 800a7f4:	4313      	orrs	r3, r2
 800a7f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a7fa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	685a      	ldr	r2, [r3, #4]
 800a802:	6a3b      	ldr	r3, [r7, #32]
 800a804:	0d5b      	lsrs	r3, r3, #21
 800a806:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a80a:	4b08      	ldr	r3, [pc, #32]	; (800a82c <I2C_TransferConfig+0x60>)
 800a80c:	430b      	orrs	r3, r1
 800a80e:	43db      	mvns	r3, r3
 800a810:	ea02 0103 	and.w	r1, r2, r3
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	697a      	ldr	r2, [r7, #20]
 800a81a:	430a      	orrs	r2, r1
 800a81c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a81e:	bf00      	nop
 800a820:	371c      	adds	r7, #28
 800a822:	46bd      	mov	sp, r7
 800a824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a828:	4770      	bx	lr
 800a82a:	bf00      	nop
 800a82c:	03ff63ff 	.word	0x03ff63ff

0800a830 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a830:	b480      	push	{r7}
 800a832:	b083      	sub	sp, #12
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a840:	b2db      	uxtb	r3, r3
 800a842:	2b20      	cmp	r3, #32
 800a844:	d138      	bne.n	800a8b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a84c:	2b01      	cmp	r3, #1
 800a84e:	d101      	bne.n	800a854 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a850:	2302      	movs	r3, #2
 800a852:	e032      	b.n	800a8ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2201      	movs	r2, #1
 800a858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2224      	movs	r2, #36	; 0x24
 800a860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	681a      	ldr	r2, [r3, #0]
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f022 0201 	bic.w	r2, r2, #1
 800a872:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	681a      	ldr	r2, [r3, #0]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a882:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	6819      	ldr	r1, [r3, #0]
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	683a      	ldr	r2, [r7, #0]
 800a890:	430a      	orrs	r2, r1
 800a892:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	681a      	ldr	r2, [r3, #0]
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f042 0201 	orr.w	r2, r2, #1
 800a8a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2220      	movs	r2, #32
 800a8a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	e000      	b.n	800a8ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a8b8:	2302      	movs	r3, #2
  }
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	370c      	adds	r7, #12
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c4:	4770      	bx	lr

0800a8c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a8c6:	b480      	push	{r7}
 800a8c8:	b085      	sub	sp, #20
 800a8ca:	af00      	add	r7, sp, #0
 800a8cc:	6078      	str	r0, [r7, #4]
 800a8ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a8d6:	b2db      	uxtb	r3, r3
 800a8d8:	2b20      	cmp	r3, #32
 800a8da:	d139      	bne.n	800a950 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a8e2:	2b01      	cmp	r3, #1
 800a8e4:	d101      	bne.n	800a8ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a8e6:	2302      	movs	r3, #2
 800a8e8:	e033      	b.n	800a952 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2201      	movs	r2, #1
 800a8ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2224      	movs	r2, #36	; 0x24
 800a8f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	681a      	ldr	r2, [r3, #0]
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f022 0201 	bic.w	r2, r2, #1
 800a908:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a918:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	021b      	lsls	r3, r3, #8
 800a91e:	68fa      	ldr	r2, [r7, #12]
 800a920:	4313      	orrs	r3, r2
 800a922:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	68fa      	ldr	r2, [r7, #12]
 800a92a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	681a      	ldr	r2, [r3, #0]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f042 0201 	orr.w	r2, r2, #1
 800a93a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2220      	movs	r2, #32
 800a940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2200      	movs	r2, #0
 800a948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a94c:	2300      	movs	r3, #0
 800a94e:	e000      	b.n	800a952 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a950:	2302      	movs	r3, #2
  }
}
 800a952:	4618      	mov	r0, r3
 800a954:	3714      	adds	r7, #20
 800a956:	46bd      	mov	sp, r7
 800a958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95c:	4770      	bx	lr
	...

0800a960 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b084      	sub	sp, #16
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d101      	bne.n	800a972 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800a96e:	2301      	movs	r3, #1
 800a970:	e0bf      	b.n	800aaf2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800a978:	b2db      	uxtb	r3, r3
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d106      	bne.n	800a98c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2200      	movs	r2, #0
 800a982:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f7f6 fd46 	bl	8001418 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2202      	movs	r2, #2
 800a990:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	699a      	ldr	r2, [r3, #24]
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800a9a2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	6999      	ldr	r1, [r3, #24]
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	685a      	ldr	r2, [r3, #4]
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	689b      	ldr	r3, [r3, #8]
 800a9b2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a9b8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	691b      	ldr	r3, [r3, #16]
 800a9be:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	430a      	orrs	r2, r1
 800a9c6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	6899      	ldr	r1, [r3, #8]
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681a      	ldr	r2, [r3, #0]
 800a9d2:	4b4a      	ldr	r3, [pc, #296]	; (800aafc <HAL_LTDC_Init+0x19c>)
 800a9d4:	400b      	ands	r3, r1
 800a9d6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	695b      	ldr	r3, [r3, #20]
 800a9dc:	041b      	lsls	r3, r3, #16
 800a9de:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	6899      	ldr	r1, [r3, #8]
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	699a      	ldr	r2, [r3, #24]
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	431a      	orrs	r2, r3
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	430a      	orrs	r2, r1
 800a9f4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	68d9      	ldr	r1, [r3, #12]
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681a      	ldr	r2, [r3, #0]
 800aa00:	4b3e      	ldr	r3, [pc, #248]	; (800aafc <HAL_LTDC_Init+0x19c>)
 800aa02:	400b      	ands	r3, r1
 800aa04:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	69db      	ldr	r3, [r3, #28]
 800aa0a:	041b      	lsls	r3, r3, #16
 800aa0c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	68d9      	ldr	r1, [r3, #12]
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6a1a      	ldr	r2, [r3, #32]
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	431a      	orrs	r2, r3
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	430a      	orrs	r2, r1
 800aa22:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	6919      	ldr	r1, [r3, #16]
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681a      	ldr	r2, [r3, #0]
 800aa2e:	4b33      	ldr	r3, [pc, #204]	; (800aafc <HAL_LTDC_Init+0x19c>)
 800aa30:	400b      	ands	r3, r1
 800aa32:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa38:	041b      	lsls	r3, r3, #16
 800aa3a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	6919      	ldr	r1, [r3, #16]
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	431a      	orrs	r2, r3
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	430a      	orrs	r2, r1
 800aa50:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	6959      	ldr	r1, [r3, #20]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681a      	ldr	r2, [r3, #0]
 800aa5c:	4b27      	ldr	r3, [pc, #156]	; (800aafc <HAL_LTDC_Init+0x19c>)
 800aa5e:	400b      	ands	r3, r1
 800aa60:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa66:	041b      	lsls	r3, r3, #16
 800aa68:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	6959      	ldr	r1, [r3, #20]
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	431a      	orrs	r2, r3
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	430a      	orrs	r2, r1
 800aa7e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800aa86:	021b      	lsls	r3, r3, #8
 800aa88:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800aa90:	041b      	lsls	r3, r3, #16
 800aa92:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800aaa2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800aaaa:	68ba      	ldr	r2, [r7, #8]
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	4313      	orrs	r3, r2
 800aab0:	687a      	ldr	r2, [r7, #4]
 800aab2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800aab6:	431a      	orrs	r2, r3
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	430a      	orrs	r2, r1
 800aabe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f042 0206 	orr.w	r2, r2, #6
 800aace:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	699a      	ldr	r2, [r3, #24]
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f042 0201 	orr.w	r2, r2, #1
 800aade:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2200      	movs	r2, #0
 800aae4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2201      	movs	r2, #1
 800aaec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800aaf0:	2300      	movs	r3, #0
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3710      	adds	r7, #16
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}
 800aafa:	bf00      	nop
 800aafc:	f000f800 	.word	0xf000f800

0800ab00 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b084      	sub	sp, #16
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab0e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab16:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f003 0304 	and.w	r3, r3, #4
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d023      	beq.n	800ab6a <HAL_LTDC_IRQHandler+0x6a>
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	f003 0304 	and.w	r3, r3, #4
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d01e      	beq.n	800ab6a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f022 0204 	bic.w	r2, r2, #4
 800ab3a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	2204      	movs	r2, #4
 800ab42:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ab4a:	f043 0201 	orr.w	r2, r3, #1
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2204      	movs	r2, #4
 800ab58:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2200      	movs	r2, #0
 800ab60:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f000 f86f 	bl	800ac48 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	f003 0302 	and.w	r3, r3, #2
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d023      	beq.n	800abbc <HAL_LTDC_IRQHandler+0xbc>
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	f003 0302 	and.w	r3, r3, #2
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d01e      	beq.n	800abbc <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f022 0202 	bic.w	r2, r2, #2
 800ab8c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	2202      	movs	r2, #2
 800ab94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ab9c:	f043 0202 	orr.w	r2, r3, #2
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2204      	movs	r2, #4
 800abaa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2200      	movs	r2, #0
 800abb2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f000 f846 	bl	800ac48 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	f003 0301 	and.w	r3, r3, #1
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d01b      	beq.n	800abfe <HAL_LTDC_IRQHandler+0xfe>
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	f003 0301 	and.w	r3, r3, #1
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d016      	beq.n	800abfe <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f022 0201 	bic.w	r2, r2, #1
 800abde:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	2201      	movs	r2, #1
 800abe6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2201      	movs	r2, #1
 800abec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2200      	movs	r2, #0
 800abf4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f7f9 fbb7 	bl	800436c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	f003 0308 	and.w	r3, r3, #8
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d01b      	beq.n	800ac40 <HAL_LTDC_IRQHandler+0x140>
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	f003 0308 	and.w	r3, r3, #8
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d016      	beq.n	800ac40 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f022 0208 	bic.w	r2, r2, #8
 800ac20:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	2208      	movs	r2, #8
 800ac28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2201      	movs	r2, #1
 800ac2e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2200      	movs	r2, #0
 800ac36:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f000 f80e 	bl	800ac5c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800ac40:	bf00      	nop
 800ac42:	3710      	adds	r7, #16
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}

0800ac48 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b083      	sub	sp, #12
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800ac50:	bf00      	nop
 800ac52:	370c      	adds	r7, #12
 800ac54:	46bd      	mov	sp, r7
 800ac56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5a:	4770      	bx	lr

0800ac5c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b083      	sub	sp, #12
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800ac64:	bf00      	nop
 800ac66:	370c      	adds	r7, #12
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6e:	4770      	bx	lr

0800ac70 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800ac70:	b5b0      	push	{r4, r5, r7, lr}
 800ac72:	b084      	sub	sp, #16
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	60f8      	str	r0, [r7, #12]
 800ac78:	60b9      	str	r1, [r7, #8]
 800ac7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800ac82:	2b01      	cmp	r3, #1
 800ac84:	d101      	bne.n	800ac8a <HAL_LTDC_ConfigLayer+0x1a>
 800ac86:	2302      	movs	r3, #2
 800ac88:	e02c      	b.n	800ace4 <HAL_LTDC_ConfigLayer+0x74>
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	2201      	movs	r2, #1
 800ac8e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	2202      	movs	r2, #2
 800ac96:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800ac9a:	68fa      	ldr	r2, [r7, #12]
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2134      	movs	r1, #52	; 0x34
 800aca0:	fb01 f303 	mul.w	r3, r1, r3
 800aca4:	4413      	add	r3, r2
 800aca6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	4614      	mov	r4, r2
 800acae:	461d      	mov	r5, r3
 800acb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800acb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800acb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800acb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800acb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800acba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800acbc:	682b      	ldr	r3, [r5, #0]
 800acbe:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800acc0:	687a      	ldr	r2, [r7, #4]
 800acc2:	68b9      	ldr	r1, [r7, #8]
 800acc4:	68f8      	ldr	r0, [r7, #12]
 800acc6:	f000 f849 	bl	800ad5c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	2201      	movs	r2, #1
 800acd0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	2201      	movs	r2, #1
 800acd6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	2200      	movs	r2, #0
 800acde:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800ace2:	2300      	movs	r3, #0
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3710      	adds	r7, #16
 800ace8:	46bd      	mov	sp, r7
 800acea:	bdb0      	pop	{r4, r5, r7, pc}

0800acec <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 800acec:	b480      	push	{r7}
 800acee:	b083      	sub	sp, #12
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800acfc:	2b01      	cmp	r3, #1
 800acfe:	d101      	bne.n	800ad04 <HAL_LTDC_ProgramLineEvent+0x18>
 800ad00:	2302      	movs	r3, #2
 800ad02:	e023      	b.n	800ad4c <HAL_LTDC_ProgramLineEvent+0x60>
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2201      	movs	r2, #1
 800ad08:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2202      	movs	r2, #2
 800ad10:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	f022 0201 	bic.w	r2, r2, #1
 800ad22:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 800ad24:	4a0c      	ldr	r2, [pc, #48]	; (800ad58 <HAL_LTDC_ProgramLineEvent+0x6c>)
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	f042 0201 	orr.w	r2, r2, #1
 800ad38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2201      	movs	r2, #1
 800ad3e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2200      	movs	r2, #0
 800ad46:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800ad4a:	2300      	movs	r3, #0
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	370c      	adds	r7, #12
 800ad50:	46bd      	mov	sp, r7
 800ad52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad56:	4770      	bx	lr
 800ad58:	50001000 	.word	0x50001000

0800ad5c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b089      	sub	sp, #36	; 0x24
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	60f8      	str	r0, [r7, #12]
 800ad64:	60b9      	str	r1, [r7, #8]
 800ad66:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	685a      	ldr	r2, [r3, #4]
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	68db      	ldr	r3, [r3, #12]
 800ad72:	0c1b      	lsrs	r3, r3, #16
 800ad74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ad78:	4413      	add	r3, r2
 800ad7a:	041b      	lsls	r3, r3, #16
 800ad7c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	461a      	mov	r2, r3
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	01db      	lsls	r3, r3, #7
 800ad88:	4413      	add	r3, r2
 800ad8a:	3384      	adds	r3, #132	; 0x84
 800ad8c:	685b      	ldr	r3, [r3, #4]
 800ad8e:	68fa      	ldr	r2, [r7, #12]
 800ad90:	6812      	ldr	r2, [r2, #0]
 800ad92:	4611      	mov	r1, r2
 800ad94:	687a      	ldr	r2, [r7, #4]
 800ad96:	01d2      	lsls	r2, r2, #7
 800ad98:	440a      	add	r2, r1
 800ad9a:	3284      	adds	r2, #132	; 0x84
 800ad9c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800ada0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	68db      	ldr	r3, [r3, #12]
 800adac:	0c1b      	lsrs	r3, r3, #16
 800adae:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800adb2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800adb4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	4619      	mov	r1, r3
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	01db      	lsls	r3, r3, #7
 800adc0:	440b      	add	r3, r1
 800adc2:	3384      	adds	r3, #132	; 0x84
 800adc4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800adc6:	69fb      	ldr	r3, [r7, #28]
 800adc8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800adca:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	68da      	ldr	r2, [r3, #12]
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	68db      	ldr	r3, [r3, #12]
 800add6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800adda:	4413      	add	r3, r2
 800addc:	041b      	lsls	r3, r3, #16
 800adde:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	461a      	mov	r2, r3
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	01db      	lsls	r3, r3, #7
 800adea:	4413      	add	r3, r2
 800adec:	3384      	adds	r3, #132	; 0x84
 800adee:	689b      	ldr	r3, [r3, #8]
 800adf0:	68fa      	ldr	r2, [r7, #12]
 800adf2:	6812      	ldr	r2, [r2, #0]
 800adf4:	4611      	mov	r1, r2
 800adf6:	687a      	ldr	r2, [r7, #4]
 800adf8:	01d2      	lsls	r2, r2, #7
 800adfa:	440a      	add	r2, r1
 800adfc:	3284      	adds	r2, #132	; 0x84
 800adfe:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800ae02:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	689a      	ldr	r2, [r3, #8]
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	68db      	ldr	r3, [r3, #12]
 800ae0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ae12:	4413      	add	r3, r2
 800ae14:	1c5a      	adds	r2, r3, #1
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	4619      	mov	r1, r3
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	01db      	lsls	r3, r3, #7
 800ae20:	440b      	add	r3, r1
 800ae22:	3384      	adds	r3, #132	; 0x84
 800ae24:	4619      	mov	r1, r3
 800ae26:	69fb      	ldr	r3, [r7, #28]
 800ae28:	4313      	orrs	r3, r2
 800ae2a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	461a      	mov	r2, r3
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	01db      	lsls	r3, r3, #7
 800ae36:	4413      	add	r3, r2
 800ae38:	3384      	adds	r3, #132	; 0x84
 800ae3a:	691b      	ldr	r3, [r3, #16]
 800ae3c:	68fa      	ldr	r2, [r7, #12]
 800ae3e:	6812      	ldr	r2, [r2, #0]
 800ae40:	4611      	mov	r1, r2
 800ae42:	687a      	ldr	r2, [r7, #4]
 800ae44:	01d2      	lsls	r2, r2, #7
 800ae46:	440a      	add	r2, r1
 800ae48:	3284      	adds	r2, #132	; 0x84
 800ae4a:	f023 0307 	bic.w	r3, r3, #7
 800ae4e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	461a      	mov	r2, r3
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	01db      	lsls	r3, r3, #7
 800ae5a:	4413      	add	r3, r2
 800ae5c:	3384      	adds	r3, #132	; 0x84
 800ae5e:	461a      	mov	r2, r3
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	691b      	ldr	r3, [r3, #16]
 800ae64:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ae6c:	021b      	lsls	r3, r3, #8
 800ae6e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800ae76:	041b      	lsls	r3, r3, #16
 800ae78:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	699b      	ldr	r3, [r3, #24]
 800ae7e:	061b      	lsls	r3, r3, #24
 800ae80:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	461a      	mov	r2, r3
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	01db      	lsls	r3, r3, #7
 800ae8c:	4413      	add	r3, r2
 800ae8e:	3384      	adds	r3, #132	; 0x84
 800ae90:	699b      	ldr	r3, [r3, #24]
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	461a      	mov	r2, r3
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	01db      	lsls	r3, r3, #7
 800ae9c:	4413      	add	r3, r2
 800ae9e:	3384      	adds	r3, #132	; 0x84
 800aea0:	461a      	mov	r2, r3
 800aea2:	2300      	movs	r3, #0
 800aea4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aeac:	461a      	mov	r2, r3
 800aeae:	69fb      	ldr	r3, [r7, #28]
 800aeb0:	431a      	orrs	r2, r3
 800aeb2:	69bb      	ldr	r3, [r7, #24]
 800aeb4:	431a      	orrs	r2, r3
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	4619      	mov	r1, r3
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	01db      	lsls	r3, r3, #7
 800aec0:	440b      	add	r3, r1
 800aec2:	3384      	adds	r3, #132	; 0x84
 800aec4:	4619      	mov	r1, r3
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	4313      	orrs	r3, r2
 800aeca:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	461a      	mov	r2, r3
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	01db      	lsls	r3, r3, #7
 800aed6:	4413      	add	r3, r2
 800aed8:	3384      	adds	r3, #132	; 0x84
 800aeda:	695b      	ldr	r3, [r3, #20]
 800aedc:	68fa      	ldr	r2, [r7, #12]
 800aede:	6812      	ldr	r2, [r2, #0]
 800aee0:	4611      	mov	r1, r2
 800aee2:	687a      	ldr	r2, [r7, #4]
 800aee4:	01d2      	lsls	r2, r2, #7
 800aee6:	440a      	add	r2, r1
 800aee8:	3284      	adds	r2, #132	; 0x84
 800aeea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800aeee:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	461a      	mov	r2, r3
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	01db      	lsls	r3, r3, #7
 800aefa:	4413      	add	r3, r2
 800aefc:	3384      	adds	r3, #132	; 0x84
 800aefe:	461a      	mov	r2, r3
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	695b      	ldr	r3, [r3, #20]
 800af04:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	461a      	mov	r2, r3
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	01db      	lsls	r3, r3, #7
 800af10:	4413      	add	r3, r2
 800af12:	3384      	adds	r3, #132	; 0x84
 800af14:	69da      	ldr	r2, [r3, #28]
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	4619      	mov	r1, r3
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	01db      	lsls	r3, r3, #7
 800af20:	440b      	add	r3, r1
 800af22:	3384      	adds	r3, #132	; 0x84
 800af24:	4619      	mov	r1, r3
 800af26:	4b58      	ldr	r3, [pc, #352]	; (800b088 <LTDC_SetConfig+0x32c>)
 800af28:	4013      	ands	r3, r2
 800af2a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	69da      	ldr	r2, [r3, #28]
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	6a1b      	ldr	r3, [r3, #32]
 800af34:	68f9      	ldr	r1, [r7, #12]
 800af36:	6809      	ldr	r1, [r1, #0]
 800af38:	4608      	mov	r0, r1
 800af3a:	6879      	ldr	r1, [r7, #4]
 800af3c:	01c9      	lsls	r1, r1, #7
 800af3e:	4401      	add	r1, r0
 800af40:	3184      	adds	r1, #132	; 0x84
 800af42:	4313      	orrs	r3, r2
 800af44:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	461a      	mov	r2, r3
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	01db      	lsls	r3, r3, #7
 800af50:	4413      	add	r3, r2
 800af52:	3384      	adds	r3, #132	; 0x84
 800af54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	461a      	mov	r2, r3
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	01db      	lsls	r3, r3, #7
 800af60:	4413      	add	r3, r2
 800af62:	3384      	adds	r3, #132	; 0x84
 800af64:	461a      	mov	r2, r3
 800af66:	2300      	movs	r3, #0
 800af68:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	461a      	mov	r2, r3
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	01db      	lsls	r3, r3, #7
 800af74:	4413      	add	r3, r2
 800af76:	3384      	adds	r3, #132	; 0x84
 800af78:	461a      	mov	r2, r3
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af7e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	691b      	ldr	r3, [r3, #16]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d102      	bne.n	800af8e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800af88:	2304      	movs	r3, #4
 800af8a:	61fb      	str	r3, [r7, #28]
 800af8c:	e01b      	b.n	800afc6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	691b      	ldr	r3, [r3, #16]
 800af92:	2b01      	cmp	r3, #1
 800af94:	d102      	bne.n	800af9c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800af96:	2303      	movs	r3, #3
 800af98:	61fb      	str	r3, [r7, #28]
 800af9a:	e014      	b.n	800afc6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	691b      	ldr	r3, [r3, #16]
 800afa0:	2b04      	cmp	r3, #4
 800afa2:	d00b      	beq.n	800afbc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800afa8:	2b02      	cmp	r3, #2
 800afaa:	d007      	beq.n	800afbc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800afb0:	2b03      	cmp	r3, #3
 800afb2:	d003      	beq.n	800afbc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800afb8:	2b07      	cmp	r3, #7
 800afba:	d102      	bne.n	800afc2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800afbc:	2302      	movs	r3, #2
 800afbe:	61fb      	str	r3, [r7, #28]
 800afc0:	e001      	b.n	800afc6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800afc2:	2301      	movs	r3, #1
 800afc4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	461a      	mov	r2, r3
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	01db      	lsls	r3, r3, #7
 800afd0:	4413      	add	r3, r2
 800afd2:	3384      	adds	r3, #132	; 0x84
 800afd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afd6:	68fa      	ldr	r2, [r7, #12]
 800afd8:	6812      	ldr	r2, [r2, #0]
 800afda:	4611      	mov	r1, r2
 800afdc:	687a      	ldr	r2, [r7, #4]
 800afde:	01d2      	lsls	r2, r2, #7
 800afe0:	440a      	add	r2, r1
 800afe2:	3284      	adds	r2, #132	; 0x84
 800afe4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800afe8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afee:	69fa      	ldr	r2, [r7, #28]
 800aff0:	fb02 f303 	mul.w	r3, r2, r3
 800aff4:	041a      	lsls	r2, r3, #16
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	6859      	ldr	r1, [r3, #4]
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	1acb      	subs	r3, r1, r3
 800b000:	69f9      	ldr	r1, [r7, #28]
 800b002:	fb01 f303 	mul.w	r3, r1, r3
 800b006:	3307      	adds	r3, #7
 800b008:	68f9      	ldr	r1, [r7, #12]
 800b00a:	6809      	ldr	r1, [r1, #0]
 800b00c:	4608      	mov	r0, r1
 800b00e:	6879      	ldr	r1, [r7, #4]
 800b010:	01c9      	lsls	r1, r1, #7
 800b012:	4401      	add	r1, r0
 800b014:	3184      	adds	r1, #132	; 0x84
 800b016:	4313      	orrs	r3, r2
 800b018:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	461a      	mov	r2, r3
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	01db      	lsls	r3, r3, #7
 800b024:	4413      	add	r3, r2
 800b026:	3384      	adds	r3, #132	; 0x84
 800b028:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	4619      	mov	r1, r3
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	01db      	lsls	r3, r3, #7
 800b034:	440b      	add	r3, r1
 800b036:	3384      	adds	r3, #132	; 0x84
 800b038:	4619      	mov	r1, r3
 800b03a:	4b14      	ldr	r3, [pc, #80]	; (800b08c <LTDC_SetConfig+0x330>)
 800b03c:	4013      	ands	r3, r2
 800b03e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	461a      	mov	r2, r3
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	01db      	lsls	r3, r3, #7
 800b04a:	4413      	add	r3, r2
 800b04c:	3384      	adds	r3, #132	; 0x84
 800b04e:	461a      	mov	r2, r3
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b054:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	461a      	mov	r2, r3
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	01db      	lsls	r3, r3, #7
 800b060:	4413      	add	r3, r2
 800b062:	3384      	adds	r3, #132	; 0x84
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	68fa      	ldr	r2, [r7, #12]
 800b068:	6812      	ldr	r2, [r2, #0]
 800b06a:	4611      	mov	r1, r2
 800b06c:	687a      	ldr	r2, [r7, #4]
 800b06e:	01d2      	lsls	r2, r2, #7
 800b070:	440a      	add	r2, r1
 800b072:	3284      	adds	r2, #132	; 0x84
 800b074:	f043 0301 	orr.w	r3, r3, #1
 800b078:	6013      	str	r3, [r2, #0]
}
 800b07a:	bf00      	nop
 800b07c:	3724      	adds	r7, #36	; 0x24
 800b07e:	46bd      	mov	sp, r7
 800b080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b084:	4770      	bx	lr
 800b086:	bf00      	nop
 800b088:	fffff8f8 	.word	0xfffff8f8
 800b08c:	fffff800 	.word	0xfffff800

0800b090 <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b084      	sub	sp, #16
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart =  HAL_GetTick();
 800b098:	f7fd fe18 	bl	8008ccc <HAL_GetTick>
 800b09c:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d101      	bne.n	800b0a8 <HAL_MDMA_Abort+0x18>
  {
    return HAL_ERROR;
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	e04a      	b.n	800b13e <HAL_MDMA_Abort+0xae>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0ae:	b2db      	uxtb	r3, r3
 800b0b0:	2b02      	cmp	r3, #2
 800b0b2:	d008      	beq.n	800b0c6 <HAL_MDMA_Abort+0x36>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2280      	movs	r2, #128	; 0x80
 800b0b8:	669a      	str	r2, [r3, #104]	; 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2200      	movs	r2, #0
 800b0be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	e03b      	b.n	800b13e <HAL_MDMA_Abort+0xae>
  }
  else
  {
    /* Disable all the transfer interrupts */
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	68da      	ldr	r2, [r3, #12]
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 800b0d4:	60da      	str	r2, [r3, #12]

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	68da      	ldr	r2, [r3, #12]
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f022 0201 	bic.w	r2, r2, #1
 800b0e4:	60da      	str	r2, [r3, #12]

    /* Check if the MDMA Channel is effectively disabled */
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800b0e6:	e016      	b.n	800b116 <HAL_MDMA_Abort+0x86>
    {
      /* Check for the Timeout */
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800b0e8:	f7fd fdf0 	bl	8008ccc <HAL_GetTick>
 800b0ec:	4602      	mov	r2, r0
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	1ad3      	subs	r3, r2, r3
 800b0f2:	2b05      	cmp	r3, #5
 800b0f4:	d90f      	bls.n	800b116 <HAL_MDMA_Abort+0x86>
      {
        /* Update error code */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b0fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	669a      	str	r2, [r3, #104]	; 0x68

        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2200      	movs	r2, #0
 800b106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the MDMA state */
        hmdma->State = HAL_MDMA_STATE_ERROR;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2203      	movs	r2, #3
 800b10e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        return HAL_ERROR;
 800b112:	2301      	movs	r3, #1
 800b114:	e013      	b.n	800b13e <HAL_MDMA_Abort+0xae>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	68db      	ldr	r3, [r3, #12]
 800b11c:	f003 0301 	and.w	r3, r3, #1
 800b120:	2b00      	cmp	r3, #0
 800b122:	d1e1      	bne.n	800b0e8 <HAL_MDMA_Abort+0x58>
      }
    }

    /* Clear all interrupt flags */
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	221f      	movs	r2, #31
 800b12a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2200      	movs	r2, #0
 800b130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2201      	movs	r2, #1
 800b138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

  return HAL_OK;
 800b13c:	2300      	movs	r3, #0
}
 800b13e:	4618      	mov	r0, r3
 800b140:	3710      	adds	r7, #16
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}

0800b146 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 800b146:	b480      	push	{r7}
 800b148:	b083      	sub	sp, #12
 800b14a:	af00      	add	r7, sp, #0
 800b14c:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d101      	bne.n	800b158 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800b154:	2301      	movs	r3, #1
 800b156:	e017      	b.n	800b188 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b15e:	b2db      	uxtb	r3, r3
 800b160:	2b02      	cmp	r3, #2
 800b162:	d004      	beq.n	800b16e <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2280      	movs	r2, #128	; 0x80
 800b168:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
 800b16a:	2301      	movs	r3, #1
 800b16c:	e00c      	b.n	800b188 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2204      	movs	r2, #4
 800b172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	68da      	ldr	r2, [r3, #12]
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f022 0201 	bic.w	r2, r2, #1
 800b184:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 800b186:	2300      	movs	r3, #0
}
 800b188:	4618      	mov	r0, r3
 800b18a:	370c      	adds	r7, #12
 800b18c:	46bd      	mov	sp, r7
 800b18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b192:	4770      	bx	lr

0800b194 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b086      	sub	sp, #24
 800b198:	af02      	add	r7, sp, #8
 800b19a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b19c:	2300      	movs	r3, #0
 800b19e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800b1a0:	f7fd fd94 	bl	8008ccc <HAL_GetTick>
 800b1a4:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d102      	bne.n	800b1b2 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	73fb      	strb	r3, [r7, #15]
 800b1b0:	e0a5      	b.n	800b2fe <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY    (hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP         (hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	f040 809e 	bne.w	800b2fe <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f7f6 f9f6 	bl	80015b4 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 800b1c8:	f241 3188 	movw	r1, #5000	; 0x1388
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f000 fd44 	bl	800bc5a <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	689a      	ldr	r2, [r3, #8]
 800b1d8:	4b4b      	ldr	r3, [pc, #300]	; (800b308 <HAL_OSPI_Init+0x174>)
 800b1da:	4013      	ands	r3, r2
 800b1dc:	687a      	ldr	r2, [r7, #4]
 800b1de:	68d1      	ldr	r1, [r2, #12]
 800b1e0:	687a      	ldr	r2, [r7, #4]
 800b1e2:	6912      	ldr	r2, [r2, #16]
 800b1e4:	3a01      	subs	r2, #1
 800b1e6:	0412      	lsls	r2, r2, #16
 800b1e8:	4311      	orrs	r1, r2
 800b1ea:	687a      	ldr	r2, [r7, #4]
 800b1ec:	6952      	ldr	r2, [r2, #20]
 800b1ee:	3a01      	subs	r2, #1
 800b1f0:	0212      	lsls	r2, r2, #8
 800b1f2:	4311      	orrs	r1, r2
 800b1f4:	687a      	ldr	r2, [r7, #4]
 800b1f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b1f8:	4311      	orrs	r1, r2
 800b1fa:	687a      	ldr	r2, [r7, #4]
 800b1fc:	69d2      	ldr	r2, [r2, #28]
 800b1fe:	4311      	orrs	r1, r2
 800b200:	687a      	ldr	r2, [r7, #4]
 800b202:	6812      	ldr	r2, [r2, #0]
 800b204:	430b      	orrs	r3, r1
 800b206:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	68db      	ldr	r3, [r3, #12]
 800b20e:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6a1a      	ldr	r2, [r3, #32]
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	430a      	orrs	r2, r1
 800b21c:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b222:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	430a      	orrs	r2, r1
 800b22e:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	687a      	ldr	r2, [r7, #4]
 800b236:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b238:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	685b      	ldr	r3, [r3, #4]
 800b248:	3b01      	subs	r3, #1
 800b24a:	021a      	lsls	r2, r3, #8
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	430a      	orrs	r2, r1
 800b252:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b258:	9300      	str	r3, [sp, #0]
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	2200      	movs	r2, #0
 800b25e:	2120      	movs	r1, #32
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f000 fd45 	bl	800bcf0 <OSPI_WaitFlagStateUntilTimeout>
 800b266:	4603      	mov	r3, r0
 800b268:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800b26a:	7bfb      	ldrb	r3, [r7, #15]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d146      	bne.n	800b2fe <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	68db      	ldr	r3, [r3, #12]
 800b276:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b27e:	1e5a      	subs	r2, r3, #1
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	430a      	orrs	r2, r1
 800b286:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	689a      	ldr	r2, [r3, #8]
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	430a      	orrs	r2, r1
 800b29c:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800b2a6:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2b2:	431a      	orrs	r2, r3
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	430a      	orrs	r2, r1
 800b2ba:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	681a      	ldr	r2, [r3, #0]
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f042 0201 	orr.w	r2, r2, #1
 800b2cc:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	699b      	ldr	r3, [r3, #24]
 800b2d2:	2b02      	cmp	r3, #2
 800b2d4:	d107      	bne.n	800b2e6 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	689a      	ldr	r2, [r3, #8]
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f042 0202 	orr.w	r2, r2, #2
 800b2e4:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	68db      	ldr	r3, [r3, #12]
 800b2ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b2ee:	d103      	bne.n	800b2f8 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2201      	movs	r2, #1
 800b2f4:	651a      	str	r2, [r3, #80]	; 0x50
 800b2f6:	e002      	b.n	800b2fe <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2202      	movs	r2, #2
 800b2fc:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 800b2fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800b300:	4618      	mov	r0, r3
 800b302:	3710      	adds	r7, #16
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}
 800b308:	f8e0f8f4 	.word	0xf8e0f8f4

0800b30c <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b084      	sub	sp, #16
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b314:	2300      	movs	r3, #0
 800b316:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d102      	bne.n	800b324 <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 800b31e:	2301      	movs	r3, #1
 800b320:	73fb      	strb	r3, [r7, #15]
 800b322:	e015      	b.n	800b350 <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
     /* Disable OctoSPI */
     __HAL_OSPI_DISABLE(hospi);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	681a      	ldr	r2, [r3, #0]
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f022 0201 	bic.w	r2, r2, #1
 800b332:	601a      	str	r2, [r3, #0]

     /* Disable free running clock if needed : must be done after OSPI disable */
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	689a      	ldr	r2, [r3, #8]
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	f022 0202 	bic.w	r2, r2, #2
 800b342:	609a      	str	r2, [r3, #8]

     /* DeInit the low level hardware */
     hospi->MspDeInitCallback(hospi);
#else
     /* De-initialize the low-level hardware */
     HAL_OSPI_MspDeInit(hospi);
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	f7f6 f979 	bl	800163c <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

     /* Reset the driver state */
     hospi->State = HAL_OSPI_STATE_RESET;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2200      	movs	r2, #0
 800b34e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  return status;
 800b350:	7bfb      	ldrb	r3, [r7, #15]
}
 800b352:	4618      	mov	r0, r3
 800b354:	3710      	adds	r7, #16
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}
	...

0800b35c <HAL_OSPI_IRQHandler>:
  * @brief  Handle OSPI interrupt request.
  * @param  hospi : OSPI handle
  * @retval None
  */
void HAL_OSPI_IRQHandler(OSPI_HandleTypeDef *hospi)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b086      	sub	sp, #24
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	3350      	adds	r3, #80	; 0x50
 800b36a:	617b      	str	r3, [r7, #20]
  uint32_t flag           = hospi->Instance->SR;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	6a1b      	ldr	r3, [r3, #32]
 800b372:	613b      	str	r3, [r7, #16]
  uint32_t itsource       = hospi->Instance->CR;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	60fb      	str	r3, [r7, #12]
  uint32_t currentstate   = hospi->State;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b380:	60bb      	str	r3, [r7, #8]

  /* OctoSPI fifo threshold interrupt occurred -------------------------------*/
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
 800b382:	693b      	ldr	r3, [r7, #16]
 800b384:	f003 0304 	and.w	r3, r3, #4
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d03a      	beq.n	800b402 <HAL_OSPI_IRQHandler+0xa6>
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b392:	2b00      	cmp	r3, #0
 800b394:	d035      	beq.n	800b402 <HAL_OSPI_IRQHandler+0xa6>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	2b18      	cmp	r3, #24
 800b39a:	d10f      	bne.n	800b3bc <HAL_OSPI_IRQHandler+0x60>
    {
      /* Write a data in the fifo */
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3a0:	781a      	ldrb	r2, [r3, #0]
 800b3a2:	697b      	ldr	r3, [r7, #20]
 800b3a4:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3aa:	1c5a      	adds	r2, r3, #1
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	641a      	str	r2, [r3, #64]	; 0x40
      hospi->XferCount--;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b3b4:	1e5a      	subs	r2, r3, #1
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	649a      	str	r2, [r3, #72]	; 0x48
 800b3ba:	e012      	b.n	800b3e2 <HAL_OSPI_IRQHandler+0x86>
    }
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	2b28      	cmp	r3, #40	; 0x28
 800b3c0:	d10f      	bne.n	800b3e2 <HAL_OSPI_IRQHandler+0x86>
    {
      /* Read a data from the fifo */
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3c6:	697a      	ldr	r2, [r7, #20]
 800b3c8:	7812      	ldrb	r2, [r2, #0]
 800b3ca:	b2d2      	uxtb	r2, r2
 800b3cc:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3d2:	1c5a      	adds	r2, r3, #1
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	641a      	str	r2, [r3, #64]	; 0x40
      hospi->XferCount--;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b3dc:	1e5a      	subs	r2, r3, #1
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	649a      	str	r2, [r3, #72]	; 0x48
    else
    {
      /* Nothing to do */
    }

    if (hospi->XferCount == 0U)
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d107      	bne.n	800b3fa <HAL_OSPI_IRQHandler+0x9e>
    {
      /* All data have been received or transmitted for the transfer */
      /* Disable fifo threshold interrupt */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	681a      	ldr	r2, [r3, #0]
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b3f8:	601a      	str	r2, [r3, #0]

    /* Fifo threshold callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->FifoThresholdCallback(hospi);
#else
    HAL_OSPI_FifoThresholdCallback(hospi);
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f000 fb7c 	bl	800baf8 <HAL_OSPI_FifoThresholdCallback>
 800b400:	e0e7      	b.n	800b5d2 <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
  /* OctoSPI transfer complete interrupt occurred ----------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
 800b402:	693b      	ldr	r3, [r7, #16]
 800b404:	f003 0302 	and.w	r3, r3, #2
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d067      	beq.n	800b4dc <HAL_OSPI_IRQHandler+0x180>
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b412:	2b00      	cmp	r3, #0
 800b414:	d062      	beq.n	800b4dc <HAL_OSPI_IRQHandler+0x180>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	2b28      	cmp	r3, #40	; 0x28
 800b41a:	d131      	bne.n	800b480 <HAL_OSPI_IRQHandler+0x124>
    {
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b420:	2b00      	cmp	r3, #0
 800b422:	d015      	beq.n	800b450 <HAL_OSPI_IRQHandler+0xf4>
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d010      	beq.n	800b450 <HAL_OSPI_IRQHandler+0xf4>
      {
        /* Read the last data received in the fifo */
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b432:	697a      	ldr	r2, [r7, #20]
 800b434:	7812      	ldrb	r2, [r2, #0]
 800b436:	b2d2      	uxtb	r2, r2
 800b438:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b43e:	1c5a      	adds	r2, r3, #1
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b448:	1e5a      	subs	r2, r3, #1
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	649a      	str	r2, [r3, #72]	; 0x48
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800b44e:	e0bd      	b.n	800b5cc <HAL_OSPI_IRQHandler+0x270>
      }
      else if(hospi->XferCount == 0U)
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b454:	2b00      	cmp	r3, #0
 800b456:	f040 80b9 	bne.w	800b5cc <HAL_OSPI_IRQHandler+0x270>
      {
        /* Clear flag */
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	2202      	movs	r2, #2
 800b460:	625a      	str	r2, [r3, #36]	; 0x24

        /* Disable the interrupts */
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	681a      	ldr	r2, [r3, #0]
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800b470:	601a      	str	r2, [r3, #0]

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2202      	movs	r2, #2
 800b476:	651a      	str	r2, [r3, #80]	; 0x50

        /* RX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->RxCpltCallback(hospi);
#else
        HAL_OSPI_RxCpltCallback(hospi);
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f000 fb51 	bl	800bb20 <HAL_OSPI_RxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800b47e:	e0a5      	b.n	800b5cc <HAL_OSPI_IRQHandler+0x270>
      }
    }
    else
    {
      /* Clear flag */
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	2202      	movs	r2, #2
 800b486:	625a      	str	r2, [r3, #36]	; 0x24

      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	681a      	ldr	r2, [r3, #0]
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800b496:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2202      	movs	r2, #2
 800b49c:	651a      	str	r2, [r3, #80]	; 0x50

      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	2b18      	cmp	r3, #24
 800b4a2:	d103      	bne.n	800b4ac <HAL_OSPI_IRQHandler+0x150>
      {
        /* TX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->TxCpltCallback(hospi);
#else
        HAL_OSPI_TxCpltCallback(hospi);
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f000 fb45 	bl	800bb34 <HAL_OSPI_TxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800b4aa:	e08f      	b.n	800b5cc <HAL_OSPI_IRQHandler+0x270>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	2b08      	cmp	r3, #8
 800b4b0:	d103      	bne.n	800b4ba <HAL_OSPI_IRQHandler+0x15e>
      {
        /* Command complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->CmdCpltCallback(hospi);
#else
        HAL_OSPI_CmdCpltCallback(hospi);
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f000 fb2a 	bl	800bb0c <HAL_OSPI_CmdCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800b4b8:	e088      	b.n	800b5cc <HAL_OSPI_IRQHandler+0x270>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_ABORT)
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4c0:	f040 8084 	bne.w	800b5cc <HAL_OSPI_IRQHandler+0x270>
      {
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d103      	bne.n	800b4d4 <HAL_OSPI_IRQHandler+0x178>
          /* Abort called by the user */
          /* Abort complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->AbortCpltCallback(hospi);
#else
          HAL_OSPI_AbortCpltCallback(hospi);
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f000 fb09 	bl	800bae4 <HAL_OSPI_AbortCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800b4d2:	e07b      	b.n	800b5cc <HAL_OSPI_IRQHandler+0x270>
          /* Abort due to an error (eg : DMA error) */
          /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->ErrorCallback(hospi);
#else
          HAL_OSPI_ErrorCallback(hospi);
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f000 fafb 	bl	800bad0 <HAL_OSPI_ErrorCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800b4da:	e077      	b.n	800b5cc <HAL_OSPI_IRQHandler+0x270>
        /* Nothing to do */
      }
    }
  }
  /* OctoSPI status match interrupt occurred ---------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
 800b4dc:	693b      	ldr	r3, [r7, #16]
 800b4de:	f003 0308 	and.w	r3, r3, #8
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d01e      	beq.n	800b524 <HAL_OSPI_IRQHandler+0x1c8>
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d019      	beq.n	800b524 <HAL_OSPI_IRQHandler+0x1c8>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	2208      	movs	r2, #8
 800b4f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Check if automatic poll mode stop is activated */
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b502:	2b00      	cmp	r3, #0
 800b504:	d00a      	beq.n	800b51c <HAL_OSPI_IRQHandler+0x1c0>
    {
      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	681a      	ldr	r2, [r3, #0]
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800b514:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2202      	movs	r2, #2
 800b51a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Status match callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->StatusMatchCallback(hospi);
#else
    HAL_OSPI_StatusMatchCallback(hospi);
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f000 fb13 	bl	800bb48 <HAL_OSPI_StatusMatchCallback>
 800b522:	e056      	b.n	800b5d2 <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
  }
  /* OctoSPI transfer error interrupt occurred -------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
 800b524:	693b      	ldr	r3, [r7, #16]
 800b526:	f003 0301 	and.w	r3, r3, #1
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d03c      	beq.n	800b5a8 <HAL_OSPI_IRQHandler+0x24c>
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b534:	2b00      	cmp	r3, #0
 800b536:	d037      	beq.n	800b5a8 <HAL_OSPI_IRQHandler+0x24c>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	2201      	movs	r2, #1
 800b53e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable all interrupts */
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	681a      	ldr	r2, [r3, #0]
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800b54e:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2202      	movs	r2, #2
 800b554:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f003 0304 	and.w	r3, r3, #4
 800b560:	2b00      	cmp	r3, #0
 800b562:	d01a      	beq.n	800b59a <HAL_OSPI_IRQHandler+0x23e>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	681a      	ldr	r2, [r3, #0]
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f022 0204 	bic.w	r2, r2, #4
 800b572:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      hospi->hmdma->XferAbortCallback = OSPI_DMAAbortCplt;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b578:	4a18      	ldr	r2, [pc, #96]	; (800b5dc <HAL_OSPI_IRQHandler+0x280>)
 800b57a:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hospi->hmdma) != HAL_OK)
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b580:	4618      	mov	r0, r3
 800b582:	f7ff fde0 	bl	800b146 <HAL_MDMA_Abort_IT>
 800b586:	4603      	mov	r3, r0
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d021      	beq.n	800b5d0 <HAL_OSPI_IRQHandler+0x274>
      {
        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2202      	movs	r2, #2
 800b590:	651a      	str	r2, [r3, #80]	; 0x50

        /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->ErrorCallback(hospi);
#else
        HAL_OSPI_ErrorCallback(hospi);
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f000 fa9c 	bl	800bad0 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800b598:	e01a      	b.n	800b5d0 <HAL_OSPI_IRQHandler+0x274>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2202      	movs	r2, #2
 800b59e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
      hospi->ErrorCallback(hospi);
#else
      HAL_OSPI_ErrorCallback(hospi);
 800b5a0:	6878      	ldr	r0, [r7, #4]
 800b5a2:	f000 fa95 	bl	800bad0 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800b5a6:	e013      	b.n	800b5d0 <HAL_OSPI_IRQHandler+0x274>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
    }
  }
  /* OctoSPI timeout interrupt occurred --------------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
 800b5a8:	693b      	ldr	r3, [r7, #16]
 800b5aa:	f003 0310 	and.w	r3, r3, #16
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d00f      	beq.n	800b5d2 <HAL_OSPI_IRQHandler+0x276>
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d00a      	beq.n	800b5d2 <HAL_OSPI_IRQHandler+0x276>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	2210      	movs	r2, #16
 800b5c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Timeout callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->TimeOutCallback(hospi);
#else
    HAL_OSPI_TimeOutCallback(hospi);
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f000 fac9 	bl	800bb5c <HAL_OSPI_TimeOutCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800b5ca:	e002      	b.n	800b5d2 <HAL_OSPI_IRQHandler+0x276>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800b5cc:	bf00      	nop
 800b5ce:	e000      	b.n	800b5d2 <HAL_OSPI_IRQHandler+0x276>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800b5d0:	bf00      	nop
}
 800b5d2:	bf00      	nop
 800b5d4:	3718      	adds	r7, #24
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}
 800b5da:	bf00      	nop
 800b5dc:	0800bc79 	.word	0x0800bc79

0800b5e0 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b08a      	sub	sp, #40	; 0x28
 800b5e4:	af02      	add	r7, sp, #8
 800b5e6:	60f8      	str	r0, [r7, #12]
 800b5e8:	60b9      	str	r1, [r7, #8]
 800b5ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 800b5ec:	f7fd fb6e 	bl	8008ccc <HAL_GetTick>
 800b5f0:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE    (cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5f6:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE (cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5fc:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	2b02      	cmp	r3, #2
 800b602:	d104      	bne.n	800b60e <HAL_OSPI_Command+0x2e>
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	68db      	ldr	r3, [r3, #12]
 800b608:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b60c:	d115      	bne.n	800b63a <HAL_OSPI_Command+0x5a>
 800b60e:	697b      	ldr	r3, [r7, #20]
 800b610:	2b14      	cmp	r3, #20
 800b612:	d107      	bne.n	800b624 <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	2b02      	cmp	r3, #2
 800b61a:	d00e      	beq.n	800b63a <HAL_OSPI_Command+0x5a>
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	2b03      	cmp	r3, #3
 800b622:	d00a      	beq.n	800b63a <HAL_OSPI_Command+0x5a>
 800b624:	697b      	ldr	r3, [r7, #20]
 800b626:	2b24      	cmp	r3, #36	; 0x24
 800b628:	d15b      	bne.n	800b6e2 <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	2b01      	cmp	r3, #1
 800b630:	d003      	beq.n	800b63a <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 800b636:	2b03      	cmp	r3, #3
 800b638:	d153      	bne.n	800b6e2 <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	9300      	str	r3, [sp, #0]
 800b63e:	69bb      	ldr	r3, [r7, #24]
 800b640:	2200      	movs	r2, #0
 800b642:	2120      	movs	r1, #32
 800b644:	68f8      	ldr	r0, [r7, #12]
 800b646:	f000 fb53 	bl	800bcf0 <OSPI_WaitFlagStateUntilTimeout>
 800b64a:	4603      	mov	r3, r0
 800b64c:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 800b64e:	7ffb      	ldrb	r3, [r7, #31]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d14c      	bne.n	800b6ee <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	2200      	movs	r2, #0
 800b658:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 800b65a:	68b9      	ldr	r1, [r7, #8]
 800b65c:	68f8      	ldr	r0, [r7, #12]
 800b65e:	f000 fb7f 	bl	800bd60 <OSPI_ConfigCmd>
 800b662:	4603      	mov	r3, r0
 800b664:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800b666:	7ffb      	ldrb	r3, [r7, #31]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d140      	bne.n	800b6ee <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b670:	2b00      	cmp	r3, #0
 800b672:	d10e      	bne.n	800b692 <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	9300      	str	r3, [sp, #0]
 800b678:	69bb      	ldr	r3, [r7, #24]
 800b67a:	2201      	movs	r2, #1
 800b67c:	2102      	movs	r1, #2
 800b67e:	68f8      	ldr	r0, [r7, #12]
 800b680:	f000 fb36 	bl	800bcf0 <OSPI_WaitFlagStateUntilTimeout>
 800b684:	4603      	mov	r3, r0
 800b686:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	2202      	movs	r2, #2
 800b68e:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800b690:	e02d      	b.n	800b6ee <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800b692:	68bb      	ldr	r3, [r7, #8]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d103      	bne.n	800b6a2 <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	2204      	movs	r2, #4
 800b69e:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800b6a0:	e025      	b.n	800b6ee <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	2b01      	cmp	r3, #1
 800b6a8:	d10b      	bne.n	800b6c2 <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6ae:	2b24      	cmp	r3, #36	; 0x24
 800b6b0:	d103      	bne.n	800b6ba <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	2204      	movs	r2, #4
 800b6b6:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800b6b8:	e019      	b.n	800b6ee <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	2214      	movs	r2, #20
 800b6be:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800b6c0:	e015      	b.n	800b6ee <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800b6c2:	68bb      	ldr	r3, [r7, #8]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	2b02      	cmp	r3, #2
 800b6c8:	d111      	bne.n	800b6ee <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6ce:	2b14      	cmp	r3, #20
 800b6d0:	d103      	bne.n	800b6da <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	2204      	movs	r2, #4
 800b6d6:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800b6d8:	e009      	b.n	800b6ee <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	2224      	movs	r2, #36	; 0x24
 800b6de:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800b6e0:	e005      	b.n	800b6ee <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	2210      	movs	r2, #16
 800b6ea:	655a      	str	r2, [r3, #84]	; 0x54
 800b6ec:	e000      	b.n	800b6f0 <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 800b6ee:	bf00      	nop
  }

  /* Return function status */
  return status;
 800b6f0:	7ffb      	ldrb	r3, [r7, #31]
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	3720      	adds	r7, #32
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}

0800b6fa <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 800b6fa:	b580      	push	{r7, lr}
 800b6fc:	b08a      	sub	sp, #40	; 0x28
 800b6fe:	af02      	add	r7, sp, #8
 800b700:	60f8      	str	r0, [r7, #12]
 800b702:	60b9      	str	r1, [r7, #8]
 800b704:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800b706:	f7fd fae1 	bl	8008ccc <HAL_GetTick>
 800b70a:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	3350      	adds	r3, #80	; 0x50
 800b712:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800b714:	68bb      	ldr	r3, [r7, #8]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d105      	bne.n	800b726 <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 800b71a:	2301      	movs	r3, #1
 800b71c:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	2208      	movs	r2, #8
 800b722:	655a      	str	r2, [r3, #84]	; 0x54
 800b724:	e057      	b.n	800b7d6 <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b72a:	2b04      	cmp	r3, #4
 800b72c:	d14e      	bne.n	800b7cc <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b734:	1c5a      	adds	r2, r3, #1
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	68ba      	ldr	r2, [r7, #8]
 800b746:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	681a      	ldr	r2, [r3, #0]
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800b756:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	9300      	str	r3, [sp, #0]
 800b75c:	69bb      	ldr	r3, [r7, #24]
 800b75e:	2201      	movs	r2, #1
 800b760:	2104      	movs	r1, #4
 800b762:	68f8      	ldr	r0, [r7, #12]
 800b764:	f000 fac4 	bl	800bcf0 <OSPI_WaitFlagStateUntilTimeout>
 800b768:	4603      	mov	r3, r0
 800b76a:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800b76c:	7ffb      	ldrb	r3, [r7, #31]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d113      	bne.n	800b79a <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b776:	781a      	ldrb	r2, [r3, #0]
 800b778:	697b      	ldr	r3, [r7, #20]
 800b77a:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b780:	1c5a      	adds	r2, r3, #1
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b78a:	1e5a      	subs	r2, r3, #1
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	649a      	str	r2, [r3, #72]	; 0x48
      } while (hospi->XferCount > 0U);
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b794:	2b00      	cmp	r3, #0
 800b796:	d1df      	bne.n	800b758 <HAL_OSPI_Transmit+0x5e>
 800b798:	e000      	b.n	800b79c <HAL_OSPI_Transmit+0xa2>
          break;
 800b79a:	bf00      	nop

      if (status == HAL_OK)
 800b79c:	7ffb      	ldrb	r3, [r7, #31]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d119      	bne.n	800b7d6 <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	9300      	str	r3, [sp, #0]
 800b7a6:	69bb      	ldr	r3, [r7, #24]
 800b7a8:	2201      	movs	r2, #1
 800b7aa:	2102      	movs	r1, #2
 800b7ac:	68f8      	ldr	r0, [r7, #12]
 800b7ae:	f000 fa9f 	bl	800bcf0 <OSPI_WaitFlagStateUntilTimeout>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800b7b6:	7ffb      	ldrb	r3, [r7, #31]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d10c      	bne.n	800b7d6 <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	2202      	movs	r2, #2
 800b7c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	2202      	movs	r2, #2
 800b7c8:	651a      	str	r2, [r3, #80]	; 0x50
 800b7ca:	e004      	b.n	800b7d6 <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	2210      	movs	r2, #16
 800b7d4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 800b7d6:	7ffb      	ldrb	r3, [r7, #31]
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	3720      	adds	r7, #32
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}

0800b7e0 <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b08c      	sub	sp, #48	; 0x30
 800b7e4:	af02      	add	r7, sp, #8
 800b7e6:	60f8      	str	r0, [r7, #12]
 800b7e8:	60b9      	str	r1, [r7, #8]
 800b7ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800b7ec:	f7fd fa6e 	bl	8008ccc <HAL_GetTick>
 800b7f0:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	3350      	adds	r3, #80	; 0x50
 800b7f8:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b800:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800b80a:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d106      	bne.n	800b820 <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 800b812:	2301      	movs	r3, #1
 800b814:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	2208      	movs	r2, #8
 800b81c:	655a      	str	r2, [r3, #84]	; 0x54
 800b81e:	e07c      	b.n	800b91a <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b824:	2b04      	cmp	r3, #4
 800b826:	d172      	bne.n	800b90e <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b82e:	1c5a      	adds	r2, r3, #1
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	68ba      	ldr	r2, [r7, #8]
 800b840:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b854:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	68db      	ldr	r3, [r3, #12]
 800b85a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b85e:	d104      	bne.n	800b86a <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	69ba      	ldr	r2, [r7, #24]
 800b866:	649a      	str	r2, [r3, #72]	; 0x48
 800b868:	e011      	b.n	800b88e <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800b872:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b876:	2b00      	cmp	r3, #0
 800b878:	d004      	beq.n	800b884 <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	69ba      	ldr	r2, [r7, #24]
 800b880:	649a      	str	r2, [r3, #72]	; 0x48
 800b882:	e004      	b.n	800b88e <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	697a      	ldr	r2, [r7, #20]
 800b88a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	9300      	str	r3, [sp, #0]
 800b892:	6a3b      	ldr	r3, [r7, #32]
 800b894:	2201      	movs	r2, #1
 800b896:	2106      	movs	r1, #6
 800b898:	68f8      	ldr	r0, [r7, #12]
 800b89a:	f000 fa29 	bl	800bcf0 <OSPI_WaitFlagStateUntilTimeout>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 800b8a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d114      	bne.n	800b8d6 <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8b0:	69fa      	ldr	r2, [r7, #28]
 800b8b2:	7812      	ldrb	r2, [r2, #0]
 800b8b4:	b2d2      	uxtb	r2, r2
 800b8b6:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8bc:	1c5a      	adds	r2, r3, #1
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b8c6:	1e5a      	subs	r2, r3, #1
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	649a      	str	r2, [r3, #72]	; 0x48
      } while(hospi->XferCount > 0U);
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d1dc      	bne.n	800b88e <HAL_OSPI_Receive+0xae>
 800b8d4:	e000      	b.n	800b8d8 <HAL_OSPI_Receive+0xf8>
          break;
 800b8d6:	bf00      	nop

      if (status == HAL_OK)
 800b8d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d11c      	bne.n	800b91a <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	9300      	str	r3, [sp, #0]
 800b8e4:	6a3b      	ldr	r3, [r7, #32]
 800b8e6:	2201      	movs	r2, #1
 800b8e8:	2102      	movs	r1, #2
 800b8ea:	68f8      	ldr	r0, [r7, #12]
 800b8ec:	f000 fa00 	bl	800bcf0 <OSPI_WaitFlagStateUntilTimeout>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 800b8f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d10d      	bne.n	800b91a <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	2202      	movs	r2, #2
 800b904:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	2202      	movs	r2, #2
 800b90a:	651a      	str	r2, [r3, #80]	; 0x50
 800b90c:	e005      	b.n	800b91a <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 800b90e:	2301      	movs	r3, #1
 800b910:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	2210      	movs	r2, #16
 800b918:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 800b91a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3728      	adds	r7, #40	; 0x28
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}

0800b926 <HAL_OSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800b926:	b580      	push	{r7, lr}
 800b928:	b08a      	sub	sp, #40	; 0x28
 800b92a:	af02      	add	r7, sp, #8
 800b92c:	60f8      	str	r0, [r7, #12]
 800b92e:	60b9      	str	r1, [r7, #8]
 800b930:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800b932:	f7fd f9cb 	bl	8008ccc <HAL_GetTick>
 800b936:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b93e:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800b948:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP   (cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL         (cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg+1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b94e:	2b04      	cmp	r3, #4
 800b950:	d164      	bne.n	800ba1c <HAL_OSPI_AutoPolling+0xf6>
 800b952:	68bb      	ldr	r3, [r7, #8]
 800b954:	68db      	ldr	r3, [r3, #12]
 800b956:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b95a:	d15f      	bne.n	800ba1c <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	9300      	str	r3, [sp, #0]
 800b960:	69bb      	ldr	r3, [r7, #24]
 800b962:	2200      	movs	r2, #0
 800b964:	2120      	movs	r1, #32
 800b966:	68f8      	ldr	r0, [r7, #12]
 800b968:	f000 f9c2 	bl	800bcf0 <OSPI_WaitFlagStateUntilTimeout>
 800b96c:	4603      	mov	r3, r0
 800b96e:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 800b970:	7ffb      	ldrb	r3, [r7, #31]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d158      	bne.n	800ba28 <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	68ba      	ldr	r2, [r7, #8]
 800b97c:	6812      	ldr	r2, [r2, #0]
 800b97e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	68ba      	ldr	r2, [r7, #8]
 800b988:	6852      	ldr	r2, [r2, #4]
 800b98a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	68ba      	ldr	r2, [r7, #8]
 800b994:	6912      	ldr	r2, [r2, #16]
 800b996:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	f023 5243 	bic.w	r2, r3, #817889280	; 0x30c00000
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	6899      	ldr	r1, [r3, #8]
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	68db      	ldr	r3, [r3, #12]
 800b9ac:	430b      	orrs	r3, r1
 800b9ae:	431a      	orrs	r2, r3
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800b9b8:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	68db      	ldr	r3, [r3, #12]
 800b9be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b9c2:	d104      	bne.n	800b9ce <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	697a      	ldr	r2, [r7, #20]
 800b9ca:	649a      	str	r2, [r3, #72]	; 0x48
 800b9cc:	e011      	b.n	800b9f2 <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800b9d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d004      	beq.n	800b9e8 <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	697a      	ldr	r2, [r7, #20]
 800b9e4:	649a      	str	r2, [r3, #72]	; 0x48
 800b9e6:	e004      	b.n	800b9f2 <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	693a      	ldr	r2, [r7, #16]
 800b9ee:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	9300      	str	r3, [sp, #0]
 800b9f6:	69bb      	ldr	r3, [r7, #24]
 800b9f8:	2201      	movs	r2, #1
 800b9fa:	2108      	movs	r1, #8
 800b9fc:	68f8      	ldr	r0, [r7, #12]
 800b9fe:	f000 f977 	bl	800bcf0 <OSPI_WaitFlagStateUntilTimeout>
 800ba02:	4603      	mov	r3, r0
 800ba04:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800ba06:	7ffb      	ldrb	r3, [r7, #31]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d10d      	bne.n	800ba28 <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	2208      	movs	r2, #8
 800ba12:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	2202      	movs	r2, #2
 800ba18:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800ba1a:	e005      	b.n	800ba28 <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	2210      	movs	r2, #16
 800ba24:	655a      	str	r2, [r3, #84]	; 0x54
 800ba26:	e000      	b.n	800ba2a <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 800ba28:	bf00      	nop
  }

  /* Return function status */
  return status;
 800ba2a:	7ffb      	ldrb	r3, [r7, #31]
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3720      	adds	r7, #32
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd80      	pop	{r7, pc}

0800ba34 <HAL_OSPI_MemoryMapped>:
  * @param  cfg   : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_MemoryMapped(OSPI_HandleTypeDef *hospi, OSPI_MemoryMappedTypeDef *cfg)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b086      	sub	sp, #24
 800ba38:	af02      	add	r7, sp, #8
 800ba3a:	6078      	str	r0, [r7, #4]
 800ba3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800ba3e:	f7fd f945 	bl	8008ccc <HAL_GetTick>
 800ba42:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_OSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba48:	2b04      	cmp	r3, #4
 800ba4a:	d134      	bne.n	800bab6 <HAL_OSPI_MemoryMapped+0x82>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba50:	9300      	str	r3, [sp, #0]
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	2200      	movs	r2, #0
 800ba56:	2120      	movs	r1, #32
 800ba58:	6878      	ldr	r0, [r7, #4]
 800ba5a:	f000 f949 	bl	800bcf0 <OSPI_WaitFlagStateUntilTimeout>
 800ba5e:	4603      	mov	r3, r0
 800ba60:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800ba62:	7bfb      	ldrb	r3, [r7, #15]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d12b      	bne.n	800bac0 <HAL_OSPI_MemoryMapped+0x8c>
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2288      	movs	r2, #136	; 0x88
 800ba6c:	651a      	str	r2, [r3, #80]	; 0x50

      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	2b08      	cmp	r3, #8
 800ba74:	d111      	bne.n	800ba9a <HAL_OSPI_MemoryMapped+0x66>
      {
        assert_param(IS_OSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure register */
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	683a      	ldr	r2, [r7, #0]
 800ba7c:	6852      	ldr	r2, [r2, #4]
 800ba7e:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        /* Clear flags related to interrupt */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	2210      	movs	r2, #16
 800ba88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Enable the timeout interrupt */
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	681a      	ldr	r2, [r3, #0]
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800ba98:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	681a      	ldr	r2, [r3, #0]
 800baa0:	4b0a      	ldr	r3, [pc, #40]	; (800bacc <HAL_OSPI_MemoryMapped+0x98>)
 800baa2:	4013      	ands	r3, r2
 800baa4:	683a      	ldr	r2, [r7, #0]
 800baa6:	6812      	ldr	r2, [r2, #0]
 800baa8:	431a      	orrs	r2, r3
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800bab2:	601a      	str	r2, [r3, #0]
 800bab4:	e004      	b.n	800bac0 <HAL_OSPI_MemoryMapped+0x8c>
                 (cfg->TimeOutActivation | OSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 800bab6:	2301      	movs	r3, #1
 800bab8:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	2210      	movs	r2, #16
 800babe:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Return function status */
  return status;
 800bac0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bac2:	4618      	mov	r0, r3
 800bac4:	3710      	adds	r7, #16
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}
 800baca:	bf00      	nop
 800bacc:	cffffff7 	.word	0xcffffff7

0800bad0 <HAL_OSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_ErrorCallback(OSPI_HandleTypeDef *hospi)
{
 800bad0:	b480      	push	{r7}
 800bad2:	b083      	sub	sp, #12
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_ErrorCallback could be implemented in the user file
   */
}
 800bad8:	bf00      	nop
 800bada:	370c      	adds	r7, #12
 800badc:	46bd      	mov	sp, r7
 800bade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae2:	4770      	bx	lr

0800bae4 <HAL_OSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_AbortCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800bae4:	b480      	push	{r7}
 800bae6:	b083      	sub	sp, #12
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_AbortCpltCallback could be implemented in the user file
   */
}
 800baec:	bf00      	nop
 800baee:	370c      	adds	r7, #12
 800baf0:	46bd      	mov	sp, r7
 800baf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf6:	4770      	bx	lr

0800baf8 <HAL_OSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_FifoThresholdCallback(OSPI_HandleTypeDef *hospi)
{
 800baf8:	b480      	push	{r7}
 800bafa:	b083      	sub	sp, #12
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 800bb00:	bf00      	nop
 800bb02:	370c      	adds	r7, #12
 800bb04:	46bd      	mov	sp, r7
 800bb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0a:	4770      	bx	lr

0800bb0c <HAL_OSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_CmdCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800bb0c:	b480      	push	{r7}
 800bb0e:	b083      	sub	sp, #12
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_CmdCpltCallback could be implemented in the user file
   */
}
 800bb14:	bf00      	nop
 800bb16:	370c      	adds	r7, #12
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1e:	4770      	bx	lr

0800bb20 <HAL_OSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_RxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800bb20:	b480      	push	{r7}
 800bb22:	b083      	sub	sp, #12
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_RxCpltCallback could be implemented in the user file
   */
}
 800bb28:	bf00      	nop
 800bb2a:	370c      	adds	r7, #12
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb32:	4770      	bx	lr

0800bb34 <HAL_OSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
 __weak void HAL_OSPI_TxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800bb34:	b480      	push	{r7}
 800bb36:	b083      	sub	sp, #12
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_TxCpltCallback could be implemented in the user file
   */
}
 800bb3c:	bf00      	nop
 800bb3e:	370c      	adds	r7, #12
 800bb40:	46bd      	mov	sp, r7
 800bb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb46:	4770      	bx	lr

0800bb48 <HAL_OSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_StatusMatchCallback(OSPI_HandleTypeDef *hospi)
{
 800bb48:	b480      	push	{r7}
 800bb4a:	b083      	sub	sp, #12
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_StatusMatchCallback could be implemented in the user file
   */
}
 800bb50:	bf00      	nop
 800bb52:	370c      	adds	r7, #12
 800bb54:	46bd      	mov	sp, r7
 800bb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5a:	4770      	bx	lr

0800bb5c <HAL_OSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TimeOutCallback(OSPI_HandleTypeDef *hospi)
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b083      	sub	sp, #12
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_TimeOutCallback could be implemented in the user file
   */
}
 800bb64:	bf00      	nop
 800bb66:	370c      	adds	r7, #12
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6e:	4770      	bx	lr

0800bb70 <HAL_OSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hospi : OSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b088      	sub	sp, #32
 800bb74:	af02      	add	r7, sp, #8
 800bb76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bb78:	2300      	movs	r3, #0
 800bb7a:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 800bb7c:	f7fd f8a6 	bl	8008ccc <HAL_GetTick>
 800bb80:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb86:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	f003 0308 	and.w	r3, r3, #8
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d104      	bne.n	800bb9c <HAL_OSPI_Abort+0x2c>
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	f003 0304 	and.w	r3, r3, #4
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d052      	beq.n	800bc42 <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f003 0304 	and.w	r3, r3, #4
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d014      	beq.n	800bbd4 <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	681a      	ldr	r2, [r3, #0]
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	f022 0204 	bic.w	r2, r2, #4
 800bbb8:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_MDMA_Abort(hospi->hmdma);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f7ff fa66 	bl	800b090 <HAL_MDMA_Abort>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 800bbc8:	7dfb      	ldrb	r3, [r7, #23]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d002      	beq.n	800bbd4 <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2204      	movs	r2, #4
 800bbd2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	6a1b      	ldr	r3, [r3, #32]
 800bbda:	f003 0320 	and.w	r3, r3, #32
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d02b      	beq.n	800bc3a <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	681a      	ldr	r2, [r3, #0]
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f042 0202 	orr.w	r2, r2, #2
 800bbf0:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbf6:	9300      	str	r3, [sp, #0]
 800bbf8:	693b      	ldr	r3, [r7, #16]
 800bbfa:	2201      	movs	r2, #1
 800bbfc:	2102      	movs	r1, #2
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f000 f876 	bl	800bcf0 <OSPI_WaitFlagStateUntilTimeout>
 800bc04:	4603      	mov	r3, r0
 800bc06:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800bc08:	7dfb      	ldrb	r3, [r7, #23]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d11f      	bne.n	800bc4e <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	2202      	movs	r2, #2
 800bc14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc1a:	9300      	str	r3, [sp, #0]
 800bc1c:	693b      	ldr	r3, [r7, #16]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	2120      	movs	r1, #32
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f000 f864 	bl	800bcf0 <OSPI_WaitFlagStateUntilTimeout>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800bc2c:	7dfb      	ldrb	r3, [r7, #23]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d10d      	bne.n	800bc4e <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2202      	movs	r2, #2
 800bc36:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800bc38:	e009      	b.n	800bc4e <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2202      	movs	r2, #2
 800bc3e:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800bc40:	e005      	b.n	800bc4e <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 800bc42:	2301      	movs	r3, #1
 800bc44:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2210      	movs	r2, #16
 800bc4a:	655a      	str	r2, [r3, #84]	; 0x54
 800bc4c:	e000      	b.n	800bc50 <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800bc4e:	bf00      	nop
  }

  /* Return function status */
  return status;
 800bc50:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc52:	4618      	mov	r0, r3
 800bc54:	3718      	adds	r7, #24
 800bc56:	46bd      	mov	sp, r7
 800bc58:	bd80      	pop	{r7, pc}

0800bc5a <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800bc5a:	b480      	push	{r7}
 800bc5c:	b083      	sub	sp, #12
 800bc5e:	af00      	add	r7, sp, #0
 800bc60:	6078      	str	r0, [r7, #4]
 800bc62:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	683a      	ldr	r2, [r7, #0]
 800bc68:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 800bc6a:	2300      	movs	r3, #0
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	370c      	adds	r7, #12
 800bc70:	46bd      	mov	sp, r7
 800bc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc76:	4770      	bx	lr

0800bc78 <OSPI_DMAAbortCplt>:
  * @brief  DMA OSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void OSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b084      	sub	sp, #16
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
  OSPI_HandleTypeDef* hospi = ( OSPI_HandleTypeDef* )(hmdma->Parent);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc84:	60fb      	str	r3, [r7, #12]
  hospi->XferCount = 0;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	2200      	movs	r2, #0
 800bc8a:	649a      	str	r2, [r3, #72]	; 0x48

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_ABORT)
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc94:	d122      	bne.n	800bcdc <OSPI_DMAAbortCplt+0x64>
  {
    /* DMA abort called by OctoSPI abort */
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	6a1b      	ldr	r3, [r3, #32]
 800bc9c:	f003 0320 	and.w	r3, r3, #32
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d014      	beq.n	800bcce <OSPI_DMAAbortCplt+0x56>
    {
      /* Clear transfer complete flag */
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	2202      	movs	r2, #2
 800bcaa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enable the transfer complete interrupts */
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	681a      	ldr	r2, [r3, #0]
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800bcba:	601a      	str	r2, [r3, #0]

      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	681a      	ldr	r2, [r3, #0]
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	f042 0202 	orr.w	r2, r2, #2
 800bcca:	601a      	str	r2, [r3, #0]
    hospi->ErrorCallback(hospi);
#else
    HAL_OSPI_ErrorCallback(hospi);
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
}
 800bccc:	e00c      	b.n	800bce8 <OSPI_DMAAbortCplt+0x70>
      hospi->State = HAL_OSPI_STATE_READY;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	2202      	movs	r2, #2
 800bcd2:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_OSPI_AbortCpltCallback(hospi);
 800bcd4:	68f8      	ldr	r0, [r7, #12]
 800bcd6:	f7ff ff05 	bl	800bae4 <HAL_OSPI_AbortCpltCallback>
}
 800bcda:	e005      	b.n	800bce8 <OSPI_DMAAbortCplt+0x70>
    hospi->State = HAL_OSPI_STATE_READY;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	2202      	movs	r2, #2
 800bce0:	651a      	str	r2, [r3, #80]	; 0x50
    HAL_OSPI_ErrorCallback(hospi);
 800bce2:	68f8      	ldr	r0, [r7, #12]
 800bce4:	f7ff fef4 	bl	800bad0 <HAL_OSPI_ErrorCallback>
}
 800bce8:	bf00      	nop
 800bcea:	3710      	adds	r7, #16
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bd80      	pop	{r7, pc}

0800bcf0 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b084      	sub	sp, #16
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	60f8      	str	r0, [r7, #12]
 800bcf8:	60b9      	str	r1, [r7, #8]
 800bcfa:	603b      	str	r3, [r7, #0]
 800bcfc:	4613      	mov	r3, r2
 800bcfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800bd00:	e01a      	b.n	800bd38 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bd02:	69bb      	ldr	r3, [r7, #24]
 800bd04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd08:	d016      	beq.n	800bd38 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd0a:	f7fc ffdf 	bl	8008ccc <HAL_GetTick>
 800bd0e:	4602      	mov	r2, r0
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	1ad3      	subs	r3, r2, r3
 800bd14:	69ba      	ldr	r2, [r7, #24]
 800bd16:	429a      	cmp	r2, r3
 800bd18:	d302      	bcc.n	800bd20 <OSPI_WaitFlagStateUntilTimeout+0x30>
 800bd1a:	69bb      	ldr	r3, [r7, #24]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d10b      	bne.n	800bd38 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bd26:	651a      	str	r2, [r3, #80]	; 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd2c:	f043 0201 	orr.w	r2, r3, #1
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	655a      	str	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 800bd34:	2301      	movs	r3, #1
 800bd36:	e00e      	b.n	800bd56 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	6a1a      	ldr	r2, [r3, #32]
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	4013      	ands	r3, r2
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	bf14      	ite	ne
 800bd46:	2301      	movne	r3, #1
 800bd48:	2300      	moveq	r3, #0
 800bd4a:	b2db      	uxtb	r3, r3
 800bd4c:	461a      	mov	r2, r3
 800bd4e:	79fb      	ldrb	r3, [r7, #7]
 800bd50:	429a      	cmp	r2, r3
 800bd52:	d1d6      	bne.n	800bd02 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bd54:	2300      	movs	r3, #0
}
 800bd56:	4618      	mov	r0, r3
 800bd58:	3710      	adds	r7, #16
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd80      	pop	{r7, pc}
	...

0800bd60 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 800bd60:	b480      	push	{r7}
 800bd62:	b089      	sub	sp, #36	; 0x24
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
 800bd68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	681a      	ldr	r2, [r3, #0]
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800bd7c:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	689b      	ldr	r3, [r3, #8]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d10a      	bne.n	800bd9c <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	685a      	ldr	r2, [r3, #4]
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	430a      	orrs	r2, r1
 800bd9a:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	2b02      	cmp	r3, #2
 800bda2:	d114      	bne.n	800bdce <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800bdac:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800bdb6:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800bdc0:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800bdca:	60fb      	str	r3, [r7, #12]
 800bdcc:	e02c      	b.n	800be28 <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	2b03      	cmp	r3, #3
 800bdd4:	d114      	bne.n	800be00 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800bdde:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800bde8:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bdf2:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800bdfc:	60fb      	str	r3, [r7, #12]
 800bdfe:	e013      	b.n	800be28 <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800be08:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800be12:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800be1c:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800be26:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be30:	431a      	orrs	r2, r3
 800be32:	69bb      	ldr	r3, [r7, #24]
 800be34:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d012      	beq.n	800be64 <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 800be46:	69bb      	ldr	r3, [r7, #24]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be56:	4319      	orrs	r1, r3
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be5c:	430b      	orrs	r3, r1
 800be5e:	431a      	orrs	r2, r3
 800be60:	69bb      	ldr	r3, [r7, #24]
 800be62:	601a      	str	r2, [r3, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 800be64:	697b      	ldr	r3, [r7, #20]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f023 021f 	bic.w	r2, r3, #31
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be70:	431a      	orrs	r2, r3
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d009      	beq.n	800be92 <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d105      	bne.n	800be92 <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	3a01      	subs	r2, #1
 800be90:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	68db      	ldr	r3, [r3, #12]
 800be96:	2b00      	cmp	r3, #0
 800be98:	f000 8095 	beq.w	800bfc6 <OSPI_ConfigCmd+0x266>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	69db      	ldr	r3, [r3, #28]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d053      	beq.n	800bf4c <OSPI_ConfigCmd+0x1ec>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d01e      	beq.n	800beea <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800beac:	69bb      	ldr	r3, [r7, #24]
 800beae:	681a      	ldr	r2, [r3, #0]
 800beb0:	4b64      	ldr	r3, [pc, #400]	; (800c044 <OSPI_ConfigCmd+0x2e4>)
 800beb2:	4013      	ands	r3, r2
 800beb4:	683a      	ldr	r2, [r7, #0]
 800beb6:	68d1      	ldr	r1, [r2, #12]
 800beb8:	683a      	ldr	r2, [r7, #0]
 800beba:	6952      	ldr	r2, [r2, #20]
 800bebc:	4311      	orrs	r1, r2
 800bebe:	683a      	ldr	r2, [r7, #0]
 800bec0:	6912      	ldr	r2, [r2, #16]
 800bec2:	4311      	orrs	r1, r2
 800bec4:	683a      	ldr	r2, [r7, #0]
 800bec6:	69d2      	ldr	r2, [r2, #28]
 800bec8:	4311      	orrs	r1, r2
 800beca:	683a      	ldr	r2, [r7, #0]
 800becc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bece:	4311      	orrs	r1, r2
 800bed0:	683a      	ldr	r2, [r7, #0]
 800bed2:	6a12      	ldr	r2, [r2, #32]
 800bed4:	4311      	orrs	r1, r2
 800bed6:	683a      	ldr	r2, [r7, #0]
 800bed8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800beda:	4311      	orrs	r1, r2
 800bedc:	683a      	ldr	r2, [r7, #0]
 800bede:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800bee0:	430a      	orrs	r2, r1
 800bee2:	431a      	orrs	r2, r3
 800bee4:	69bb      	ldr	r3, [r7, #24]
 800bee6:	601a      	str	r2, [r3, #0]
 800bee8:	e026      	b.n	800bf38 <OSPI_ConfigCmd+0x1d8>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800beea:	69bb      	ldr	r3, [r7, #24]
 800beec:	681a      	ldr	r2, [r3, #0]
 800beee:	4b56      	ldr	r3, [pc, #344]	; (800c048 <OSPI_ConfigCmd+0x2e8>)
 800bef0:	4013      	ands	r3, r2
 800bef2:	683a      	ldr	r2, [r7, #0]
 800bef4:	68d1      	ldr	r1, [r2, #12]
 800bef6:	683a      	ldr	r2, [r7, #0]
 800bef8:	6952      	ldr	r2, [r2, #20]
 800befa:	4311      	orrs	r1, r2
 800befc:	683a      	ldr	r2, [r7, #0]
 800befe:	6912      	ldr	r2, [r2, #16]
 800bf00:	4311      	orrs	r1, r2
 800bf02:	683a      	ldr	r2, [r7, #0]
 800bf04:	69d2      	ldr	r2, [r2, #28]
 800bf06:	4311      	orrs	r1, r2
 800bf08:	683a      	ldr	r2, [r7, #0]
 800bf0a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bf0c:	4311      	orrs	r1, r2
 800bf0e:	683a      	ldr	r2, [r7, #0]
 800bf10:	6a12      	ldr	r2, [r2, #32]
 800bf12:	430a      	orrs	r2, r1
 800bf14:	431a      	orrs	r2, r3
 800bf16:	69bb      	ldr	r3, [r7, #24]
 800bf18:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                                cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf22:	d109      	bne.n	800bf38 <OSPI_ConfigCmd+0x1d8>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800bf28:	2b08      	cmp	r3, #8
 800bf2a:	d105      	bne.n	800bf38 <OSPI_ConfigCmd+0x1d8>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800bf2c:	69bb      	ldr	r3, [r7, #24]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800bf34:	69bb      	ldr	r3, [r7, #24]
 800bf36:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	689a      	ldr	r2, [r3, #8]
 800bf3c:	693b      	ldr	r3, [r7, #16]
 800bf3e:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	683a      	ldr	r2, [r7, #0]
 800bf46:	6992      	ldr	r2, [r2, #24]
 800bf48:	649a      	str	r2, [r3, #72]	; 0x48
 800bf4a:	e074      	b.n	800c036 <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d015      	beq.n	800bf80 <OSPI_ConfigCmd+0x220>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 800bf54:	69bb      	ldr	r3, [r7, #24]
 800bf56:	681a      	ldr	r2, [r3, #0]
 800bf58:	4b3c      	ldr	r3, [pc, #240]	; (800c04c <OSPI_ConfigCmd+0x2ec>)
 800bf5a:	4013      	ands	r3, r2
 800bf5c:	683a      	ldr	r2, [r7, #0]
 800bf5e:	68d1      	ldr	r1, [r2, #12]
 800bf60:	683a      	ldr	r2, [r7, #0]
 800bf62:	6952      	ldr	r2, [r2, #20]
 800bf64:	4311      	orrs	r1, r2
 800bf66:	683a      	ldr	r2, [r7, #0]
 800bf68:	6912      	ldr	r2, [r2, #16]
 800bf6a:	4311      	orrs	r1, r2
 800bf6c:	683a      	ldr	r2, [r7, #0]
 800bf6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800bf70:	4311      	orrs	r1, r2
 800bf72:	683a      	ldr	r2, [r7, #0]
 800bf74:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800bf76:	430a      	orrs	r2, r1
 800bf78:	431a      	orrs	r2, r3
 800bf7a:	69bb      	ldr	r3, [r7, #24]
 800bf7c:	601a      	str	r2, [r3, #0]
 800bf7e:	e01d      	b.n	800bfbc <OSPI_ConfigCmd+0x25c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 800bf80:	69bb      	ldr	r3, [r7, #24]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	68d9      	ldr	r1, [r3, #12]
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	695b      	ldr	r3, [r3, #20]
 800bf90:	4319      	orrs	r1, r3
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	691b      	ldr	r3, [r3, #16]
 800bf96:	430b      	orrs	r3, r1
 800bf98:	431a      	orrs	r2, r3
 800bf9a:	69bb      	ldr	r3, [r7, #24]
 800bf9c:	601a      	str	r2, [r3, #0]
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfa2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bfa6:	d109      	bne.n	800bfbc <OSPI_ConfigCmd+0x25c>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800bfac:	2b08      	cmp	r3, #8
 800bfae:	d105      	bne.n	800bfbc <OSPI_ConfigCmd+0x25c>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800bfb0:	69bb      	ldr	r3, [r7, #24]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800bfb8:	69bb      	ldr	r3, [r7, #24]
 800bfba:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	689a      	ldr	r2, [r3, #8]
 800bfc0:	693b      	ldr	r3, [r7, #16]
 800bfc2:	601a      	str	r2, [r3, #0]
 800bfc4:	e037      	b.n	800c036 <OSPI_ConfigCmd+0x2d6>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	69db      	ldr	r3, [r3, #28]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d02e      	beq.n	800c02c <OSPI_ConfigCmd+0x2cc>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d015      	beq.n	800c002 <OSPI_ConfigCmd+0x2a2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 800bfd6:	69bb      	ldr	r3, [r7, #24]
 800bfd8:	681a      	ldr	r2, [r3, #0]
 800bfda:	4b1d      	ldr	r3, [pc, #116]	; (800c050 <OSPI_ConfigCmd+0x2f0>)
 800bfdc:	4013      	ands	r3, r2
 800bfde:	683a      	ldr	r2, [r7, #0]
 800bfe0:	69d1      	ldr	r1, [r2, #28]
 800bfe2:	683a      	ldr	r2, [r7, #0]
 800bfe4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bfe6:	4311      	orrs	r1, r2
 800bfe8:	683a      	ldr	r2, [r7, #0]
 800bfea:	6a12      	ldr	r2, [r2, #32]
 800bfec:	4311      	orrs	r1, r2
 800bfee:	683a      	ldr	r2, [r7, #0]
 800bff0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800bff2:	4311      	orrs	r1, r2
 800bff4:	683a      	ldr	r2, [r7, #0]
 800bff6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800bff8:	430a      	orrs	r2, r1
 800bffa:	431a      	orrs	r2, r3
 800bffc:	69bb      	ldr	r3, [r7, #24]
 800bffe:	601a      	str	r2, [r3, #0]
 800c000:	e00e      	b.n	800c020 <OSPI_ConfigCmd+0x2c0>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 800c002:	69bb      	ldr	r3, [r7, #24]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	69d9      	ldr	r1, [r3, #28]
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c012:	4319      	orrs	r1, r3
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	6a1b      	ldr	r3, [r3, #32]
 800c018:	430b      	orrs	r3, r1
 800c01a:	431a      	orrs	r2, r3
 800c01c:	69bb      	ldr	r3, [r7, #24]
 800c01e:	601a      	str	r2, [r3, #0]
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	683a      	ldr	r2, [r7, #0]
 800c026:	6992      	ldr	r2, [r2, #24]
 800c028:	649a      	str	r2, [r3, #72]	; 0x48
 800c02a:	e004      	b.n	800c036 <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 800c02c:	2301      	movs	r3, #1
 800c02e:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2208      	movs	r2, #8
 800c034:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 800c036:	7ffb      	ldrb	r3, [r7, #31]
}
 800c038:	4618      	mov	r0, r3
 800c03a:	3724      	adds	r7, #36	; 0x24
 800c03c:	46bd      	mov	sp, r7
 800c03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c042:	4770      	bx	lr
 800c044:	f0ffc0c0 	.word	0xf0ffc0c0
 800c048:	ffffc0c0 	.word	0xffffc0c0
 800c04c:	f0ffffc0 	.word	0xf0ffffc0
 800c050:	f0ffc0ff 	.word	0xf0ffc0ff

0800c054 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b084      	sub	sp, #16
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800c05c:	4b29      	ldr	r3, [pc, #164]	; (800c104 <HAL_PWREx_ConfigSupply+0xb0>)
 800c05e:	68db      	ldr	r3, [r3, #12]
 800c060:	f003 0307 	and.w	r3, r3, #7
 800c064:	2b06      	cmp	r3, #6
 800c066:	d00a      	beq.n	800c07e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800c068:	4b26      	ldr	r3, [pc, #152]	; (800c104 <HAL_PWREx_ConfigSupply+0xb0>)
 800c06a:	68db      	ldr	r3, [r3, #12]
 800c06c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c070:	687a      	ldr	r2, [r7, #4]
 800c072:	429a      	cmp	r2, r3
 800c074:	d001      	beq.n	800c07a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800c076:	2301      	movs	r3, #1
 800c078:	e040      	b.n	800c0fc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800c07a:	2300      	movs	r3, #0
 800c07c:	e03e      	b.n	800c0fc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800c07e:	4b21      	ldr	r3, [pc, #132]	; (800c104 <HAL_PWREx_ConfigSupply+0xb0>)
 800c080:	68db      	ldr	r3, [r3, #12]
 800c082:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800c086:	491f      	ldr	r1, [pc, #124]	; (800c104 <HAL_PWREx_ConfigSupply+0xb0>)
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	4313      	orrs	r3, r2
 800c08c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800c08e:	f7fc fe1d 	bl	8008ccc <HAL_GetTick>
 800c092:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800c094:	e009      	b.n	800c0aa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800c096:	f7fc fe19 	bl	8008ccc <HAL_GetTick>
 800c09a:	4602      	mov	r2, r0
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	1ad3      	subs	r3, r2, r3
 800c0a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c0a4:	d901      	bls.n	800c0aa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	e028      	b.n	800c0fc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800c0aa:	4b16      	ldr	r3, [pc, #88]	; (800c104 <HAL_PWREx_ConfigSupply+0xb0>)
 800c0ac:	685b      	ldr	r3, [r3, #4]
 800c0ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c0b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c0b6:	d1ee      	bne.n	800c096 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2b1e      	cmp	r3, #30
 800c0bc:	d008      	beq.n	800c0d0 <HAL_PWREx_ConfigSupply+0x7c>
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2b2e      	cmp	r3, #46	; 0x2e
 800c0c2:	d005      	beq.n	800c0d0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2b1d      	cmp	r3, #29
 800c0c8:	d002      	beq.n	800c0d0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	2b2d      	cmp	r3, #45	; 0x2d
 800c0ce:	d114      	bne.n	800c0fa <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800c0d0:	f7fc fdfc 	bl	8008ccc <HAL_GetTick>
 800c0d4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800c0d6:	e009      	b.n	800c0ec <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800c0d8:	f7fc fdf8 	bl	8008ccc <HAL_GetTick>
 800c0dc:	4602      	mov	r2, r0
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	1ad3      	subs	r3, r2, r3
 800c0e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c0e6:	d901      	bls.n	800c0ec <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	e007      	b.n	800c0fc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800c0ec:	4b05      	ldr	r3, [pc, #20]	; (800c104 <HAL_PWREx_ConfigSupply+0xb0>)
 800c0ee:	68db      	ldr	r3, [r3, #12]
 800c0f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c0f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0f8:	d1ee      	bne.n	800c0d8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800c0fa:	2300      	movs	r3, #0
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	3710      	adds	r7, #16
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}
 800c104:	58024800 	.word	0x58024800

0800c108 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b08c      	sub	sp, #48	; 0x30
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d102      	bne.n	800c11c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800c116:	2301      	movs	r3, #1
 800c118:	f000 bc1f 	b.w	800c95a <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f003 0301 	and.w	r3, r3, #1
 800c124:	2b00      	cmp	r3, #0
 800c126:	f000 80b3 	beq.w	800c290 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c12a:	4b95      	ldr	r3, [pc, #596]	; (800c380 <HAL_RCC_OscConfig+0x278>)
 800c12c:	691b      	ldr	r3, [r3, #16]
 800c12e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c132:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c134:	4b92      	ldr	r3, [pc, #584]	; (800c380 <HAL_RCC_OscConfig+0x278>)
 800c136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c138:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800c13a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c13c:	2b10      	cmp	r3, #16
 800c13e:	d007      	beq.n	800c150 <HAL_RCC_OscConfig+0x48>
 800c140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c142:	2b18      	cmp	r3, #24
 800c144:	d112      	bne.n	800c16c <HAL_RCC_OscConfig+0x64>
 800c146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c148:	f003 0303 	and.w	r3, r3, #3
 800c14c:	2b02      	cmp	r3, #2
 800c14e:	d10d      	bne.n	800c16c <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c150:	4b8b      	ldr	r3, [pc, #556]	; (800c380 <HAL_RCC_OscConfig+0x278>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c158:	2b00      	cmp	r3, #0
 800c15a:	f000 8098 	beq.w	800c28e <HAL_RCC_OscConfig+0x186>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	685b      	ldr	r3, [r3, #4]
 800c162:	2b00      	cmp	r3, #0
 800c164:	f040 8093 	bne.w	800c28e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800c168:	2301      	movs	r3, #1
 800c16a:	e3f6      	b.n	800c95a <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	685b      	ldr	r3, [r3, #4]
 800c170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c174:	d106      	bne.n	800c184 <HAL_RCC_OscConfig+0x7c>
 800c176:	4b82      	ldr	r3, [pc, #520]	; (800c380 <HAL_RCC_OscConfig+0x278>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	4a81      	ldr	r2, [pc, #516]	; (800c380 <HAL_RCC_OscConfig+0x278>)
 800c17c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c180:	6013      	str	r3, [r2, #0]
 800c182:	e058      	b.n	800c236 <HAL_RCC_OscConfig+0x12e>
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	685b      	ldr	r3, [r3, #4]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d112      	bne.n	800c1b2 <HAL_RCC_OscConfig+0xaa>
 800c18c:	4b7c      	ldr	r3, [pc, #496]	; (800c380 <HAL_RCC_OscConfig+0x278>)
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	4a7b      	ldr	r2, [pc, #492]	; (800c380 <HAL_RCC_OscConfig+0x278>)
 800c192:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c196:	6013      	str	r3, [r2, #0]
 800c198:	4b79      	ldr	r3, [pc, #484]	; (800c380 <HAL_RCC_OscConfig+0x278>)
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	4a78      	ldr	r2, [pc, #480]	; (800c380 <HAL_RCC_OscConfig+0x278>)
 800c19e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c1a2:	6013      	str	r3, [r2, #0]
 800c1a4:	4b76      	ldr	r3, [pc, #472]	; (800c380 <HAL_RCC_OscConfig+0x278>)
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	4a75      	ldr	r2, [pc, #468]	; (800c380 <HAL_RCC_OscConfig+0x278>)
 800c1aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c1ae:	6013      	str	r3, [r2, #0]
 800c1b0:	e041      	b.n	800c236 <HAL_RCC_OscConfig+0x12e>
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	685b      	ldr	r3, [r3, #4]
 800c1b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c1ba:	d112      	bne.n	800c1e2 <HAL_RCC_OscConfig+0xda>
 800c1bc:	4b70      	ldr	r3, [pc, #448]	; (800c380 <HAL_RCC_OscConfig+0x278>)
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	4a6f      	ldr	r2, [pc, #444]	; (800c380 <HAL_RCC_OscConfig+0x278>)
 800c1c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c1c6:	6013      	str	r3, [r2, #0]
 800c1c8:	4b6d      	ldr	r3, [pc, #436]	; (800c380 <HAL_RCC_OscConfig+0x278>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	4a6c      	ldr	r2, [pc, #432]	; (800c380 <HAL_RCC_OscConfig+0x278>)
 800c1ce:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c1d2:	6013      	str	r3, [r2, #0]
 800c1d4:	4b6a      	ldr	r3, [pc, #424]	; (800c380 <HAL_RCC_OscConfig+0x278>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	4a69      	ldr	r2, [pc, #420]	; (800c380 <HAL_RCC_OscConfig+0x278>)
 800c1da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c1de:	6013      	str	r3, [r2, #0]
 800c1e0:	e029      	b.n	800c236 <HAL_RCC_OscConfig+0x12e>
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	685b      	ldr	r3, [r3, #4]
 800c1e6:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800c1ea:	d112      	bne.n	800c212 <HAL_RCC_OscConfig+0x10a>
 800c1ec:	4b64      	ldr	r3, [pc, #400]	; (800c380 <HAL_RCC_OscConfig+0x278>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	4a63      	ldr	r2, [pc, #396]	; (800c380 <HAL_RCC_OscConfig+0x278>)
 800c1f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c1f6:	6013      	str	r3, [r2, #0]
 800c1f8:	4b61      	ldr	r3, [pc, #388]	; (800c380 <HAL_RCC_OscConfig+0x278>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	4a60      	ldr	r2, [pc, #384]	; (800c380 <HAL_RCC_OscConfig+0x278>)
 800c1fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c202:	6013      	str	r3, [r2, #0]
 800c204:	4b5e      	ldr	r3, [pc, #376]	; (800c380 <HAL_RCC_OscConfig+0x278>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	4a5d      	ldr	r2, [pc, #372]	; (800c380 <HAL_RCC_OscConfig+0x278>)
 800c20a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c20e:	6013      	str	r3, [r2, #0]
 800c210:	e011      	b.n	800c236 <HAL_RCC_OscConfig+0x12e>
 800c212:	4b5b      	ldr	r3, [pc, #364]	; (800c380 <HAL_RCC_OscConfig+0x278>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	4a5a      	ldr	r2, [pc, #360]	; (800c380 <HAL_RCC_OscConfig+0x278>)
 800c218:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c21c:	6013      	str	r3, [r2, #0]
 800c21e:	4b58      	ldr	r3, [pc, #352]	; (800c380 <HAL_RCC_OscConfig+0x278>)
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	4a57      	ldr	r2, [pc, #348]	; (800c380 <HAL_RCC_OscConfig+0x278>)
 800c224:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c228:	6013      	str	r3, [r2, #0]
 800c22a:	4b55      	ldr	r3, [pc, #340]	; (800c380 <HAL_RCC_OscConfig+0x278>)
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	4a54      	ldr	r2, [pc, #336]	; (800c380 <HAL_RCC_OscConfig+0x278>)
 800c230:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c234:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	685b      	ldr	r3, [r3, #4]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d013      	beq.n	800c266 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c23e:	f7fc fd45 	bl	8008ccc <HAL_GetTick>
 800c242:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c244:	e008      	b.n	800c258 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c246:	f7fc fd41 	bl	8008ccc <HAL_GetTick>
 800c24a:	4602      	mov	r2, r0
 800c24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c24e:	1ad3      	subs	r3, r2, r3
 800c250:	2b64      	cmp	r3, #100	; 0x64
 800c252:	d901      	bls.n	800c258 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800c254:	2303      	movs	r3, #3
 800c256:	e380      	b.n	800c95a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c258:	4b49      	ldr	r3, [pc, #292]	; (800c380 <HAL_RCC_OscConfig+0x278>)
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c260:	2b00      	cmp	r3, #0
 800c262:	d0f0      	beq.n	800c246 <HAL_RCC_OscConfig+0x13e>
 800c264:	e014      	b.n	800c290 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c266:	f7fc fd31 	bl	8008ccc <HAL_GetTick>
 800c26a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800c26c:	e008      	b.n	800c280 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c26e:	f7fc fd2d 	bl	8008ccc <HAL_GetTick>
 800c272:	4602      	mov	r2, r0
 800c274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c276:	1ad3      	subs	r3, r2, r3
 800c278:	2b64      	cmp	r3, #100	; 0x64
 800c27a:	d901      	bls.n	800c280 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800c27c:	2303      	movs	r3, #3
 800c27e:	e36c      	b.n	800c95a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800c280:	4b3f      	ldr	r3, [pc, #252]	; (800c380 <HAL_RCC_OscConfig+0x278>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d1f0      	bne.n	800c26e <HAL_RCC_OscConfig+0x166>
 800c28c:	e000      	b.n	800c290 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c28e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	f003 0302 	and.w	r3, r3, #2
 800c298:	2b00      	cmp	r3, #0
 800c29a:	f000 808c 	beq.w	800c3b6 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c29e:	4b38      	ldr	r3, [pc, #224]	; (800c380 <HAL_RCC_OscConfig+0x278>)
 800c2a0:	691b      	ldr	r3, [r3, #16]
 800c2a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c2a6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c2a8:	4b35      	ldr	r3, [pc, #212]	; (800c380 <HAL_RCC_OscConfig+0x278>)
 800c2aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2ac:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800c2ae:	6a3b      	ldr	r3, [r7, #32]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d007      	beq.n	800c2c4 <HAL_RCC_OscConfig+0x1bc>
 800c2b4:	6a3b      	ldr	r3, [r7, #32]
 800c2b6:	2b18      	cmp	r3, #24
 800c2b8:	d137      	bne.n	800c32a <HAL_RCC_OscConfig+0x222>
 800c2ba:	69fb      	ldr	r3, [r7, #28]
 800c2bc:	f003 0303 	and.w	r3, r3, #3
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d132      	bne.n	800c32a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c2c4:	4b2e      	ldr	r3, [pc, #184]	; (800c380 <HAL_RCC_OscConfig+0x278>)
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	f003 0304 	and.w	r3, r3, #4
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d005      	beq.n	800c2dc <HAL_RCC_OscConfig+0x1d4>
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	68db      	ldr	r3, [r3, #12]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d101      	bne.n	800c2dc <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800c2d8:	2301      	movs	r3, #1
 800c2da:	e33e      	b.n	800c95a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800c2dc:	4b28      	ldr	r3, [pc, #160]	; (800c380 <HAL_RCC_OscConfig+0x278>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	f023 0219 	bic.w	r2, r3, #25
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	68db      	ldr	r3, [r3, #12]
 800c2e8:	4925      	ldr	r1, [pc, #148]	; (800c380 <HAL_RCC_OscConfig+0x278>)
 800c2ea:	4313      	orrs	r3, r2
 800c2ec:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c2ee:	f7fc fced 	bl	8008ccc <HAL_GetTick>
 800c2f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c2f4:	e008      	b.n	800c308 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c2f6:	f7fc fce9 	bl	8008ccc <HAL_GetTick>
 800c2fa:	4602      	mov	r2, r0
 800c2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2fe:	1ad3      	subs	r3, r2, r3
 800c300:	2b02      	cmp	r3, #2
 800c302:	d901      	bls.n	800c308 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800c304:	2303      	movs	r3, #3
 800c306:	e328      	b.n	800c95a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c308:	4b1d      	ldr	r3, [pc, #116]	; (800c380 <HAL_RCC_OscConfig+0x278>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	f003 0304 	and.w	r3, r3, #4
 800c310:	2b00      	cmp	r3, #0
 800c312:	d0f0      	beq.n	800c2f6 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c314:	4b1a      	ldr	r3, [pc, #104]	; (800c380 <HAL_RCC_OscConfig+0x278>)
 800c316:	685b      	ldr	r3, [r3, #4]
 800c318:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	691b      	ldr	r3, [r3, #16]
 800c320:	061b      	lsls	r3, r3, #24
 800c322:	4917      	ldr	r1, [pc, #92]	; (800c380 <HAL_RCC_OscConfig+0x278>)
 800c324:	4313      	orrs	r3, r2
 800c326:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c328:	e045      	b.n	800c3b6 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	68db      	ldr	r3, [r3, #12]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d028      	beq.n	800c384 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800c332:	4b13      	ldr	r3, [pc, #76]	; (800c380 <HAL_RCC_OscConfig+0x278>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	f023 0219 	bic.w	r2, r3, #25
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	68db      	ldr	r3, [r3, #12]
 800c33e:	4910      	ldr	r1, [pc, #64]	; (800c380 <HAL_RCC_OscConfig+0x278>)
 800c340:	4313      	orrs	r3, r2
 800c342:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c344:	f7fc fcc2 	bl	8008ccc <HAL_GetTick>
 800c348:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c34a:	e008      	b.n	800c35e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c34c:	f7fc fcbe 	bl	8008ccc <HAL_GetTick>
 800c350:	4602      	mov	r2, r0
 800c352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c354:	1ad3      	subs	r3, r2, r3
 800c356:	2b02      	cmp	r3, #2
 800c358:	d901      	bls.n	800c35e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800c35a:	2303      	movs	r3, #3
 800c35c:	e2fd      	b.n	800c95a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c35e:	4b08      	ldr	r3, [pc, #32]	; (800c380 <HAL_RCC_OscConfig+0x278>)
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	f003 0304 	and.w	r3, r3, #4
 800c366:	2b00      	cmp	r3, #0
 800c368:	d0f0      	beq.n	800c34c <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c36a:	4b05      	ldr	r3, [pc, #20]	; (800c380 <HAL_RCC_OscConfig+0x278>)
 800c36c:	685b      	ldr	r3, [r3, #4]
 800c36e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	691b      	ldr	r3, [r3, #16]
 800c376:	061b      	lsls	r3, r3, #24
 800c378:	4901      	ldr	r1, [pc, #4]	; (800c380 <HAL_RCC_OscConfig+0x278>)
 800c37a:	4313      	orrs	r3, r2
 800c37c:	604b      	str	r3, [r1, #4]
 800c37e:	e01a      	b.n	800c3b6 <HAL_RCC_OscConfig+0x2ae>
 800c380:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c384:	4b97      	ldr	r3, [pc, #604]	; (800c5e4 <HAL_RCC_OscConfig+0x4dc>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	4a96      	ldr	r2, [pc, #600]	; (800c5e4 <HAL_RCC_OscConfig+0x4dc>)
 800c38a:	f023 0301 	bic.w	r3, r3, #1
 800c38e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c390:	f7fc fc9c 	bl	8008ccc <HAL_GetTick>
 800c394:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800c396:	e008      	b.n	800c3aa <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c398:	f7fc fc98 	bl	8008ccc <HAL_GetTick>
 800c39c:	4602      	mov	r2, r0
 800c39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3a0:	1ad3      	subs	r3, r2, r3
 800c3a2:	2b02      	cmp	r3, #2
 800c3a4:	d901      	bls.n	800c3aa <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800c3a6:	2303      	movs	r3, #3
 800c3a8:	e2d7      	b.n	800c95a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800c3aa:	4b8e      	ldr	r3, [pc, #568]	; (800c5e4 <HAL_RCC_OscConfig+0x4dc>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	f003 0304 	and.w	r3, r3, #4
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d1f0      	bne.n	800c398 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	f003 0310 	and.w	r3, r3, #16
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d06a      	beq.n	800c498 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c3c2:	4b88      	ldr	r3, [pc, #544]	; (800c5e4 <HAL_RCC_OscConfig+0x4dc>)
 800c3c4:	691b      	ldr	r3, [r3, #16]
 800c3c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c3ca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c3cc:	4b85      	ldr	r3, [pc, #532]	; (800c5e4 <HAL_RCC_OscConfig+0x4dc>)
 800c3ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3d0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800c3d2:	69bb      	ldr	r3, [r7, #24]
 800c3d4:	2b08      	cmp	r3, #8
 800c3d6:	d007      	beq.n	800c3e8 <HAL_RCC_OscConfig+0x2e0>
 800c3d8:	69bb      	ldr	r3, [r7, #24]
 800c3da:	2b18      	cmp	r3, #24
 800c3dc:	d11b      	bne.n	800c416 <HAL_RCC_OscConfig+0x30e>
 800c3de:	697b      	ldr	r3, [r7, #20]
 800c3e0:	f003 0303 	and.w	r3, r3, #3
 800c3e4:	2b01      	cmp	r3, #1
 800c3e6:	d116      	bne.n	800c416 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800c3e8:	4b7e      	ldr	r3, [pc, #504]	; (800c5e4 <HAL_RCC_OscConfig+0x4dc>)
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d005      	beq.n	800c400 <HAL_RCC_OscConfig+0x2f8>
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	69db      	ldr	r3, [r3, #28]
 800c3f8:	2b80      	cmp	r3, #128	; 0x80
 800c3fa:	d001      	beq.n	800c400 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	e2ac      	b.n	800c95a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c400:	4b78      	ldr	r3, [pc, #480]	; (800c5e4 <HAL_RCC_OscConfig+0x4dc>)
 800c402:	68db      	ldr	r3, [r3, #12]
 800c404:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	6a1b      	ldr	r3, [r3, #32]
 800c40c:	061b      	lsls	r3, r3, #24
 800c40e:	4975      	ldr	r1, [pc, #468]	; (800c5e4 <HAL_RCC_OscConfig+0x4dc>)
 800c410:	4313      	orrs	r3, r2
 800c412:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800c414:	e040      	b.n	800c498 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	69db      	ldr	r3, [r3, #28]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d023      	beq.n	800c466 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800c41e:	4b71      	ldr	r3, [pc, #452]	; (800c5e4 <HAL_RCC_OscConfig+0x4dc>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	4a70      	ldr	r2, [pc, #448]	; (800c5e4 <HAL_RCC_OscConfig+0x4dc>)
 800c424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c428:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c42a:	f7fc fc4f 	bl	8008ccc <HAL_GetTick>
 800c42e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c430:	e008      	b.n	800c444 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800c432:	f7fc fc4b 	bl	8008ccc <HAL_GetTick>
 800c436:	4602      	mov	r2, r0
 800c438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c43a:	1ad3      	subs	r3, r2, r3
 800c43c:	2b02      	cmp	r3, #2
 800c43e:	d901      	bls.n	800c444 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800c440:	2303      	movs	r3, #3
 800c442:	e28a      	b.n	800c95a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c444:	4b67      	ldr	r3, [pc, #412]	; (800c5e4 <HAL_RCC_OscConfig+0x4dc>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d0f0      	beq.n	800c432 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c450:	4b64      	ldr	r3, [pc, #400]	; (800c5e4 <HAL_RCC_OscConfig+0x4dc>)
 800c452:	68db      	ldr	r3, [r3, #12]
 800c454:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	6a1b      	ldr	r3, [r3, #32]
 800c45c:	061b      	lsls	r3, r3, #24
 800c45e:	4961      	ldr	r1, [pc, #388]	; (800c5e4 <HAL_RCC_OscConfig+0x4dc>)
 800c460:	4313      	orrs	r3, r2
 800c462:	60cb      	str	r3, [r1, #12]
 800c464:	e018      	b.n	800c498 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800c466:	4b5f      	ldr	r3, [pc, #380]	; (800c5e4 <HAL_RCC_OscConfig+0x4dc>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	4a5e      	ldr	r2, [pc, #376]	; (800c5e4 <HAL_RCC_OscConfig+0x4dc>)
 800c46c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c470:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c472:	f7fc fc2b 	bl	8008ccc <HAL_GetTick>
 800c476:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800c478:	e008      	b.n	800c48c <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800c47a:	f7fc fc27 	bl	8008ccc <HAL_GetTick>
 800c47e:	4602      	mov	r2, r0
 800c480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c482:	1ad3      	subs	r3, r2, r3
 800c484:	2b02      	cmp	r3, #2
 800c486:	d901      	bls.n	800c48c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800c488:	2303      	movs	r3, #3
 800c48a:	e266      	b.n	800c95a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800c48c:	4b55      	ldr	r3, [pc, #340]	; (800c5e4 <HAL_RCC_OscConfig+0x4dc>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c494:	2b00      	cmp	r3, #0
 800c496:	d1f0      	bne.n	800c47a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	f003 0308 	and.w	r3, r3, #8
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d036      	beq.n	800c512 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	695b      	ldr	r3, [r3, #20]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d019      	beq.n	800c4e0 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c4ac:	4b4d      	ldr	r3, [pc, #308]	; (800c5e4 <HAL_RCC_OscConfig+0x4dc>)
 800c4ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4b0:	4a4c      	ldr	r2, [pc, #304]	; (800c5e4 <HAL_RCC_OscConfig+0x4dc>)
 800c4b2:	f043 0301 	orr.w	r3, r3, #1
 800c4b6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c4b8:	f7fc fc08 	bl	8008ccc <HAL_GetTick>
 800c4bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800c4be:	e008      	b.n	800c4d2 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c4c0:	f7fc fc04 	bl	8008ccc <HAL_GetTick>
 800c4c4:	4602      	mov	r2, r0
 800c4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4c8:	1ad3      	subs	r3, r2, r3
 800c4ca:	2b02      	cmp	r3, #2
 800c4cc:	d901      	bls.n	800c4d2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800c4ce:	2303      	movs	r3, #3
 800c4d0:	e243      	b.n	800c95a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800c4d2:	4b44      	ldr	r3, [pc, #272]	; (800c5e4 <HAL_RCC_OscConfig+0x4dc>)
 800c4d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4d6:	f003 0302 	and.w	r3, r3, #2
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d0f0      	beq.n	800c4c0 <HAL_RCC_OscConfig+0x3b8>
 800c4de:	e018      	b.n	800c512 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c4e0:	4b40      	ldr	r3, [pc, #256]	; (800c5e4 <HAL_RCC_OscConfig+0x4dc>)
 800c4e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4e4:	4a3f      	ldr	r2, [pc, #252]	; (800c5e4 <HAL_RCC_OscConfig+0x4dc>)
 800c4e6:	f023 0301 	bic.w	r3, r3, #1
 800c4ea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c4ec:	f7fc fbee 	bl	8008ccc <HAL_GetTick>
 800c4f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800c4f2:	e008      	b.n	800c506 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c4f4:	f7fc fbea 	bl	8008ccc <HAL_GetTick>
 800c4f8:	4602      	mov	r2, r0
 800c4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4fc:	1ad3      	subs	r3, r2, r3
 800c4fe:	2b02      	cmp	r3, #2
 800c500:	d901      	bls.n	800c506 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800c502:	2303      	movs	r3, #3
 800c504:	e229      	b.n	800c95a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800c506:	4b37      	ldr	r3, [pc, #220]	; (800c5e4 <HAL_RCC_OscConfig+0x4dc>)
 800c508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c50a:	f003 0302 	and.w	r3, r3, #2
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d1f0      	bne.n	800c4f4 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	f003 0320 	and.w	r3, r3, #32
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d036      	beq.n	800c58c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	699b      	ldr	r3, [r3, #24]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d019      	beq.n	800c55a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c526:	4b2f      	ldr	r3, [pc, #188]	; (800c5e4 <HAL_RCC_OscConfig+0x4dc>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	4a2e      	ldr	r2, [pc, #184]	; (800c5e4 <HAL_RCC_OscConfig+0x4dc>)
 800c52c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c530:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800c532:	f7fc fbcb 	bl	8008ccc <HAL_GetTick>
 800c536:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800c538:	e008      	b.n	800c54c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c53a:	f7fc fbc7 	bl	8008ccc <HAL_GetTick>
 800c53e:	4602      	mov	r2, r0
 800c540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c542:	1ad3      	subs	r3, r2, r3
 800c544:	2b02      	cmp	r3, #2
 800c546:	d901      	bls.n	800c54c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800c548:	2303      	movs	r3, #3
 800c54a:	e206      	b.n	800c95a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800c54c:	4b25      	ldr	r3, [pc, #148]	; (800c5e4 <HAL_RCC_OscConfig+0x4dc>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c554:	2b00      	cmp	r3, #0
 800c556:	d0f0      	beq.n	800c53a <HAL_RCC_OscConfig+0x432>
 800c558:	e018      	b.n	800c58c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c55a:	4b22      	ldr	r3, [pc, #136]	; (800c5e4 <HAL_RCC_OscConfig+0x4dc>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	4a21      	ldr	r2, [pc, #132]	; (800c5e4 <HAL_RCC_OscConfig+0x4dc>)
 800c560:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c564:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800c566:	f7fc fbb1 	bl	8008ccc <HAL_GetTick>
 800c56a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800c56c:	e008      	b.n	800c580 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c56e:	f7fc fbad 	bl	8008ccc <HAL_GetTick>
 800c572:	4602      	mov	r2, r0
 800c574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c576:	1ad3      	subs	r3, r2, r3
 800c578:	2b02      	cmp	r3, #2
 800c57a:	d901      	bls.n	800c580 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800c57c:	2303      	movs	r3, #3
 800c57e:	e1ec      	b.n	800c95a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800c580:	4b18      	ldr	r3, [pc, #96]	; (800c5e4 <HAL_RCC_OscConfig+0x4dc>)
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d1f0      	bne.n	800c56e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	f003 0304 	and.w	r3, r3, #4
 800c594:	2b00      	cmp	r3, #0
 800c596:	f000 80af 	beq.w	800c6f8 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800c59a:	4b13      	ldr	r3, [pc, #76]	; (800c5e8 <HAL_RCC_OscConfig+0x4e0>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	4a12      	ldr	r2, [pc, #72]	; (800c5e8 <HAL_RCC_OscConfig+0x4e0>)
 800c5a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c5a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c5a6:	f7fc fb91 	bl	8008ccc <HAL_GetTick>
 800c5aa:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c5ac:	e008      	b.n	800c5c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c5ae:	f7fc fb8d 	bl	8008ccc <HAL_GetTick>
 800c5b2:	4602      	mov	r2, r0
 800c5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b6:	1ad3      	subs	r3, r2, r3
 800c5b8:	2b64      	cmp	r3, #100	; 0x64
 800c5ba:	d901      	bls.n	800c5c0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800c5bc:	2303      	movs	r3, #3
 800c5be:	e1cc      	b.n	800c95a <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c5c0:	4b09      	ldr	r3, [pc, #36]	; (800c5e8 <HAL_RCC_OscConfig+0x4e0>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d0f0      	beq.n	800c5ae <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	689b      	ldr	r3, [r3, #8]
 800c5d0:	2b01      	cmp	r3, #1
 800c5d2:	d10b      	bne.n	800c5ec <HAL_RCC_OscConfig+0x4e4>
 800c5d4:	4b03      	ldr	r3, [pc, #12]	; (800c5e4 <HAL_RCC_OscConfig+0x4dc>)
 800c5d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5d8:	4a02      	ldr	r2, [pc, #8]	; (800c5e4 <HAL_RCC_OscConfig+0x4dc>)
 800c5da:	f043 0301 	orr.w	r3, r3, #1
 800c5de:	6713      	str	r3, [r2, #112]	; 0x70
 800c5e0:	e05b      	b.n	800c69a <HAL_RCC_OscConfig+0x592>
 800c5e2:	bf00      	nop
 800c5e4:	58024400 	.word	0x58024400
 800c5e8:	58024800 	.word	0x58024800
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	689b      	ldr	r3, [r3, #8]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d112      	bne.n	800c61a <HAL_RCC_OscConfig+0x512>
 800c5f4:	4b9d      	ldr	r3, [pc, #628]	; (800c86c <HAL_RCC_OscConfig+0x764>)
 800c5f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5f8:	4a9c      	ldr	r2, [pc, #624]	; (800c86c <HAL_RCC_OscConfig+0x764>)
 800c5fa:	f023 0301 	bic.w	r3, r3, #1
 800c5fe:	6713      	str	r3, [r2, #112]	; 0x70
 800c600:	4b9a      	ldr	r3, [pc, #616]	; (800c86c <HAL_RCC_OscConfig+0x764>)
 800c602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c604:	4a99      	ldr	r2, [pc, #612]	; (800c86c <HAL_RCC_OscConfig+0x764>)
 800c606:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c60a:	6713      	str	r3, [r2, #112]	; 0x70
 800c60c:	4b97      	ldr	r3, [pc, #604]	; (800c86c <HAL_RCC_OscConfig+0x764>)
 800c60e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c610:	4a96      	ldr	r2, [pc, #600]	; (800c86c <HAL_RCC_OscConfig+0x764>)
 800c612:	f023 0304 	bic.w	r3, r3, #4
 800c616:	6713      	str	r3, [r2, #112]	; 0x70
 800c618:	e03f      	b.n	800c69a <HAL_RCC_OscConfig+0x592>
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	689b      	ldr	r3, [r3, #8]
 800c61e:	2b05      	cmp	r3, #5
 800c620:	d112      	bne.n	800c648 <HAL_RCC_OscConfig+0x540>
 800c622:	4b92      	ldr	r3, [pc, #584]	; (800c86c <HAL_RCC_OscConfig+0x764>)
 800c624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c626:	4a91      	ldr	r2, [pc, #580]	; (800c86c <HAL_RCC_OscConfig+0x764>)
 800c628:	f043 0304 	orr.w	r3, r3, #4
 800c62c:	6713      	str	r3, [r2, #112]	; 0x70
 800c62e:	4b8f      	ldr	r3, [pc, #572]	; (800c86c <HAL_RCC_OscConfig+0x764>)
 800c630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c632:	4a8e      	ldr	r2, [pc, #568]	; (800c86c <HAL_RCC_OscConfig+0x764>)
 800c634:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c638:	6713      	str	r3, [r2, #112]	; 0x70
 800c63a:	4b8c      	ldr	r3, [pc, #560]	; (800c86c <HAL_RCC_OscConfig+0x764>)
 800c63c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c63e:	4a8b      	ldr	r2, [pc, #556]	; (800c86c <HAL_RCC_OscConfig+0x764>)
 800c640:	f043 0301 	orr.w	r3, r3, #1
 800c644:	6713      	str	r3, [r2, #112]	; 0x70
 800c646:	e028      	b.n	800c69a <HAL_RCC_OscConfig+0x592>
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	689b      	ldr	r3, [r3, #8]
 800c64c:	2b85      	cmp	r3, #133	; 0x85
 800c64e:	d112      	bne.n	800c676 <HAL_RCC_OscConfig+0x56e>
 800c650:	4b86      	ldr	r3, [pc, #536]	; (800c86c <HAL_RCC_OscConfig+0x764>)
 800c652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c654:	4a85      	ldr	r2, [pc, #532]	; (800c86c <HAL_RCC_OscConfig+0x764>)
 800c656:	f043 0304 	orr.w	r3, r3, #4
 800c65a:	6713      	str	r3, [r2, #112]	; 0x70
 800c65c:	4b83      	ldr	r3, [pc, #524]	; (800c86c <HAL_RCC_OscConfig+0x764>)
 800c65e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c660:	4a82      	ldr	r2, [pc, #520]	; (800c86c <HAL_RCC_OscConfig+0x764>)
 800c662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c666:	6713      	str	r3, [r2, #112]	; 0x70
 800c668:	4b80      	ldr	r3, [pc, #512]	; (800c86c <HAL_RCC_OscConfig+0x764>)
 800c66a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c66c:	4a7f      	ldr	r2, [pc, #508]	; (800c86c <HAL_RCC_OscConfig+0x764>)
 800c66e:	f043 0301 	orr.w	r3, r3, #1
 800c672:	6713      	str	r3, [r2, #112]	; 0x70
 800c674:	e011      	b.n	800c69a <HAL_RCC_OscConfig+0x592>
 800c676:	4b7d      	ldr	r3, [pc, #500]	; (800c86c <HAL_RCC_OscConfig+0x764>)
 800c678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c67a:	4a7c      	ldr	r2, [pc, #496]	; (800c86c <HAL_RCC_OscConfig+0x764>)
 800c67c:	f023 0301 	bic.w	r3, r3, #1
 800c680:	6713      	str	r3, [r2, #112]	; 0x70
 800c682:	4b7a      	ldr	r3, [pc, #488]	; (800c86c <HAL_RCC_OscConfig+0x764>)
 800c684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c686:	4a79      	ldr	r2, [pc, #484]	; (800c86c <HAL_RCC_OscConfig+0x764>)
 800c688:	f023 0304 	bic.w	r3, r3, #4
 800c68c:	6713      	str	r3, [r2, #112]	; 0x70
 800c68e:	4b77      	ldr	r3, [pc, #476]	; (800c86c <HAL_RCC_OscConfig+0x764>)
 800c690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c692:	4a76      	ldr	r2, [pc, #472]	; (800c86c <HAL_RCC_OscConfig+0x764>)
 800c694:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c698:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	689b      	ldr	r3, [r3, #8]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d015      	beq.n	800c6ce <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c6a2:	f7fc fb13 	bl	8008ccc <HAL_GetTick>
 800c6a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c6a8:	e00a      	b.n	800c6c0 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c6aa:	f7fc fb0f 	bl	8008ccc <HAL_GetTick>
 800c6ae:	4602      	mov	r2, r0
 800c6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b2:	1ad3      	subs	r3, r2, r3
 800c6b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6b8:	4293      	cmp	r3, r2
 800c6ba:	d901      	bls.n	800c6c0 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800c6bc:	2303      	movs	r3, #3
 800c6be:	e14c      	b.n	800c95a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c6c0:	4b6a      	ldr	r3, [pc, #424]	; (800c86c <HAL_RCC_OscConfig+0x764>)
 800c6c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6c4:	f003 0302 	and.w	r3, r3, #2
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d0ee      	beq.n	800c6aa <HAL_RCC_OscConfig+0x5a2>
 800c6cc:	e014      	b.n	800c6f8 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c6ce:	f7fc fafd 	bl	8008ccc <HAL_GetTick>
 800c6d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800c6d4:	e00a      	b.n	800c6ec <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c6d6:	f7fc faf9 	bl	8008ccc <HAL_GetTick>
 800c6da:	4602      	mov	r2, r0
 800c6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6de:	1ad3      	subs	r3, r2, r3
 800c6e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6e4:	4293      	cmp	r3, r2
 800c6e6:	d901      	bls.n	800c6ec <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800c6e8:	2303      	movs	r3, #3
 800c6ea:	e136      	b.n	800c95a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800c6ec:	4b5f      	ldr	r3, [pc, #380]	; (800c86c <HAL_RCC_OscConfig+0x764>)
 800c6ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6f0:	f003 0302 	and.w	r3, r3, #2
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d1ee      	bne.n	800c6d6 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	f000 812b 	beq.w	800c958 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800c702:	4b5a      	ldr	r3, [pc, #360]	; (800c86c <HAL_RCC_OscConfig+0x764>)
 800c704:	691b      	ldr	r3, [r3, #16]
 800c706:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c70a:	2b18      	cmp	r3, #24
 800c70c:	f000 80bb 	beq.w	800c886 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c714:	2b02      	cmp	r3, #2
 800c716:	f040 8095 	bne.w	800c844 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c71a:	4b54      	ldr	r3, [pc, #336]	; (800c86c <HAL_RCC_OscConfig+0x764>)
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	4a53      	ldr	r2, [pc, #332]	; (800c86c <HAL_RCC_OscConfig+0x764>)
 800c720:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c724:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c726:	f7fc fad1 	bl	8008ccc <HAL_GetTick>
 800c72a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c72c:	e008      	b.n	800c740 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c72e:	f7fc facd 	bl	8008ccc <HAL_GetTick>
 800c732:	4602      	mov	r2, r0
 800c734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c736:	1ad3      	subs	r3, r2, r3
 800c738:	2b02      	cmp	r3, #2
 800c73a:	d901      	bls.n	800c740 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800c73c:	2303      	movs	r3, #3
 800c73e:	e10c      	b.n	800c95a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c740:	4b4a      	ldr	r3, [pc, #296]	; (800c86c <HAL_RCC_OscConfig+0x764>)
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d1f0      	bne.n	800c72e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c74c:	4b47      	ldr	r3, [pc, #284]	; (800c86c <HAL_RCC_OscConfig+0x764>)
 800c74e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c750:	4b47      	ldr	r3, [pc, #284]	; (800c870 <HAL_RCC_OscConfig+0x768>)
 800c752:	4013      	ands	r3, r2
 800c754:	687a      	ldr	r2, [r7, #4]
 800c756:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800c758:	687a      	ldr	r2, [r7, #4]
 800c75a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800c75c:	0112      	lsls	r2, r2, #4
 800c75e:	430a      	orrs	r2, r1
 800c760:	4942      	ldr	r1, [pc, #264]	; (800c86c <HAL_RCC_OscConfig+0x764>)
 800c762:	4313      	orrs	r3, r2
 800c764:	628b      	str	r3, [r1, #40]	; 0x28
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c76a:	3b01      	subs	r3, #1
 800c76c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c774:	3b01      	subs	r3, #1
 800c776:	025b      	lsls	r3, r3, #9
 800c778:	b29b      	uxth	r3, r3
 800c77a:	431a      	orrs	r2, r3
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c780:	3b01      	subs	r3, #1
 800c782:	041b      	lsls	r3, r3, #16
 800c784:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c788:	431a      	orrs	r2, r3
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c78e:	3b01      	subs	r3, #1
 800c790:	061b      	lsls	r3, r3, #24
 800c792:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c796:	4935      	ldr	r1, [pc, #212]	; (800c86c <HAL_RCC_OscConfig+0x764>)
 800c798:	4313      	orrs	r3, r2
 800c79a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800c79c:	4b33      	ldr	r3, [pc, #204]	; (800c86c <HAL_RCC_OscConfig+0x764>)
 800c79e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7a0:	4a32      	ldr	r2, [pc, #200]	; (800c86c <HAL_RCC_OscConfig+0x764>)
 800c7a2:	f023 0301 	bic.w	r3, r3, #1
 800c7a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c7a8:	4b30      	ldr	r3, [pc, #192]	; (800c86c <HAL_RCC_OscConfig+0x764>)
 800c7aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c7ac:	4b31      	ldr	r3, [pc, #196]	; (800c874 <HAL_RCC_OscConfig+0x76c>)
 800c7ae:	4013      	ands	r3, r2
 800c7b0:	687a      	ldr	r2, [r7, #4]
 800c7b2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800c7b4:	00d2      	lsls	r2, r2, #3
 800c7b6:	492d      	ldr	r1, [pc, #180]	; (800c86c <HAL_RCC_OscConfig+0x764>)
 800c7b8:	4313      	orrs	r3, r2
 800c7ba:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800c7bc:	4b2b      	ldr	r3, [pc, #172]	; (800c86c <HAL_RCC_OscConfig+0x764>)
 800c7be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7c0:	f023 020c 	bic.w	r2, r3, #12
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7c8:	4928      	ldr	r1, [pc, #160]	; (800c86c <HAL_RCC_OscConfig+0x764>)
 800c7ca:	4313      	orrs	r3, r2
 800c7cc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800c7ce:	4b27      	ldr	r3, [pc, #156]	; (800c86c <HAL_RCC_OscConfig+0x764>)
 800c7d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7d2:	f023 0202 	bic.w	r2, r3, #2
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7da:	4924      	ldr	r1, [pc, #144]	; (800c86c <HAL_RCC_OscConfig+0x764>)
 800c7dc:	4313      	orrs	r3, r2
 800c7de:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800c7e0:	4b22      	ldr	r3, [pc, #136]	; (800c86c <HAL_RCC_OscConfig+0x764>)
 800c7e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7e4:	4a21      	ldr	r2, [pc, #132]	; (800c86c <HAL_RCC_OscConfig+0x764>)
 800c7e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c7ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c7ec:	4b1f      	ldr	r3, [pc, #124]	; (800c86c <HAL_RCC_OscConfig+0x764>)
 800c7ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7f0:	4a1e      	ldr	r2, [pc, #120]	; (800c86c <HAL_RCC_OscConfig+0x764>)
 800c7f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c7f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800c7f8:	4b1c      	ldr	r3, [pc, #112]	; (800c86c <HAL_RCC_OscConfig+0x764>)
 800c7fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7fc:	4a1b      	ldr	r2, [pc, #108]	; (800c86c <HAL_RCC_OscConfig+0x764>)
 800c7fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c802:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800c804:	4b19      	ldr	r3, [pc, #100]	; (800c86c <HAL_RCC_OscConfig+0x764>)
 800c806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c808:	4a18      	ldr	r2, [pc, #96]	; (800c86c <HAL_RCC_OscConfig+0x764>)
 800c80a:	f043 0301 	orr.w	r3, r3, #1
 800c80e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c810:	4b16      	ldr	r3, [pc, #88]	; (800c86c <HAL_RCC_OscConfig+0x764>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	4a15      	ldr	r2, [pc, #84]	; (800c86c <HAL_RCC_OscConfig+0x764>)
 800c816:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c81a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c81c:	f7fc fa56 	bl	8008ccc <HAL_GetTick>
 800c820:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c822:	e008      	b.n	800c836 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c824:	f7fc fa52 	bl	8008ccc <HAL_GetTick>
 800c828:	4602      	mov	r2, r0
 800c82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c82c:	1ad3      	subs	r3, r2, r3
 800c82e:	2b02      	cmp	r3, #2
 800c830:	d901      	bls.n	800c836 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800c832:	2303      	movs	r3, #3
 800c834:	e091      	b.n	800c95a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c836:	4b0d      	ldr	r3, [pc, #52]	; (800c86c <HAL_RCC_OscConfig+0x764>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d0f0      	beq.n	800c824 <HAL_RCC_OscConfig+0x71c>
 800c842:	e089      	b.n	800c958 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c844:	4b09      	ldr	r3, [pc, #36]	; (800c86c <HAL_RCC_OscConfig+0x764>)
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	4a08      	ldr	r2, [pc, #32]	; (800c86c <HAL_RCC_OscConfig+0x764>)
 800c84a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c84e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c850:	f7fc fa3c 	bl	8008ccc <HAL_GetTick>
 800c854:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c856:	e00f      	b.n	800c878 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c858:	f7fc fa38 	bl	8008ccc <HAL_GetTick>
 800c85c:	4602      	mov	r2, r0
 800c85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c860:	1ad3      	subs	r3, r2, r3
 800c862:	2b02      	cmp	r3, #2
 800c864:	d908      	bls.n	800c878 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800c866:	2303      	movs	r3, #3
 800c868:	e077      	b.n	800c95a <HAL_RCC_OscConfig+0x852>
 800c86a:	bf00      	nop
 800c86c:	58024400 	.word	0x58024400
 800c870:	fffffc0c 	.word	0xfffffc0c
 800c874:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c878:	4b3a      	ldr	r3, [pc, #232]	; (800c964 <HAL_RCC_OscConfig+0x85c>)
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c880:	2b00      	cmp	r3, #0
 800c882:	d1e9      	bne.n	800c858 <HAL_RCC_OscConfig+0x750>
 800c884:	e068      	b.n	800c958 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800c886:	4b37      	ldr	r3, [pc, #220]	; (800c964 <HAL_RCC_OscConfig+0x85c>)
 800c888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c88a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800c88c:	4b35      	ldr	r3, [pc, #212]	; (800c964 <HAL_RCC_OscConfig+0x85c>)
 800c88e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c890:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c896:	2b01      	cmp	r3, #1
 800c898:	d031      	beq.n	800c8fe <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c89a:	693b      	ldr	r3, [r7, #16]
 800c89c:	f003 0203 	and.w	r2, r3, #3
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c8a4:	429a      	cmp	r2, r3
 800c8a6:	d12a      	bne.n	800c8fe <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c8a8:	693b      	ldr	r3, [r7, #16]
 800c8aa:	091b      	lsrs	r3, r3, #4
 800c8ac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c8b4:	429a      	cmp	r2, r3
 800c8b6:	d122      	bne.n	800c8fe <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8c2:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c8c4:	429a      	cmp	r2, r3
 800c8c6:	d11a      	bne.n	800c8fe <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	0a5b      	lsrs	r3, r3, #9
 800c8cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8d4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c8d6:	429a      	cmp	r2, r3
 800c8d8:	d111      	bne.n	800c8fe <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	0c1b      	lsrs	r3, r3, #16
 800c8de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8e6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c8e8:	429a      	cmp	r2, r3
 800c8ea:	d108      	bne.n	800c8fe <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	0e1b      	lsrs	r3, r3, #24
 800c8f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8f8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c8fa:	429a      	cmp	r2, r3
 800c8fc:	d001      	beq.n	800c902 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800c8fe:	2301      	movs	r3, #1
 800c900:	e02b      	b.n	800c95a <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800c902:	4b18      	ldr	r3, [pc, #96]	; (800c964 <HAL_RCC_OscConfig+0x85c>)
 800c904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c906:	08db      	lsrs	r3, r3, #3
 800c908:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c90c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c912:	693a      	ldr	r2, [r7, #16]
 800c914:	429a      	cmp	r2, r3
 800c916:	d01f      	beq.n	800c958 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800c918:	4b12      	ldr	r3, [pc, #72]	; (800c964 <HAL_RCC_OscConfig+0x85c>)
 800c91a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c91c:	4a11      	ldr	r2, [pc, #68]	; (800c964 <HAL_RCC_OscConfig+0x85c>)
 800c91e:	f023 0301 	bic.w	r3, r3, #1
 800c922:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c924:	f7fc f9d2 	bl	8008ccc <HAL_GetTick>
 800c928:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800c92a:	bf00      	nop
 800c92c:	f7fc f9ce 	bl	8008ccc <HAL_GetTick>
 800c930:	4602      	mov	r2, r0
 800c932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c934:	4293      	cmp	r3, r2
 800c936:	d0f9      	beq.n	800c92c <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c938:	4b0a      	ldr	r3, [pc, #40]	; (800c964 <HAL_RCC_OscConfig+0x85c>)
 800c93a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c93c:	4b0a      	ldr	r3, [pc, #40]	; (800c968 <HAL_RCC_OscConfig+0x860>)
 800c93e:	4013      	ands	r3, r2
 800c940:	687a      	ldr	r2, [r7, #4]
 800c942:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800c944:	00d2      	lsls	r2, r2, #3
 800c946:	4907      	ldr	r1, [pc, #28]	; (800c964 <HAL_RCC_OscConfig+0x85c>)
 800c948:	4313      	orrs	r3, r2
 800c94a:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800c94c:	4b05      	ldr	r3, [pc, #20]	; (800c964 <HAL_RCC_OscConfig+0x85c>)
 800c94e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c950:	4a04      	ldr	r2, [pc, #16]	; (800c964 <HAL_RCC_OscConfig+0x85c>)
 800c952:	f043 0301 	orr.w	r3, r3, #1
 800c956:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800c958:	2300      	movs	r3, #0
}
 800c95a:	4618      	mov	r0, r3
 800c95c:	3730      	adds	r7, #48	; 0x30
 800c95e:	46bd      	mov	sp, r7
 800c960:	bd80      	pop	{r7, pc}
 800c962:	bf00      	nop
 800c964:	58024400 	.word	0x58024400
 800c968:	ffff0007 	.word	0xffff0007

0800c96c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b086      	sub	sp, #24
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
 800c974:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d101      	bne.n	800c980 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c97c:	2301      	movs	r3, #1
 800c97e:	e19c      	b.n	800ccba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c980:	4b8a      	ldr	r3, [pc, #552]	; (800cbac <HAL_RCC_ClockConfig+0x240>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	f003 030f 	and.w	r3, r3, #15
 800c988:	683a      	ldr	r2, [r7, #0]
 800c98a:	429a      	cmp	r2, r3
 800c98c:	d910      	bls.n	800c9b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c98e:	4b87      	ldr	r3, [pc, #540]	; (800cbac <HAL_RCC_ClockConfig+0x240>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	f023 020f 	bic.w	r2, r3, #15
 800c996:	4985      	ldr	r1, [pc, #532]	; (800cbac <HAL_RCC_ClockConfig+0x240>)
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	4313      	orrs	r3, r2
 800c99c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c99e:	4b83      	ldr	r3, [pc, #524]	; (800cbac <HAL_RCC_ClockConfig+0x240>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	f003 030f 	and.w	r3, r3, #15
 800c9a6:	683a      	ldr	r2, [r7, #0]
 800c9a8:	429a      	cmp	r2, r3
 800c9aa:	d001      	beq.n	800c9b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c9ac:	2301      	movs	r3, #1
 800c9ae:	e184      	b.n	800ccba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	f003 0304 	and.w	r3, r3, #4
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d010      	beq.n	800c9de <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	691a      	ldr	r2, [r3, #16]
 800c9c0:	4b7b      	ldr	r3, [pc, #492]	; (800cbb0 <HAL_RCC_ClockConfig+0x244>)
 800c9c2:	699b      	ldr	r3, [r3, #24]
 800c9c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c9c8:	429a      	cmp	r2, r3
 800c9ca:	d908      	bls.n	800c9de <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c9cc:	4b78      	ldr	r3, [pc, #480]	; (800cbb0 <HAL_RCC_ClockConfig+0x244>)
 800c9ce:	699b      	ldr	r3, [r3, #24]
 800c9d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	691b      	ldr	r3, [r3, #16]
 800c9d8:	4975      	ldr	r1, [pc, #468]	; (800cbb0 <HAL_RCC_ClockConfig+0x244>)
 800c9da:	4313      	orrs	r3, r2
 800c9dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	f003 0308 	and.w	r3, r3, #8
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d010      	beq.n	800ca0c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	695a      	ldr	r2, [r3, #20]
 800c9ee:	4b70      	ldr	r3, [pc, #448]	; (800cbb0 <HAL_RCC_ClockConfig+0x244>)
 800c9f0:	69db      	ldr	r3, [r3, #28]
 800c9f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c9f6:	429a      	cmp	r2, r3
 800c9f8:	d908      	bls.n	800ca0c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c9fa:	4b6d      	ldr	r3, [pc, #436]	; (800cbb0 <HAL_RCC_ClockConfig+0x244>)
 800c9fc:	69db      	ldr	r3, [r3, #28]
 800c9fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	695b      	ldr	r3, [r3, #20]
 800ca06:	496a      	ldr	r1, [pc, #424]	; (800cbb0 <HAL_RCC_ClockConfig+0x244>)
 800ca08:	4313      	orrs	r3, r2
 800ca0a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	f003 0310 	and.w	r3, r3, #16
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d010      	beq.n	800ca3a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	699a      	ldr	r2, [r3, #24]
 800ca1c:	4b64      	ldr	r3, [pc, #400]	; (800cbb0 <HAL_RCC_ClockConfig+0x244>)
 800ca1e:	69db      	ldr	r3, [r3, #28]
 800ca20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ca24:	429a      	cmp	r2, r3
 800ca26:	d908      	bls.n	800ca3a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ca28:	4b61      	ldr	r3, [pc, #388]	; (800cbb0 <HAL_RCC_ClockConfig+0x244>)
 800ca2a:	69db      	ldr	r3, [r3, #28]
 800ca2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	699b      	ldr	r3, [r3, #24]
 800ca34:	495e      	ldr	r1, [pc, #376]	; (800cbb0 <HAL_RCC_ClockConfig+0x244>)
 800ca36:	4313      	orrs	r3, r2
 800ca38:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	f003 0320 	and.w	r3, r3, #32
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d010      	beq.n	800ca68 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	69da      	ldr	r2, [r3, #28]
 800ca4a:	4b59      	ldr	r3, [pc, #356]	; (800cbb0 <HAL_RCC_ClockConfig+0x244>)
 800ca4c:	6a1b      	ldr	r3, [r3, #32]
 800ca4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ca52:	429a      	cmp	r2, r3
 800ca54:	d908      	bls.n	800ca68 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ca56:	4b56      	ldr	r3, [pc, #344]	; (800cbb0 <HAL_RCC_ClockConfig+0x244>)
 800ca58:	6a1b      	ldr	r3, [r3, #32]
 800ca5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	69db      	ldr	r3, [r3, #28]
 800ca62:	4953      	ldr	r1, [pc, #332]	; (800cbb0 <HAL_RCC_ClockConfig+0x244>)
 800ca64:	4313      	orrs	r3, r2
 800ca66:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	f003 0302 	and.w	r3, r3, #2
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d010      	beq.n	800ca96 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	68da      	ldr	r2, [r3, #12]
 800ca78:	4b4d      	ldr	r3, [pc, #308]	; (800cbb0 <HAL_RCC_ClockConfig+0x244>)
 800ca7a:	699b      	ldr	r3, [r3, #24]
 800ca7c:	f003 030f 	and.w	r3, r3, #15
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d908      	bls.n	800ca96 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ca84:	4b4a      	ldr	r3, [pc, #296]	; (800cbb0 <HAL_RCC_ClockConfig+0x244>)
 800ca86:	699b      	ldr	r3, [r3, #24]
 800ca88:	f023 020f 	bic.w	r2, r3, #15
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	68db      	ldr	r3, [r3, #12]
 800ca90:	4947      	ldr	r1, [pc, #284]	; (800cbb0 <HAL_RCC_ClockConfig+0x244>)
 800ca92:	4313      	orrs	r3, r2
 800ca94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	f003 0301 	and.w	r3, r3, #1
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d055      	beq.n	800cb4e <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800caa2:	4b43      	ldr	r3, [pc, #268]	; (800cbb0 <HAL_RCC_ClockConfig+0x244>)
 800caa4:	699b      	ldr	r3, [r3, #24]
 800caa6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	689b      	ldr	r3, [r3, #8]
 800caae:	4940      	ldr	r1, [pc, #256]	; (800cbb0 <HAL_RCC_ClockConfig+0x244>)
 800cab0:	4313      	orrs	r3, r2
 800cab2:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	685b      	ldr	r3, [r3, #4]
 800cab8:	2b02      	cmp	r3, #2
 800caba:	d107      	bne.n	800cacc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800cabc:	4b3c      	ldr	r3, [pc, #240]	; (800cbb0 <HAL_RCC_ClockConfig+0x244>)
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d121      	bne.n	800cb0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800cac8:	2301      	movs	r3, #1
 800caca:	e0f6      	b.n	800ccba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	685b      	ldr	r3, [r3, #4]
 800cad0:	2b03      	cmp	r3, #3
 800cad2:	d107      	bne.n	800cae4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800cad4:	4b36      	ldr	r3, [pc, #216]	; (800cbb0 <HAL_RCC_ClockConfig+0x244>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d115      	bne.n	800cb0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800cae0:	2301      	movs	r3, #1
 800cae2:	e0ea      	b.n	800ccba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	685b      	ldr	r3, [r3, #4]
 800cae8:	2b01      	cmp	r3, #1
 800caea:	d107      	bne.n	800cafc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800caec:	4b30      	ldr	r3, [pc, #192]	; (800cbb0 <HAL_RCC_ClockConfig+0x244>)
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d109      	bne.n	800cb0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800caf8:	2301      	movs	r3, #1
 800cafa:	e0de      	b.n	800ccba <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cafc:	4b2c      	ldr	r3, [pc, #176]	; (800cbb0 <HAL_RCC_ClockConfig+0x244>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	f003 0304 	and.w	r3, r3, #4
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d101      	bne.n	800cb0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800cb08:	2301      	movs	r3, #1
 800cb0a:	e0d6      	b.n	800ccba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800cb0c:	4b28      	ldr	r3, [pc, #160]	; (800cbb0 <HAL_RCC_ClockConfig+0x244>)
 800cb0e:	691b      	ldr	r3, [r3, #16]
 800cb10:	f023 0207 	bic.w	r2, r3, #7
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	685b      	ldr	r3, [r3, #4]
 800cb18:	4925      	ldr	r1, [pc, #148]	; (800cbb0 <HAL_RCC_ClockConfig+0x244>)
 800cb1a:	4313      	orrs	r3, r2
 800cb1c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cb1e:	f7fc f8d5 	bl	8008ccc <HAL_GetTick>
 800cb22:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cb24:	e00a      	b.n	800cb3c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cb26:	f7fc f8d1 	bl	8008ccc <HAL_GetTick>
 800cb2a:	4602      	mov	r2, r0
 800cb2c:	697b      	ldr	r3, [r7, #20]
 800cb2e:	1ad3      	subs	r3, r2, r3
 800cb30:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb34:	4293      	cmp	r3, r2
 800cb36:	d901      	bls.n	800cb3c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800cb38:	2303      	movs	r3, #3
 800cb3a:	e0be      	b.n	800ccba <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cb3c:	4b1c      	ldr	r3, [pc, #112]	; (800cbb0 <HAL_RCC_ClockConfig+0x244>)
 800cb3e:	691b      	ldr	r3, [r3, #16]
 800cb40:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	685b      	ldr	r3, [r3, #4]
 800cb48:	00db      	lsls	r3, r3, #3
 800cb4a:	429a      	cmp	r2, r3
 800cb4c:	d1eb      	bne.n	800cb26 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	f003 0302 	and.w	r3, r3, #2
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d010      	beq.n	800cb7c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	68da      	ldr	r2, [r3, #12]
 800cb5e:	4b14      	ldr	r3, [pc, #80]	; (800cbb0 <HAL_RCC_ClockConfig+0x244>)
 800cb60:	699b      	ldr	r3, [r3, #24]
 800cb62:	f003 030f 	and.w	r3, r3, #15
 800cb66:	429a      	cmp	r2, r3
 800cb68:	d208      	bcs.n	800cb7c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cb6a:	4b11      	ldr	r3, [pc, #68]	; (800cbb0 <HAL_RCC_ClockConfig+0x244>)
 800cb6c:	699b      	ldr	r3, [r3, #24]
 800cb6e:	f023 020f 	bic.w	r2, r3, #15
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	68db      	ldr	r3, [r3, #12]
 800cb76:	490e      	ldr	r1, [pc, #56]	; (800cbb0 <HAL_RCC_ClockConfig+0x244>)
 800cb78:	4313      	orrs	r3, r2
 800cb7a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cb7c:	4b0b      	ldr	r3, [pc, #44]	; (800cbac <HAL_RCC_ClockConfig+0x240>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	f003 030f 	and.w	r3, r3, #15
 800cb84:	683a      	ldr	r2, [r7, #0]
 800cb86:	429a      	cmp	r2, r3
 800cb88:	d214      	bcs.n	800cbb4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cb8a:	4b08      	ldr	r3, [pc, #32]	; (800cbac <HAL_RCC_ClockConfig+0x240>)
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	f023 020f 	bic.w	r2, r3, #15
 800cb92:	4906      	ldr	r1, [pc, #24]	; (800cbac <HAL_RCC_ClockConfig+0x240>)
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	4313      	orrs	r3, r2
 800cb98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cb9a:	4b04      	ldr	r3, [pc, #16]	; (800cbac <HAL_RCC_ClockConfig+0x240>)
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	f003 030f 	and.w	r3, r3, #15
 800cba2:	683a      	ldr	r2, [r7, #0]
 800cba4:	429a      	cmp	r2, r3
 800cba6:	d005      	beq.n	800cbb4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800cba8:	2301      	movs	r3, #1
 800cbaa:	e086      	b.n	800ccba <HAL_RCC_ClockConfig+0x34e>
 800cbac:	52002000 	.word	0x52002000
 800cbb0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	f003 0304 	and.w	r3, r3, #4
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d010      	beq.n	800cbe2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	691a      	ldr	r2, [r3, #16]
 800cbc4:	4b3f      	ldr	r3, [pc, #252]	; (800ccc4 <HAL_RCC_ClockConfig+0x358>)
 800cbc6:	699b      	ldr	r3, [r3, #24]
 800cbc8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800cbcc:	429a      	cmp	r2, r3
 800cbce:	d208      	bcs.n	800cbe2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800cbd0:	4b3c      	ldr	r3, [pc, #240]	; (800ccc4 <HAL_RCC_ClockConfig+0x358>)
 800cbd2:	699b      	ldr	r3, [r3, #24]
 800cbd4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	691b      	ldr	r3, [r3, #16]
 800cbdc:	4939      	ldr	r1, [pc, #228]	; (800ccc4 <HAL_RCC_ClockConfig+0x358>)
 800cbde:	4313      	orrs	r3, r2
 800cbe0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	f003 0308 	and.w	r3, r3, #8
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d010      	beq.n	800cc10 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	695a      	ldr	r2, [r3, #20]
 800cbf2:	4b34      	ldr	r3, [pc, #208]	; (800ccc4 <HAL_RCC_ClockConfig+0x358>)
 800cbf4:	69db      	ldr	r3, [r3, #28]
 800cbf6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800cbfa:	429a      	cmp	r2, r3
 800cbfc:	d208      	bcs.n	800cc10 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800cbfe:	4b31      	ldr	r3, [pc, #196]	; (800ccc4 <HAL_RCC_ClockConfig+0x358>)
 800cc00:	69db      	ldr	r3, [r3, #28]
 800cc02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	695b      	ldr	r3, [r3, #20]
 800cc0a:	492e      	ldr	r1, [pc, #184]	; (800ccc4 <HAL_RCC_ClockConfig+0x358>)
 800cc0c:	4313      	orrs	r3, r2
 800cc0e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	f003 0310 	and.w	r3, r3, #16
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d010      	beq.n	800cc3e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	699a      	ldr	r2, [r3, #24]
 800cc20:	4b28      	ldr	r3, [pc, #160]	; (800ccc4 <HAL_RCC_ClockConfig+0x358>)
 800cc22:	69db      	ldr	r3, [r3, #28]
 800cc24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cc28:	429a      	cmp	r2, r3
 800cc2a:	d208      	bcs.n	800cc3e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800cc2c:	4b25      	ldr	r3, [pc, #148]	; (800ccc4 <HAL_RCC_ClockConfig+0x358>)
 800cc2e:	69db      	ldr	r3, [r3, #28]
 800cc30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	699b      	ldr	r3, [r3, #24]
 800cc38:	4922      	ldr	r1, [pc, #136]	; (800ccc4 <HAL_RCC_ClockConfig+0x358>)
 800cc3a:	4313      	orrs	r3, r2
 800cc3c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	f003 0320 	and.w	r3, r3, #32
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d010      	beq.n	800cc6c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	69da      	ldr	r2, [r3, #28]
 800cc4e:	4b1d      	ldr	r3, [pc, #116]	; (800ccc4 <HAL_RCC_ClockConfig+0x358>)
 800cc50:	6a1b      	ldr	r3, [r3, #32]
 800cc52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800cc56:	429a      	cmp	r2, r3
 800cc58:	d208      	bcs.n	800cc6c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800cc5a:	4b1a      	ldr	r3, [pc, #104]	; (800ccc4 <HAL_RCC_ClockConfig+0x358>)
 800cc5c:	6a1b      	ldr	r3, [r3, #32]
 800cc5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	69db      	ldr	r3, [r3, #28]
 800cc66:	4917      	ldr	r1, [pc, #92]	; (800ccc4 <HAL_RCC_ClockConfig+0x358>)
 800cc68:	4313      	orrs	r3, r2
 800cc6a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800cc6c:	f000 f834 	bl	800ccd8 <HAL_RCC_GetSysClockFreq>
 800cc70:	4602      	mov	r2, r0
 800cc72:	4b14      	ldr	r3, [pc, #80]	; (800ccc4 <HAL_RCC_ClockConfig+0x358>)
 800cc74:	699b      	ldr	r3, [r3, #24]
 800cc76:	0a1b      	lsrs	r3, r3, #8
 800cc78:	f003 030f 	and.w	r3, r3, #15
 800cc7c:	4912      	ldr	r1, [pc, #72]	; (800ccc8 <HAL_RCC_ClockConfig+0x35c>)
 800cc7e:	5ccb      	ldrb	r3, [r1, r3]
 800cc80:	f003 031f 	and.w	r3, r3, #31
 800cc84:	fa22 f303 	lsr.w	r3, r2, r3
 800cc88:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800cc8a:	4b0e      	ldr	r3, [pc, #56]	; (800ccc4 <HAL_RCC_ClockConfig+0x358>)
 800cc8c:	699b      	ldr	r3, [r3, #24]
 800cc8e:	f003 030f 	and.w	r3, r3, #15
 800cc92:	4a0d      	ldr	r2, [pc, #52]	; (800ccc8 <HAL_RCC_ClockConfig+0x35c>)
 800cc94:	5cd3      	ldrb	r3, [r2, r3]
 800cc96:	f003 031f 	and.w	r3, r3, #31
 800cc9a:	693a      	ldr	r2, [r7, #16]
 800cc9c:	fa22 f303 	lsr.w	r3, r2, r3
 800cca0:	4a0a      	ldr	r2, [pc, #40]	; (800cccc <HAL_RCC_ClockConfig+0x360>)
 800cca2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800cca4:	4a0a      	ldr	r2, [pc, #40]	; (800ccd0 <HAL_RCC_ClockConfig+0x364>)
 800cca6:	693b      	ldr	r3, [r7, #16]
 800cca8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800ccaa:	4b0a      	ldr	r3, [pc, #40]	; (800ccd4 <HAL_RCC_ClockConfig+0x368>)
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	4618      	mov	r0, r3
 800ccb0:	f7f4 fdbe 	bl	8001830 <HAL_InitTick>
 800ccb4:	4603      	mov	r3, r0
 800ccb6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800ccb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccba:	4618      	mov	r0, r3
 800ccbc:	3718      	adds	r7, #24
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	bd80      	pop	{r7, pc}
 800ccc2:	bf00      	nop
 800ccc4:	58024400 	.word	0x58024400
 800ccc8:	08028ef4 	.word	0x08028ef4
 800cccc:	24000044 	.word	0x24000044
 800ccd0:	24000040 	.word	0x24000040
 800ccd4:	24000048 	.word	0x24000048

0800ccd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ccd8:	b480      	push	{r7}
 800ccda:	b089      	sub	sp, #36	; 0x24
 800ccdc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ccde:	4bb3      	ldr	r3, [pc, #716]	; (800cfac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cce0:	691b      	ldr	r3, [r3, #16]
 800cce2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cce6:	2b18      	cmp	r3, #24
 800cce8:	f200 8155 	bhi.w	800cf96 <HAL_RCC_GetSysClockFreq+0x2be>
 800ccec:	a201      	add	r2, pc, #4	; (adr r2, 800ccf4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800ccee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccf2:	bf00      	nop
 800ccf4:	0800cd59 	.word	0x0800cd59
 800ccf8:	0800cf97 	.word	0x0800cf97
 800ccfc:	0800cf97 	.word	0x0800cf97
 800cd00:	0800cf97 	.word	0x0800cf97
 800cd04:	0800cf97 	.word	0x0800cf97
 800cd08:	0800cf97 	.word	0x0800cf97
 800cd0c:	0800cf97 	.word	0x0800cf97
 800cd10:	0800cf97 	.word	0x0800cf97
 800cd14:	0800cd7f 	.word	0x0800cd7f
 800cd18:	0800cf97 	.word	0x0800cf97
 800cd1c:	0800cf97 	.word	0x0800cf97
 800cd20:	0800cf97 	.word	0x0800cf97
 800cd24:	0800cf97 	.word	0x0800cf97
 800cd28:	0800cf97 	.word	0x0800cf97
 800cd2c:	0800cf97 	.word	0x0800cf97
 800cd30:	0800cf97 	.word	0x0800cf97
 800cd34:	0800cd85 	.word	0x0800cd85
 800cd38:	0800cf97 	.word	0x0800cf97
 800cd3c:	0800cf97 	.word	0x0800cf97
 800cd40:	0800cf97 	.word	0x0800cf97
 800cd44:	0800cf97 	.word	0x0800cf97
 800cd48:	0800cf97 	.word	0x0800cf97
 800cd4c:	0800cf97 	.word	0x0800cf97
 800cd50:	0800cf97 	.word	0x0800cf97
 800cd54:	0800cd8b 	.word	0x0800cd8b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cd58:	4b94      	ldr	r3, [pc, #592]	; (800cfac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	f003 0320 	and.w	r3, r3, #32
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d009      	beq.n	800cd78 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cd64:	4b91      	ldr	r3, [pc, #580]	; (800cfac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	08db      	lsrs	r3, r3, #3
 800cd6a:	f003 0303 	and.w	r3, r3, #3
 800cd6e:	4a90      	ldr	r2, [pc, #576]	; (800cfb0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800cd70:	fa22 f303 	lsr.w	r3, r2, r3
 800cd74:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800cd76:	e111      	b.n	800cf9c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800cd78:	4b8d      	ldr	r3, [pc, #564]	; (800cfb0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800cd7a:	61bb      	str	r3, [r7, #24]
      break;
 800cd7c:	e10e      	b.n	800cf9c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800cd7e:	4b8d      	ldr	r3, [pc, #564]	; (800cfb4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800cd80:	61bb      	str	r3, [r7, #24]
      break;
 800cd82:	e10b      	b.n	800cf9c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800cd84:	4b8c      	ldr	r3, [pc, #560]	; (800cfb8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800cd86:	61bb      	str	r3, [r7, #24]
      break;
 800cd88:	e108      	b.n	800cf9c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cd8a:	4b88      	ldr	r3, [pc, #544]	; (800cfac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cd8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd8e:	f003 0303 	and.w	r3, r3, #3
 800cd92:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800cd94:	4b85      	ldr	r3, [pc, #532]	; (800cfac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cd96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd98:	091b      	lsrs	r3, r3, #4
 800cd9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd9e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800cda0:	4b82      	ldr	r3, [pc, #520]	; (800cfac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cda2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cda4:	f003 0301 	and.w	r3, r3, #1
 800cda8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800cdaa:	4b80      	ldr	r3, [pc, #512]	; (800cfac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cdac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdae:	08db      	lsrs	r3, r3, #3
 800cdb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cdb4:	68fa      	ldr	r2, [r7, #12]
 800cdb6:	fb02 f303 	mul.w	r3, r2, r3
 800cdba:	ee07 3a90 	vmov	s15, r3
 800cdbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdc2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	f000 80e1 	beq.w	800cf90 <HAL_RCC_GetSysClockFreq+0x2b8>
 800cdce:	697b      	ldr	r3, [r7, #20]
 800cdd0:	2b02      	cmp	r3, #2
 800cdd2:	f000 8083 	beq.w	800cedc <HAL_RCC_GetSysClockFreq+0x204>
 800cdd6:	697b      	ldr	r3, [r7, #20]
 800cdd8:	2b02      	cmp	r3, #2
 800cdda:	f200 80a1 	bhi.w	800cf20 <HAL_RCC_GetSysClockFreq+0x248>
 800cdde:	697b      	ldr	r3, [r7, #20]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d003      	beq.n	800cdec <HAL_RCC_GetSysClockFreq+0x114>
 800cde4:	697b      	ldr	r3, [r7, #20]
 800cde6:	2b01      	cmp	r3, #1
 800cde8:	d056      	beq.n	800ce98 <HAL_RCC_GetSysClockFreq+0x1c0>
 800cdea:	e099      	b.n	800cf20 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cdec:	4b6f      	ldr	r3, [pc, #444]	; (800cfac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	f003 0320 	and.w	r3, r3, #32
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d02d      	beq.n	800ce54 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cdf8:	4b6c      	ldr	r3, [pc, #432]	; (800cfac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	08db      	lsrs	r3, r3, #3
 800cdfe:	f003 0303 	and.w	r3, r3, #3
 800ce02:	4a6b      	ldr	r2, [pc, #428]	; (800cfb0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ce04:	fa22 f303 	lsr.w	r3, r2, r3
 800ce08:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	ee07 3a90 	vmov	s15, r3
 800ce10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce14:	693b      	ldr	r3, [r7, #16]
 800ce16:	ee07 3a90 	vmov	s15, r3
 800ce1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce22:	4b62      	ldr	r3, [pc, #392]	; (800cfac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ce24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce2a:	ee07 3a90 	vmov	s15, r3
 800ce2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce32:	ed97 6a02 	vldr	s12, [r7, #8]
 800ce36:	eddf 5a61 	vldr	s11, [pc, #388]	; 800cfbc <HAL_RCC_GetSysClockFreq+0x2e4>
 800ce3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce4e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800ce52:	e087      	b.n	800cf64 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ce54:	693b      	ldr	r3, [r7, #16]
 800ce56:	ee07 3a90 	vmov	s15, r3
 800ce5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce5e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800cfc0 <HAL_RCC_GetSysClockFreq+0x2e8>
 800ce62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce66:	4b51      	ldr	r3, [pc, #324]	; (800cfac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ce68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce6e:	ee07 3a90 	vmov	s15, r3
 800ce72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce76:	ed97 6a02 	vldr	s12, [r7, #8]
 800ce7a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800cfbc <HAL_RCC_GetSysClockFreq+0x2e4>
 800ce7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ce96:	e065      	b.n	800cf64 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ce98:	693b      	ldr	r3, [r7, #16]
 800ce9a:	ee07 3a90 	vmov	s15, r3
 800ce9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cea2:	eddf 6a48 	vldr	s13, [pc, #288]	; 800cfc4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800cea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ceaa:	4b40      	ldr	r3, [pc, #256]	; (800cfac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ceac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ceb2:	ee07 3a90 	vmov	s15, r3
 800ceb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ceba:	ed97 6a02 	vldr	s12, [r7, #8]
 800cebe:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800cfbc <HAL_RCC_GetSysClockFreq+0x2e4>
 800cec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ceca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ced2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ced6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ceda:	e043      	b.n	800cf64 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cedc:	693b      	ldr	r3, [r7, #16]
 800cede:	ee07 3a90 	vmov	s15, r3
 800cee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cee6:	eddf 6a38 	vldr	s13, [pc, #224]	; 800cfc8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800ceea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ceee:	4b2f      	ldr	r3, [pc, #188]	; (800cfac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cef6:	ee07 3a90 	vmov	s15, r3
 800cefa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cefe:	ed97 6a02 	vldr	s12, [r7, #8]
 800cf02:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800cfbc <HAL_RCC_GetSysClockFreq+0x2e4>
 800cf06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800cf1e:	e021      	b.n	800cf64 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cf20:	693b      	ldr	r3, [r7, #16]
 800cf22:	ee07 3a90 	vmov	s15, r3
 800cf26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf2a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800cfc4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800cf2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf32:	4b1e      	ldr	r3, [pc, #120]	; (800cfac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cf34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf3a:	ee07 3a90 	vmov	s15, r3
 800cf3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf42:	ed97 6a02 	vldr	s12, [r7, #8]
 800cf46:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800cfbc <HAL_RCC_GetSysClockFreq+0x2e4>
 800cf4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800cf62:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800cf64:	4b11      	ldr	r3, [pc, #68]	; (800cfac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cf66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf68:	0a5b      	lsrs	r3, r3, #9
 800cf6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf6e:	3301      	adds	r3, #1
 800cf70:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	ee07 3a90 	vmov	s15, r3
 800cf78:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cf7c:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf88:	ee17 3a90 	vmov	r3, s15
 800cf8c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800cf8e:	e005      	b.n	800cf9c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800cf90:	2300      	movs	r3, #0
 800cf92:	61bb      	str	r3, [r7, #24]
      break;
 800cf94:	e002      	b.n	800cf9c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800cf96:	4b07      	ldr	r3, [pc, #28]	; (800cfb4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800cf98:	61bb      	str	r3, [r7, #24]
      break;
 800cf9a:	bf00      	nop
  }

  return sysclockfreq;
 800cf9c:	69bb      	ldr	r3, [r7, #24]
}
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	3724      	adds	r7, #36	; 0x24
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa8:	4770      	bx	lr
 800cfaa:	bf00      	nop
 800cfac:	58024400 	.word	0x58024400
 800cfb0:	03d09000 	.word	0x03d09000
 800cfb4:	003d0900 	.word	0x003d0900
 800cfb8:	016e3600 	.word	0x016e3600
 800cfbc:	46000000 	.word	0x46000000
 800cfc0:	4c742400 	.word	0x4c742400
 800cfc4:	4a742400 	.word	0x4a742400
 800cfc8:	4bb71b00 	.word	0x4bb71b00

0800cfcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b082      	sub	sp, #8
 800cfd0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800cfd2:	f7ff fe81 	bl	800ccd8 <HAL_RCC_GetSysClockFreq>
 800cfd6:	4602      	mov	r2, r0
 800cfd8:	4b10      	ldr	r3, [pc, #64]	; (800d01c <HAL_RCC_GetHCLKFreq+0x50>)
 800cfda:	699b      	ldr	r3, [r3, #24]
 800cfdc:	0a1b      	lsrs	r3, r3, #8
 800cfde:	f003 030f 	and.w	r3, r3, #15
 800cfe2:	490f      	ldr	r1, [pc, #60]	; (800d020 <HAL_RCC_GetHCLKFreq+0x54>)
 800cfe4:	5ccb      	ldrb	r3, [r1, r3]
 800cfe6:	f003 031f 	and.w	r3, r3, #31
 800cfea:	fa22 f303 	lsr.w	r3, r2, r3
 800cfee:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800cff0:	4b0a      	ldr	r3, [pc, #40]	; (800d01c <HAL_RCC_GetHCLKFreq+0x50>)
 800cff2:	699b      	ldr	r3, [r3, #24]
 800cff4:	f003 030f 	and.w	r3, r3, #15
 800cff8:	4a09      	ldr	r2, [pc, #36]	; (800d020 <HAL_RCC_GetHCLKFreq+0x54>)
 800cffa:	5cd3      	ldrb	r3, [r2, r3]
 800cffc:	f003 031f 	and.w	r3, r3, #31
 800d000:	687a      	ldr	r2, [r7, #4]
 800d002:	fa22 f303 	lsr.w	r3, r2, r3
 800d006:	4a07      	ldr	r2, [pc, #28]	; (800d024 <HAL_RCC_GetHCLKFreq+0x58>)
 800d008:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d00a:	4a07      	ldr	r2, [pc, #28]	; (800d028 <HAL_RCC_GetHCLKFreq+0x5c>)
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800d010:	4b04      	ldr	r3, [pc, #16]	; (800d024 <HAL_RCC_GetHCLKFreq+0x58>)
 800d012:	681b      	ldr	r3, [r3, #0]
}
 800d014:	4618      	mov	r0, r3
 800d016:	3708      	adds	r7, #8
 800d018:	46bd      	mov	sp, r7
 800d01a:	bd80      	pop	{r7, pc}
 800d01c:	58024400 	.word	0x58024400
 800d020:	08028ef4 	.word	0x08028ef4
 800d024:	24000044 	.word	0x24000044
 800d028:	24000040 	.word	0x24000040

0800d02c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800d030:	f7ff ffcc 	bl	800cfcc <HAL_RCC_GetHCLKFreq>
 800d034:	4602      	mov	r2, r0
 800d036:	4b06      	ldr	r3, [pc, #24]	; (800d050 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d038:	69db      	ldr	r3, [r3, #28]
 800d03a:	091b      	lsrs	r3, r3, #4
 800d03c:	f003 0307 	and.w	r3, r3, #7
 800d040:	4904      	ldr	r1, [pc, #16]	; (800d054 <HAL_RCC_GetPCLK1Freq+0x28>)
 800d042:	5ccb      	ldrb	r3, [r1, r3]
 800d044:	f003 031f 	and.w	r3, r3, #31
 800d048:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800d04c:	4618      	mov	r0, r3
 800d04e:	bd80      	pop	{r7, pc}
 800d050:	58024400 	.word	0x58024400
 800d054:	08028ef4 	.word	0x08028ef4

0800d058 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800d05c:	f7ff ffb6 	bl	800cfcc <HAL_RCC_GetHCLKFreq>
 800d060:	4602      	mov	r2, r0
 800d062:	4b06      	ldr	r3, [pc, #24]	; (800d07c <HAL_RCC_GetPCLK2Freq+0x24>)
 800d064:	69db      	ldr	r3, [r3, #28]
 800d066:	0a1b      	lsrs	r3, r3, #8
 800d068:	f003 0307 	and.w	r3, r3, #7
 800d06c:	4904      	ldr	r1, [pc, #16]	; (800d080 <HAL_RCC_GetPCLK2Freq+0x28>)
 800d06e:	5ccb      	ldrb	r3, [r1, r3]
 800d070:	f003 031f 	and.w	r3, r3, #31
 800d074:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800d078:	4618      	mov	r0, r3
 800d07a:	bd80      	pop	{r7, pc}
 800d07c:	58024400 	.word	0x58024400
 800d080:	08028ef4 	.word	0x08028ef4

0800d084 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800d084:	b480      	push	{r7}
 800d086:	b083      	sub	sp, #12
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
 800d08c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	223f      	movs	r2, #63	; 0x3f
 800d092:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800d094:	4b1a      	ldr	r3, [pc, #104]	; (800d100 <HAL_RCC_GetClockConfig+0x7c>)
 800d096:	691b      	ldr	r3, [r3, #16]
 800d098:	f003 0207 	and.w	r2, r3, #7
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 800d0a0:	4b17      	ldr	r3, [pc, #92]	; (800d100 <HAL_RCC_GetClockConfig+0x7c>)
 800d0a2:	699b      	ldr	r3, [r3, #24]
 800d0a4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 800d0ac:	4b14      	ldr	r3, [pc, #80]	; (800d100 <HAL_RCC_GetClockConfig+0x7c>)
 800d0ae:	699b      	ldr	r3, [r3, #24]
 800d0b0:	f003 020f 	and.w	r2, r3, #15
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 800d0b8:	4b11      	ldr	r3, [pc, #68]	; (800d100 <HAL_RCC_GetClockConfig+0x7c>)
 800d0ba:	699b      	ldr	r3, [r3, #24]
 800d0bc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 800d0c4:	4b0e      	ldr	r3, [pc, #56]	; (800d100 <HAL_RCC_GetClockConfig+0x7c>)
 800d0c6:	69db      	ldr	r3, [r3, #28]
 800d0c8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 800d0d0:	4b0b      	ldr	r3, [pc, #44]	; (800d100 <HAL_RCC_GetClockConfig+0x7c>)
 800d0d2:	69db      	ldr	r3, [r3, #28]
 800d0d4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 800d0dc:	4b08      	ldr	r3, [pc, #32]	; (800d100 <HAL_RCC_GetClockConfig+0x7c>)
 800d0de:	6a1b      	ldr	r3, [r3, #32]
 800d0e0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800d0e8:	4b06      	ldr	r3, [pc, #24]	; (800d104 <HAL_RCC_GetClockConfig+0x80>)
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	f003 020f 	and.w	r2, r3, #15
 800d0f0:	683b      	ldr	r3, [r7, #0]
 800d0f2:	601a      	str	r2, [r3, #0]
}
 800d0f4:	bf00      	nop
 800d0f6:	370c      	adds	r7, #12
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fe:	4770      	bx	lr
 800d100:	58024400 	.word	0x58024400
 800d104:	52002000 	.word	0x52002000

0800d108 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d108:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d10c:	b0c8      	sub	sp, #288	; 0x120
 800d10e:	af00      	add	r7, sp, #0
 800d110:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d114:	2300      	movs	r3, #0
 800d116:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d11a:	2300      	movs	r3, #0
 800d11c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d120:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d128:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800d12c:	2500      	movs	r5, #0
 800d12e:	ea54 0305 	orrs.w	r3, r4, r5
 800d132:	d049      	beq.n	800d1c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800d134:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d138:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d13a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d13e:	d02f      	beq.n	800d1a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800d140:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d144:	d828      	bhi.n	800d198 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800d146:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d14a:	d01a      	beq.n	800d182 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800d14c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d150:	d822      	bhi.n	800d198 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800d152:	2b00      	cmp	r3, #0
 800d154:	d003      	beq.n	800d15e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800d156:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d15a:	d007      	beq.n	800d16c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800d15c:	e01c      	b.n	800d198 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d15e:	4ba7      	ldr	r3, [pc, #668]	; (800d3fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800d160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d162:	4aa6      	ldr	r2, [pc, #664]	; (800d3fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800d164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d168:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d16a:	e01a      	b.n	800d1a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d16c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d170:	3308      	adds	r3, #8
 800d172:	2102      	movs	r1, #2
 800d174:	4618      	mov	r0, r3
 800d176:	f002 fa6d 	bl	800f654 <RCCEx_PLL2_Config>
 800d17a:	4603      	mov	r3, r0
 800d17c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d180:	e00f      	b.n	800d1a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d182:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d186:	3328      	adds	r3, #40	; 0x28
 800d188:	2102      	movs	r1, #2
 800d18a:	4618      	mov	r0, r3
 800d18c:	f002 fb14 	bl	800f7b8 <RCCEx_PLL3_Config>
 800d190:	4603      	mov	r3, r0
 800d192:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d196:	e004      	b.n	800d1a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d198:	2301      	movs	r3, #1
 800d19a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d19e:	e000      	b.n	800d1a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800d1a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d1a2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d10a      	bne.n	800d1c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800d1aa:	4b94      	ldr	r3, [pc, #592]	; (800d3fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800d1ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1ae:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800d1b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d1b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1b8:	4a90      	ldr	r2, [pc, #576]	; (800d3fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800d1ba:	430b      	orrs	r3, r1
 800d1bc:	6513      	str	r3, [r2, #80]	; 0x50
 800d1be:	e003      	b.n	800d1c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d1c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d1c4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800d1c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1d0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800d1d4:	f04f 0900 	mov.w	r9, #0
 800d1d8:	ea58 0309 	orrs.w	r3, r8, r9
 800d1dc:	d047      	beq.n	800d26e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800d1de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d1e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1e4:	2b04      	cmp	r3, #4
 800d1e6:	d82a      	bhi.n	800d23e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800d1e8:	a201      	add	r2, pc, #4	; (adr r2, 800d1f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800d1ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1ee:	bf00      	nop
 800d1f0:	0800d205 	.word	0x0800d205
 800d1f4:	0800d213 	.word	0x0800d213
 800d1f8:	0800d229 	.word	0x0800d229
 800d1fc:	0800d247 	.word	0x0800d247
 800d200:	0800d247 	.word	0x0800d247
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d204:	4b7d      	ldr	r3, [pc, #500]	; (800d3fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800d206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d208:	4a7c      	ldr	r2, [pc, #496]	; (800d3fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800d20a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d20e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d210:	e01a      	b.n	800d248 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d212:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d216:	3308      	adds	r3, #8
 800d218:	2100      	movs	r1, #0
 800d21a:	4618      	mov	r0, r3
 800d21c:	f002 fa1a 	bl	800f654 <RCCEx_PLL2_Config>
 800d220:	4603      	mov	r3, r0
 800d222:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d226:	e00f      	b.n	800d248 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d228:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d22c:	3328      	adds	r3, #40	; 0x28
 800d22e:	2100      	movs	r1, #0
 800d230:	4618      	mov	r0, r3
 800d232:	f002 fac1 	bl	800f7b8 <RCCEx_PLL3_Config>
 800d236:	4603      	mov	r3, r0
 800d238:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d23c:	e004      	b.n	800d248 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d23e:	2301      	movs	r3, #1
 800d240:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d244:	e000      	b.n	800d248 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800d246:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d248:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d10a      	bne.n	800d266 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d250:	4b6a      	ldr	r3, [pc, #424]	; (800d3fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800d252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d254:	f023 0107 	bic.w	r1, r3, #7
 800d258:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d25c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d25e:	4a67      	ldr	r2, [pc, #412]	; (800d3fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800d260:	430b      	orrs	r3, r1
 800d262:	6513      	str	r3, [r2, #80]	; 0x50
 800d264:	e003      	b.n	800d26e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d266:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d26a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800d26e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d272:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d276:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800d27a:	f04f 0b00 	mov.w	fp, #0
 800d27e:	ea5a 030b 	orrs.w	r3, sl, fp
 800d282:	d054      	beq.n	800d32e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800d284:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d28a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800d28e:	d036      	beq.n	800d2fe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800d290:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800d294:	d82f      	bhi.n	800d2f6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800d296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d29a:	d032      	beq.n	800d302 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800d29c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d2a0:	d829      	bhi.n	800d2f6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800d2a2:	2bc0      	cmp	r3, #192	; 0xc0
 800d2a4:	d02f      	beq.n	800d306 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800d2a6:	2bc0      	cmp	r3, #192	; 0xc0
 800d2a8:	d825      	bhi.n	800d2f6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800d2aa:	2b80      	cmp	r3, #128	; 0x80
 800d2ac:	d018      	beq.n	800d2e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800d2ae:	2b80      	cmp	r3, #128	; 0x80
 800d2b0:	d821      	bhi.n	800d2f6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d002      	beq.n	800d2bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800d2b6:	2b40      	cmp	r3, #64	; 0x40
 800d2b8:	d007      	beq.n	800d2ca <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800d2ba:	e01c      	b.n	800d2f6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d2bc:	4b4f      	ldr	r3, [pc, #316]	; (800d3fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800d2be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2c0:	4a4e      	ldr	r2, [pc, #312]	; (800d3fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800d2c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d2c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800d2c8:	e01e      	b.n	800d308 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d2ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d2ce:	3308      	adds	r3, #8
 800d2d0:	2100      	movs	r1, #0
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f002 f9be 	bl	800f654 <RCCEx_PLL2_Config>
 800d2d8:	4603      	mov	r3, r0
 800d2da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800d2de:	e013      	b.n	800d308 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d2e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d2e4:	3328      	adds	r3, #40	; 0x28
 800d2e6:	2100      	movs	r1, #0
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	f002 fa65 	bl	800f7b8 <RCCEx_PLL3_Config>
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800d2f4:	e008      	b.n	800d308 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d2f6:	2301      	movs	r3, #1
 800d2f8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d2fc:	e004      	b.n	800d308 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800d2fe:	bf00      	nop
 800d300:	e002      	b.n	800d308 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800d302:	bf00      	nop
 800d304:	e000      	b.n	800d308 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800d306:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d308:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d10a      	bne.n	800d326 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800d310:	4b3a      	ldr	r3, [pc, #232]	; (800d3fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800d312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d314:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800d318:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d31c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d31e:	4a37      	ldr	r2, [pc, #220]	; (800d3fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800d320:	430b      	orrs	r3, r1
 800d322:	6513      	str	r3, [r2, #80]	; 0x50
 800d324:	e003      	b.n	800d32e <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d326:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d32a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800d32e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d336:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800d33a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d33e:	2300      	movs	r3, #0
 800d340:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800d344:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800d348:	460b      	mov	r3, r1
 800d34a:	4313      	orrs	r3, r2
 800d34c:	d05c      	beq.n	800d408 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800d34e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d352:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d354:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800d358:	d03b      	beq.n	800d3d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800d35a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800d35e:	d834      	bhi.n	800d3ca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800d360:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d364:	d037      	beq.n	800d3d6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800d366:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d36a:	d82e      	bhi.n	800d3ca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800d36c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800d370:	d033      	beq.n	800d3da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800d372:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800d376:	d828      	bhi.n	800d3ca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800d378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d37c:	d01a      	beq.n	800d3b4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800d37e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d382:	d822      	bhi.n	800d3ca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800d384:	2b00      	cmp	r3, #0
 800d386:	d003      	beq.n	800d390 <HAL_RCCEx_PeriphCLKConfig+0x288>
 800d388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d38c:	d007      	beq.n	800d39e <HAL_RCCEx_PeriphCLKConfig+0x296>
 800d38e:	e01c      	b.n	800d3ca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d390:	4b1a      	ldr	r3, [pc, #104]	; (800d3fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800d392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d394:	4a19      	ldr	r2, [pc, #100]	; (800d3fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800d396:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d39a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800d39c:	e01e      	b.n	800d3dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d39e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d3a2:	3308      	adds	r3, #8
 800d3a4:	2100      	movs	r1, #0
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	f002 f954 	bl	800f654 <RCCEx_PLL2_Config>
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800d3b2:	e013      	b.n	800d3dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d3b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d3b8:	3328      	adds	r3, #40	; 0x28
 800d3ba:	2100      	movs	r1, #0
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f002 f9fb 	bl	800f7b8 <RCCEx_PLL3_Config>
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800d3c8:	e008      	b.n	800d3dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d3ca:	2301      	movs	r3, #1
 800d3cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d3d0:	e004      	b.n	800d3dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800d3d2:	bf00      	nop
 800d3d4:	e002      	b.n	800d3dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800d3d6:	bf00      	nop
 800d3d8:	e000      	b.n	800d3dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800d3da:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d3dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d10d      	bne.n	800d400 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800d3e4:	4b05      	ldr	r3, [pc, #20]	; (800d3fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800d3e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3e8:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 800d3ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d3f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d3f2:	4a02      	ldr	r2, [pc, #8]	; (800d3fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800d3f4:	430b      	orrs	r3, r1
 800d3f6:	6513      	str	r3, [r2, #80]	; 0x50
 800d3f8:	e006      	b.n	800d408 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800d3fa:	bf00      	nop
 800d3fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d400:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d404:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800d408:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d410:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800d414:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d418:	2300      	movs	r3, #0
 800d41a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d41e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800d422:	460b      	mov	r3, r1
 800d424:	4313      	orrs	r3, r2
 800d426:	d03a      	beq.n	800d49e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800d428:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d42c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d42e:	2b30      	cmp	r3, #48	; 0x30
 800d430:	d01f      	beq.n	800d472 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800d432:	2b30      	cmp	r3, #48	; 0x30
 800d434:	d819      	bhi.n	800d46a <HAL_RCCEx_PeriphCLKConfig+0x362>
 800d436:	2b20      	cmp	r3, #32
 800d438:	d00c      	beq.n	800d454 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800d43a:	2b20      	cmp	r3, #32
 800d43c:	d815      	bhi.n	800d46a <HAL_RCCEx_PeriphCLKConfig+0x362>
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d019      	beq.n	800d476 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800d442:	2b10      	cmp	r3, #16
 800d444:	d111      	bne.n	800d46a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d446:	4bae      	ldr	r3, [pc, #696]	; (800d700 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800d448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d44a:	4aad      	ldr	r2, [pc, #692]	; (800d700 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800d44c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d450:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800d452:	e011      	b.n	800d478 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d454:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d458:	3308      	adds	r3, #8
 800d45a:	2102      	movs	r1, #2
 800d45c:	4618      	mov	r0, r3
 800d45e:	f002 f8f9 	bl	800f654 <RCCEx_PLL2_Config>
 800d462:	4603      	mov	r3, r0
 800d464:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800d468:	e006      	b.n	800d478 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800d46a:	2301      	movs	r3, #1
 800d46c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d470:	e002      	b.n	800d478 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800d472:	bf00      	nop
 800d474:	e000      	b.n	800d478 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800d476:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d478:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d10a      	bne.n	800d496 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800d480:	4b9f      	ldr	r3, [pc, #636]	; (800d700 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800d482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d484:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800d488:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d48c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d48e:	4a9c      	ldr	r2, [pc, #624]	; (800d700 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800d490:	430b      	orrs	r3, r1
 800d492:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d494:	e003      	b.n	800d49e <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d496:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d49a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800d49e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4a6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800d4aa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d4b4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800d4b8:	460b      	mov	r3, r1
 800d4ba:	4313      	orrs	r3, r2
 800d4bc:	d051      	beq.n	800d562 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800d4be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d4c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d4c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d4c8:	d035      	beq.n	800d536 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800d4ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d4ce:	d82e      	bhi.n	800d52e <HAL_RCCEx_PeriphCLKConfig+0x426>
 800d4d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d4d4:	d031      	beq.n	800d53a <HAL_RCCEx_PeriphCLKConfig+0x432>
 800d4d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d4da:	d828      	bhi.n	800d52e <HAL_RCCEx_PeriphCLKConfig+0x426>
 800d4dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d4e0:	d01a      	beq.n	800d518 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800d4e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d4e6:	d822      	bhi.n	800d52e <HAL_RCCEx_PeriphCLKConfig+0x426>
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d003      	beq.n	800d4f4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800d4ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d4f0:	d007      	beq.n	800d502 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800d4f2:	e01c      	b.n	800d52e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d4f4:	4b82      	ldr	r3, [pc, #520]	; (800d700 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800d4f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4f8:	4a81      	ldr	r2, [pc, #516]	; (800d700 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800d4fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d4fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d500:	e01c      	b.n	800d53c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d502:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d506:	3308      	adds	r3, #8
 800d508:	2100      	movs	r1, #0
 800d50a:	4618      	mov	r0, r3
 800d50c:	f002 f8a2 	bl	800f654 <RCCEx_PLL2_Config>
 800d510:	4603      	mov	r3, r0
 800d512:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d516:	e011      	b.n	800d53c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d518:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d51c:	3328      	adds	r3, #40	; 0x28
 800d51e:	2100      	movs	r1, #0
 800d520:	4618      	mov	r0, r3
 800d522:	f002 f949 	bl	800f7b8 <RCCEx_PLL3_Config>
 800d526:	4603      	mov	r3, r0
 800d528:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d52c:	e006      	b.n	800d53c <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d52e:	2301      	movs	r3, #1
 800d530:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d534:	e002      	b.n	800d53c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800d536:	bf00      	nop
 800d538:	e000      	b.n	800d53c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800d53a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d53c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d540:	2b00      	cmp	r3, #0
 800d542:	d10a      	bne.n	800d55a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800d544:	4b6e      	ldr	r3, [pc, #440]	; (800d700 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800d546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d548:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800d54c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d550:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d552:	4a6b      	ldr	r2, [pc, #428]	; (800d700 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800d554:	430b      	orrs	r3, r1
 800d556:	6513      	str	r3, [r2, #80]	; 0x50
 800d558:	e003      	b.n	800d562 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d55a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d55e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800d562:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d56a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800d56e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d572:	2300      	movs	r3, #0
 800d574:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d578:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800d57c:	460b      	mov	r3, r1
 800d57e:	4313      	orrs	r3, r2
 800d580:	d053      	beq.n	800d62a <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800d582:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d586:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d588:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d58c:	d033      	beq.n	800d5f6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800d58e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d592:	d82c      	bhi.n	800d5ee <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800d594:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d598:	d02f      	beq.n	800d5fa <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800d59a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d59e:	d826      	bhi.n	800d5ee <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800d5a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d5a4:	d02b      	beq.n	800d5fe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800d5a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d5aa:	d820      	bhi.n	800d5ee <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800d5ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d5b0:	d012      	beq.n	800d5d8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800d5b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d5b6:	d81a      	bhi.n	800d5ee <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d022      	beq.n	800d602 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800d5bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d5c0:	d115      	bne.n	800d5ee <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d5c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d5c6:	3308      	adds	r3, #8
 800d5c8:	2101      	movs	r1, #1
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	f002 f842 	bl	800f654 <RCCEx_PLL2_Config>
 800d5d0:	4603      	mov	r3, r0
 800d5d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800d5d6:	e015      	b.n	800d604 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d5d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d5dc:	3328      	adds	r3, #40	; 0x28
 800d5de:	2101      	movs	r1, #1
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f002 f8e9 	bl	800f7b8 <RCCEx_PLL3_Config>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800d5ec:	e00a      	b.n	800d604 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d5ee:	2301      	movs	r3, #1
 800d5f0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d5f4:	e006      	b.n	800d604 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800d5f6:	bf00      	nop
 800d5f8:	e004      	b.n	800d604 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800d5fa:	bf00      	nop
 800d5fc:	e002      	b.n	800d604 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800d5fe:	bf00      	nop
 800d600:	e000      	b.n	800d604 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800d602:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d604:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d10a      	bne.n	800d622 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800d60c:	4b3c      	ldr	r3, [pc, #240]	; (800d700 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800d60e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d610:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800d614:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d618:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d61a:	4a39      	ldr	r2, [pc, #228]	; (800d700 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800d61c:	430b      	orrs	r3, r1
 800d61e:	6513      	str	r3, [r2, #80]	; 0x50
 800d620:	e003      	b.n	800d62a <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d622:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d626:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800d62a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d632:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800d636:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d63a:	2300      	movs	r3, #0
 800d63c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d640:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800d644:	460b      	mov	r3, r1
 800d646:	4313      	orrs	r3, r2
 800d648:	d060      	beq.n	800d70c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800d64a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d64e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d652:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800d656:	d039      	beq.n	800d6cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800d658:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800d65c:	d832      	bhi.n	800d6c4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800d65e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d662:	d035      	beq.n	800d6d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800d664:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d668:	d82c      	bhi.n	800d6c4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800d66a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d66e:	d031      	beq.n	800d6d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800d670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d674:	d826      	bhi.n	800d6c4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800d676:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d67a:	d02d      	beq.n	800d6d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800d67c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d680:	d820      	bhi.n	800d6c4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800d682:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d686:	d012      	beq.n	800d6ae <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800d688:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d68c:	d81a      	bhi.n	800d6c4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d024      	beq.n	800d6dc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800d692:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d696:	d115      	bne.n	800d6c4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d698:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d69c:	3308      	adds	r3, #8
 800d69e:	2101      	movs	r1, #1
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	f001 ffd7 	bl	800f654 <RCCEx_PLL2_Config>
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800d6ac:	e017      	b.n	800d6de <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d6ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d6b2:	3328      	adds	r3, #40	; 0x28
 800d6b4:	2101      	movs	r1, #1
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	f002 f87e 	bl	800f7b8 <RCCEx_PLL3_Config>
 800d6bc:	4603      	mov	r3, r0
 800d6be:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800d6c2:	e00c      	b.n	800d6de <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800d6c4:	2301      	movs	r3, #1
 800d6c6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d6ca:	e008      	b.n	800d6de <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800d6cc:	bf00      	nop
 800d6ce:	e006      	b.n	800d6de <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800d6d0:	bf00      	nop
 800d6d2:	e004      	b.n	800d6de <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800d6d4:	bf00      	nop
 800d6d6:	e002      	b.n	800d6de <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800d6d8:	bf00      	nop
 800d6da:	e000      	b.n	800d6de <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800d6dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d6de:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d10e      	bne.n	800d704 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800d6e6:	4b06      	ldr	r3, [pc, #24]	; (800d700 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800d6e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d6ea:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800d6ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d6f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d6f6:	4a02      	ldr	r2, [pc, #8]	; (800d700 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800d6f8:	430b      	orrs	r3, r1
 800d6fa:	6593      	str	r3, [r2, #88]	; 0x58
 800d6fc:	e006      	b.n	800d70c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800d6fe:	bf00      	nop
 800d700:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d704:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d708:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d70c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d714:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800d718:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d71c:	2300      	movs	r3, #0
 800d71e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d722:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800d726:	460b      	mov	r3, r1
 800d728:	4313      	orrs	r3, r2
 800d72a:	d037      	beq.n	800d79c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800d72c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d730:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d732:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d736:	d00e      	beq.n	800d756 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800d738:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d73c:	d816      	bhi.n	800d76c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d018      	beq.n	800d774 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800d742:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d746:	d111      	bne.n	800d76c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d748:	4bc4      	ldr	r3, [pc, #784]	; (800da5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d74a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d74c:	4ac3      	ldr	r2, [pc, #780]	; (800da5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d74e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d752:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800d754:	e00f      	b.n	800d776 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d756:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d75a:	3308      	adds	r3, #8
 800d75c:	2101      	movs	r1, #1
 800d75e:	4618      	mov	r0, r3
 800d760:	f001 ff78 	bl	800f654 <RCCEx_PLL2_Config>
 800d764:	4603      	mov	r3, r0
 800d766:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800d76a:	e004      	b.n	800d776 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d76c:	2301      	movs	r3, #1
 800d76e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d772:	e000      	b.n	800d776 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800d774:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d776:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d10a      	bne.n	800d794 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d77e:	4bb7      	ldr	r3, [pc, #732]	; (800da5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d782:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800d786:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d78a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d78c:	4ab3      	ldr	r2, [pc, #716]	; (800da5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d78e:	430b      	orrs	r3, r1
 800d790:	6513      	str	r3, [r2, #80]	; 0x50
 800d792:	e003      	b.n	800d79c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d794:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d798:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800d79c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7a4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800d7a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d7b2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800d7b6:	460b      	mov	r3, r1
 800d7b8:	4313      	orrs	r3, r2
 800d7ba:	d039      	beq.n	800d830 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800d7bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d7c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d7c2:	2b03      	cmp	r3, #3
 800d7c4:	d81c      	bhi.n	800d800 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800d7c6:	a201      	add	r2, pc, #4	; (adr r2, 800d7cc <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800d7c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7cc:	0800d809 	.word	0x0800d809
 800d7d0:	0800d7dd 	.word	0x0800d7dd
 800d7d4:	0800d7eb 	.word	0x0800d7eb
 800d7d8:	0800d809 	.word	0x0800d809
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d7dc:	4b9f      	ldr	r3, [pc, #636]	; (800da5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d7de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7e0:	4a9e      	ldr	r2, [pc, #632]	; (800da5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d7e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d7e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800d7e8:	e00f      	b.n	800d80a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d7ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d7ee:	3308      	adds	r3, #8
 800d7f0:	2102      	movs	r1, #2
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	f001 ff2e 	bl	800f654 <RCCEx_PLL2_Config>
 800d7f8:	4603      	mov	r3, r0
 800d7fa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800d7fe:	e004      	b.n	800d80a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800d800:	2301      	movs	r3, #1
 800d802:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d806:	e000      	b.n	800d80a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800d808:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d80a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d10a      	bne.n	800d828 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800d812:	4b92      	ldr	r3, [pc, #584]	; (800da5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d816:	f023 0103 	bic.w	r1, r3, #3
 800d81a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d81e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d820:	4a8e      	ldr	r2, [pc, #568]	; (800da5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d822:	430b      	orrs	r3, r1
 800d824:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d826:	e003      	b.n	800d830 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d828:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d82c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d830:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d838:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800d83c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d840:	2300      	movs	r3, #0
 800d842:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d846:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800d84a:	460b      	mov	r3, r1
 800d84c:	4313      	orrs	r3, r2
 800d84e:	f000 8099 	beq.w	800d984 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d852:	4b83      	ldr	r3, [pc, #524]	; (800da60 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	4a82      	ldr	r2, [pc, #520]	; (800da60 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800d858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d85c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d85e:	f7fb fa35 	bl	8008ccc <HAL_GetTick>
 800d862:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d866:	e00b      	b.n	800d880 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d868:	f7fb fa30 	bl	8008ccc <HAL_GetTick>
 800d86c:	4602      	mov	r2, r0
 800d86e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800d872:	1ad3      	subs	r3, r2, r3
 800d874:	2b64      	cmp	r3, #100	; 0x64
 800d876:	d903      	bls.n	800d880 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800d878:	2303      	movs	r3, #3
 800d87a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d87e:	e005      	b.n	800d88c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d880:	4b77      	ldr	r3, [pc, #476]	; (800da60 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d0ed      	beq.n	800d868 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800d88c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d890:	2b00      	cmp	r3, #0
 800d892:	d173      	bne.n	800d97c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800d894:	4b71      	ldr	r3, [pc, #452]	; (800da5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d896:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d898:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d89c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d8a0:	4053      	eors	r3, r2
 800d8a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d015      	beq.n	800d8d6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d8aa:	4b6c      	ldr	r3, [pc, #432]	; (800da5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d8ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d8b2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d8b6:	4b69      	ldr	r3, [pc, #420]	; (800da5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d8b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8ba:	4a68      	ldr	r2, [pc, #416]	; (800da5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d8bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d8c0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d8c2:	4b66      	ldr	r3, [pc, #408]	; (800da5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d8c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8c6:	4a65      	ldr	r2, [pc, #404]	; (800da5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d8c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d8cc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800d8ce:	4a63      	ldr	r2, [pc, #396]	; (800da5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d8d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d8d4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800d8d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d8da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d8de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d8e2:	d118      	bne.n	800d916 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d8e4:	f7fb f9f2 	bl	8008ccc <HAL_GetTick>
 800d8e8:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d8ec:	e00d      	b.n	800d90a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d8ee:	f7fb f9ed 	bl	8008ccc <HAL_GetTick>
 800d8f2:	4602      	mov	r2, r0
 800d8f4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800d8f8:	1ad2      	subs	r2, r2, r3
 800d8fa:	f241 3388 	movw	r3, #5000	; 0x1388
 800d8fe:	429a      	cmp	r2, r3
 800d900:	d903      	bls.n	800d90a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800d902:	2303      	movs	r3, #3
 800d904:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 800d908:	e005      	b.n	800d916 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d90a:	4b54      	ldr	r3, [pc, #336]	; (800da5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d90c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d90e:	f003 0302 	and.w	r3, r3, #2
 800d912:	2b00      	cmp	r3, #0
 800d914:	d0eb      	beq.n	800d8ee <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800d916:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d129      	bne.n	800d972 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d91e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d922:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d92a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d92e:	d10e      	bne.n	800d94e <HAL_RCCEx_PeriphCLKConfig+0x846>
 800d930:	4b4a      	ldr	r3, [pc, #296]	; (800da5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d932:	691b      	ldr	r3, [r3, #16]
 800d934:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800d938:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d93c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d940:	091a      	lsrs	r2, r3, #4
 800d942:	4b48      	ldr	r3, [pc, #288]	; (800da64 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800d944:	4013      	ands	r3, r2
 800d946:	4a45      	ldr	r2, [pc, #276]	; (800da5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d948:	430b      	orrs	r3, r1
 800d94a:	6113      	str	r3, [r2, #16]
 800d94c:	e005      	b.n	800d95a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800d94e:	4b43      	ldr	r3, [pc, #268]	; (800da5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d950:	691b      	ldr	r3, [r3, #16]
 800d952:	4a42      	ldr	r2, [pc, #264]	; (800da5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d954:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d958:	6113      	str	r3, [r2, #16]
 800d95a:	4b40      	ldr	r3, [pc, #256]	; (800da5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d95c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800d95e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d962:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d966:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d96a:	4a3c      	ldr	r2, [pc, #240]	; (800da5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d96c:	430b      	orrs	r3, r1
 800d96e:	6713      	str	r3, [r2, #112]	; 0x70
 800d970:	e008      	b.n	800d984 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d972:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d976:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800d97a:	e003      	b.n	800d984 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d97c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d980:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800d984:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d98c:	f002 0301 	and.w	r3, r2, #1
 800d990:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d994:	2300      	movs	r3, #0
 800d996:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d99a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800d99e:	460b      	mov	r3, r1
 800d9a0:	4313      	orrs	r3, r2
 800d9a2:	f000 8090 	beq.w	800dac6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800d9a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d9aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d9ae:	2b28      	cmp	r3, #40	; 0x28
 800d9b0:	d870      	bhi.n	800da94 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800d9b2:	a201      	add	r2, pc, #4	; (adr r2, 800d9b8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800d9b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9b8:	0800da9d 	.word	0x0800da9d
 800d9bc:	0800da95 	.word	0x0800da95
 800d9c0:	0800da95 	.word	0x0800da95
 800d9c4:	0800da95 	.word	0x0800da95
 800d9c8:	0800da95 	.word	0x0800da95
 800d9cc:	0800da95 	.word	0x0800da95
 800d9d0:	0800da95 	.word	0x0800da95
 800d9d4:	0800da95 	.word	0x0800da95
 800d9d8:	0800da69 	.word	0x0800da69
 800d9dc:	0800da95 	.word	0x0800da95
 800d9e0:	0800da95 	.word	0x0800da95
 800d9e4:	0800da95 	.word	0x0800da95
 800d9e8:	0800da95 	.word	0x0800da95
 800d9ec:	0800da95 	.word	0x0800da95
 800d9f0:	0800da95 	.word	0x0800da95
 800d9f4:	0800da95 	.word	0x0800da95
 800d9f8:	0800da7f 	.word	0x0800da7f
 800d9fc:	0800da95 	.word	0x0800da95
 800da00:	0800da95 	.word	0x0800da95
 800da04:	0800da95 	.word	0x0800da95
 800da08:	0800da95 	.word	0x0800da95
 800da0c:	0800da95 	.word	0x0800da95
 800da10:	0800da95 	.word	0x0800da95
 800da14:	0800da95 	.word	0x0800da95
 800da18:	0800da9d 	.word	0x0800da9d
 800da1c:	0800da95 	.word	0x0800da95
 800da20:	0800da95 	.word	0x0800da95
 800da24:	0800da95 	.word	0x0800da95
 800da28:	0800da95 	.word	0x0800da95
 800da2c:	0800da95 	.word	0x0800da95
 800da30:	0800da95 	.word	0x0800da95
 800da34:	0800da95 	.word	0x0800da95
 800da38:	0800da9d 	.word	0x0800da9d
 800da3c:	0800da95 	.word	0x0800da95
 800da40:	0800da95 	.word	0x0800da95
 800da44:	0800da95 	.word	0x0800da95
 800da48:	0800da95 	.word	0x0800da95
 800da4c:	0800da95 	.word	0x0800da95
 800da50:	0800da95 	.word	0x0800da95
 800da54:	0800da95 	.word	0x0800da95
 800da58:	0800da9d 	.word	0x0800da9d
 800da5c:	58024400 	.word	0x58024400
 800da60:	58024800 	.word	0x58024800
 800da64:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800da68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800da6c:	3308      	adds	r3, #8
 800da6e:	2101      	movs	r1, #1
 800da70:	4618      	mov	r0, r3
 800da72:	f001 fdef 	bl	800f654 <RCCEx_PLL2_Config>
 800da76:	4603      	mov	r3, r0
 800da78:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800da7c:	e00f      	b.n	800da9e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800da7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800da82:	3328      	adds	r3, #40	; 0x28
 800da84:	2101      	movs	r1, #1
 800da86:	4618      	mov	r0, r3
 800da88:	f001 fe96 	bl	800f7b8 <RCCEx_PLL3_Config>
 800da8c:	4603      	mov	r3, r0
 800da8e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800da92:	e004      	b.n	800da9e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800da94:	2301      	movs	r3, #1
 800da96:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800da9a:	e000      	b.n	800da9e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800da9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800da9e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d10b      	bne.n	800dabe <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800daa6:	4bc0      	ldr	r3, [pc, #768]	; (800dda8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800daa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800daaa:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800daae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dab2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dab6:	4abc      	ldr	r2, [pc, #752]	; (800dda8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dab8:	430b      	orrs	r3, r1
 800daba:	6553      	str	r3, [r2, #84]	; 0x54
 800dabc:	e003      	b.n	800dac6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dabe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800dac2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800dac6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800daca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dace:	f002 0302 	and.w	r3, r2, #2
 800dad2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800dad6:	2300      	movs	r3, #0
 800dad8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800dadc:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800dae0:	460b      	mov	r3, r1
 800dae2:	4313      	orrs	r3, r2
 800dae4:	d043      	beq.n	800db6e <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800dae6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800daea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800daee:	2b05      	cmp	r3, #5
 800daf0:	d824      	bhi.n	800db3c <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800daf2:	a201      	add	r2, pc, #4	; (adr r2, 800daf8 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800daf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daf8:	0800db45 	.word	0x0800db45
 800dafc:	0800db11 	.word	0x0800db11
 800db00:	0800db27 	.word	0x0800db27
 800db04:	0800db45 	.word	0x0800db45
 800db08:	0800db45 	.word	0x0800db45
 800db0c:	0800db45 	.word	0x0800db45
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800db10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db14:	3308      	adds	r3, #8
 800db16:	2101      	movs	r1, #1
 800db18:	4618      	mov	r0, r3
 800db1a:	f001 fd9b 	bl	800f654 <RCCEx_PLL2_Config>
 800db1e:	4603      	mov	r3, r0
 800db20:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800db24:	e00f      	b.n	800db46 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800db26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db2a:	3328      	adds	r3, #40	; 0x28
 800db2c:	2101      	movs	r1, #1
 800db2e:	4618      	mov	r0, r3
 800db30:	f001 fe42 	bl	800f7b8 <RCCEx_PLL3_Config>
 800db34:	4603      	mov	r3, r0
 800db36:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800db3a:	e004      	b.n	800db46 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800db3c:	2301      	movs	r3, #1
 800db3e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800db42:	e000      	b.n	800db46 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800db44:	bf00      	nop
    }

    if (ret == HAL_OK)
 800db46:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d10b      	bne.n	800db66 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800db4e:	4b96      	ldr	r3, [pc, #600]	; (800dda8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800db50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db52:	f023 0107 	bic.w	r1, r3, #7
 800db56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db5e:	4a92      	ldr	r2, [pc, #584]	; (800dda8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800db60:	430b      	orrs	r3, r1
 800db62:	6553      	str	r3, [r2, #84]	; 0x54
 800db64:	e003      	b.n	800db6e <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800db66:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800db6a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800db6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db76:	f002 0304 	and.w	r3, r2, #4
 800db7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800db7e:	2300      	movs	r3, #0
 800db80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800db84:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800db88:	460b      	mov	r3, r1
 800db8a:	4313      	orrs	r3, r2
 800db8c:	d043      	beq.n	800dc16 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800db8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800db96:	2b05      	cmp	r3, #5
 800db98:	d824      	bhi.n	800dbe4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800db9a:	a201      	add	r2, pc, #4	; (adr r2, 800dba0 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800db9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dba0:	0800dbed 	.word	0x0800dbed
 800dba4:	0800dbb9 	.word	0x0800dbb9
 800dba8:	0800dbcf 	.word	0x0800dbcf
 800dbac:	0800dbed 	.word	0x0800dbed
 800dbb0:	0800dbed 	.word	0x0800dbed
 800dbb4:	0800dbed 	.word	0x0800dbed
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800dbb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dbbc:	3308      	adds	r3, #8
 800dbbe:	2101      	movs	r1, #1
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	f001 fd47 	bl	800f654 <RCCEx_PLL2_Config>
 800dbc6:	4603      	mov	r3, r0
 800dbc8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800dbcc:	e00f      	b.n	800dbee <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800dbce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dbd2:	3328      	adds	r3, #40	; 0x28
 800dbd4:	2101      	movs	r1, #1
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	f001 fdee 	bl	800f7b8 <RCCEx_PLL3_Config>
 800dbdc:	4603      	mov	r3, r0
 800dbde:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800dbe2:	e004      	b.n	800dbee <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dbe4:	2301      	movs	r3, #1
 800dbe6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800dbea:	e000      	b.n	800dbee <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800dbec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dbee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d10b      	bne.n	800dc0e <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800dbf6:	4b6c      	ldr	r3, [pc, #432]	; (800dda8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dbf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbfa:	f023 0107 	bic.w	r1, r3, #7
 800dbfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dc02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800dc06:	4a68      	ldr	r2, [pc, #416]	; (800dda8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dc08:	430b      	orrs	r3, r1
 800dc0a:	6593      	str	r3, [r2, #88]	; 0x58
 800dc0c:	e003      	b.n	800dc16 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc0e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800dc12:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800dc16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dc1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc1e:	f002 0320 	and.w	r3, r2, #32
 800dc22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800dc26:	2300      	movs	r3, #0
 800dc28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800dc2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800dc30:	460b      	mov	r3, r1
 800dc32:	4313      	orrs	r3, r2
 800dc34:	d055      	beq.n	800dce2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800dc36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dc3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800dc3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800dc42:	d033      	beq.n	800dcac <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800dc44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800dc48:	d82c      	bhi.n	800dca4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800dc4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dc4e:	d02f      	beq.n	800dcb0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800dc50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dc54:	d826      	bhi.n	800dca4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800dc56:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800dc5a:	d02b      	beq.n	800dcb4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800dc5c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800dc60:	d820      	bhi.n	800dca4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800dc62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dc66:	d012      	beq.n	800dc8e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800dc68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dc6c:	d81a      	bhi.n	800dca4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d022      	beq.n	800dcb8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800dc72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dc76:	d115      	bne.n	800dca4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dc78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dc7c:	3308      	adds	r3, #8
 800dc7e:	2100      	movs	r1, #0
 800dc80:	4618      	mov	r0, r3
 800dc82:	f001 fce7 	bl	800f654 <RCCEx_PLL2_Config>
 800dc86:	4603      	mov	r3, r0
 800dc88:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800dc8c:	e015      	b.n	800dcba <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800dc8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dc92:	3328      	adds	r3, #40	; 0x28
 800dc94:	2102      	movs	r1, #2
 800dc96:	4618      	mov	r0, r3
 800dc98:	f001 fd8e 	bl	800f7b8 <RCCEx_PLL3_Config>
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800dca2:	e00a      	b.n	800dcba <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dca4:	2301      	movs	r3, #1
 800dca6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800dcaa:	e006      	b.n	800dcba <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800dcac:	bf00      	nop
 800dcae:	e004      	b.n	800dcba <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800dcb0:	bf00      	nop
 800dcb2:	e002      	b.n	800dcba <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800dcb4:	bf00      	nop
 800dcb6:	e000      	b.n	800dcba <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800dcb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dcba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d10b      	bne.n	800dcda <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800dcc2:	4b39      	ldr	r3, [pc, #228]	; (800dda8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dcc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dcc6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800dcca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dcce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800dcd2:	4a35      	ldr	r2, [pc, #212]	; (800dda8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dcd4:	430b      	orrs	r3, r1
 800dcd6:	6553      	str	r3, [r2, #84]	; 0x54
 800dcd8:	e003      	b.n	800dce2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dcda:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800dcde:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800dce2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcea:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800dcee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800dcf8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800dcfc:	460b      	mov	r3, r1
 800dcfe:	4313      	orrs	r3, r2
 800dd00:	d058      	beq.n	800ddb4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800dd02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dd06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800dd0a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800dd0e:	d033      	beq.n	800dd78 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800dd10:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800dd14:	d82c      	bhi.n	800dd70 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800dd16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dd1a:	d02f      	beq.n	800dd7c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800dd1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dd20:	d826      	bhi.n	800dd70 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800dd22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800dd26:	d02b      	beq.n	800dd80 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800dd28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800dd2c:	d820      	bhi.n	800dd70 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800dd2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dd32:	d012      	beq.n	800dd5a <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800dd34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dd38:	d81a      	bhi.n	800dd70 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d022      	beq.n	800dd84 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800dd3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dd42:	d115      	bne.n	800dd70 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dd44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dd48:	3308      	adds	r3, #8
 800dd4a:	2100      	movs	r1, #0
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	f001 fc81 	bl	800f654 <RCCEx_PLL2_Config>
 800dd52:	4603      	mov	r3, r0
 800dd54:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800dd58:	e015      	b.n	800dd86 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800dd5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dd5e:	3328      	adds	r3, #40	; 0x28
 800dd60:	2102      	movs	r1, #2
 800dd62:	4618      	mov	r0, r3
 800dd64:	f001 fd28 	bl	800f7b8 <RCCEx_PLL3_Config>
 800dd68:	4603      	mov	r3, r0
 800dd6a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800dd6e:	e00a      	b.n	800dd86 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dd70:	2301      	movs	r3, #1
 800dd72:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800dd76:	e006      	b.n	800dd86 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800dd78:	bf00      	nop
 800dd7a:	e004      	b.n	800dd86 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800dd7c:	bf00      	nop
 800dd7e:	e002      	b.n	800dd86 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800dd80:	bf00      	nop
 800dd82:	e000      	b.n	800dd86 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800dd84:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dd86:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d10e      	bne.n	800ddac <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800dd8e:	4b06      	ldr	r3, [pc, #24]	; (800dda8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dd90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd92:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800dd96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dd9a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800dd9e:	4a02      	ldr	r2, [pc, #8]	; (800dda8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dda0:	430b      	orrs	r3, r1
 800dda2:	6593      	str	r3, [r2, #88]	; 0x58
 800dda4:	e006      	b.n	800ddb4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800dda6:	bf00      	nop
 800dda8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ddac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ddb0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ddb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ddb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddbc:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800ddc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ddca:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800ddce:	460b      	mov	r3, r1
 800ddd0:	4313      	orrs	r3, r2
 800ddd2:	d055      	beq.n	800de80 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800ddd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ddd8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800dddc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800dde0:	d033      	beq.n	800de4a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800dde2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800dde6:	d82c      	bhi.n	800de42 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800dde8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ddec:	d02f      	beq.n	800de4e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800ddee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ddf2:	d826      	bhi.n	800de42 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800ddf4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ddf8:	d02b      	beq.n	800de52 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800ddfa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ddfe:	d820      	bhi.n	800de42 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800de00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800de04:	d012      	beq.n	800de2c <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800de06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800de0a:	d81a      	bhi.n	800de42 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d022      	beq.n	800de56 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800de10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800de14:	d115      	bne.n	800de42 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800de16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800de1a:	3308      	adds	r3, #8
 800de1c:	2100      	movs	r1, #0
 800de1e:	4618      	mov	r0, r3
 800de20:	f001 fc18 	bl	800f654 <RCCEx_PLL2_Config>
 800de24:	4603      	mov	r3, r0
 800de26:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800de2a:	e015      	b.n	800de58 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800de2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800de30:	3328      	adds	r3, #40	; 0x28
 800de32:	2102      	movs	r1, #2
 800de34:	4618      	mov	r0, r3
 800de36:	f001 fcbf 	bl	800f7b8 <RCCEx_PLL3_Config>
 800de3a:	4603      	mov	r3, r0
 800de3c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800de40:	e00a      	b.n	800de58 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800de42:	2301      	movs	r3, #1
 800de44:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800de48:	e006      	b.n	800de58 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800de4a:	bf00      	nop
 800de4c:	e004      	b.n	800de58 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800de4e:	bf00      	nop
 800de50:	e002      	b.n	800de58 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800de52:	bf00      	nop
 800de54:	e000      	b.n	800de58 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800de56:	bf00      	nop
    }

    if (ret == HAL_OK)
 800de58:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d10b      	bne.n	800de78 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800de60:	4ba1      	ldr	r3, [pc, #644]	; (800e0e8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800de62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de64:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800de68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800de6c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800de70:	4a9d      	ldr	r2, [pc, #628]	; (800e0e8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800de72:	430b      	orrs	r3, r1
 800de74:	6593      	str	r3, [r2, #88]	; 0x58
 800de76:	e003      	b.n	800de80 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800de78:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800de7c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800de80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800de84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de88:	f002 0308 	and.w	r3, r2, #8
 800de8c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800de90:	2300      	movs	r3, #0
 800de92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800de96:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800de9a:	460b      	mov	r3, r1
 800de9c:	4313      	orrs	r3, r2
 800de9e:	d01e      	beq.n	800dede <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800dea0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dea4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dea8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800deac:	d10c      	bne.n	800dec8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800deae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800deb2:	3328      	adds	r3, #40	; 0x28
 800deb4:	2102      	movs	r1, #2
 800deb6:	4618      	mov	r0, r3
 800deb8:	f001 fc7e 	bl	800f7b8 <RCCEx_PLL3_Config>
 800debc:	4603      	mov	r3, r0
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d002      	beq.n	800dec8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800dec2:	2301      	movs	r3, #1
 800dec4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800dec8:	4b87      	ldr	r3, [pc, #540]	; (800e0e8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800deca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800decc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ded0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ded4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ded8:	4a83      	ldr	r2, [pc, #524]	; (800e0e8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800deda:	430b      	orrs	r3, r1
 800dedc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800dede:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee6:	f002 0310 	and.w	r3, r2, #16
 800deea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800deee:	2300      	movs	r3, #0
 800def0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800def4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800def8:	460b      	mov	r3, r1
 800defa:	4313      	orrs	r3, r2
 800defc:	d01e      	beq.n	800df3c <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800defe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800df02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800df06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800df0a:	d10c      	bne.n	800df26 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800df0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800df10:	3328      	adds	r3, #40	; 0x28
 800df12:	2102      	movs	r1, #2
 800df14:	4618      	mov	r0, r3
 800df16:	f001 fc4f 	bl	800f7b8 <RCCEx_PLL3_Config>
 800df1a:	4603      	mov	r3, r0
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d002      	beq.n	800df26 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800df20:	2301      	movs	r3, #1
 800df22:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800df26:	4b70      	ldr	r3, [pc, #448]	; (800e0e8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800df28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df2a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800df2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800df32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800df36:	4a6c      	ldr	r2, [pc, #432]	; (800e0e8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800df38:	430b      	orrs	r3, r1
 800df3a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800df3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800df40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df44:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800df48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800df4c:	2300      	movs	r3, #0
 800df4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800df52:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800df56:	460b      	mov	r3, r1
 800df58:	4313      	orrs	r3, r2
 800df5a:	d03e      	beq.n	800dfda <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800df5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800df60:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800df64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800df68:	d022      	beq.n	800dfb0 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800df6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800df6e:	d81b      	bhi.n	800dfa8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800df70:	2b00      	cmp	r3, #0
 800df72:	d003      	beq.n	800df7c <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800df74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800df78:	d00b      	beq.n	800df92 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800df7a:	e015      	b.n	800dfa8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800df7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800df80:	3308      	adds	r3, #8
 800df82:	2100      	movs	r1, #0
 800df84:	4618      	mov	r0, r3
 800df86:	f001 fb65 	bl	800f654 <RCCEx_PLL2_Config>
 800df8a:	4603      	mov	r3, r0
 800df8c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800df90:	e00f      	b.n	800dfb2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800df92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800df96:	3328      	adds	r3, #40	; 0x28
 800df98:	2102      	movs	r1, #2
 800df9a:	4618      	mov	r0, r3
 800df9c:	f001 fc0c 	bl	800f7b8 <RCCEx_PLL3_Config>
 800dfa0:	4603      	mov	r3, r0
 800dfa2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800dfa6:	e004      	b.n	800dfb2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dfa8:	2301      	movs	r3, #1
 800dfaa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800dfae:	e000      	b.n	800dfb2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800dfb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dfb2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d10b      	bne.n	800dfd2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800dfba:	4b4b      	ldr	r3, [pc, #300]	; (800e0e8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800dfbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dfbe:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800dfc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dfc6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800dfca:	4a47      	ldr	r2, [pc, #284]	; (800e0e8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800dfcc:	430b      	orrs	r3, r1
 800dfce:	6593      	str	r3, [r2, #88]	; 0x58
 800dfd0:	e003      	b.n	800dfda <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dfd2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800dfd6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800dfda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dfde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfe2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800dfe6:	67bb      	str	r3, [r7, #120]	; 0x78
 800dfe8:	2300      	movs	r3, #0
 800dfea:	67fb      	str	r3, [r7, #124]	; 0x7c
 800dfec:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800dff0:	460b      	mov	r3, r1
 800dff2:	4313      	orrs	r3, r2
 800dff4:	d03b      	beq.n	800e06e <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800dff6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dffe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e002:	d01f      	beq.n	800e044 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800e004:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e008:	d818      	bhi.n	800e03c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800e00a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e00e:	d003      	beq.n	800e018 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800e010:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e014:	d007      	beq.n	800e026 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800e016:	e011      	b.n	800e03c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e018:	4b33      	ldr	r3, [pc, #204]	; (800e0e8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800e01a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e01c:	4a32      	ldr	r2, [pc, #200]	; (800e0e8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800e01e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e022:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800e024:	e00f      	b.n	800e046 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e026:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e02a:	3328      	adds	r3, #40	; 0x28
 800e02c:	2101      	movs	r1, #1
 800e02e:	4618      	mov	r0, r3
 800e030:	f001 fbc2 	bl	800f7b8 <RCCEx_PLL3_Config>
 800e034:	4603      	mov	r3, r0
 800e036:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800e03a:	e004      	b.n	800e046 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e03c:	2301      	movs	r3, #1
 800e03e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800e042:	e000      	b.n	800e046 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800e044:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e046:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d10b      	bne.n	800e066 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e04e:	4b26      	ldr	r3, [pc, #152]	; (800e0e8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800e050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e052:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800e056:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e05a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e05e:	4a22      	ldr	r2, [pc, #136]	; (800e0e8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800e060:	430b      	orrs	r3, r1
 800e062:	6553      	str	r3, [r2, #84]	; 0x54
 800e064:	e003      	b.n	800e06e <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e066:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e06a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800e06e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e076:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800e07a:	673b      	str	r3, [r7, #112]	; 0x70
 800e07c:	2300      	movs	r3, #0
 800e07e:	677b      	str	r3, [r7, #116]	; 0x74
 800e080:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800e084:	460b      	mov	r3, r1
 800e086:	4313      	orrs	r3, r2
 800e088:	d034      	beq.n	800e0f4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800e08a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e08e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e090:	2b00      	cmp	r3, #0
 800e092:	d003      	beq.n	800e09c <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800e094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e098:	d007      	beq.n	800e0aa <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800e09a:	e011      	b.n	800e0c0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e09c:	4b12      	ldr	r3, [pc, #72]	; (800e0e8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800e09e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0a0:	4a11      	ldr	r2, [pc, #68]	; (800e0e8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800e0a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e0a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800e0a8:	e00e      	b.n	800e0c8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e0aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e0ae:	3308      	adds	r3, #8
 800e0b0:	2102      	movs	r1, #2
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	f001 face 	bl	800f654 <RCCEx_PLL2_Config>
 800e0b8:	4603      	mov	r3, r0
 800e0ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800e0be:	e003      	b.n	800e0c8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800e0c0:	2301      	movs	r3, #1
 800e0c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800e0c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e0c8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d10d      	bne.n	800e0ec <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800e0d0:	4b05      	ldr	r3, [pc, #20]	; (800e0e8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800e0d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e0d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e0d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e0dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0de:	4a02      	ldr	r2, [pc, #8]	; (800e0e8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800e0e0:	430b      	orrs	r3, r1
 800e0e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e0e4:	e006      	b.n	800e0f4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800e0e6:	bf00      	nop
 800e0e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e0ec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e0f0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800e0f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0fc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800e100:	66bb      	str	r3, [r7, #104]	; 0x68
 800e102:	2300      	movs	r3, #0
 800e104:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e106:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800e10a:	460b      	mov	r3, r1
 800e10c:	4313      	orrs	r3, r2
 800e10e:	d00c      	beq.n	800e12a <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e110:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e114:	3328      	adds	r3, #40	; 0x28
 800e116:	2102      	movs	r1, #2
 800e118:	4618      	mov	r0, r3
 800e11a:	f001 fb4d 	bl	800f7b8 <RCCEx_PLL3_Config>
 800e11e:	4603      	mov	r3, r0
 800e120:	2b00      	cmp	r3, #0
 800e122:	d002      	beq.n	800e12a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800e124:	2301      	movs	r3, #1
 800e126:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800e12a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e132:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800e136:	663b      	str	r3, [r7, #96]	; 0x60
 800e138:	2300      	movs	r3, #0
 800e13a:	667b      	str	r3, [r7, #100]	; 0x64
 800e13c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800e140:	460b      	mov	r3, r1
 800e142:	4313      	orrs	r3, r2
 800e144:	d038      	beq.n	800e1b8 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800e146:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e14a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e14e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e152:	d018      	beq.n	800e186 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800e154:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e158:	d811      	bhi.n	800e17e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800e15a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e15e:	d014      	beq.n	800e18a <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800e160:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e164:	d80b      	bhi.n	800e17e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800e166:	2b00      	cmp	r3, #0
 800e168:	d011      	beq.n	800e18e <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800e16a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e16e:	d106      	bne.n	800e17e <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e170:	4bc3      	ldr	r3, [pc, #780]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800e172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e174:	4ac2      	ldr	r2, [pc, #776]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800e176:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e17a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800e17c:	e008      	b.n	800e190 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e17e:	2301      	movs	r3, #1
 800e180:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800e184:	e004      	b.n	800e190 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800e186:	bf00      	nop
 800e188:	e002      	b.n	800e190 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800e18a:	bf00      	nop
 800e18c:	e000      	b.n	800e190 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800e18e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e190:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e194:	2b00      	cmp	r3, #0
 800e196:	d10b      	bne.n	800e1b0 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800e198:	4bb9      	ldr	r3, [pc, #740]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800e19a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e19c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800e1a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e1a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e1a8:	4ab5      	ldr	r2, [pc, #724]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800e1aa:	430b      	orrs	r3, r1
 800e1ac:	6553      	str	r3, [r2, #84]	; 0x54
 800e1ae:	e003      	b.n	800e1b8 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e1b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e1b4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800e1b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1c0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800e1c4:	65bb      	str	r3, [r7, #88]	; 0x58
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e1ca:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800e1ce:	460b      	mov	r3, r1
 800e1d0:	4313      	orrs	r3, r2
 800e1d2:	d009      	beq.n	800e1e8 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800e1d4:	4baa      	ldr	r3, [pc, #680]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800e1d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1d8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e1dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e1e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1e2:	4aa7      	ldr	r2, [pc, #668]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800e1e4:	430b      	orrs	r3, r1
 800e1e6:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800e1e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1f0:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800e1f4:	653b      	str	r3, [r7, #80]	; 0x50
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	657b      	str	r3, [r7, #84]	; 0x54
 800e1fa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800e1fe:	460b      	mov	r3, r1
 800e200:	4313      	orrs	r3, r2
 800e202:	d009      	beq.n	800e218 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800e204:	4b9e      	ldr	r3, [pc, #632]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800e206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e208:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800e20c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e212:	4a9b      	ldr	r2, [pc, #620]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800e214:	430b      	orrs	r3, r1
 800e216:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800e218:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e220:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800e224:	64bb      	str	r3, [r7, #72]	; 0x48
 800e226:	2300      	movs	r3, #0
 800e228:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e22a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800e22e:	460b      	mov	r3, r1
 800e230:	4313      	orrs	r3, r2
 800e232:	d009      	beq.n	800e248 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800e234:	4b92      	ldr	r3, [pc, #584]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800e236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e238:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 800e23c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e240:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e242:	4a8f      	ldr	r2, [pc, #572]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800e244:	430b      	orrs	r3, r1
 800e246:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800e248:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e250:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800e254:	643b      	str	r3, [r7, #64]	; 0x40
 800e256:	2300      	movs	r3, #0
 800e258:	647b      	str	r3, [r7, #68]	; 0x44
 800e25a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800e25e:	460b      	mov	r3, r1
 800e260:	4313      	orrs	r3, r2
 800e262:	d00e      	beq.n	800e282 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800e264:	4b86      	ldr	r3, [pc, #536]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800e266:	691b      	ldr	r3, [r3, #16]
 800e268:	4a85      	ldr	r2, [pc, #532]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800e26a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e26e:	6113      	str	r3, [r2, #16]
 800e270:	4b83      	ldr	r3, [pc, #524]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800e272:	6919      	ldr	r1, [r3, #16]
 800e274:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e278:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800e27c:	4a80      	ldr	r2, [pc, #512]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800e27e:	430b      	orrs	r3, r1
 800e280:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800e282:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e28a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800e28e:	63bb      	str	r3, [r7, #56]	; 0x38
 800e290:	2300      	movs	r3, #0
 800e292:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e294:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800e298:	460b      	mov	r3, r1
 800e29a:	4313      	orrs	r3, r2
 800e29c:	d009      	beq.n	800e2b2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800e29e:	4b78      	ldr	r3, [pc, #480]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800e2a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e2a2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800e2a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e2aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2ac:	4a74      	ldr	r2, [pc, #464]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800e2ae:	430b      	orrs	r3, r1
 800e2b0:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800e2b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ba:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800e2be:	633b      	str	r3, [r7, #48]	; 0x30
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	637b      	str	r3, [r7, #52]	; 0x34
 800e2c4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800e2c8:	460b      	mov	r3, r1
 800e2ca:	4313      	orrs	r3, r2
 800e2cc:	d00a      	beq.n	800e2e4 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800e2ce:	4b6c      	ldr	r3, [pc, #432]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800e2d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2d2:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800e2d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e2da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e2de:	4a68      	ldr	r2, [pc, #416]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800e2e0:	430b      	orrs	r3, r1
 800e2e2:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800e2e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ec:	2100      	movs	r1, #0
 800e2ee:	62b9      	str	r1, [r7, #40]	; 0x28
 800e2f0:	f003 0301 	and.w	r3, r3, #1
 800e2f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e2f6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800e2fa:	460b      	mov	r3, r1
 800e2fc:	4313      	orrs	r3, r2
 800e2fe:	d011      	beq.n	800e324 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e300:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e304:	3308      	adds	r3, #8
 800e306:	2100      	movs	r1, #0
 800e308:	4618      	mov	r0, r3
 800e30a:	f001 f9a3 	bl	800f654 <RCCEx_PLL2_Config>
 800e30e:	4603      	mov	r3, r0
 800e310:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800e314:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d003      	beq.n	800e324 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e31c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e320:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800e324:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e32c:	2100      	movs	r1, #0
 800e32e:	6239      	str	r1, [r7, #32]
 800e330:	f003 0302 	and.w	r3, r3, #2
 800e334:	627b      	str	r3, [r7, #36]	; 0x24
 800e336:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800e33a:	460b      	mov	r3, r1
 800e33c:	4313      	orrs	r3, r2
 800e33e:	d011      	beq.n	800e364 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e340:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e344:	3308      	adds	r3, #8
 800e346:	2101      	movs	r1, #1
 800e348:	4618      	mov	r0, r3
 800e34a:	f001 f983 	bl	800f654 <RCCEx_PLL2_Config>
 800e34e:	4603      	mov	r3, r0
 800e350:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800e354:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d003      	beq.n	800e364 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e35c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e360:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800e364:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e36c:	2100      	movs	r1, #0
 800e36e:	61b9      	str	r1, [r7, #24]
 800e370:	f003 0304 	and.w	r3, r3, #4
 800e374:	61fb      	str	r3, [r7, #28]
 800e376:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800e37a:	460b      	mov	r3, r1
 800e37c:	4313      	orrs	r3, r2
 800e37e:	d011      	beq.n	800e3a4 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e380:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e384:	3308      	adds	r3, #8
 800e386:	2102      	movs	r1, #2
 800e388:	4618      	mov	r0, r3
 800e38a:	f001 f963 	bl	800f654 <RCCEx_PLL2_Config>
 800e38e:	4603      	mov	r3, r0
 800e390:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800e394:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d003      	beq.n	800e3a4 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e39c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e3a0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800e3a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3ac:	2100      	movs	r1, #0
 800e3ae:	6139      	str	r1, [r7, #16]
 800e3b0:	f003 0308 	and.w	r3, r3, #8
 800e3b4:	617b      	str	r3, [r7, #20]
 800e3b6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800e3ba:	460b      	mov	r3, r1
 800e3bc:	4313      	orrs	r3, r2
 800e3be:	d011      	beq.n	800e3e4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e3c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e3c4:	3328      	adds	r3, #40	; 0x28
 800e3c6:	2100      	movs	r1, #0
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	f001 f9f5 	bl	800f7b8 <RCCEx_PLL3_Config>
 800e3ce:	4603      	mov	r3, r0
 800e3d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 800e3d4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d003      	beq.n	800e3e4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e3dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e3e0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800e3e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3ec:	2100      	movs	r1, #0
 800e3ee:	60b9      	str	r1, [r7, #8]
 800e3f0:	f003 0310 	and.w	r3, r3, #16
 800e3f4:	60fb      	str	r3, [r7, #12]
 800e3f6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800e3fa:	460b      	mov	r3, r1
 800e3fc:	4313      	orrs	r3, r2
 800e3fe:	d011      	beq.n	800e424 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e400:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e404:	3328      	adds	r3, #40	; 0x28
 800e406:	2101      	movs	r1, #1
 800e408:	4618      	mov	r0, r3
 800e40a:	f001 f9d5 	bl	800f7b8 <RCCEx_PLL3_Config>
 800e40e:	4603      	mov	r3, r0
 800e410:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800e414:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d003      	beq.n	800e424 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e41c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e420:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800e424:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e42c:	2100      	movs	r1, #0
 800e42e:	6039      	str	r1, [r7, #0]
 800e430:	f003 0320 	and.w	r3, r3, #32
 800e434:	607b      	str	r3, [r7, #4]
 800e436:	e9d7 1200 	ldrd	r1, r2, [r7]
 800e43a:	460b      	mov	r3, r1
 800e43c:	4313      	orrs	r3, r2
 800e43e:	d011      	beq.n	800e464 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e440:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e444:	3328      	adds	r3, #40	; 0x28
 800e446:	2102      	movs	r1, #2
 800e448:	4618      	mov	r0, r3
 800e44a:	f001 f9b5 	bl	800f7b8 <RCCEx_PLL3_Config>
 800e44e:	4603      	mov	r3, r0
 800e450:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800e454:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d003      	beq.n	800e464 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e45c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e460:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 800e464:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d101      	bne.n	800e470 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800e46c:	2300      	movs	r3, #0
 800e46e:	e000      	b.n	800e472 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800e470:	2301      	movs	r3, #1
}
 800e472:	4618      	mov	r0, r3
 800e474:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800e478:	46bd      	mov	sp, r7
 800e47a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e47e:	bf00      	nop
 800e480:	58024400 	.word	0x58024400

0800e484 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800e484:	b580      	push	{r7, lr}
 800e486:	b090      	sub	sp, #64	; 0x40
 800e488:	af00      	add	r7, sp, #0
 800e48a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800e48e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e492:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800e496:	430b      	orrs	r3, r1
 800e498:	f040 8094 	bne.w	800e5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800e49c:	4b97      	ldr	r3, [pc, #604]	; (800e6fc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e49e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e4a0:	f003 0307 	and.w	r3, r3, #7
 800e4a4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800e4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4a8:	2b04      	cmp	r3, #4
 800e4aa:	f200 8087 	bhi.w	800e5bc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800e4ae:	a201      	add	r2, pc, #4	; (adr r2, 800e4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800e4b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4b4:	0800e4c9 	.word	0x0800e4c9
 800e4b8:	0800e4f1 	.word	0x0800e4f1
 800e4bc:	0800e519 	.word	0x0800e519
 800e4c0:	0800e5b5 	.word	0x0800e5b5
 800e4c4:	0800e541 	.word	0x0800e541
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e4c8:	4b8c      	ldr	r3, [pc, #560]	; (800e6fc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e4d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e4d4:	d108      	bne.n	800e4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e4d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e4da:	4618      	mov	r0, r3
 800e4dc:	f000 ff68 	bl	800f3b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e4e4:	f000 bc97 	b.w	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800e4e8:	2300      	movs	r3, #0
 800e4ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e4ec:	f000 bc93 	b.w	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e4f0:	4b82      	ldr	r3, [pc, #520]	; (800e6fc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e4f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e4fc:	d108      	bne.n	800e510 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e4fe:	f107 0318 	add.w	r3, r7, #24
 800e502:	4618      	mov	r0, r3
 800e504:	f000 fcac 	bl	800ee60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e508:	69bb      	ldr	r3, [r7, #24]
 800e50a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e50c:	f000 bc83 	b.w	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800e510:	2300      	movs	r3, #0
 800e512:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e514:	f000 bc7f 	b.w	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e518:	4b78      	ldr	r3, [pc, #480]	; (800e6fc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e520:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e524:	d108      	bne.n	800e538 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e526:	f107 030c 	add.w	r3, r7, #12
 800e52a:	4618      	mov	r0, r3
 800e52c:	f000 fdec 	bl	800f108 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e534:	f000 bc6f 	b.w	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800e538:	2300      	movs	r3, #0
 800e53a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e53c:	f000 bc6b 	b.w	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e540:	4b6e      	ldr	r3, [pc, #440]	; (800e6fc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e544:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e548:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e54a:	4b6c      	ldr	r3, [pc, #432]	; (800e6fc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	f003 0304 	and.w	r3, r3, #4
 800e552:	2b04      	cmp	r3, #4
 800e554:	d10c      	bne.n	800e570 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800e556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d109      	bne.n	800e570 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e55c:	4b67      	ldr	r3, [pc, #412]	; (800e6fc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	08db      	lsrs	r3, r3, #3
 800e562:	f003 0303 	and.w	r3, r3, #3
 800e566:	4a66      	ldr	r2, [pc, #408]	; (800e700 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800e568:	fa22 f303 	lsr.w	r3, r2, r3
 800e56c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e56e:	e01f      	b.n	800e5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e570:	4b62      	ldr	r3, [pc, #392]	; (800e6fc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e578:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e57c:	d106      	bne.n	800e58c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800e57e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e580:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e584:	d102      	bne.n	800e58c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e586:	4b5f      	ldr	r3, [pc, #380]	; (800e704 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800e588:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e58a:	e011      	b.n	800e5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e58c:	4b5b      	ldr	r3, [pc, #364]	; (800e6fc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e594:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e598:	d106      	bne.n	800e5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800e59a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e59c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e5a0:	d102      	bne.n	800e5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e5a2:	4b59      	ldr	r3, [pc, #356]	; (800e708 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800e5a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e5a6:	e003      	b.n	800e5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800e5ac:	f000 bc33 	b.w	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800e5b0:	f000 bc31 	b.w	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e5b4:	4b55      	ldr	r3, [pc, #340]	; (800e70c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800e5b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5b8:	f000 bc2d 	b.w	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800e5bc:	2300      	movs	r3, #0
 800e5be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5c0:	f000 bc29 	b.w	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 800e5c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e5c8:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800e5cc:	430b      	orrs	r3, r1
 800e5ce:	f040 809f 	bne.w	800e710 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 800e5d2:	4b4a      	ldr	r3, [pc, #296]	; (800e6fc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e5d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e5d6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800e5da:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800e5dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e5e2:	d04d      	beq.n	800e680 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800e5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e5ea:	f200 8084 	bhi.w	800e6f6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800e5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5f0:	2bc0      	cmp	r3, #192	; 0xc0
 800e5f2:	d07d      	beq.n	800e6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 800e5f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5f6:	2bc0      	cmp	r3, #192	; 0xc0
 800e5f8:	d87d      	bhi.n	800e6f6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800e5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5fc:	2b80      	cmp	r3, #128	; 0x80
 800e5fe:	d02d      	beq.n	800e65c <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 800e600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e602:	2b80      	cmp	r3, #128	; 0x80
 800e604:	d877      	bhi.n	800e6f6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800e606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d003      	beq.n	800e614 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 800e60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e60e:	2b40      	cmp	r3, #64	; 0x40
 800e610:	d012      	beq.n	800e638 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800e612:	e070      	b.n	800e6f6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e614:	4b39      	ldr	r3, [pc, #228]	; (800e6fc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e61c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e620:	d107      	bne.n	800e632 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e622:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e626:	4618      	mov	r0, r3
 800e628:	f000 fec2 	bl	800f3b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e62e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e630:	e3f1      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800e632:	2300      	movs	r3, #0
 800e634:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e636:	e3ee      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e638:	4b30      	ldr	r3, [pc, #192]	; (800e6fc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e640:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e644:	d107      	bne.n	800e656 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e646:	f107 0318 	add.w	r3, r7, #24
 800e64a:	4618      	mov	r0, r3
 800e64c:	f000 fc08 	bl	800ee60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e650:	69bb      	ldr	r3, [r7, #24]
 800e652:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e654:	e3df      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800e656:	2300      	movs	r3, #0
 800e658:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e65a:	e3dc      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e65c:	4b27      	ldr	r3, [pc, #156]	; (800e6fc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e664:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e668:	d107      	bne.n	800e67a <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e66a:	f107 030c 	add.w	r3, r7, #12
 800e66e:	4618      	mov	r0, r3
 800e670:	f000 fd4a 	bl	800f108 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e678:	e3cd      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800e67a:	2300      	movs	r3, #0
 800e67c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e67e:	e3ca      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e680:	4b1e      	ldr	r3, [pc, #120]	; (800e6fc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e684:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e688:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e68a:	4b1c      	ldr	r3, [pc, #112]	; (800e6fc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	f003 0304 	and.w	r3, r3, #4
 800e692:	2b04      	cmp	r3, #4
 800e694:	d10c      	bne.n	800e6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 800e696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d109      	bne.n	800e6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e69c:	4b17      	ldr	r3, [pc, #92]	; (800e6fc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	08db      	lsrs	r3, r3, #3
 800e6a2:	f003 0303 	and.w	r3, r3, #3
 800e6a6:	4a16      	ldr	r2, [pc, #88]	; (800e700 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800e6a8:	fa22 f303 	lsr.w	r3, r2, r3
 800e6ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e6ae:	e01e      	b.n	800e6ee <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e6b0:	4b12      	ldr	r3, [pc, #72]	; (800e6fc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e6b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e6bc:	d106      	bne.n	800e6cc <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 800e6be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e6c4:	d102      	bne.n	800e6cc <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e6c6:	4b0f      	ldr	r3, [pc, #60]	; (800e704 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800e6c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e6ca:	e010      	b.n	800e6ee <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e6cc:	4b0b      	ldr	r3, [pc, #44]	; (800e6fc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e6d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e6d8:	d106      	bne.n	800e6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800e6da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e6e0:	d102      	bne.n	800e6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e6e2:	4b09      	ldr	r3, [pc, #36]	; (800e708 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800e6e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e6e6:	e002      	b.n	800e6ee <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800e6ec:	e393      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800e6ee:	e392      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e6f0:	4b06      	ldr	r3, [pc, #24]	; (800e70c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800e6f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e6f4:	e38f      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e6fa:	e38c      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800e6fc:	58024400 	.word	0x58024400
 800e700:	03d09000 	.word	0x03d09000
 800e704:	003d0900 	.word	0x003d0900
 800e708:	016e3600 	.word	0x016e3600
 800e70c:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 800e710:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e714:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800e718:	430b      	orrs	r3, r1
 800e71a:	f040 809c 	bne.w	800e856 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 800e71e:	4b9e      	ldr	r3, [pc, #632]	; (800e998 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800e720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e722:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800e726:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800e728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e72a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e72e:	d054      	beq.n	800e7da <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 800e730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e732:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e736:	f200 808b 	bhi.w	800e850 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800e73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e73c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800e740:	f000 8083 	beq.w	800e84a <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 800e744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e746:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800e74a:	f200 8081 	bhi.w	800e850 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800e74e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e754:	d02f      	beq.n	800e7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800e756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e758:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e75c:	d878      	bhi.n	800e850 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800e75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e760:	2b00      	cmp	r3, #0
 800e762:	d004      	beq.n	800e76e <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 800e764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e766:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e76a:	d012      	beq.n	800e792 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 800e76c:	e070      	b.n	800e850 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e76e:	4b8a      	ldr	r3, [pc, #552]	; (800e998 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e776:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e77a:	d107      	bne.n	800e78c <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e77c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e780:	4618      	mov	r0, r3
 800e782:	f000 fe15 	bl	800f3b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e788:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e78a:	e344      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800e78c:	2300      	movs	r3, #0
 800e78e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e790:	e341      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e792:	4b81      	ldr	r3, [pc, #516]	; (800e998 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e79a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e79e:	d107      	bne.n	800e7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e7a0:	f107 0318 	add.w	r3, r7, #24
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	f000 fb5b 	bl	800ee60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e7aa:	69bb      	ldr	r3, [r7, #24]
 800e7ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e7ae:	e332      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e7b4:	e32f      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e7b6:	4b78      	ldr	r3, [pc, #480]	; (800e998 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e7be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e7c2:	d107      	bne.n	800e7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e7c4:	f107 030c 	add.w	r3, r7, #12
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	f000 fc9d 	bl	800f108 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e7d2:	e320      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e7d8:	e31d      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e7da:	4b6f      	ldr	r3, [pc, #444]	; (800e998 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800e7dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e7de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e7e2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e7e4:	4b6c      	ldr	r3, [pc, #432]	; (800e998 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	f003 0304 	and.w	r3, r3, #4
 800e7ec:	2b04      	cmp	r3, #4
 800e7ee:	d10c      	bne.n	800e80a <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 800e7f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d109      	bne.n	800e80a <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e7f6:	4b68      	ldr	r3, [pc, #416]	; (800e998 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	08db      	lsrs	r3, r3, #3
 800e7fc:	f003 0303 	and.w	r3, r3, #3
 800e800:	4a66      	ldr	r2, [pc, #408]	; (800e99c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800e802:	fa22 f303 	lsr.w	r3, r2, r3
 800e806:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e808:	e01e      	b.n	800e848 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e80a:	4b63      	ldr	r3, [pc, #396]	; (800e998 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e816:	d106      	bne.n	800e826 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800e818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e81a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e81e:	d102      	bne.n	800e826 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e820:	4b5f      	ldr	r3, [pc, #380]	; (800e9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800e822:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e824:	e010      	b.n	800e848 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e826:	4b5c      	ldr	r3, [pc, #368]	; (800e998 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e82e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e832:	d106      	bne.n	800e842 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800e834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e836:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e83a:	d102      	bne.n	800e842 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e83c:	4b59      	ldr	r3, [pc, #356]	; (800e9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800e83e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e840:	e002      	b.n	800e848 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e842:	2300      	movs	r3, #0
 800e844:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 800e846:	e2e6      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800e848:	e2e5      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e84a:	4b57      	ldr	r3, [pc, #348]	; (800e9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e84c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e84e:	e2e2      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800e850:	2300      	movs	r3, #0
 800e852:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e854:	e2df      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800e856:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e85a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800e85e:	430b      	orrs	r3, r1
 800e860:	f040 80a7 	bne.w	800e9b2 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800e864:	4b4c      	ldr	r3, [pc, #304]	; (800e998 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800e866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e868:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800e86c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e86e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e870:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e874:	d055      	beq.n	800e922 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 800e876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e878:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e87c:	f200 8096 	bhi.w	800e9ac <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800e880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e882:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e886:	f000 8084 	beq.w	800e992 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 800e88a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e88c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e890:	f200 808c 	bhi.w	800e9ac <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800e894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e896:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e89a:	d030      	beq.n	800e8fe <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 800e89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e89e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e8a2:	f200 8083 	bhi.w	800e9ac <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800e8a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d004      	beq.n	800e8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800e8ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e8b2:	d012      	beq.n	800e8da <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 800e8b4:	e07a      	b.n	800e9ac <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e8b6:	4b38      	ldr	r3, [pc, #224]	; (800e998 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e8be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e8c2:	d107      	bne.n	800e8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e8c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	f000 fd71 	bl	800f3b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e8ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e8d2:	e2a0      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8d8:	e29d      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e8da:	4b2f      	ldr	r3, [pc, #188]	; (800e998 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e8e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e8e6:	d107      	bne.n	800e8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e8e8:	f107 0318 	add.w	r3, r7, #24
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	f000 fab7 	bl	800ee60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e8f2:	69bb      	ldr	r3, [r7, #24]
 800e8f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e8f6:	e28e      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8fc:	e28b      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e8fe:	4b26      	ldr	r3, [pc, #152]	; (800e998 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e906:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e90a:	d107      	bne.n	800e91c <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e90c:	f107 030c 	add.w	r3, r7, #12
 800e910:	4618      	mov	r0, r3
 800e912:	f000 fbf9 	bl	800f108 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e91a:	e27c      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800e91c:	2300      	movs	r3, #0
 800e91e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e920:	e279      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e922:	4b1d      	ldr	r3, [pc, #116]	; (800e998 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800e924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e926:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e92a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e92c:	4b1a      	ldr	r3, [pc, #104]	; (800e998 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	f003 0304 	and.w	r3, r3, #4
 800e934:	2b04      	cmp	r3, #4
 800e936:	d10c      	bne.n	800e952 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 800e938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d109      	bne.n	800e952 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e93e:	4b16      	ldr	r3, [pc, #88]	; (800e998 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	08db      	lsrs	r3, r3, #3
 800e944:	f003 0303 	and.w	r3, r3, #3
 800e948:	4a14      	ldr	r2, [pc, #80]	; (800e99c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800e94a:	fa22 f303 	lsr.w	r3, r2, r3
 800e94e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e950:	e01e      	b.n	800e990 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e952:	4b11      	ldr	r3, [pc, #68]	; (800e998 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e95a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e95e:	d106      	bne.n	800e96e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800e960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e962:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e966:	d102      	bne.n	800e96e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e968:	4b0d      	ldr	r3, [pc, #52]	; (800e9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800e96a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e96c:	e010      	b.n	800e990 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e96e:	4b0a      	ldr	r3, [pc, #40]	; (800e998 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e976:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e97a:	d106      	bne.n	800e98a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800e97c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e97e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e982:	d102      	bne.n	800e98a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e984:	4b07      	ldr	r3, [pc, #28]	; (800e9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800e986:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e988:	e002      	b.n	800e990 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e98a:	2300      	movs	r3, #0
 800e98c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800e98e:	e242      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800e990:	e241      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e992:	4b05      	ldr	r3, [pc, #20]	; (800e9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e994:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e996:	e23e      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800e998:	58024400 	.word	0x58024400
 800e99c:	03d09000 	.word	0x03d09000
 800e9a0:	003d0900 	.word	0x003d0900
 800e9a4:	016e3600 	.word	0x016e3600
 800e9a8:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e9b0:	e231      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800e9b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e9b6:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800e9ba:	430b      	orrs	r3, r1
 800e9bc:	f040 8085 	bne.w	800eaca <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800e9c0:	4b9c      	ldr	r3, [pc, #624]	; (800ec34 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e9c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e9c4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800e9c8:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800e9ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e9d0:	d06b      	beq.n	800eaaa <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800e9d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e9d8:	d874      	bhi.n	800eac4 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800e9da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e9e0:	d056      	beq.n	800ea90 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 800e9e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e9e8:	d86c      	bhi.n	800eac4 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800e9ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9ec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e9f0:	d03b      	beq.n	800ea6a <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 800e9f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9f4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e9f8:	d864      	bhi.n	800eac4 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800e9fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ea00:	d021      	beq.n	800ea46 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 800ea02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ea08:	d85c      	bhi.n	800eac4 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800ea0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d004      	beq.n	800ea1a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 800ea10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea16:	d004      	beq.n	800ea22 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 800ea18:	e054      	b.n	800eac4 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800ea1a:	f7fe fb07 	bl	800d02c <HAL_RCC_GetPCLK1Freq>
 800ea1e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ea20:	e1f9      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ea22:	4b84      	ldr	r3, [pc, #528]	; (800ec34 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ea2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ea2e:	d107      	bne.n	800ea40 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ea30:	f107 0318 	add.w	r3, r7, #24
 800ea34:	4618      	mov	r0, r3
 800ea36:	f000 fa13 	bl	800ee60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ea3a:	69fb      	ldr	r3, [r7, #28]
 800ea3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ea3e:	e1ea      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ea40:	2300      	movs	r3, #0
 800ea42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea44:	e1e7      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ea46:	4b7b      	ldr	r3, [pc, #492]	; (800ec34 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ea4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ea52:	d107      	bne.n	800ea64 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ea54:	f107 030c 	add.w	r3, r7, #12
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f000 fb55 	bl	800f108 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ea5e:	693b      	ldr	r3, [r7, #16]
 800ea60:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ea62:	e1d8      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ea64:	2300      	movs	r3, #0
 800ea66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea68:	e1d5      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ea6a:	4b72      	ldr	r3, [pc, #456]	; (800ec34 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	f003 0304 	and.w	r3, r3, #4
 800ea72:	2b04      	cmp	r3, #4
 800ea74:	d109      	bne.n	800ea8a <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ea76:	4b6f      	ldr	r3, [pc, #444]	; (800ec34 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	08db      	lsrs	r3, r3, #3
 800ea7c:	f003 0303 	and.w	r3, r3, #3
 800ea80:	4a6d      	ldr	r2, [pc, #436]	; (800ec38 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ea82:	fa22 f303 	lsr.w	r3, r2, r3
 800ea86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ea88:	e1c5      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea8e:	e1c2      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ea90:	4b68      	ldr	r3, [pc, #416]	; (800ec34 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ea98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea9c:	d102      	bne.n	800eaa4 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 800ea9e:	4b67      	ldr	r3, [pc, #412]	; (800ec3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800eaa0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eaa2:	e1b8      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eaa8:	e1b5      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800eaaa:	4b62      	ldr	r3, [pc, #392]	; (800ec34 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eab2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800eab6:	d102      	bne.n	800eabe <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 800eab8:	4b61      	ldr	r3, [pc, #388]	; (800ec40 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800eaba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eabc:	e1ab      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800eabe:	2300      	movs	r3, #0
 800eac0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eac2:	e1a8      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800eac4:	2300      	movs	r3, #0
 800eac6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eac8:	e1a5      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800eaca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eace:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800ead2:	430b      	orrs	r3, r1
 800ead4:	d173      	bne.n	800ebbe <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ead6:	4b57      	ldr	r3, [pc, #348]	; (800ec34 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ead8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eada:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800eade:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800eae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eae2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800eae6:	d02f      	beq.n	800eb48 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 800eae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800eaee:	d863      	bhi.n	800ebb8 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 800eaf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d004      	beq.n	800eb00 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800eaf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eafc:	d012      	beq.n	800eb24 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 800eafe:	e05b      	b.n	800ebb8 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800eb00:	4b4c      	ldr	r3, [pc, #304]	; (800ec34 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800eb08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800eb0c:	d107      	bne.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eb0e:	f107 0318 	add.w	r3, r7, #24
 800eb12:	4618      	mov	r0, r3
 800eb14:	f000 f9a4 	bl	800ee60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800eb18:	69bb      	ldr	r3, [r7, #24]
 800eb1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eb1c:	e17b      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800eb1e:	2300      	movs	r3, #0
 800eb20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb22:	e178      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800eb24:	4b43      	ldr	r3, [pc, #268]	; (800ec34 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800eb2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800eb30:	d107      	bne.n	800eb42 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eb32:	f107 030c 	add.w	r3, r7, #12
 800eb36:	4618      	mov	r0, r3
 800eb38:	f000 fae6 	bl	800f108 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800eb3c:	697b      	ldr	r3, [r7, #20]
 800eb3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eb40:	e169      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800eb42:	2300      	movs	r3, #0
 800eb44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb46:	e166      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800eb48:	4b3a      	ldr	r3, [pc, #232]	; (800ec34 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800eb4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eb4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800eb50:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800eb52:	4b38      	ldr	r3, [pc, #224]	; (800ec34 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	f003 0304 	and.w	r3, r3, #4
 800eb5a:	2b04      	cmp	r3, #4
 800eb5c:	d10c      	bne.n	800eb78 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 800eb5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d109      	bne.n	800eb78 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800eb64:	4b33      	ldr	r3, [pc, #204]	; (800ec34 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	08db      	lsrs	r3, r3, #3
 800eb6a:	f003 0303 	and.w	r3, r3, #3
 800eb6e:	4a32      	ldr	r2, [pc, #200]	; (800ec38 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800eb70:	fa22 f303 	lsr.w	r3, r2, r3
 800eb74:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eb76:	e01e      	b.n	800ebb6 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800eb78:	4b2e      	ldr	r3, [pc, #184]	; (800ec34 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eb80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eb84:	d106      	bne.n	800eb94 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 800eb86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800eb8c:	d102      	bne.n	800eb94 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800eb8e:	4b2b      	ldr	r3, [pc, #172]	; (800ec3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800eb90:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eb92:	e010      	b.n	800ebb6 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800eb94:	4b27      	ldr	r3, [pc, #156]	; (800ec34 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eb9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800eba0:	d106      	bne.n	800ebb0 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800eba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eba4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800eba8:	d102      	bne.n	800ebb0 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ebaa:	4b25      	ldr	r3, [pc, #148]	; (800ec40 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800ebac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ebae:	e002      	b.n	800ebb6 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ebb0:	2300      	movs	r3, #0
 800ebb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ebb4:	e12f      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800ebb6:	e12e      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800ebb8:	2300      	movs	r3, #0
 800ebba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ebbc:	e12b      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ebbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ebc2:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800ebc6:	430b      	orrs	r3, r1
 800ebc8:	d13c      	bne.n	800ec44 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800ebca:	4b1a      	ldr	r3, [pc, #104]	; (800ec34 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ebcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ebce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ebd2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ebd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d004      	beq.n	800ebe4 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 800ebda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ebe0:	d012      	beq.n	800ec08 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800ebe2:	e023      	b.n	800ec2c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ebe4:	4b13      	ldr	r3, [pc, #76]	; (800ec34 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ebec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ebf0:	d107      	bne.n	800ec02 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ebf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	f000 fbda 	bl	800f3b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ebfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ec00:	e109      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ec02:	2300      	movs	r3, #0
 800ec04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec06:	e106      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ec08:	4b0a      	ldr	r3, [pc, #40]	; (800ec34 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ec10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ec14:	d107      	bne.n	800ec26 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ec16:	f107 0318 	add.w	r3, r7, #24
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	f000 f920 	bl	800ee60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ec20:	6a3b      	ldr	r3, [r7, #32]
 800ec22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ec24:	e0f7      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ec26:	2300      	movs	r3, #0
 800ec28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec2a:	e0f4      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec30:	e0f1      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800ec32:	bf00      	nop
 800ec34:	58024400 	.word	0x58024400
 800ec38:	03d09000 	.word	0x03d09000
 800ec3c:	003d0900 	.word	0x003d0900
 800ec40:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800ec44:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ec48:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800ec4c:	430b      	orrs	r3, r1
 800ec4e:	f040 8091 	bne.w	800ed74 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800ec52:	4b73      	ldr	r3, [pc, #460]	; (800ee20 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800ec54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec56:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800ec5a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ec5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec5e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800ec62:	f000 8081 	beq.w	800ed68 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800ec66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec68:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800ec6c:	d87f      	bhi.n	800ed6e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800ec6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ec74:	d06b      	beq.n	800ed4e <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800ec76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ec7c:	d877      	bhi.n	800ed6e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800ec7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ec84:	d056      	beq.n	800ed34 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800ec86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ec8c:	d86f      	bhi.n	800ed6e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800ec8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec90:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ec94:	d03b      	beq.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800ec96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ec9c:	d867      	bhi.n	800ed6e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800ec9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eca0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800eca4:	d021      	beq.n	800ecea <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800eca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eca8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ecac:	d85f      	bhi.n	800ed6e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800ecae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d004      	beq.n	800ecbe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800ecb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ecba:	d004      	beq.n	800ecc6 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800ecbc:	e057      	b.n	800ed6e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ecbe:	f000 f8b9 	bl	800ee34 <HAL_RCCEx_GetD3PCLK1Freq>
 800ecc2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ecc4:	e0a7      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ecc6:	4b56      	ldr	r3, [pc, #344]	; (800ee20 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ecce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ecd2:	d107      	bne.n	800ece4 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ecd4:	f107 0318 	add.w	r3, r7, #24
 800ecd8:	4618      	mov	r0, r3
 800ecda:	f000 f8c1 	bl	800ee60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ecde:	69fb      	ldr	r3, [r7, #28]
 800ece0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ece2:	e098      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ece4:	2300      	movs	r3, #0
 800ece6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ece8:	e095      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ecea:	4b4d      	ldr	r3, [pc, #308]	; (800ee20 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ecf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ecf6:	d107      	bne.n	800ed08 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ecf8:	f107 030c 	add.w	r3, r7, #12
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	f000 fa03 	bl	800f108 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ed02:	693b      	ldr	r3, [r7, #16]
 800ed04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ed06:	e086      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ed08:	2300      	movs	r3, #0
 800ed0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed0c:	e083      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ed0e:	4b44      	ldr	r3, [pc, #272]	; (800ee20 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	f003 0304 	and.w	r3, r3, #4
 800ed16:	2b04      	cmp	r3, #4
 800ed18:	d109      	bne.n	800ed2e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ed1a:	4b41      	ldr	r3, [pc, #260]	; (800ee20 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	08db      	lsrs	r3, r3, #3
 800ed20:	f003 0303 	and.w	r3, r3, #3
 800ed24:	4a3f      	ldr	r2, [pc, #252]	; (800ee24 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800ed26:	fa22 f303 	lsr.w	r3, r2, r3
 800ed2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ed2c:	e073      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ed2e:	2300      	movs	r3, #0
 800ed30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed32:	e070      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ed34:	4b3a      	ldr	r3, [pc, #232]	; (800ee20 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ed3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ed40:	d102      	bne.n	800ed48 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 800ed42:	4b39      	ldr	r3, [pc, #228]	; (800ee28 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 800ed44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ed46:	e066      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ed48:	2300      	movs	r3, #0
 800ed4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed4c:	e063      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ed4e:	4b34      	ldr	r3, [pc, #208]	; (800ee20 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ed56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ed5a:	d102      	bne.n	800ed62 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 800ed5c:	4b33      	ldr	r3, [pc, #204]	; (800ee2c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800ed5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ed60:	e059      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ed62:	2300      	movs	r3, #0
 800ed64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed66:	e056      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ed68:	4b31      	ldr	r3, [pc, #196]	; (800ee30 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 800ed6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed6c:	e053      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800ed6e:	2300      	movs	r3, #0
 800ed70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed72:	e050      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ed74:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ed78:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800ed7c:	430b      	orrs	r3, r1
 800ed7e:	d148      	bne.n	800ee12 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800ed80:	4b27      	ldr	r3, [pc, #156]	; (800ee20 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800ed82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed84:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ed88:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ed8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ed90:	d02a      	beq.n	800ede8 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800ed92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ed98:	d838      	bhi.n	800ee0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800ed9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d004      	beq.n	800edaa <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 800eda0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eda2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800eda6:	d00d      	beq.n	800edc4 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 800eda8:	e030      	b.n	800ee0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800edaa:	4b1d      	ldr	r3, [pc, #116]	; (800ee20 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800edb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800edb6:	d102      	bne.n	800edbe <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 800edb8:	4b1c      	ldr	r3, [pc, #112]	; (800ee2c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800edba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800edbc:	e02b      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800edbe:	2300      	movs	r3, #0
 800edc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800edc2:	e028      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800edc4:	4b16      	ldr	r3, [pc, #88]	; (800ee20 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800edcc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800edd0:	d107      	bne.n	800ede2 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800edd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800edd6:	4618      	mov	r0, r3
 800edd8:	f000 faea 	bl	800f3b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800eddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ede0:	e019      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ede2:	2300      	movs	r3, #0
 800ede4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ede6:	e016      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ede8:	4b0d      	ldr	r3, [pc, #52]	; (800ee20 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800edf0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800edf4:	d107      	bne.n	800ee06 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800edf6:	f107 0318 	add.w	r3, r7, #24
 800edfa:	4618      	mov	r0, r3
 800edfc:	f000 f830 	bl	800ee60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ee00:	69fb      	ldr	r3, [r7, #28]
 800ee02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ee04:	e007      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ee06:	2300      	movs	r3, #0
 800ee08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ee0a:	e004      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ee10:	e001      	b.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 800ee12:	2300      	movs	r3, #0
 800ee14:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800ee16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ee18:	4618      	mov	r0, r3
 800ee1a:	3740      	adds	r7, #64	; 0x40
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	bd80      	pop	{r7, pc}
 800ee20:	58024400 	.word	0x58024400
 800ee24:	03d09000 	.word	0x03d09000
 800ee28:	003d0900 	.word	0x003d0900
 800ee2c:	016e3600 	.word	0x016e3600
 800ee30:	00bb8000 	.word	0x00bb8000

0800ee34 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800ee38:	f7fe f8c8 	bl	800cfcc <HAL_RCC_GetHCLKFreq>
 800ee3c:	4602      	mov	r2, r0
 800ee3e:	4b06      	ldr	r3, [pc, #24]	; (800ee58 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ee40:	6a1b      	ldr	r3, [r3, #32]
 800ee42:	091b      	lsrs	r3, r3, #4
 800ee44:	f003 0307 	and.w	r3, r3, #7
 800ee48:	4904      	ldr	r1, [pc, #16]	; (800ee5c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ee4a:	5ccb      	ldrb	r3, [r1, r3]
 800ee4c:	f003 031f 	and.w	r3, r3, #31
 800ee50:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800ee54:	4618      	mov	r0, r3
 800ee56:	bd80      	pop	{r7, pc}
 800ee58:	58024400 	.word	0x58024400
 800ee5c:	08028ef4 	.word	0x08028ef4

0800ee60 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ee60:	b480      	push	{r7}
 800ee62:	b089      	sub	sp, #36	; 0x24
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ee68:	4ba1      	ldr	r3, [pc, #644]	; (800f0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ee6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee6c:	f003 0303 	and.w	r3, r3, #3
 800ee70:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ee72:	4b9f      	ldr	r3, [pc, #636]	; (800f0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ee74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee76:	0b1b      	lsrs	r3, r3, #12
 800ee78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ee7c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ee7e:	4b9c      	ldr	r3, [pc, #624]	; (800f0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ee80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee82:	091b      	lsrs	r3, r3, #4
 800ee84:	f003 0301 	and.w	r3, r3, #1
 800ee88:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ee8a:	4b99      	ldr	r3, [pc, #612]	; (800f0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ee8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee8e:	08db      	lsrs	r3, r3, #3
 800ee90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ee94:	693a      	ldr	r2, [r7, #16]
 800ee96:	fb02 f303 	mul.w	r3, r2, r3
 800ee9a:	ee07 3a90 	vmov	s15, r3
 800ee9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eea2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800eea6:	697b      	ldr	r3, [r7, #20]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	f000 8111 	beq.w	800f0d0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800eeae:	69bb      	ldr	r3, [r7, #24]
 800eeb0:	2b02      	cmp	r3, #2
 800eeb2:	f000 8083 	beq.w	800efbc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800eeb6:	69bb      	ldr	r3, [r7, #24]
 800eeb8:	2b02      	cmp	r3, #2
 800eeba:	f200 80a1 	bhi.w	800f000 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800eebe:	69bb      	ldr	r3, [r7, #24]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d003      	beq.n	800eecc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800eec4:	69bb      	ldr	r3, [r7, #24]
 800eec6:	2b01      	cmp	r3, #1
 800eec8:	d056      	beq.n	800ef78 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800eeca:	e099      	b.n	800f000 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800eecc:	4b88      	ldr	r3, [pc, #544]	; (800f0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	f003 0320 	and.w	r3, r3, #32
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d02d      	beq.n	800ef34 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800eed8:	4b85      	ldr	r3, [pc, #532]	; (800f0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	08db      	lsrs	r3, r3, #3
 800eede:	f003 0303 	and.w	r3, r3, #3
 800eee2:	4a84      	ldr	r2, [pc, #528]	; (800f0f4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800eee4:	fa22 f303 	lsr.w	r3, r2, r3
 800eee8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800eeea:	68bb      	ldr	r3, [r7, #8]
 800eeec:	ee07 3a90 	vmov	s15, r3
 800eef0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eef4:	697b      	ldr	r3, [r7, #20]
 800eef6:	ee07 3a90 	vmov	s15, r3
 800eefa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eefe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ef02:	4b7b      	ldr	r3, [pc, #492]	; (800f0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ef04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef0a:	ee07 3a90 	vmov	s15, r3
 800ef0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ef12:	ed97 6a03 	vldr	s12, [r7, #12]
 800ef16:	eddf 5a78 	vldr	s11, [pc, #480]	; 800f0f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ef1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ef1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ef22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ef26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ef2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef2e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ef32:	e087      	b.n	800f044 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ef34:	697b      	ldr	r3, [r7, #20]
 800ef36:	ee07 3a90 	vmov	s15, r3
 800ef3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef3e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800f0fc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ef42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ef46:	4b6a      	ldr	r3, [pc, #424]	; (800f0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ef48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef4e:	ee07 3a90 	vmov	s15, r3
 800ef52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ef56:	ed97 6a03 	vldr	s12, [r7, #12]
 800ef5a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800f0f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ef5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ef62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ef66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ef6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ef6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ef76:	e065      	b.n	800f044 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ef78:	697b      	ldr	r3, [r7, #20]
 800ef7a:	ee07 3a90 	vmov	s15, r3
 800ef7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef82:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800f100 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ef86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ef8a:	4b59      	ldr	r3, [pc, #356]	; (800f0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ef8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef92:	ee07 3a90 	vmov	s15, r3
 800ef96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ef9a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ef9e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800f0f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800efa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800efa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800efaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800efae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800efb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800efb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800efba:	e043      	b.n	800f044 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800efbc:	697b      	ldr	r3, [r7, #20]
 800efbe:	ee07 3a90 	vmov	s15, r3
 800efc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800efc6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800f104 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800efca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800efce:	4b48      	ldr	r3, [pc, #288]	; (800f0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800efd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800efd6:	ee07 3a90 	vmov	s15, r3
 800efda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800efde:	ed97 6a03 	vldr	s12, [r7, #12]
 800efe2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800f0f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800efe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800efea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800efee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800effa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800effe:	e021      	b.n	800f044 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f000:	697b      	ldr	r3, [r7, #20]
 800f002:	ee07 3a90 	vmov	s15, r3
 800f006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f00a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800f100 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f00e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f012:	4b37      	ldr	r3, [pc, #220]	; (800f0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f01a:	ee07 3a90 	vmov	s15, r3
 800f01e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f022:	ed97 6a03 	vldr	s12, [r7, #12]
 800f026:	eddf 5a34 	vldr	s11, [pc, #208]	; 800f0f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f02a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f02e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f032:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f036:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f03a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f03e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f042:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800f044:	4b2a      	ldr	r3, [pc, #168]	; (800f0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f048:	0a5b      	lsrs	r3, r3, #9
 800f04a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f04e:	ee07 3a90 	vmov	s15, r3
 800f052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f056:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f05a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f05e:	edd7 6a07 	vldr	s13, [r7, #28]
 800f062:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f066:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f06a:	ee17 2a90 	vmov	r2, s15
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800f072:	4b1f      	ldr	r3, [pc, #124]	; (800f0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f076:	0c1b      	lsrs	r3, r3, #16
 800f078:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f07c:	ee07 3a90 	vmov	s15, r3
 800f080:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f084:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f088:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f08c:	edd7 6a07 	vldr	s13, [r7, #28]
 800f090:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f094:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f098:	ee17 2a90 	vmov	r2, s15
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800f0a0:	4b13      	ldr	r3, [pc, #76]	; (800f0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f0a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0a4:	0e1b      	lsrs	r3, r3, #24
 800f0a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f0aa:	ee07 3a90 	vmov	s15, r3
 800f0ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f0b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f0b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f0ba:	edd7 6a07 	vldr	s13, [r7, #28]
 800f0be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f0c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f0c6:	ee17 2a90 	vmov	r2, s15
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800f0ce:	e008      	b.n	800f0e2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	2200      	movs	r2, #0
 800f0da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	2200      	movs	r2, #0
 800f0e0:	609a      	str	r2, [r3, #8]
}
 800f0e2:	bf00      	nop
 800f0e4:	3724      	adds	r7, #36	; 0x24
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ec:	4770      	bx	lr
 800f0ee:	bf00      	nop
 800f0f0:	58024400 	.word	0x58024400
 800f0f4:	03d09000 	.word	0x03d09000
 800f0f8:	46000000 	.word	0x46000000
 800f0fc:	4c742400 	.word	0x4c742400
 800f100:	4a742400 	.word	0x4a742400
 800f104:	4bb71b00 	.word	0x4bb71b00

0800f108 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800f108:	b480      	push	{r7}
 800f10a:	b089      	sub	sp, #36	; 0x24
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f110:	4ba1      	ldr	r3, [pc, #644]	; (800f398 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f114:	f003 0303 	and.w	r3, r3, #3
 800f118:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800f11a:	4b9f      	ldr	r3, [pc, #636]	; (800f398 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f11c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f11e:	0d1b      	lsrs	r3, r3, #20
 800f120:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f124:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800f126:	4b9c      	ldr	r3, [pc, #624]	; (800f398 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f12a:	0a1b      	lsrs	r3, r3, #8
 800f12c:	f003 0301 	and.w	r3, r3, #1
 800f130:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800f132:	4b99      	ldr	r3, [pc, #612]	; (800f398 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f136:	08db      	lsrs	r3, r3, #3
 800f138:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f13c:	693a      	ldr	r2, [r7, #16]
 800f13e:	fb02 f303 	mul.w	r3, r2, r3
 800f142:	ee07 3a90 	vmov	s15, r3
 800f146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f14a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800f14e:	697b      	ldr	r3, [r7, #20]
 800f150:	2b00      	cmp	r3, #0
 800f152:	f000 8111 	beq.w	800f378 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800f156:	69bb      	ldr	r3, [r7, #24]
 800f158:	2b02      	cmp	r3, #2
 800f15a:	f000 8083 	beq.w	800f264 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800f15e:	69bb      	ldr	r3, [r7, #24]
 800f160:	2b02      	cmp	r3, #2
 800f162:	f200 80a1 	bhi.w	800f2a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800f166:	69bb      	ldr	r3, [r7, #24]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d003      	beq.n	800f174 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800f16c:	69bb      	ldr	r3, [r7, #24]
 800f16e:	2b01      	cmp	r3, #1
 800f170:	d056      	beq.n	800f220 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800f172:	e099      	b.n	800f2a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f174:	4b88      	ldr	r3, [pc, #544]	; (800f398 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	f003 0320 	and.w	r3, r3, #32
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d02d      	beq.n	800f1dc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f180:	4b85      	ldr	r3, [pc, #532]	; (800f398 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	08db      	lsrs	r3, r3, #3
 800f186:	f003 0303 	and.w	r3, r3, #3
 800f18a:	4a84      	ldr	r2, [pc, #528]	; (800f39c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800f18c:	fa22 f303 	lsr.w	r3, r2, r3
 800f190:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f192:	68bb      	ldr	r3, [r7, #8]
 800f194:	ee07 3a90 	vmov	s15, r3
 800f198:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f19c:	697b      	ldr	r3, [r7, #20]
 800f19e:	ee07 3a90 	vmov	s15, r3
 800f1a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f1a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f1aa:	4b7b      	ldr	r3, [pc, #492]	; (800f398 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f1ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f1b2:	ee07 3a90 	vmov	s15, r3
 800f1b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f1ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800f1be:	eddf 5a78 	vldr	s11, [pc, #480]	; 800f3a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f1c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f1c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f1ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f1ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f1d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f1d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800f1da:	e087      	b.n	800f2ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f1dc:	697b      	ldr	r3, [r7, #20]
 800f1de:	ee07 3a90 	vmov	s15, r3
 800f1e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f1e6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800f3a4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800f1ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f1ee:	4b6a      	ldr	r3, [pc, #424]	; (800f398 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f1f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f1f6:	ee07 3a90 	vmov	s15, r3
 800f1fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f1fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800f202:	eddf 5a67 	vldr	s11, [pc, #412]	; 800f3a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f20a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f20e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f21a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f21e:	e065      	b.n	800f2ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f220:	697b      	ldr	r3, [r7, #20]
 800f222:	ee07 3a90 	vmov	s15, r3
 800f226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f22a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800f3a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800f22e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f232:	4b59      	ldr	r3, [pc, #356]	; (800f398 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f23a:	ee07 3a90 	vmov	s15, r3
 800f23e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f242:	ed97 6a03 	vldr	s12, [r7, #12]
 800f246:	eddf 5a56 	vldr	s11, [pc, #344]	; 800f3a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f24a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f24e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f252:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f25a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f25e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f262:	e043      	b.n	800f2ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f264:	697b      	ldr	r3, [r7, #20]
 800f266:	ee07 3a90 	vmov	s15, r3
 800f26a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f26e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800f3ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800f272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f276:	4b48      	ldr	r3, [pc, #288]	; (800f398 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f27a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f27e:	ee07 3a90 	vmov	s15, r3
 800f282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f286:	ed97 6a03 	vldr	s12, [r7, #12]
 800f28a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800f3a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f28e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f296:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f29a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f29e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f2a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f2a6:	e021      	b.n	800f2ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f2a8:	697b      	ldr	r3, [r7, #20]
 800f2aa:	ee07 3a90 	vmov	s15, r3
 800f2ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f2b2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800f3a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800f2b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f2ba:	4b37      	ldr	r3, [pc, #220]	; (800f398 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f2bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f2c2:	ee07 3a90 	vmov	s15, r3
 800f2c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f2ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800f2ce:	eddf 5a34 	vldr	s11, [pc, #208]	; 800f3a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f2d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f2d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f2da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f2de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f2e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f2e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f2ea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800f2ec:	4b2a      	ldr	r3, [pc, #168]	; (800f398 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f2ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2f0:	0a5b      	lsrs	r3, r3, #9
 800f2f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f2f6:	ee07 3a90 	vmov	s15, r3
 800f2fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f2fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f302:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f306:	edd7 6a07 	vldr	s13, [r7, #28]
 800f30a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f30e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f312:	ee17 2a90 	vmov	r2, s15
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800f31a:	4b1f      	ldr	r3, [pc, #124]	; (800f398 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f31c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f31e:	0c1b      	lsrs	r3, r3, #16
 800f320:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f324:	ee07 3a90 	vmov	s15, r3
 800f328:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f32c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f330:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f334:	edd7 6a07 	vldr	s13, [r7, #28]
 800f338:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f33c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f340:	ee17 2a90 	vmov	r2, s15
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800f348:	4b13      	ldr	r3, [pc, #76]	; (800f398 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f34a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f34c:	0e1b      	lsrs	r3, r3, #24
 800f34e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f352:	ee07 3a90 	vmov	s15, r3
 800f356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f35a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f35e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f362:	edd7 6a07 	vldr	s13, [r7, #28]
 800f366:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f36a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f36e:	ee17 2a90 	vmov	r2, s15
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800f376:	e008      	b.n	800f38a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	2200      	movs	r2, #0
 800f37c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	2200      	movs	r2, #0
 800f382:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	2200      	movs	r2, #0
 800f388:	609a      	str	r2, [r3, #8]
}
 800f38a:	bf00      	nop
 800f38c:	3724      	adds	r7, #36	; 0x24
 800f38e:	46bd      	mov	sp, r7
 800f390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f394:	4770      	bx	lr
 800f396:	bf00      	nop
 800f398:	58024400 	.word	0x58024400
 800f39c:	03d09000 	.word	0x03d09000
 800f3a0:	46000000 	.word	0x46000000
 800f3a4:	4c742400 	.word	0x4c742400
 800f3a8:	4a742400 	.word	0x4a742400
 800f3ac:	4bb71b00 	.word	0x4bb71b00

0800f3b0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800f3b0:	b480      	push	{r7}
 800f3b2:	b089      	sub	sp, #36	; 0x24
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f3b8:	4ba0      	ldr	r3, [pc, #640]	; (800f63c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f3ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3bc:	f003 0303 	and.w	r3, r3, #3
 800f3c0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800f3c2:	4b9e      	ldr	r3, [pc, #632]	; (800f63c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f3c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3c6:	091b      	lsrs	r3, r3, #4
 800f3c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f3cc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800f3ce:	4b9b      	ldr	r3, [pc, #620]	; (800f63c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f3d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3d2:	f003 0301 	and.w	r3, r3, #1
 800f3d6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800f3d8:	4b98      	ldr	r3, [pc, #608]	; (800f63c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f3da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3dc:	08db      	lsrs	r3, r3, #3
 800f3de:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f3e2:	693a      	ldr	r2, [r7, #16]
 800f3e4:	fb02 f303 	mul.w	r3, r2, r3
 800f3e8:	ee07 3a90 	vmov	s15, r3
 800f3ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f3f0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800f3f4:	697b      	ldr	r3, [r7, #20]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	f000 8111 	beq.w	800f61e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800f3fc:	69bb      	ldr	r3, [r7, #24]
 800f3fe:	2b02      	cmp	r3, #2
 800f400:	f000 8083 	beq.w	800f50a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800f404:	69bb      	ldr	r3, [r7, #24]
 800f406:	2b02      	cmp	r3, #2
 800f408:	f200 80a1 	bhi.w	800f54e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800f40c:	69bb      	ldr	r3, [r7, #24]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d003      	beq.n	800f41a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800f412:	69bb      	ldr	r3, [r7, #24]
 800f414:	2b01      	cmp	r3, #1
 800f416:	d056      	beq.n	800f4c6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800f418:	e099      	b.n	800f54e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f41a:	4b88      	ldr	r3, [pc, #544]	; (800f63c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	f003 0320 	and.w	r3, r3, #32
 800f422:	2b00      	cmp	r3, #0
 800f424:	d02d      	beq.n	800f482 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f426:	4b85      	ldr	r3, [pc, #532]	; (800f63c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	08db      	lsrs	r3, r3, #3
 800f42c:	f003 0303 	and.w	r3, r3, #3
 800f430:	4a83      	ldr	r2, [pc, #524]	; (800f640 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800f432:	fa22 f303 	lsr.w	r3, r2, r3
 800f436:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f438:	68bb      	ldr	r3, [r7, #8]
 800f43a:	ee07 3a90 	vmov	s15, r3
 800f43e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f442:	697b      	ldr	r3, [r7, #20]
 800f444:	ee07 3a90 	vmov	s15, r3
 800f448:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f44c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f450:	4b7a      	ldr	r3, [pc, #488]	; (800f63c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f454:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f458:	ee07 3a90 	vmov	s15, r3
 800f45c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f460:	ed97 6a03 	vldr	s12, [r7, #12]
 800f464:	eddf 5a77 	vldr	s11, [pc, #476]	; 800f644 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f468:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f46c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f470:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f474:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f478:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f47c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800f480:	e087      	b.n	800f592 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f482:	697b      	ldr	r3, [r7, #20]
 800f484:	ee07 3a90 	vmov	s15, r3
 800f488:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f48c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800f648 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800f490:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f494:	4b69      	ldr	r3, [pc, #420]	; (800f63c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f49c:	ee07 3a90 	vmov	s15, r3
 800f4a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f4a4:	ed97 6a03 	vldr	s12, [r7, #12]
 800f4a8:	eddf 5a66 	vldr	s11, [pc, #408]	; 800f644 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f4ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f4b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f4b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f4b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f4bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f4c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f4c4:	e065      	b.n	800f592 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f4c6:	697b      	ldr	r3, [r7, #20]
 800f4c8:	ee07 3a90 	vmov	s15, r3
 800f4cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f4d0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800f64c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800f4d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f4d8:	4b58      	ldr	r3, [pc, #352]	; (800f63c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f4da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f4e0:	ee07 3a90 	vmov	s15, r3
 800f4e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f4e8:	ed97 6a03 	vldr	s12, [r7, #12]
 800f4ec:	eddf 5a55 	vldr	s11, [pc, #340]	; 800f644 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f4f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f4f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f4f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f4fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f500:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f504:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f508:	e043      	b.n	800f592 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f50a:	697b      	ldr	r3, [r7, #20]
 800f50c:	ee07 3a90 	vmov	s15, r3
 800f510:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f514:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800f650 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800f518:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f51c:	4b47      	ldr	r3, [pc, #284]	; (800f63c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f51e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f524:	ee07 3a90 	vmov	s15, r3
 800f528:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f52c:	ed97 6a03 	vldr	s12, [r7, #12]
 800f530:	eddf 5a44 	vldr	s11, [pc, #272]	; 800f644 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f534:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f538:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f53c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f540:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f544:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f548:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f54c:	e021      	b.n	800f592 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f54e:	697b      	ldr	r3, [r7, #20]
 800f550:	ee07 3a90 	vmov	s15, r3
 800f554:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f558:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800f648 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800f55c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f560:	4b36      	ldr	r3, [pc, #216]	; (800f63c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f564:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f568:	ee07 3a90 	vmov	s15, r3
 800f56c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f570:	ed97 6a03 	vldr	s12, [r7, #12]
 800f574:	eddf 5a33 	vldr	s11, [pc, #204]	; 800f644 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f578:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f57c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f580:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f584:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f588:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f58c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f590:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800f592:	4b2a      	ldr	r3, [pc, #168]	; (800f63c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f596:	0a5b      	lsrs	r3, r3, #9
 800f598:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f59c:	ee07 3a90 	vmov	s15, r3
 800f5a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f5a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f5a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f5ac:	edd7 6a07 	vldr	s13, [r7, #28]
 800f5b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f5b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f5b8:	ee17 2a90 	vmov	r2, s15
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800f5c0:	4b1e      	ldr	r3, [pc, #120]	; (800f63c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f5c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f5c4:	0c1b      	lsrs	r3, r3, #16
 800f5c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f5ca:	ee07 3a90 	vmov	s15, r3
 800f5ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f5d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f5d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f5da:	edd7 6a07 	vldr	s13, [r7, #28]
 800f5de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f5e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f5e6:	ee17 2a90 	vmov	r2, s15
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800f5ee:	4b13      	ldr	r3, [pc, #76]	; (800f63c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f5f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f5f2:	0e1b      	lsrs	r3, r3, #24
 800f5f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f5f8:	ee07 3a90 	vmov	s15, r3
 800f5fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f600:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f604:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f608:	edd7 6a07 	vldr	s13, [r7, #28]
 800f60c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f610:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f614:	ee17 2a90 	vmov	r2, s15
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800f61c:	e008      	b.n	800f630 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	2200      	movs	r2, #0
 800f622:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	2200      	movs	r2, #0
 800f628:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	2200      	movs	r2, #0
 800f62e:	609a      	str	r2, [r3, #8]
}
 800f630:	bf00      	nop
 800f632:	3724      	adds	r7, #36	; 0x24
 800f634:	46bd      	mov	sp, r7
 800f636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f63a:	4770      	bx	lr
 800f63c:	58024400 	.word	0x58024400
 800f640:	03d09000 	.word	0x03d09000
 800f644:	46000000 	.word	0x46000000
 800f648:	4c742400 	.word	0x4c742400
 800f64c:	4a742400 	.word	0x4a742400
 800f650:	4bb71b00 	.word	0x4bb71b00

0800f654 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800f654:	b580      	push	{r7, lr}
 800f656:	b084      	sub	sp, #16
 800f658:	af00      	add	r7, sp, #0
 800f65a:	6078      	str	r0, [r7, #4]
 800f65c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f65e:	2300      	movs	r3, #0
 800f660:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f662:	4b53      	ldr	r3, [pc, #332]	; (800f7b0 <RCCEx_PLL2_Config+0x15c>)
 800f664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f666:	f003 0303 	and.w	r3, r3, #3
 800f66a:	2b03      	cmp	r3, #3
 800f66c:	d101      	bne.n	800f672 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800f66e:	2301      	movs	r3, #1
 800f670:	e099      	b.n	800f7a6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800f672:	4b4f      	ldr	r3, [pc, #316]	; (800f7b0 <RCCEx_PLL2_Config+0x15c>)
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	4a4e      	ldr	r2, [pc, #312]	; (800f7b0 <RCCEx_PLL2_Config+0x15c>)
 800f678:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f67c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f67e:	f7f9 fb25 	bl	8008ccc <HAL_GetTick>
 800f682:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f684:	e008      	b.n	800f698 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800f686:	f7f9 fb21 	bl	8008ccc <HAL_GetTick>
 800f68a:	4602      	mov	r2, r0
 800f68c:	68bb      	ldr	r3, [r7, #8]
 800f68e:	1ad3      	subs	r3, r2, r3
 800f690:	2b02      	cmp	r3, #2
 800f692:	d901      	bls.n	800f698 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800f694:	2303      	movs	r3, #3
 800f696:	e086      	b.n	800f7a6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f698:	4b45      	ldr	r3, [pc, #276]	; (800f7b0 <RCCEx_PLL2_Config+0x15c>)
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d1f0      	bne.n	800f686 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800f6a4:	4b42      	ldr	r3, [pc, #264]	; (800f7b0 <RCCEx_PLL2_Config+0x15c>)
 800f6a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6a8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	031b      	lsls	r3, r3, #12
 800f6b2:	493f      	ldr	r1, [pc, #252]	; (800f7b0 <RCCEx_PLL2_Config+0x15c>)
 800f6b4:	4313      	orrs	r3, r2
 800f6b6:	628b      	str	r3, [r1, #40]	; 0x28
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	685b      	ldr	r3, [r3, #4]
 800f6bc:	3b01      	subs	r3, #1
 800f6be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	689b      	ldr	r3, [r3, #8]
 800f6c6:	3b01      	subs	r3, #1
 800f6c8:	025b      	lsls	r3, r3, #9
 800f6ca:	b29b      	uxth	r3, r3
 800f6cc:	431a      	orrs	r2, r3
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	68db      	ldr	r3, [r3, #12]
 800f6d2:	3b01      	subs	r3, #1
 800f6d4:	041b      	lsls	r3, r3, #16
 800f6d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800f6da:	431a      	orrs	r2, r3
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	691b      	ldr	r3, [r3, #16]
 800f6e0:	3b01      	subs	r3, #1
 800f6e2:	061b      	lsls	r3, r3, #24
 800f6e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800f6e8:	4931      	ldr	r1, [pc, #196]	; (800f7b0 <RCCEx_PLL2_Config+0x15c>)
 800f6ea:	4313      	orrs	r3, r2
 800f6ec:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800f6ee:	4b30      	ldr	r3, [pc, #192]	; (800f7b0 <RCCEx_PLL2_Config+0x15c>)
 800f6f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	695b      	ldr	r3, [r3, #20]
 800f6fa:	492d      	ldr	r1, [pc, #180]	; (800f7b0 <RCCEx_PLL2_Config+0x15c>)
 800f6fc:	4313      	orrs	r3, r2
 800f6fe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800f700:	4b2b      	ldr	r3, [pc, #172]	; (800f7b0 <RCCEx_PLL2_Config+0x15c>)
 800f702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f704:	f023 0220 	bic.w	r2, r3, #32
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	699b      	ldr	r3, [r3, #24]
 800f70c:	4928      	ldr	r1, [pc, #160]	; (800f7b0 <RCCEx_PLL2_Config+0x15c>)
 800f70e:	4313      	orrs	r3, r2
 800f710:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800f712:	4b27      	ldr	r3, [pc, #156]	; (800f7b0 <RCCEx_PLL2_Config+0x15c>)
 800f714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f716:	4a26      	ldr	r2, [pc, #152]	; (800f7b0 <RCCEx_PLL2_Config+0x15c>)
 800f718:	f023 0310 	bic.w	r3, r3, #16
 800f71c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800f71e:	4b24      	ldr	r3, [pc, #144]	; (800f7b0 <RCCEx_PLL2_Config+0x15c>)
 800f720:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f722:	4b24      	ldr	r3, [pc, #144]	; (800f7b4 <RCCEx_PLL2_Config+0x160>)
 800f724:	4013      	ands	r3, r2
 800f726:	687a      	ldr	r2, [r7, #4]
 800f728:	69d2      	ldr	r2, [r2, #28]
 800f72a:	00d2      	lsls	r2, r2, #3
 800f72c:	4920      	ldr	r1, [pc, #128]	; (800f7b0 <RCCEx_PLL2_Config+0x15c>)
 800f72e:	4313      	orrs	r3, r2
 800f730:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800f732:	4b1f      	ldr	r3, [pc, #124]	; (800f7b0 <RCCEx_PLL2_Config+0x15c>)
 800f734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f736:	4a1e      	ldr	r2, [pc, #120]	; (800f7b0 <RCCEx_PLL2_Config+0x15c>)
 800f738:	f043 0310 	orr.w	r3, r3, #16
 800f73c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800f73e:	683b      	ldr	r3, [r7, #0]
 800f740:	2b00      	cmp	r3, #0
 800f742:	d106      	bne.n	800f752 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800f744:	4b1a      	ldr	r3, [pc, #104]	; (800f7b0 <RCCEx_PLL2_Config+0x15c>)
 800f746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f748:	4a19      	ldr	r2, [pc, #100]	; (800f7b0 <RCCEx_PLL2_Config+0x15c>)
 800f74a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f74e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f750:	e00f      	b.n	800f772 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800f752:	683b      	ldr	r3, [r7, #0]
 800f754:	2b01      	cmp	r3, #1
 800f756:	d106      	bne.n	800f766 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800f758:	4b15      	ldr	r3, [pc, #84]	; (800f7b0 <RCCEx_PLL2_Config+0x15c>)
 800f75a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f75c:	4a14      	ldr	r2, [pc, #80]	; (800f7b0 <RCCEx_PLL2_Config+0x15c>)
 800f75e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f762:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f764:	e005      	b.n	800f772 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800f766:	4b12      	ldr	r3, [pc, #72]	; (800f7b0 <RCCEx_PLL2_Config+0x15c>)
 800f768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f76a:	4a11      	ldr	r2, [pc, #68]	; (800f7b0 <RCCEx_PLL2_Config+0x15c>)
 800f76c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f770:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800f772:	4b0f      	ldr	r3, [pc, #60]	; (800f7b0 <RCCEx_PLL2_Config+0x15c>)
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	4a0e      	ldr	r2, [pc, #56]	; (800f7b0 <RCCEx_PLL2_Config+0x15c>)
 800f778:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f77c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f77e:	f7f9 faa5 	bl	8008ccc <HAL_GetTick>
 800f782:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f784:	e008      	b.n	800f798 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800f786:	f7f9 faa1 	bl	8008ccc <HAL_GetTick>
 800f78a:	4602      	mov	r2, r0
 800f78c:	68bb      	ldr	r3, [r7, #8]
 800f78e:	1ad3      	subs	r3, r2, r3
 800f790:	2b02      	cmp	r3, #2
 800f792:	d901      	bls.n	800f798 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800f794:	2303      	movs	r3, #3
 800f796:	e006      	b.n	800f7a6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f798:	4b05      	ldr	r3, [pc, #20]	; (800f7b0 <RCCEx_PLL2_Config+0x15c>)
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d0f0      	beq.n	800f786 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800f7a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	3710      	adds	r7, #16
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	bd80      	pop	{r7, pc}
 800f7ae:	bf00      	nop
 800f7b0:	58024400 	.word	0x58024400
 800f7b4:	ffff0007 	.word	0xffff0007

0800f7b8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	b084      	sub	sp, #16
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	6078      	str	r0, [r7, #4]
 800f7c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f7c6:	4b53      	ldr	r3, [pc, #332]	; (800f914 <RCCEx_PLL3_Config+0x15c>)
 800f7c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7ca:	f003 0303 	and.w	r3, r3, #3
 800f7ce:	2b03      	cmp	r3, #3
 800f7d0:	d101      	bne.n	800f7d6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800f7d2:	2301      	movs	r3, #1
 800f7d4:	e099      	b.n	800f90a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800f7d6:	4b4f      	ldr	r3, [pc, #316]	; (800f914 <RCCEx_PLL3_Config+0x15c>)
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	4a4e      	ldr	r2, [pc, #312]	; (800f914 <RCCEx_PLL3_Config+0x15c>)
 800f7dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f7e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f7e2:	f7f9 fa73 	bl	8008ccc <HAL_GetTick>
 800f7e6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f7e8:	e008      	b.n	800f7fc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800f7ea:	f7f9 fa6f 	bl	8008ccc <HAL_GetTick>
 800f7ee:	4602      	mov	r2, r0
 800f7f0:	68bb      	ldr	r3, [r7, #8]
 800f7f2:	1ad3      	subs	r3, r2, r3
 800f7f4:	2b02      	cmp	r3, #2
 800f7f6:	d901      	bls.n	800f7fc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800f7f8:	2303      	movs	r3, #3
 800f7fa:	e086      	b.n	800f90a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f7fc:	4b45      	ldr	r3, [pc, #276]	; (800f914 <RCCEx_PLL3_Config+0x15c>)
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f804:	2b00      	cmp	r3, #0
 800f806:	d1f0      	bne.n	800f7ea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800f808:	4b42      	ldr	r3, [pc, #264]	; (800f914 <RCCEx_PLL3_Config+0x15c>)
 800f80a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f80c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	051b      	lsls	r3, r3, #20
 800f816:	493f      	ldr	r1, [pc, #252]	; (800f914 <RCCEx_PLL3_Config+0x15c>)
 800f818:	4313      	orrs	r3, r2
 800f81a:	628b      	str	r3, [r1, #40]	; 0x28
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	685b      	ldr	r3, [r3, #4]
 800f820:	3b01      	subs	r3, #1
 800f822:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	689b      	ldr	r3, [r3, #8]
 800f82a:	3b01      	subs	r3, #1
 800f82c:	025b      	lsls	r3, r3, #9
 800f82e:	b29b      	uxth	r3, r3
 800f830:	431a      	orrs	r2, r3
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	68db      	ldr	r3, [r3, #12]
 800f836:	3b01      	subs	r3, #1
 800f838:	041b      	lsls	r3, r3, #16
 800f83a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800f83e:	431a      	orrs	r2, r3
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	691b      	ldr	r3, [r3, #16]
 800f844:	3b01      	subs	r3, #1
 800f846:	061b      	lsls	r3, r3, #24
 800f848:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800f84c:	4931      	ldr	r1, [pc, #196]	; (800f914 <RCCEx_PLL3_Config+0x15c>)
 800f84e:	4313      	orrs	r3, r2
 800f850:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800f852:	4b30      	ldr	r3, [pc, #192]	; (800f914 <RCCEx_PLL3_Config+0x15c>)
 800f854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f856:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	695b      	ldr	r3, [r3, #20]
 800f85e:	492d      	ldr	r1, [pc, #180]	; (800f914 <RCCEx_PLL3_Config+0x15c>)
 800f860:	4313      	orrs	r3, r2
 800f862:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800f864:	4b2b      	ldr	r3, [pc, #172]	; (800f914 <RCCEx_PLL3_Config+0x15c>)
 800f866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f868:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	699b      	ldr	r3, [r3, #24]
 800f870:	4928      	ldr	r1, [pc, #160]	; (800f914 <RCCEx_PLL3_Config+0x15c>)
 800f872:	4313      	orrs	r3, r2
 800f874:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800f876:	4b27      	ldr	r3, [pc, #156]	; (800f914 <RCCEx_PLL3_Config+0x15c>)
 800f878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f87a:	4a26      	ldr	r2, [pc, #152]	; (800f914 <RCCEx_PLL3_Config+0x15c>)
 800f87c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f880:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800f882:	4b24      	ldr	r3, [pc, #144]	; (800f914 <RCCEx_PLL3_Config+0x15c>)
 800f884:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f886:	4b24      	ldr	r3, [pc, #144]	; (800f918 <RCCEx_PLL3_Config+0x160>)
 800f888:	4013      	ands	r3, r2
 800f88a:	687a      	ldr	r2, [r7, #4]
 800f88c:	69d2      	ldr	r2, [r2, #28]
 800f88e:	00d2      	lsls	r2, r2, #3
 800f890:	4920      	ldr	r1, [pc, #128]	; (800f914 <RCCEx_PLL3_Config+0x15c>)
 800f892:	4313      	orrs	r3, r2
 800f894:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800f896:	4b1f      	ldr	r3, [pc, #124]	; (800f914 <RCCEx_PLL3_Config+0x15c>)
 800f898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f89a:	4a1e      	ldr	r2, [pc, #120]	; (800f914 <RCCEx_PLL3_Config+0x15c>)
 800f89c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f8a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800f8a2:	683b      	ldr	r3, [r7, #0]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d106      	bne.n	800f8b6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800f8a8:	4b1a      	ldr	r3, [pc, #104]	; (800f914 <RCCEx_PLL3_Config+0x15c>)
 800f8aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8ac:	4a19      	ldr	r2, [pc, #100]	; (800f914 <RCCEx_PLL3_Config+0x15c>)
 800f8ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800f8b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f8b4:	e00f      	b.n	800f8d6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800f8b6:	683b      	ldr	r3, [r7, #0]
 800f8b8:	2b01      	cmp	r3, #1
 800f8ba:	d106      	bne.n	800f8ca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800f8bc:	4b15      	ldr	r3, [pc, #84]	; (800f914 <RCCEx_PLL3_Config+0x15c>)
 800f8be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8c0:	4a14      	ldr	r2, [pc, #80]	; (800f914 <RCCEx_PLL3_Config+0x15c>)
 800f8c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800f8c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f8c8:	e005      	b.n	800f8d6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800f8ca:	4b12      	ldr	r3, [pc, #72]	; (800f914 <RCCEx_PLL3_Config+0x15c>)
 800f8cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8ce:	4a11      	ldr	r2, [pc, #68]	; (800f914 <RCCEx_PLL3_Config+0x15c>)
 800f8d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f8d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800f8d6:	4b0f      	ldr	r3, [pc, #60]	; (800f914 <RCCEx_PLL3_Config+0x15c>)
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	4a0e      	ldr	r2, [pc, #56]	; (800f914 <RCCEx_PLL3_Config+0x15c>)
 800f8dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f8e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f8e2:	f7f9 f9f3 	bl	8008ccc <HAL_GetTick>
 800f8e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f8e8:	e008      	b.n	800f8fc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800f8ea:	f7f9 f9ef 	bl	8008ccc <HAL_GetTick>
 800f8ee:	4602      	mov	r2, r0
 800f8f0:	68bb      	ldr	r3, [r7, #8]
 800f8f2:	1ad3      	subs	r3, r2, r3
 800f8f4:	2b02      	cmp	r3, #2
 800f8f6:	d901      	bls.n	800f8fc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800f8f8:	2303      	movs	r3, #3
 800f8fa:	e006      	b.n	800f90a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f8fc:	4b05      	ldr	r3, [pc, #20]	; (800f914 <RCCEx_PLL3_Config+0x15c>)
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f904:	2b00      	cmp	r3, #0
 800f906:	d0f0      	beq.n	800f8ea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800f908:	7bfb      	ldrb	r3, [r7, #15]
}
 800f90a:	4618      	mov	r0, r3
 800f90c:	3710      	adds	r7, #16
 800f90e:	46bd      	mov	sp, r7
 800f910:	bd80      	pop	{r7, pc}
 800f912:	bf00      	nop
 800f914:	58024400 	.word	0x58024400
 800f918:	ffff0007 	.word	0xffff0007

0800f91c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800f91c:	b580      	push	{r7, lr}
 800f91e:	b08a      	sub	sp, #40	; 0x28
 800f920:	af00      	add	r7, sp, #0
 800f922:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d101      	bne.n	800f92e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800f92a:	2301      	movs	r3, #1
 800f92c:	e075      	b.n	800fa1a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f934:	b2db      	uxtb	r3, r3
 800f936:	2b00      	cmp	r3, #0
 800f938:	d105      	bne.n	800f946 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	2200      	movs	r2, #0
 800f93e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800f940:	6878      	ldr	r0, [r7, #4]
 800f942:	f7f1 fe9f 	bl	8001684 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	2204      	movs	r2, #4
 800f94a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800f94e:	6878      	ldr	r0, [r7, #4]
 800f950:	f000 f868 	bl	800fa24 <HAL_SD_InitCard>
 800f954:	4603      	mov	r3, r0
 800f956:	2b00      	cmp	r3, #0
 800f958:	d001      	beq.n	800f95e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800f95a:	2301      	movs	r3, #1
 800f95c:	e05d      	b.n	800fa1a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800f95e:	f107 0308 	add.w	r3, r7, #8
 800f962:	4619      	mov	r1, r3
 800f964:	6878      	ldr	r0, [r7, #4]
 800f966:	f000 fbed 	bl	8010144 <HAL_SD_GetCardStatus>
 800f96a:	4603      	mov	r3, r0
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d001      	beq.n	800f974 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800f970:	2301      	movs	r3, #1
 800f972:	e052      	b.n	800fa1a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800f974:	7e3b      	ldrb	r3, [r7, #24]
 800f976:	b2db      	uxtb	r3, r3
 800f978:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800f97a:	7e7b      	ldrb	r3, [r7, #25]
 800f97c:	b2db      	uxtb	r3, r3
 800f97e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f984:	2b01      	cmp	r3, #1
 800f986:	d10a      	bne.n	800f99e <HAL_SD_Init+0x82>
 800f988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d102      	bne.n	800f994 <HAL_SD_Init+0x78>
 800f98e:	6a3b      	ldr	r3, [r7, #32]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d004      	beq.n	800f99e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f99a:	659a      	str	r2, [r3, #88]	; 0x58
 800f99c:	e00b      	b.n	800f9b6 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9a2:	2b01      	cmp	r3, #1
 800f9a4:	d104      	bne.n	800f9b0 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f9ac:	659a      	str	r2, [r3, #88]	; 0x58
 800f9ae:	e002      	b.n	800f9b6 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	68db      	ldr	r3, [r3, #12]
 800f9ba:	4619      	mov	r1, r3
 800f9bc:	6878      	ldr	r0, [r7, #4]
 800f9be:	f000 fcab 	bl	8010318 <HAL_SD_ConfigWideBusOperation>
 800f9c2:	4603      	mov	r3, r0
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d001      	beq.n	800f9cc <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800f9c8:	2301      	movs	r3, #1
 800f9ca:	e026      	b.n	800fa1a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800f9cc:	f7f9 f97e 	bl	8008ccc <HAL_GetTick>
 800f9d0:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800f9d2:	e011      	b.n	800f9f8 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f9d4:	f7f9 f97a 	bl	8008ccc <HAL_GetTick>
 800f9d8:	4602      	mov	r2, r0
 800f9da:	69fb      	ldr	r3, [r7, #28]
 800f9dc:	1ad3      	subs	r3, r2, r3
 800f9de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9e2:	d109      	bne.n	800f9f8 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f9ea:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	2201      	movs	r2, #1
 800f9f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800f9f4:	2303      	movs	r3, #3
 800f9f6:	e010      	b.n	800fa1a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800f9f8:	6878      	ldr	r0, [r7, #4]
 800f9fa:	f000 fd9f 	bl	801053c <HAL_SD_GetCardState>
 800f9fe:	4603      	mov	r3, r0
 800fa00:	2b04      	cmp	r3, #4
 800fa02:	d1e7      	bne.n	800f9d4 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	2200      	movs	r2, #0
 800fa08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	2200      	movs	r2, #0
 800fa0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	2201      	movs	r2, #1
 800fa14:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800fa18:	2300      	movs	r3, #0
}
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	3728      	adds	r7, #40	; 0x28
 800fa1e:	46bd      	mov	sp, r7
 800fa20:	bd80      	pop	{r7, pc}
	...

0800fa24 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800fa24:	b590      	push	{r4, r7, lr}
 800fa26:	b08d      	sub	sp, #52	; 0x34
 800fa28:	af02      	add	r7, sp, #8
 800fa2a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800fa30:	2300      	movs	r3, #0
 800fa32:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800fa34:	2300      	movs	r3, #0
 800fa36:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800fa38:	2300      	movs	r3, #0
 800fa3a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800fa3c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800fa40:	f04f 0100 	mov.w	r1, #0
 800fa44:	f7fe fd1e 	bl	800e484 <HAL_RCCEx_GetPeriphCLKFreq>
 800fa48:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800fa4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d109      	bne.n	800fa64 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	2201      	movs	r2, #1
 800fa54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800fa5e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800fa60:	2301      	movs	r3, #1
 800fa62:	e070      	b.n	800fb46 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800fa64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa66:	0a1b      	lsrs	r3, r3, #8
 800fa68:	4a39      	ldr	r2, [pc, #228]	; (800fb50 <HAL_SD_InitCard+0x12c>)
 800fa6a:	fba2 2303 	umull	r2, r3, r2, r3
 800fa6e:	091b      	lsrs	r3, r3, #4
 800fa70:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	681c      	ldr	r4, [r3, #0]
 800fa76:	466a      	mov	r2, sp
 800fa78:	f107 0318 	add.w	r3, r7, #24
 800fa7c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fa80:	e882 0003 	stmia.w	r2, {r0, r1}
 800fa84:	f107 030c 	add.w	r3, r7, #12
 800fa88:	cb0e      	ldmia	r3, {r1, r2, r3}
 800fa8a:	4620      	mov	r0, r4
 800fa8c:	f002 fe72 	bl	8012774 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	4618      	mov	r0, r3
 800fa96:	f002 fea4 	bl	80127e2 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800fa9a:	69fb      	ldr	r3, [r7, #28]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d005      	beq.n	800faac <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800faa0:	69fb      	ldr	r3, [r7, #28]
 800faa2:	005b      	lsls	r3, r3, #1
 800faa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800faa6:	fbb2 f3f3 	udiv	r3, r2, r3
 800faaa:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800faac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d007      	beq.n	800fac2 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800fab2:	4a28      	ldr	r2, [pc, #160]	; (800fb54 <HAL_SD_InitCard+0x130>)
 800fab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fab6:	fbb2 f3f3 	udiv	r3, r2, r3
 800faba:	3301      	adds	r3, #1
 800fabc:	4618      	mov	r0, r3
 800fabe:	f7f9 f911 	bl	8008ce4 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800fac2:	6878      	ldr	r0, [r7, #4]
 800fac4:	f000 fe28 	bl	8010718 <SD_PowerON>
 800fac8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800faca:	6a3b      	ldr	r3, [r7, #32]
 800facc:	2b00      	cmp	r3, #0
 800face:	d00b      	beq.n	800fae8 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	2201      	movs	r2, #1
 800fad4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fadc:	6a3b      	ldr	r3, [r7, #32]
 800fade:	431a      	orrs	r2, r3
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800fae4:	2301      	movs	r3, #1
 800fae6:	e02e      	b.n	800fb46 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800fae8:	6878      	ldr	r0, [r7, #4]
 800faea:	f000 fd47 	bl	801057c <SD_InitCard>
 800faee:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800faf0:	6a3b      	ldr	r3, [r7, #32]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d00b      	beq.n	800fb0e <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	2201      	movs	r2, #1
 800fafa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fb02:	6a3b      	ldr	r3, [r7, #32]
 800fb04:	431a      	orrs	r2, r3
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800fb0a:	2301      	movs	r3, #1
 800fb0c:	e01b      	b.n	800fb46 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fb16:	4618      	mov	r0, r3
 800fb18:	f002 fef8 	bl	801290c <SDMMC_CmdBlockLength>
 800fb1c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800fb1e:	6a3b      	ldr	r3, [r7, #32]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d00f      	beq.n	800fb44 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	4a0b      	ldr	r2, [pc, #44]	; (800fb58 <HAL_SD_InitCard+0x134>)
 800fb2a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fb30:	6a3b      	ldr	r3, [r7, #32]
 800fb32:	431a      	orrs	r2, r3
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	2201      	movs	r2, #1
 800fb3c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800fb40:	2301      	movs	r3, #1
 800fb42:	e000      	b.n	800fb46 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800fb44:	2300      	movs	r3, #0
}
 800fb46:	4618      	mov	r0, r3
 800fb48:	372c      	adds	r7, #44	; 0x2c
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	bd90      	pop	{r4, r7, pc}
 800fb4e:	bf00      	nop
 800fb50:	014f8b59 	.word	0x014f8b59
 800fb54:	00012110 	.word	0x00012110
 800fb58:	1fe00fff 	.word	0x1fe00fff

0800fb5c <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	b08c      	sub	sp, #48	; 0x30
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	60f8      	str	r0, [r7, #12]
 800fb64:	60b9      	str	r1, [r7, #8]
 800fb66:	607a      	str	r2, [r7, #4]
 800fb68:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800fb6e:	68bb      	ldr	r3, [r7, #8]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d107      	bne.n	800fb84 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb78:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800fb80:	2301      	movs	r3, #1
 800fb82:	e08d      	b.n	800fca0 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fb8a:	b2db      	uxtb	r3, r3
 800fb8c:	2b01      	cmp	r3, #1
 800fb8e:	f040 8086 	bne.w	800fc9e <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	2200      	movs	r2, #0
 800fb96:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800fb98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fb9a:	683b      	ldr	r3, [r7, #0]
 800fb9c:	441a      	add	r2, r3
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fba2:	429a      	cmp	r2, r3
 800fba4:	d907      	bls.n	800fbb6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fbaa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800fbb2:	2301      	movs	r3, #1
 800fbb4:	e074      	b.n	800fca0 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	2203      	movs	r2, #3
 800fbba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	2200      	movs	r2, #0
 800fbc4:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	68ba      	ldr	r2, [r7, #8]
 800fbca:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800fbcc:	683b      	ldr	r3, [r7, #0]
 800fbce:	025a      	lsls	r2, r3, #9
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbd8:	2b01      	cmp	r3, #1
 800fbda:	d002      	beq.n	800fbe2 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800fbdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbde:	025b      	lsls	r3, r3, #9
 800fbe0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800fbe2:	f04f 33ff 	mov.w	r3, #4294967295
 800fbe6:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800fbe8:	683b      	ldr	r3, [r7, #0]
 800fbea:	025b      	lsls	r3, r3, #9
 800fbec:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800fbee:	2390      	movs	r3, #144	; 0x90
 800fbf0:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800fbf2:	2302      	movs	r3, #2
 800fbf4:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800fbfa:	2300      	movs	r3, #0
 800fbfc:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	f107 0210 	add.w	r2, r7, #16
 800fc06:	4611      	mov	r1, r2
 800fc08:	4618      	mov	r0, r3
 800fc0a:	f002 fe53 	bl	80128b4 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	68da      	ldr	r2, [r3, #12]
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fc1c:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	68ba      	ldr	r2, [r7, #8]
 800fc24:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	2201      	movs	r2, #1
 800fc2c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800fc2e:	683b      	ldr	r3, [r7, #0]
 800fc30:	2b01      	cmp	r3, #1
 800fc32:	d90a      	bls.n	800fc4a <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	2282      	movs	r2, #130	; 0x82
 800fc38:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fc40:	4618      	mov	r0, r3
 800fc42:	f002 fea9 	bl	8012998 <SDMMC_CmdReadMultiBlock>
 800fc46:	62f8      	str	r0, [r7, #44]	; 0x2c
 800fc48:	e009      	b.n	800fc5e <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	2281      	movs	r2, #129	; 0x81
 800fc4e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fc56:	4618      	mov	r0, r3
 800fc58:	f002 fe7b 	bl	8012952 <SDMMC_CmdReadSingleBlock>
 800fc5c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800fc5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d012      	beq.n	800fc8a <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	4a0f      	ldr	r2, [pc, #60]	; (800fca8 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800fc6a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fc70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc72:	431a      	orrs	r2, r3
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	2201      	movs	r2, #1
 800fc7c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	2200      	movs	r2, #0
 800fc84:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800fc86:	2301      	movs	r3, #1
 800fc88:	e00a      	b.n	800fca0 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800fc98:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	e000      	b.n	800fca0 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800fc9e:	2302      	movs	r3, #2
  }
}
 800fca0:	4618      	mov	r0, r3
 800fca2:	3730      	adds	r7, #48	; 0x30
 800fca4:	46bd      	mov	sp, r7
 800fca6:	bd80      	pop	{r7, pc}
 800fca8:	1fe00fff 	.word	0x1fe00fff

0800fcac <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800fcac:	b580      	push	{r7, lr}
 800fcae:	b08c      	sub	sp, #48	; 0x30
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	60f8      	str	r0, [r7, #12]
 800fcb4:	60b9      	str	r1, [r7, #8]
 800fcb6:	607a      	str	r2, [r7, #4]
 800fcb8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800fcbe:	68bb      	ldr	r3, [r7, #8]
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d107      	bne.n	800fcd4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fcc8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800fcd0:	2301      	movs	r3, #1
 800fcd2:	e08d      	b.n	800fdf0 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fcda:	b2db      	uxtb	r3, r3
 800fcdc:	2b01      	cmp	r3, #1
 800fcde:	f040 8086 	bne.w	800fdee <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	2200      	movs	r2, #0
 800fce6:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800fce8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fcea:	683b      	ldr	r3, [r7, #0]
 800fcec:	441a      	add	r2, r3
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fcf2:	429a      	cmp	r2, r3
 800fcf4:	d907      	bls.n	800fd06 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fcfa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800fd02:	2301      	movs	r3, #1
 800fd04:	e074      	b.n	800fdf0 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	2203      	movs	r2, #3
 800fd0a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	2200      	movs	r2, #0
 800fd14:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	68ba      	ldr	r2, [r7, #8]
 800fd1a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800fd1c:	683b      	ldr	r3, [r7, #0]
 800fd1e:	025a      	lsls	r2, r3, #9
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd28:	2b01      	cmp	r3, #1
 800fd2a:	d002      	beq.n	800fd32 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800fd2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd2e:	025b      	lsls	r3, r3, #9
 800fd30:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800fd32:	f04f 33ff 	mov.w	r3, #4294967295
 800fd36:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800fd38:	683b      	ldr	r3, [r7, #0]
 800fd3a:	025b      	lsls	r3, r3, #9
 800fd3c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800fd3e:	2390      	movs	r3, #144	; 0x90
 800fd40:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800fd42:	2300      	movs	r3, #0
 800fd44:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800fd46:	2300      	movs	r3, #0
 800fd48:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	f107 0210 	add.w	r2, r7, #16
 800fd56:	4611      	mov	r1, r2
 800fd58:	4618      	mov	r0, r3
 800fd5a:	f002 fdab 	bl	80128b4 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	68da      	ldr	r2, [r3, #12]
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fd6c:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	68ba      	ldr	r2, [r7, #8]
 800fd74:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	2201      	movs	r2, #1
 800fd7c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800fd7e:	683b      	ldr	r3, [r7, #0]
 800fd80:	2b01      	cmp	r3, #1
 800fd82:	d90a      	bls.n	800fd9a <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	22a0      	movs	r2, #160	; 0xa0
 800fd88:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fd90:	4618      	mov	r0, r3
 800fd92:	f002 fe47 	bl	8012a24 <SDMMC_CmdWriteMultiBlock>
 800fd96:	62f8      	str	r0, [r7, #44]	; 0x2c
 800fd98:	e009      	b.n	800fdae <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	2290      	movs	r2, #144	; 0x90
 800fd9e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fda6:	4618      	mov	r0, r3
 800fda8:	f002 fe19 	bl	80129de <SDMMC_CmdWriteSingleBlock>
 800fdac:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800fdae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d012      	beq.n	800fdda <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	4a0f      	ldr	r2, [pc, #60]	; (800fdf8 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800fdba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fdc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdc2:	431a      	orrs	r2, r3
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	2201      	movs	r2, #1
 800fdcc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	2200      	movs	r2, #0
 800fdd4:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800fdd6:	2301      	movs	r3, #1
 800fdd8:	e00a      	b.n	800fdf0 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800fde8:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800fdea:	2300      	movs	r3, #0
 800fdec:	e000      	b.n	800fdf0 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800fdee:	2302      	movs	r3, #2
  }
}
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	3730      	adds	r7, #48	; 0x30
 800fdf4:	46bd      	mov	sp, r7
 800fdf6:	bd80      	pop	{r7, pc}
 800fdf8:	1fe00fff 	.word	0x1fe00fff

0800fdfc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800fdfc:	b480      	push	{r7}
 800fdfe:	b083      	sub	sp, #12
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
 800fe04:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fe0a:	0f9b      	lsrs	r3, r3, #30
 800fe0c:	b2da      	uxtb	r2, r3
 800fe0e:	683b      	ldr	r3, [r7, #0]
 800fe10:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fe16:	0e9b      	lsrs	r3, r3, #26
 800fe18:	b2db      	uxtb	r3, r3
 800fe1a:	f003 030f 	and.w	r3, r3, #15
 800fe1e:	b2da      	uxtb	r2, r3
 800fe20:	683b      	ldr	r3, [r7, #0]
 800fe22:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fe28:	0e1b      	lsrs	r3, r3, #24
 800fe2a:	b2db      	uxtb	r3, r3
 800fe2c:	f003 0303 	and.w	r3, r3, #3
 800fe30:	b2da      	uxtb	r2, r3
 800fe32:	683b      	ldr	r3, [r7, #0]
 800fe34:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fe3a:	0c1b      	lsrs	r3, r3, #16
 800fe3c:	b2da      	uxtb	r2, r3
 800fe3e:	683b      	ldr	r3, [r7, #0]
 800fe40:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fe46:	0a1b      	lsrs	r3, r3, #8
 800fe48:	b2da      	uxtb	r2, r3
 800fe4a:	683b      	ldr	r3, [r7, #0]
 800fe4c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fe52:	b2da      	uxtb	r2, r3
 800fe54:	683b      	ldr	r3, [r7, #0]
 800fe56:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fe5c:	0d1b      	lsrs	r3, r3, #20
 800fe5e:	b29a      	uxth	r2, r3
 800fe60:	683b      	ldr	r3, [r7, #0]
 800fe62:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fe68:	0c1b      	lsrs	r3, r3, #16
 800fe6a:	b2db      	uxtb	r3, r3
 800fe6c:	f003 030f 	and.w	r3, r3, #15
 800fe70:	b2da      	uxtb	r2, r3
 800fe72:	683b      	ldr	r3, [r7, #0]
 800fe74:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fe7a:	0bdb      	lsrs	r3, r3, #15
 800fe7c:	b2db      	uxtb	r3, r3
 800fe7e:	f003 0301 	and.w	r3, r3, #1
 800fe82:	b2da      	uxtb	r2, r3
 800fe84:	683b      	ldr	r3, [r7, #0]
 800fe86:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fe8c:	0b9b      	lsrs	r3, r3, #14
 800fe8e:	b2db      	uxtb	r3, r3
 800fe90:	f003 0301 	and.w	r3, r3, #1
 800fe94:	b2da      	uxtb	r2, r3
 800fe96:	683b      	ldr	r3, [r7, #0]
 800fe98:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fe9e:	0b5b      	lsrs	r3, r3, #13
 800fea0:	b2db      	uxtb	r3, r3
 800fea2:	f003 0301 	and.w	r3, r3, #1
 800fea6:	b2da      	uxtb	r2, r3
 800fea8:	683b      	ldr	r3, [r7, #0]
 800feaa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800feb0:	0b1b      	lsrs	r3, r3, #12
 800feb2:	b2db      	uxtb	r3, r3
 800feb4:	f003 0301 	and.w	r3, r3, #1
 800feb8:	b2da      	uxtb	r2, r3
 800feba:	683b      	ldr	r3, [r7, #0]
 800febc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800febe:	683b      	ldr	r3, [r7, #0]
 800fec0:	2200      	movs	r2, #0
 800fec2:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d163      	bne.n	800ff94 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fed0:	009a      	lsls	r2, r3, #2
 800fed2:	f640 73fc 	movw	r3, #4092	; 0xffc
 800fed6:	4013      	ands	r3, r2
 800fed8:	687a      	ldr	r2, [r7, #4]
 800feda:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800fedc:	0f92      	lsrs	r2, r2, #30
 800fede:	431a      	orrs	r2, r3
 800fee0:	683b      	ldr	r3, [r7, #0]
 800fee2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fee8:	0edb      	lsrs	r3, r3, #27
 800feea:	b2db      	uxtb	r3, r3
 800feec:	f003 0307 	and.w	r3, r3, #7
 800fef0:	b2da      	uxtb	r2, r3
 800fef2:	683b      	ldr	r3, [r7, #0]
 800fef4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fefa:	0e1b      	lsrs	r3, r3, #24
 800fefc:	b2db      	uxtb	r3, r3
 800fefe:	f003 0307 	and.w	r3, r3, #7
 800ff02:	b2da      	uxtb	r2, r3
 800ff04:	683b      	ldr	r3, [r7, #0]
 800ff06:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ff0c:	0d5b      	lsrs	r3, r3, #21
 800ff0e:	b2db      	uxtb	r3, r3
 800ff10:	f003 0307 	and.w	r3, r3, #7
 800ff14:	b2da      	uxtb	r2, r3
 800ff16:	683b      	ldr	r3, [r7, #0]
 800ff18:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ff1e:	0c9b      	lsrs	r3, r3, #18
 800ff20:	b2db      	uxtb	r3, r3
 800ff22:	f003 0307 	and.w	r3, r3, #7
 800ff26:	b2da      	uxtb	r2, r3
 800ff28:	683b      	ldr	r3, [r7, #0]
 800ff2a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ff30:	0bdb      	lsrs	r3, r3, #15
 800ff32:	b2db      	uxtb	r3, r3
 800ff34:	f003 0307 	and.w	r3, r3, #7
 800ff38:	b2da      	uxtb	r2, r3
 800ff3a:	683b      	ldr	r3, [r7, #0]
 800ff3c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ff3e:	683b      	ldr	r3, [r7, #0]
 800ff40:	691b      	ldr	r3, [r3, #16]
 800ff42:	1c5a      	adds	r2, r3, #1
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ff48:	683b      	ldr	r3, [r7, #0]
 800ff4a:	7e1b      	ldrb	r3, [r3, #24]
 800ff4c:	b2db      	uxtb	r3, r3
 800ff4e:	f003 0307 	and.w	r3, r3, #7
 800ff52:	3302      	adds	r3, #2
 800ff54:	2201      	movs	r2, #1
 800ff56:	fa02 f303 	lsl.w	r3, r2, r3
 800ff5a:	687a      	ldr	r2, [r7, #4]
 800ff5c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ff5e:	fb03 f202 	mul.w	r2, r3, r2
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ff66:	683b      	ldr	r3, [r7, #0]
 800ff68:	7a1b      	ldrb	r3, [r3, #8]
 800ff6a:	b2db      	uxtb	r3, r3
 800ff6c:	f003 030f 	and.w	r3, r3, #15
 800ff70:	2201      	movs	r2, #1
 800ff72:	409a      	lsls	r2, r3
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ff7c:	687a      	ldr	r2, [r7, #4]
 800ff7e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800ff80:	0a52      	lsrs	r2, r2, #9
 800ff82:	fb03 f202 	mul.w	r2, r3, r2
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ff90:	655a      	str	r2, [r3, #84]	; 0x54
 800ff92:	e031      	b.n	800fff8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff98:	2b01      	cmp	r3, #1
 800ff9a:	d11d      	bne.n	800ffd8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ffa0:	041b      	lsls	r3, r3, #16
 800ffa2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ffaa:	0c1b      	lsrs	r3, r3, #16
 800ffac:	431a      	orrs	r2, r3
 800ffae:	683b      	ldr	r3, [r7, #0]
 800ffb0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800ffb2:	683b      	ldr	r3, [r7, #0]
 800ffb4:	691b      	ldr	r3, [r3, #16]
 800ffb6:	3301      	adds	r3, #1
 800ffb8:	029a      	lsls	r2, r3, #10
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ffcc:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	655a      	str	r2, [r3, #84]	; 0x54
 800ffd6:	e00f      	b.n	800fff8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	4a58      	ldr	r2, [pc, #352]	; (8010140 <HAL_SD_GetCardCSD+0x344>)
 800ffde:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ffe4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	2201      	movs	r2, #1
 800fff0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800fff4:	2301      	movs	r3, #1
 800fff6:	e09d      	b.n	8010134 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fffc:	0b9b      	lsrs	r3, r3, #14
 800fffe:	b2db      	uxtb	r3, r3
 8010000:	f003 0301 	and.w	r3, r3, #1
 8010004:	b2da      	uxtb	r2, r3
 8010006:	683b      	ldr	r3, [r7, #0]
 8010008:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801000e:	09db      	lsrs	r3, r3, #7
 8010010:	b2db      	uxtb	r3, r3
 8010012:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010016:	b2da      	uxtb	r2, r3
 8010018:	683b      	ldr	r3, [r7, #0]
 801001a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010020:	b2db      	uxtb	r3, r3
 8010022:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010026:	b2da      	uxtb	r2, r3
 8010028:	683b      	ldr	r3, [r7, #0]
 801002a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010030:	0fdb      	lsrs	r3, r3, #31
 8010032:	b2da      	uxtb	r2, r3
 8010034:	683b      	ldr	r3, [r7, #0]
 8010036:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801003c:	0f5b      	lsrs	r3, r3, #29
 801003e:	b2db      	uxtb	r3, r3
 8010040:	f003 0303 	and.w	r3, r3, #3
 8010044:	b2da      	uxtb	r2, r3
 8010046:	683b      	ldr	r3, [r7, #0]
 8010048:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801004e:	0e9b      	lsrs	r3, r3, #26
 8010050:	b2db      	uxtb	r3, r3
 8010052:	f003 0307 	and.w	r3, r3, #7
 8010056:	b2da      	uxtb	r2, r3
 8010058:	683b      	ldr	r3, [r7, #0]
 801005a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010060:	0d9b      	lsrs	r3, r3, #22
 8010062:	b2db      	uxtb	r3, r3
 8010064:	f003 030f 	and.w	r3, r3, #15
 8010068:	b2da      	uxtb	r2, r3
 801006a:	683b      	ldr	r3, [r7, #0]
 801006c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010072:	0d5b      	lsrs	r3, r3, #21
 8010074:	b2db      	uxtb	r3, r3
 8010076:	f003 0301 	and.w	r3, r3, #1
 801007a:	b2da      	uxtb	r2, r3
 801007c:	683b      	ldr	r3, [r7, #0]
 801007e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8010082:	683b      	ldr	r3, [r7, #0]
 8010084:	2200      	movs	r2, #0
 8010086:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801008e:	0c1b      	lsrs	r3, r3, #16
 8010090:	b2db      	uxtb	r3, r3
 8010092:	f003 0301 	and.w	r3, r3, #1
 8010096:	b2da      	uxtb	r2, r3
 8010098:	683b      	ldr	r3, [r7, #0]
 801009a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80100a2:	0bdb      	lsrs	r3, r3, #15
 80100a4:	b2db      	uxtb	r3, r3
 80100a6:	f003 0301 	and.w	r3, r3, #1
 80100aa:	b2da      	uxtb	r2, r3
 80100ac:	683b      	ldr	r3, [r7, #0]
 80100ae:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80100b6:	0b9b      	lsrs	r3, r3, #14
 80100b8:	b2db      	uxtb	r3, r3
 80100ba:	f003 0301 	and.w	r3, r3, #1
 80100be:	b2da      	uxtb	r2, r3
 80100c0:	683b      	ldr	r3, [r7, #0]
 80100c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80100ca:	0b5b      	lsrs	r3, r3, #13
 80100cc:	b2db      	uxtb	r3, r3
 80100ce:	f003 0301 	and.w	r3, r3, #1
 80100d2:	b2da      	uxtb	r2, r3
 80100d4:	683b      	ldr	r3, [r7, #0]
 80100d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80100de:	0b1b      	lsrs	r3, r3, #12
 80100e0:	b2db      	uxtb	r3, r3
 80100e2:	f003 0301 	and.w	r3, r3, #1
 80100e6:	b2da      	uxtb	r2, r3
 80100e8:	683b      	ldr	r3, [r7, #0]
 80100ea:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80100f2:	0a9b      	lsrs	r3, r3, #10
 80100f4:	b2db      	uxtb	r3, r3
 80100f6:	f003 0303 	and.w	r3, r3, #3
 80100fa:	b2da      	uxtb	r2, r3
 80100fc:	683b      	ldr	r3, [r7, #0]
 80100fe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010106:	0a1b      	lsrs	r3, r3, #8
 8010108:	b2db      	uxtb	r3, r3
 801010a:	f003 0303 	and.w	r3, r3, #3
 801010e:	b2da      	uxtb	r2, r3
 8010110:	683b      	ldr	r3, [r7, #0]
 8010112:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801011a:	085b      	lsrs	r3, r3, #1
 801011c:	b2db      	uxtb	r3, r3
 801011e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010122:	b2da      	uxtb	r2, r3
 8010124:	683b      	ldr	r3, [r7, #0]
 8010126:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 801012a:	683b      	ldr	r3, [r7, #0]
 801012c:	2201      	movs	r2, #1
 801012e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8010132:	2300      	movs	r3, #0
}
 8010134:	4618      	mov	r0, r3
 8010136:	370c      	adds	r7, #12
 8010138:	46bd      	mov	sp, r7
 801013a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013e:	4770      	bx	lr
 8010140:	1fe00fff 	.word	0x1fe00fff

08010144 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8010144:	b580      	push	{r7, lr}
 8010146:	b094      	sub	sp, #80	; 0x50
 8010148:	af00      	add	r7, sp, #0
 801014a:	6078      	str	r0, [r7, #4]
 801014c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 801014e:	2300      	movs	r3, #0
 8010150:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801015a:	b2db      	uxtb	r3, r3
 801015c:	2b03      	cmp	r3, #3
 801015e:	d101      	bne.n	8010164 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8010160:	2301      	movs	r3, #1
 8010162:	e0a7      	b.n	80102b4 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8010164:	f107 0308 	add.w	r3, r7, #8
 8010168:	4619      	mov	r1, r3
 801016a:	6878      	ldr	r0, [r7, #4]
 801016c:	f000 fb62 	bl	8010834 <SD_SendSDStatus>
 8010170:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8010172:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010174:	2b00      	cmp	r3, #0
 8010176:	d011      	beq.n	801019c <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	4a4f      	ldr	r2, [pc, #316]	; (80102bc <HAL_SD_GetCardStatus+0x178>)
 801017e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010184:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010186:	431a      	orrs	r2, r3
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	2201      	movs	r2, #1
 8010190:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8010194:	2301      	movs	r3, #1
 8010196:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801019a:	e070      	b.n	801027e <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 801019c:	68bb      	ldr	r3, [r7, #8]
 801019e:	099b      	lsrs	r3, r3, #6
 80101a0:	b2db      	uxtb	r3, r3
 80101a2:	f003 0303 	and.w	r3, r3, #3
 80101a6:	b2da      	uxtb	r2, r3
 80101a8:	683b      	ldr	r3, [r7, #0]
 80101aa:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80101ac:	68bb      	ldr	r3, [r7, #8]
 80101ae:	095b      	lsrs	r3, r3, #5
 80101b0:	b2db      	uxtb	r3, r3
 80101b2:	f003 0301 	and.w	r3, r3, #1
 80101b6:	b2da      	uxtb	r2, r3
 80101b8:	683b      	ldr	r3, [r7, #0]
 80101ba:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80101bc:	68bb      	ldr	r3, [r7, #8]
 80101be:	0a1b      	lsrs	r3, r3, #8
 80101c0:	b29b      	uxth	r3, r3
 80101c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80101c6:	b29a      	uxth	r2, r3
 80101c8:	68bb      	ldr	r3, [r7, #8]
 80101ca:	0e1b      	lsrs	r3, r3, #24
 80101cc:	b29b      	uxth	r3, r3
 80101ce:	4313      	orrs	r3, r2
 80101d0:	b29a      	uxth	r2, r3
 80101d2:	683b      	ldr	r3, [r7, #0]
 80101d4:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	061a      	lsls	r2, r3, #24
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	021b      	lsls	r3, r3, #8
 80101de:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80101e2:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	0a1b      	lsrs	r3, r3, #8
 80101e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80101ec:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	0e1b      	lsrs	r3, r3, #24
 80101f2:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80101f4:	683b      	ldr	r3, [r7, #0]
 80101f6:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80101f8:	693b      	ldr	r3, [r7, #16]
 80101fa:	b2da      	uxtb	r2, r3
 80101fc:	683b      	ldr	r3, [r7, #0]
 80101fe:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8010200:	693b      	ldr	r3, [r7, #16]
 8010202:	0a1b      	lsrs	r3, r3, #8
 8010204:	b2da      	uxtb	r2, r3
 8010206:	683b      	ldr	r3, [r7, #0]
 8010208:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 801020a:	693b      	ldr	r3, [r7, #16]
 801020c:	0d1b      	lsrs	r3, r3, #20
 801020e:	b2db      	uxtb	r3, r3
 8010210:	f003 030f 	and.w	r3, r3, #15
 8010214:	b2da      	uxtb	r2, r3
 8010216:	683b      	ldr	r3, [r7, #0]
 8010218:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 801021a:	693b      	ldr	r3, [r7, #16]
 801021c:	0c1b      	lsrs	r3, r3, #16
 801021e:	b29b      	uxth	r3, r3
 8010220:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8010224:	b29a      	uxth	r2, r3
 8010226:	697b      	ldr	r3, [r7, #20]
 8010228:	b29b      	uxth	r3, r3
 801022a:	b2db      	uxtb	r3, r3
 801022c:	b29b      	uxth	r3, r3
 801022e:	4313      	orrs	r3, r2
 8010230:	b29a      	uxth	r2, r3
 8010232:	683b      	ldr	r3, [r7, #0]
 8010234:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8010236:	697b      	ldr	r3, [r7, #20]
 8010238:	0a9b      	lsrs	r3, r3, #10
 801023a:	b2db      	uxtb	r3, r3
 801023c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010240:	b2da      	uxtb	r2, r3
 8010242:	683b      	ldr	r3, [r7, #0]
 8010244:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8010246:	697b      	ldr	r3, [r7, #20]
 8010248:	0a1b      	lsrs	r3, r3, #8
 801024a:	b2db      	uxtb	r3, r3
 801024c:	f003 0303 	and.w	r3, r3, #3
 8010250:	b2da      	uxtb	r2, r3
 8010252:	683b      	ldr	r3, [r7, #0]
 8010254:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8010256:	697b      	ldr	r3, [r7, #20]
 8010258:	091b      	lsrs	r3, r3, #4
 801025a:	b2db      	uxtb	r3, r3
 801025c:	f003 030f 	and.w	r3, r3, #15
 8010260:	b2da      	uxtb	r2, r3
 8010262:	683b      	ldr	r3, [r7, #0]
 8010264:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8010266:	697b      	ldr	r3, [r7, #20]
 8010268:	b2db      	uxtb	r3, r3
 801026a:	f003 030f 	and.w	r3, r3, #15
 801026e:	b2da      	uxtb	r2, r3
 8010270:	683b      	ldr	r3, [r7, #0]
 8010272:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8010274:	69bb      	ldr	r3, [r7, #24]
 8010276:	0e1b      	lsrs	r3, r3, #24
 8010278:	b2da      	uxtb	r2, r3
 801027a:	683b      	ldr	r3, [r7, #0]
 801027c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010286:	4618      	mov	r0, r3
 8010288:	f002 fb40 	bl	801290c <SDMMC_CmdBlockLength>
 801028c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 801028e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010290:	2b00      	cmp	r3, #0
 8010292:	d00d      	beq.n	80102b0 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	4a08      	ldr	r2, [pc, #32]	; (80102bc <HAL_SD_GetCardStatus+0x178>)
 801029a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80102a0:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	2201      	movs	r2, #1
 80102a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 80102aa:	2301      	movs	r3, #1
 80102ac:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 80102b0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80102b4:	4618      	mov	r0, r3
 80102b6:	3750      	adds	r7, #80	; 0x50
 80102b8:	46bd      	mov	sp, r7
 80102ba:	bd80      	pop	{r7, pc}
 80102bc:	1fe00fff 	.word	0x1fe00fff

080102c0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80102c0:	b480      	push	{r7}
 80102c2:	b083      	sub	sp, #12
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	6078      	str	r0, [r7, #4]
 80102c8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80102ce:	683b      	ldr	r3, [r7, #0]
 80102d0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80102d6:	683b      	ldr	r3, [r7, #0]
 80102d8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80102de:	683b      	ldr	r3, [r7, #0]
 80102e0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80102e6:	683b      	ldr	r3, [r7, #0]
 80102e8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80102ee:	683b      	ldr	r3, [r7, #0]
 80102f0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80102f6:	683b      	ldr	r3, [r7, #0]
 80102f8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80102fe:	683b      	ldr	r3, [r7, #0]
 8010300:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010306:	683b      	ldr	r3, [r7, #0]
 8010308:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 801030a:	2300      	movs	r3, #0
}
 801030c:	4618      	mov	r0, r3
 801030e:	370c      	adds	r7, #12
 8010310:	46bd      	mov	sp, r7
 8010312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010316:	4770      	bx	lr

08010318 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8010318:	b590      	push	{r4, r7, lr}
 801031a:	b08d      	sub	sp, #52	; 0x34
 801031c:	af02      	add	r7, sp, #8
 801031e:	6078      	str	r0, [r7, #4]
 8010320:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8010322:	2300      	movs	r3, #0
 8010324:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	2203      	movs	r2, #3
 801032c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010334:	2b03      	cmp	r3, #3
 8010336:	d02e      	beq.n	8010396 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8010338:	683b      	ldr	r3, [r7, #0]
 801033a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801033e:	d106      	bne.n	801034e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010344:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	635a      	str	r2, [r3, #52]	; 0x34
 801034c:	e029      	b.n	80103a2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 801034e:	683b      	ldr	r3, [r7, #0]
 8010350:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010354:	d10a      	bne.n	801036c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8010356:	6878      	ldr	r0, [r7, #4]
 8010358:	f000 fb64 	bl	8010a24 <SD_WideBus_Enable>
 801035c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010362:	6a3b      	ldr	r3, [r7, #32]
 8010364:	431a      	orrs	r2, r3
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	635a      	str	r2, [r3, #52]	; 0x34
 801036a:	e01a      	b.n	80103a2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 801036c:	683b      	ldr	r3, [r7, #0]
 801036e:	2b00      	cmp	r3, #0
 8010370:	d10a      	bne.n	8010388 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8010372:	6878      	ldr	r0, [r7, #4]
 8010374:	f000 fba1 	bl	8010aba <SD_WideBus_Disable>
 8010378:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801037e:	6a3b      	ldr	r3, [r7, #32]
 8010380:	431a      	orrs	r2, r3
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	635a      	str	r2, [r3, #52]	; 0x34
 8010386:	e00c      	b.n	80103a2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801038c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	635a      	str	r2, [r3, #52]	; 0x34
 8010394:	e005      	b.n	80103a2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801039a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d007      	beq.n	80103ba <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	4a5f      	ldr	r2, [pc, #380]	; (801052c <HAL_SD_ConfigWideBusOperation+0x214>)
 80103b0:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80103b2:	2301      	movs	r3, #1
 80103b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80103b8:	e096      	b.n	80104e8 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80103ba:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80103be:	f04f 0100 	mov.w	r1, #0
 80103c2:	f7fe f85f 	bl	800e484 <HAL_RCCEx_GetPeriphCLKFreq>
 80103c6:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 80103c8:	69fb      	ldr	r3, [r7, #28]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	f000 8083 	beq.w	80104d6 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	685b      	ldr	r3, [r3, #4]
 80103d4:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	689b      	ldr	r3, [r3, #8]
 80103da:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 80103dc:	683b      	ldr	r3, [r7, #0]
 80103de:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	691b      	ldr	r3, [r3, #16]
 80103e4:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	695a      	ldr	r2, [r3, #20]
 80103ea:	69fb      	ldr	r3, [r7, #28]
 80103ec:	4950      	ldr	r1, [pc, #320]	; (8010530 <HAL_SD_ConfigWideBusOperation+0x218>)
 80103ee:	fba1 1303 	umull	r1, r3, r1, r3
 80103f2:	0e1b      	lsrs	r3, r3, #24
 80103f4:	429a      	cmp	r2, r3
 80103f6:	d303      	bcc.n	8010400 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	695b      	ldr	r3, [r3, #20]
 80103fc:	61bb      	str	r3, [r7, #24]
 80103fe:	e05a      	b.n	80104b6 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010404:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010408:	d103      	bne.n	8010412 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	695b      	ldr	r3, [r3, #20]
 801040e:	61bb      	str	r3, [r7, #24]
 8010410:	e051      	b.n	80104b6 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010416:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801041a:	d126      	bne.n	801046a <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	695b      	ldr	r3, [r3, #20]
 8010420:	2b00      	cmp	r3, #0
 8010422:	d10e      	bne.n	8010442 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8010424:	69fb      	ldr	r3, [r7, #28]
 8010426:	4a43      	ldr	r2, [pc, #268]	; (8010534 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8010428:	4293      	cmp	r3, r2
 801042a:	d906      	bls.n	801043a <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 801042c:	69fb      	ldr	r3, [r7, #28]
 801042e:	4a40      	ldr	r2, [pc, #256]	; (8010530 <HAL_SD_ConfigWideBusOperation+0x218>)
 8010430:	fba2 2303 	umull	r2, r3, r2, r3
 8010434:	0e5b      	lsrs	r3, r3, #25
 8010436:	61bb      	str	r3, [r7, #24]
 8010438:	e03d      	b.n	80104b6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	695b      	ldr	r3, [r3, #20]
 801043e:	61bb      	str	r3, [r7, #24]
 8010440:	e039      	b.n	80104b6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	695b      	ldr	r3, [r3, #20]
 8010446:	005b      	lsls	r3, r3, #1
 8010448:	69fa      	ldr	r2, [r7, #28]
 801044a:	fbb2 f3f3 	udiv	r3, r2, r3
 801044e:	4a39      	ldr	r2, [pc, #228]	; (8010534 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8010450:	4293      	cmp	r3, r2
 8010452:	d906      	bls.n	8010462 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8010454:	69fb      	ldr	r3, [r7, #28]
 8010456:	4a36      	ldr	r2, [pc, #216]	; (8010530 <HAL_SD_ConfigWideBusOperation+0x218>)
 8010458:	fba2 2303 	umull	r2, r3, r2, r3
 801045c:	0e5b      	lsrs	r3, r3, #25
 801045e:	61bb      	str	r3, [r7, #24]
 8010460:	e029      	b.n	80104b6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	695b      	ldr	r3, [r3, #20]
 8010466:	61bb      	str	r3, [r7, #24]
 8010468:	e025      	b.n	80104b6 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	695b      	ldr	r3, [r3, #20]
 801046e:	2b00      	cmp	r3, #0
 8010470:	d10e      	bne.n	8010490 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8010472:	69fb      	ldr	r3, [r7, #28]
 8010474:	4a30      	ldr	r2, [pc, #192]	; (8010538 <HAL_SD_ConfigWideBusOperation+0x220>)
 8010476:	4293      	cmp	r3, r2
 8010478:	d906      	bls.n	8010488 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 801047a:	69fb      	ldr	r3, [r7, #28]
 801047c:	4a2c      	ldr	r2, [pc, #176]	; (8010530 <HAL_SD_ConfigWideBusOperation+0x218>)
 801047e:	fba2 2303 	umull	r2, r3, r2, r3
 8010482:	0e1b      	lsrs	r3, r3, #24
 8010484:	61bb      	str	r3, [r7, #24]
 8010486:	e016      	b.n	80104b6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	695b      	ldr	r3, [r3, #20]
 801048c:	61bb      	str	r3, [r7, #24]
 801048e:	e012      	b.n	80104b6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	695b      	ldr	r3, [r3, #20]
 8010494:	005b      	lsls	r3, r3, #1
 8010496:	69fa      	ldr	r2, [r7, #28]
 8010498:	fbb2 f3f3 	udiv	r3, r2, r3
 801049c:	4a26      	ldr	r2, [pc, #152]	; (8010538 <HAL_SD_ConfigWideBusOperation+0x220>)
 801049e:	4293      	cmp	r3, r2
 80104a0:	d906      	bls.n	80104b0 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80104a2:	69fb      	ldr	r3, [r7, #28]
 80104a4:	4a22      	ldr	r2, [pc, #136]	; (8010530 <HAL_SD_ConfigWideBusOperation+0x218>)
 80104a6:	fba2 2303 	umull	r2, r3, r2, r3
 80104aa:	0e1b      	lsrs	r3, r3, #24
 80104ac:	61bb      	str	r3, [r7, #24]
 80104ae:	e002      	b.n	80104b6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	695b      	ldr	r3, [r3, #20]
 80104b4:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	681c      	ldr	r4, [r3, #0]
 80104ba:	466a      	mov	r2, sp
 80104bc:	f107 0314 	add.w	r3, r7, #20
 80104c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80104c4:	e882 0003 	stmia.w	r2, {r0, r1}
 80104c8:	f107 0308 	add.w	r3, r7, #8
 80104cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80104ce:	4620      	mov	r0, r4
 80104d0:	f002 f950 	bl	8012774 <SDMMC_Init>
 80104d4:	e008      	b.n	80104e8 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80104da:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 80104e2:	2301      	movs	r3, #1
 80104e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80104f0:	4618      	mov	r0, r3
 80104f2:	f002 fa0b 	bl	801290c <SDMMC_CmdBlockLength>
 80104f6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80104f8:	6a3b      	ldr	r3, [r7, #32]
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d00c      	beq.n	8010518 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	4a0a      	ldr	r2, [pc, #40]	; (801052c <HAL_SD_ConfigWideBusOperation+0x214>)
 8010504:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801050a:	6a3b      	ldr	r3, [r7, #32]
 801050c:	431a      	orrs	r2, r3
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8010512:	2301      	movs	r3, #1
 8010514:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	2201      	movs	r2, #1
 801051c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8010520:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8010524:	4618      	mov	r0, r3
 8010526:	372c      	adds	r7, #44	; 0x2c
 8010528:	46bd      	mov	sp, r7
 801052a:	bd90      	pop	{r4, r7, pc}
 801052c:	1fe00fff 	.word	0x1fe00fff
 8010530:	55e63b89 	.word	0x55e63b89
 8010534:	02faf080 	.word	0x02faf080
 8010538:	017d7840 	.word	0x017d7840

0801053c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 801053c:	b580      	push	{r7, lr}
 801053e:	b086      	sub	sp, #24
 8010540:	af00      	add	r7, sp, #0
 8010542:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8010544:	2300      	movs	r3, #0
 8010546:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8010548:	f107 030c 	add.w	r3, r7, #12
 801054c:	4619      	mov	r1, r3
 801054e:	6878      	ldr	r0, [r7, #4]
 8010550:	f000 fa40 	bl	80109d4 <SD_SendStatus>
 8010554:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8010556:	697b      	ldr	r3, [r7, #20]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d005      	beq.n	8010568 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010560:	697b      	ldr	r3, [r7, #20]
 8010562:	431a      	orrs	r2, r3
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	0a5b      	lsrs	r3, r3, #9
 801056c:	f003 030f 	and.w	r3, r3, #15
 8010570:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8010572:	693b      	ldr	r3, [r7, #16]
}
 8010574:	4618      	mov	r0, r3
 8010576:	3718      	adds	r7, #24
 8010578:	46bd      	mov	sp, r7
 801057a:	bd80      	pop	{r7, pc}

0801057c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 801057c:	b580      	push	{r7, lr}
 801057e:	b090      	sub	sp, #64	; 0x40
 8010580:	af00      	add	r7, sp, #0
 8010582:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8010584:	2300      	movs	r3, #0
 8010586:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8010588:	f7f8 fba0 	bl	8008ccc <HAL_GetTick>
 801058c:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	4618      	mov	r0, r3
 8010594:	f002 f936 	bl	8012804 <SDMMC_GetPowerState>
 8010598:	4603      	mov	r3, r0
 801059a:	2b00      	cmp	r3, #0
 801059c:	d102      	bne.n	80105a4 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 801059e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80105a2:	e0b5      	b.n	8010710 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105a8:	2b03      	cmp	r3, #3
 80105aa:	d02e      	beq.n	801060a <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	4618      	mov	r0, r3
 80105b2:	f002 fb43 	bl	8012c3c <SDMMC_CmdSendCID>
 80105b6:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80105b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d001      	beq.n	80105c2 <SD_InitCard+0x46>
    {
      return errorstate;
 80105be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105c0:	e0a6      	b.n	8010710 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	2100      	movs	r1, #0
 80105c8:	4618      	mov	r0, r3
 80105ca:	f002 f960 	bl	801288e <SDMMC_GetResponse>
 80105ce:	4602      	mov	r2, r0
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	2104      	movs	r1, #4
 80105da:	4618      	mov	r0, r3
 80105dc:	f002 f957 	bl	801288e <SDMMC_GetResponse>
 80105e0:	4602      	mov	r2, r0
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	2108      	movs	r1, #8
 80105ec:	4618      	mov	r0, r3
 80105ee:	f002 f94e 	bl	801288e <SDMMC_GetResponse>
 80105f2:	4602      	mov	r2, r0
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	210c      	movs	r1, #12
 80105fe:	4618      	mov	r0, r3
 8010600:	f002 f945 	bl	801288e <SDMMC_GetResponse>
 8010604:	4602      	mov	r2, r0
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801060e:	2b03      	cmp	r3, #3
 8010610:	d01d      	beq.n	801064e <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8010612:	e019      	b.n	8010648 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	f107 020a 	add.w	r2, r7, #10
 801061c:	4611      	mov	r1, r2
 801061e:	4618      	mov	r0, r3
 8010620:	f002 fb4b 	bl	8012cba <SDMMC_CmdSetRelAdd>
 8010624:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8010626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010628:	2b00      	cmp	r3, #0
 801062a:	d001      	beq.n	8010630 <SD_InitCard+0xb4>
      {
        return errorstate;
 801062c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801062e:	e06f      	b.n	8010710 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8010630:	f7f8 fb4c 	bl	8008ccc <HAL_GetTick>
 8010634:	4602      	mov	r2, r0
 8010636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010638:	1ad3      	subs	r3, r2, r3
 801063a:	f241 3287 	movw	r2, #4999	; 0x1387
 801063e:	4293      	cmp	r3, r2
 8010640:	d902      	bls.n	8010648 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8010642:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010646:	e063      	b.n	8010710 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8010648:	897b      	ldrh	r3, [r7, #10]
 801064a:	2b00      	cmp	r3, #0
 801064c:	d0e2      	beq.n	8010614 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010652:	2b03      	cmp	r3, #3
 8010654:	d036      	beq.n	80106c4 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8010656:	897b      	ldrh	r3, [r7, #10]
 8010658:	461a      	mov	r2, r3
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	681a      	ldr	r2, [r3, #0]
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010666:	041b      	lsls	r3, r3, #16
 8010668:	4619      	mov	r1, r3
 801066a:	4610      	mov	r0, r2
 801066c:	f002 fb05 	bl	8012c7a <SDMMC_CmdSendCSD>
 8010670:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8010672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010674:	2b00      	cmp	r3, #0
 8010676:	d001      	beq.n	801067c <SD_InitCard+0x100>
    {
      return errorstate;
 8010678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801067a:	e049      	b.n	8010710 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	2100      	movs	r1, #0
 8010682:	4618      	mov	r0, r3
 8010684:	f002 f903 	bl	801288e <SDMMC_GetResponse>
 8010688:	4602      	mov	r2, r0
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	2104      	movs	r1, #4
 8010694:	4618      	mov	r0, r3
 8010696:	f002 f8fa 	bl	801288e <SDMMC_GetResponse>
 801069a:	4602      	mov	r2, r0
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	2108      	movs	r1, #8
 80106a6:	4618      	mov	r0, r3
 80106a8:	f002 f8f1 	bl	801288e <SDMMC_GetResponse>
 80106ac:	4602      	mov	r2, r0
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	210c      	movs	r1, #12
 80106b8:	4618      	mov	r0, r3
 80106ba:	f002 f8e8 	bl	801288e <SDMMC_GetResponse>
 80106be:	4602      	mov	r2, r0
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	2104      	movs	r1, #4
 80106ca:	4618      	mov	r0, r3
 80106cc:	f002 f8df 	bl	801288e <SDMMC_GetResponse>
 80106d0:	4603      	mov	r3, r0
 80106d2:	0d1a      	lsrs	r2, r3, #20
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80106d8:	f107 030c 	add.w	r3, r7, #12
 80106dc:	4619      	mov	r1, r3
 80106de:	6878      	ldr	r0, [r7, #4]
 80106e0:	f7ff fb8c 	bl	800fdfc <HAL_SD_GetCardCSD>
 80106e4:	4603      	mov	r3, r0
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d002      	beq.n	80106f0 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80106ea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80106ee:	e00f      	b.n	8010710 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	681a      	ldr	r2, [r3, #0]
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80106f8:	041b      	lsls	r3, r3, #16
 80106fa:	4619      	mov	r1, r3
 80106fc:	4610      	mov	r0, r2
 80106fe:	f002 f9b4 	bl	8012a6a <SDMMC_CmdSelDesel>
 8010702:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8010704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010706:	2b00      	cmp	r3, #0
 8010708:	d001      	beq.n	801070e <SD_InitCard+0x192>
  {
    return errorstate;
 801070a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801070c:	e000      	b.n	8010710 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 801070e:	2300      	movs	r3, #0
}
 8010710:	4618      	mov	r0, r3
 8010712:	3740      	adds	r7, #64	; 0x40
 8010714:	46bd      	mov	sp, r7
 8010716:	bd80      	pop	{r7, pc}

08010718 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8010718:	b580      	push	{r7, lr}
 801071a:	b086      	sub	sp, #24
 801071c:	af00      	add	r7, sp, #0
 801071e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010720:	2300      	movs	r3, #0
 8010722:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8010724:	2300      	movs	r3, #0
 8010726:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8010728:	2300      	movs	r3, #0
 801072a:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	4618      	mov	r0, r3
 8010732:	f002 f9bd 	bl	8012ab0 <SDMMC_CmdGoIdleState>
 8010736:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d001      	beq.n	8010742 <SD_PowerON+0x2a>
  {
    return errorstate;
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	e072      	b.n	8010828 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	4618      	mov	r0, r3
 8010748:	f002 f9d0 	bl	8012aec <SDMMC_CmdOperCond>
 801074c:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010754:	d10d      	bne.n	8010772 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	2200      	movs	r2, #0
 801075a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	4618      	mov	r0, r3
 8010762:	f002 f9a5 	bl	8012ab0 <SDMMC_CmdGoIdleState>
 8010766:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	2b00      	cmp	r3, #0
 801076c:	d004      	beq.n	8010778 <SD_PowerON+0x60>
    {
      return errorstate;
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	e05a      	b.n	8010828 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	2201      	movs	r2, #1
 8010776:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801077c:	2b01      	cmp	r3, #1
 801077e:	d137      	bne.n	80107f0 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	2100      	movs	r1, #0
 8010786:	4618      	mov	r0, r3
 8010788:	f002 f9d0 	bl	8012b2c <SDMMC_CmdAppCommand>
 801078c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	2b00      	cmp	r3, #0
 8010792:	d02d      	beq.n	80107f0 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010794:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010798:	e046      	b.n	8010828 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	2100      	movs	r1, #0
 80107a0:	4618      	mov	r0, r3
 80107a2:	f002 f9c3 	bl	8012b2c <SDMMC_CmdAppCommand>
 80107a6:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d001      	beq.n	80107b2 <SD_PowerON+0x9a>
    {
      return errorstate;
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	e03a      	b.n	8010828 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	491e      	ldr	r1, [pc, #120]	; (8010830 <SD_PowerON+0x118>)
 80107b8:	4618      	mov	r0, r3
 80107ba:	f002 f9da 	bl	8012b72 <SDMMC_CmdAppOperCommand>
 80107be:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d002      	beq.n	80107cc <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80107c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80107ca:	e02d      	b.n	8010828 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	2100      	movs	r1, #0
 80107d2:	4618      	mov	r0, r3
 80107d4:	f002 f85b 	bl	801288e <SDMMC_GetResponse>
 80107d8:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80107da:	697b      	ldr	r3, [r7, #20]
 80107dc:	0fdb      	lsrs	r3, r3, #31
 80107de:	2b01      	cmp	r3, #1
 80107e0:	d101      	bne.n	80107e6 <SD_PowerON+0xce>
 80107e2:	2301      	movs	r3, #1
 80107e4:	e000      	b.n	80107e8 <SD_PowerON+0xd0>
 80107e6:	2300      	movs	r3, #0
 80107e8:	613b      	str	r3, [r7, #16]

    count++;
 80107ea:	68bb      	ldr	r3, [r7, #8]
 80107ec:	3301      	adds	r3, #1
 80107ee:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80107f0:	68bb      	ldr	r3, [r7, #8]
 80107f2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80107f6:	4293      	cmp	r3, r2
 80107f8:	d802      	bhi.n	8010800 <SD_PowerON+0xe8>
 80107fa:	693b      	ldr	r3, [r7, #16]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d0cc      	beq.n	801079a <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8010800:	68bb      	ldr	r3, [r7, #8]
 8010802:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010806:	4293      	cmp	r3, r2
 8010808:	d902      	bls.n	8010810 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 801080a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801080e:	e00b      	b.n	8010828 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	2200      	movs	r2, #0
 8010814:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8010816:	697b      	ldr	r3, [r7, #20]
 8010818:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801081c:	2b00      	cmp	r3, #0
 801081e:	d002      	beq.n	8010826 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	2201      	movs	r2, #1
 8010824:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8010826:	2300      	movs	r3, #0
}
 8010828:	4618      	mov	r0, r3
 801082a:	3718      	adds	r7, #24
 801082c:	46bd      	mov	sp, r7
 801082e:	bd80      	pop	{r7, pc}
 8010830:	c1100000 	.word	0xc1100000

08010834 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8010834:	b580      	push	{r7, lr}
 8010836:	b08c      	sub	sp, #48	; 0x30
 8010838:	af00      	add	r7, sp, #0
 801083a:	6078      	str	r0, [r7, #4]
 801083c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 801083e:	f7f8 fa45 	bl	8008ccc <HAL_GetTick>
 8010842:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8010844:	683b      	ldr	r3, [r7, #0]
 8010846:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	2100      	movs	r1, #0
 801084e:	4618      	mov	r0, r3
 8010850:	f002 f81d 	bl	801288e <SDMMC_GetResponse>
 8010854:	4603      	mov	r3, r0
 8010856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801085a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801085e:	d102      	bne.n	8010866 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8010860:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010864:	e0b0      	b.n	80109c8 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	2140      	movs	r1, #64	; 0x40
 801086c:	4618      	mov	r0, r3
 801086e:	f002 f84d 	bl	801290c <SDMMC_CmdBlockLength>
 8010872:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8010874:	6a3b      	ldr	r3, [r7, #32]
 8010876:	2b00      	cmp	r3, #0
 8010878:	d005      	beq.n	8010886 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8010882:	6a3b      	ldr	r3, [r7, #32]
 8010884:	e0a0      	b.n	80109c8 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	681a      	ldr	r2, [r3, #0]
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801088e:	041b      	lsls	r3, r3, #16
 8010890:	4619      	mov	r1, r3
 8010892:	4610      	mov	r0, r2
 8010894:	f002 f94a 	bl	8012b2c <SDMMC_CmdAppCommand>
 8010898:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 801089a:	6a3b      	ldr	r3, [r7, #32]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d005      	beq.n	80108ac <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80108a8:	6a3b      	ldr	r3, [r7, #32]
 80108aa:	e08d      	b.n	80109c8 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80108ac:	f04f 33ff 	mov.w	r3, #4294967295
 80108b0:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 80108b2:	2340      	movs	r3, #64	; 0x40
 80108b4:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80108b6:	2360      	movs	r3, #96	; 0x60
 80108b8:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80108ba:	2302      	movs	r3, #2
 80108bc:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80108be:	2300      	movs	r3, #0
 80108c0:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80108c2:	2301      	movs	r3, #1
 80108c4:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	f107 0208 	add.w	r2, r7, #8
 80108ce:	4611      	mov	r1, r2
 80108d0:	4618      	mov	r0, r3
 80108d2:	f001 ffef 	bl	80128b4 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	4618      	mov	r0, r3
 80108dc:	f002 fa32 	bl	8012d44 <SDMMC_CmdStatusRegister>
 80108e0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80108e2:	6a3b      	ldr	r3, [r7, #32]
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d02b      	beq.n	8010940 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80108f0:	6a3b      	ldr	r3, [r7, #32]
 80108f2:	e069      	b.n	80109c8 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d013      	beq.n	801092a <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8010902:	2300      	movs	r3, #0
 8010904:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010906:	e00d      	b.n	8010924 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	4618      	mov	r0, r3
 801090e:	f001 ff5b 	bl	80127c8 <SDMMC_ReadFIFO>
 8010912:	4602      	mov	r2, r0
 8010914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010916:	601a      	str	r2, [r3, #0]
        pData++;
 8010918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801091a:	3304      	adds	r3, #4
 801091c:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 801091e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010920:	3301      	adds	r3, #1
 8010922:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010926:	2b07      	cmp	r3, #7
 8010928:	d9ee      	bls.n	8010908 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 801092a:	f7f8 f9cf 	bl	8008ccc <HAL_GetTick>
 801092e:	4602      	mov	r2, r0
 8010930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010932:	1ad3      	subs	r3, r2, r3
 8010934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010938:	d102      	bne.n	8010940 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 801093a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801093e:	e043      	b.n	80109c8 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010946:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 801094a:	2b00      	cmp	r3, #0
 801094c:	d0d2      	beq.n	80108f4 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010954:	f003 0308 	and.w	r3, r3, #8
 8010958:	2b00      	cmp	r3, #0
 801095a:	d001      	beq.n	8010960 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 801095c:	2308      	movs	r3, #8
 801095e:	e033      	b.n	80109c8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010966:	f003 0302 	and.w	r3, r3, #2
 801096a:	2b00      	cmp	r3, #0
 801096c:	d001      	beq.n	8010972 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 801096e:	2302      	movs	r3, #2
 8010970:	e02a      	b.n	80109c8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010978:	f003 0320 	and.w	r3, r3, #32
 801097c:	2b00      	cmp	r3, #0
 801097e:	d017      	beq.n	80109b0 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8010980:	2320      	movs	r3, #32
 8010982:	e021      	b.n	80109c8 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	4618      	mov	r0, r3
 801098a:	f001 ff1d 	bl	80127c8 <SDMMC_ReadFIFO>
 801098e:	4602      	mov	r2, r0
 8010990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010992:	601a      	str	r2, [r3, #0]
    pData++;
 8010994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010996:	3304      	adds	r3, #4
 8010998:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 801099a:	f7f8 f997 	bl	8008ccc <HAL_GetTick>
 801099e:	4602      	mov	r2, r0
 80109a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109a2:	1ad3      	subs	r3, r2, r3
 80109a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109a8:	d102      	bne.n	80109b0 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80109aa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80109ae:	e00b      	b.n	80109c8 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d1e2      	bne.n	8010984 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	4a03      	ldr	r2, [pc, #12]	; (80109d0 <SD_SendSDStatus+0x19c>)
 80109c4:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 80109c6:	2300      	movs	r3, #0
}
 80109c8:	4618      	mov	r0, r3
 80109ca:	3730      	adds	r7, #48	; 0x30
 80109cc:	46bd      	mov	sp, r7
 80109ce:	bd80      	pop	{r7, pc}
 80109d0:	18000f3a 	.word	0x18000f3a

080109d4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80109d4:	b580      	push	{r7, lr}
 80109d6:	b084      	sub	sp, #16
 80109d8:	af00      	add	r7, sp, #0
 80109da:	6078      	str	r0, [r7, #4]
 80109dc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 80109de:	683b      	ldr	r3, [r7, #0]
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d102      	bne.n	80109ea <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80109e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80109e8:	e018      	b.n	8010a1c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	681a      	ldr	r2, [r3, #0]
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80109f2:	041b      	lsls	r3, r3, #16
 80109f4:	4619      	mov	r1, r3
 80109f6:	4610      	mov	r0, r2
 80109f8:	f002 f981 	bl	8012cfe <SDMMC_CmdSendStatus>
 80109fc:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d001      	beq.n	8010a08 <SD_SendStatus+0x34>
  {
    return errorstate;
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	e009      	b.n	8010a1c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	2100      	movs	r1, #0
 8010a0e:	4618      	mov	r0, r3
 8010a10:	f001 ff3d 	bl	801288e <SDMMC_GetResponse>
 8010a14:	4602      	mov	r2, r0
 8010a16:	683b      	ldr	r3, [r7, #0]
 8010a18:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8010a1a:	2300      	movs	r3, #0
}
 8010a1c:	4618      	mov	r0, r3
 8010a1e:	3710      	adds	r7, #16
 8010a20:	46bd      	mov	sp, r7
 8010a22:	bd80      	pop	{r7, pc}

08010a24 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8010a24:	b580      	push	{r7, lr}
 8010a26:	b086      	sub	sp, #24
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	60fb      	str	r3, [r7, #12]
 8010a30:	2300      	movs	r3, #0
 8010a32:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	2100      	movs	r1, #0
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	f001 ff27 	bl	801288e <SDMMC_GetResponse>
 8010a40:	4603      	mov	r3, r0
 8010a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010a46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010a4a:	d102      	bne.n	8010a52 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8010a4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010a50:	e02f      	b.n	8010ab2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8010a52:	f107 030c 	add.w	r3, r7, #12
 8010a56:	4619      	mov	r1, r3
 8010a58:	6878      	ldr	r0, [r7, #4]
 8010a5a:	f000 f879 	bl	8010b50 <SD_FindSCR>
 8010a5e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8010a60:	697b      	ldr	r3, [r7, #20]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d001      	beq.n	8010a6a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8010a66:	697b      	ldr	r3, [r7, #20]
 8010a68:	e023      	b.n	8010ab2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8010a6a:	693b      	ldr	r3, [r7, #16]
 8010a6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d01c      	beq.n	8010aae <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	681a      	ldr	r2, [r3, #0]
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a7c:	041b      	lsls	r3, r3, #16
 8010a7e:	4619      	mov	r1, r3
 8010a80:	4610      	mov	r0, r2
 8010a82:	f002 f853 	bl	8012b2c <SDMMC_CmdAppCommand>
 8010a86:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8010a88:	697b      	ldr	r3, [r7, #20]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d001      	beq.n	8010a92 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8010a8e:	697b      	ldr	r3, [r7, #20]
 8010a90:	e00f      	b.n	8010ab2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	2102      	movs	r1, #2
 8010a98:	4618      	mov	r0, r3
 8010a9a:	f002 f88a 	bl	8012bb2 <SDMMC_CmdBusWidth>
 8010a9e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8010aa0:	697b      	ldr	r3, [r7, #20]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d001      	beq.n	8010aaa <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8010aa6:	697b      	ldr	r3, [r7, #20]
 8010aa8:	e003      	b.n	8010ab2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8010aaa:	2300      	movs	r3, #0
 8010aac:	e001      	b.n	8010ab2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8010aae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	3718      	adds	r7, #24
 8010ab6:	46bd      	mov	sp, r7
 8010ab8:	bd80      	pop	{r7, pc}

08010aba <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8010aba:	b580      	push	{r7, lr}
 8010abc:	b086      	sub	sp, #24
 8010abe:	af00      	add	r7, sp, #0
 8010ac0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	60fb      	str	r3, [r7, #12]
 8010ac6:	2300      	movs	r3, #0
 8010ac8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	2100      	movs	r1, #0
 8010ad0:	4618      	mov	r0, r3
 8010ad2:	f001 fedc 	bl	801288e <SDMMC_GetResponse>
 8010ad6:	4603      	mov	r3, r0
 8010ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010adc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010ae0:	d102      	bne.n	8010ae8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8010ae2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010ae6:	e02f      	b.n	8010b48 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8010ae8:	f107 030c 	add.w	r3, r7, #12
 8010aec:	4619      	mov	r1, r3
 8010aee:	6878      	ldr	r0, [r7, #4]
 8010af0:	f000 f82e 	bl	8010b50 <SD_FindSCR>
 8010af4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8010af6:	697b      	ldr	r3, [r7, #20]
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d001      	beq.n	8010b00 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8010afc:	697b      	ldr	r3, [r7, #20]
 8010afe:	e023      	b.n	8010b48 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8010b00:	693b      	ldr	r3, [r7, #16]
 8010b02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d01c      	beq.n	8010b44 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	681a      	ldr	r2, [r3, #0]
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b12:	041b      	lsls	r3, r3, #16
 8010b14:	4619      	mov	r1, r3
 8010b16:	4610      	mov	r0, r2
 8010b18:	f002 f808 	bl	8012b2c <SDMMC_CmdAppCommand>
 8010b1c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8010b1e:	697b      	ldr	r3, [r7, #20]
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d001      	beq.n	8010b28 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8010b24:	697b      	ldr	r3, [r7, #20]
 8010b26:	e00f      	b.n	8010b48 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	2100      	movs	r1, #0
 8010b2e:	4618      	mov	r0, r3
 8010b30:	f002 f83f 	bl	8012bb2 <SDMMC_CmdBusWidth>
 8010b34:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8010b36:	697b      	ldr	r3, [r7, #20]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d001      	beq.n	8010b40 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8010b3c:	697b      	ldr	r3, [r7, #20]
 8010b3e:	e003      	b.n	8010b48 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8010b40:	2300      	movs	r3, #0
 8010b42:	e001      	b.n	8010b48 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8010b44:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8010b48:	4618      	mov	r0, r3
 8010b4a:	3718      	adds	r7, #24
 8010b4c:	46bd      	mov	sp, r7
 8010b4e:	bd80      	pop	{r7, pc}

08010b50 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8010b50:	b580      	push	{r7, lr}
 8010b52:	b08e      	sub	sp, #56	; 0x38
 8010b54:	af00      	add	r7, sp, #0
 8010b56:	6078      	str	r0, [r7, #4]
 8010b58:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8010b5a:	f7f8 f8b7 	bl	8008ccc <HAL_GetTick>
 8010b5e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8010b60:	2300      	movs	r3, #0
 8010b62:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8010b64:	2300      	movs	r3, #0
 8010b66:	60bb      	str	r3, [r7, #8]
 8010b68:	2300      	movs	r3, #0
 8010b6a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8010b6c:	683b      	ldr	r3, [r7, #0]
 8010b6e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	2108      	movs	r1, #8
 8010b76:	4618      	mov	r0, r3
 8010b78:	f001 fec8 	bl	801290c <SDMMC_CmdBlockLength>
 8010b7c:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8010b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d001      	beq.n	8010b88 <SD_FindSCR+0x38>
  {
    return errorstate;
 8010b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b86:	e0ad      	b.n	8010ce4 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	681a      	ldr	r2, [r3, #0]
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b90:	041b      	lsls	r3, r3, #16
 8010b92:	4619      	mov	r1, r3
 8010b94:	4610      	mov	r0, r2
 8010b96:	f001 ffc9 	bl	8012b2c <SDMMC_CmdAppCommand>
 8010b9a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8010b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d001      	beq.n	8010ba6 <SD_FindSCR+0x56>
  {
    return errorstate;
 8010ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ba4:	e09e      	b.n	8010ce4 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8010ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8010baa:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8010bac:	2308      	movs	r3, #8
 8010bae:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8010bb0:	2330      	movs	r3, #48	; 0x30
 8010bb2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8010bb4:	2302      	movs	r3, #2
 8010bb6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8010bb8:	2300      	movs	r3, #0
 8010bba:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8010bbc:	2301      	movs	r3, #1
 8010bbe:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	f107 0210 	add.w	r2, r7, #16
 8010bc8:	4611      	mov	r1, r2
 8010bca:	4618      	mov	r0, r3
 8010bcc:	f001 fe72 	bl	80128b4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	f002 f80f 	bl	8012bf8 <SDMMC_CmdSendSCR>
 8010bda:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8010bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d027      	beq.n	8010c32 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8010be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010be4:	e07e      	b.n	8010ce4 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d113      	bne.n	8010c1c <SD_FindSCR+0xcc>
 8010bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d110      	bne.n	8010c1c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	4618      	mov	r0, r3
 8010c00:	f001 fde2 	bl	80127c8 <SDMMC_ReadFIFO>
 8010c04:	4603      	mov	r3, r0
 8010c06:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	f001 fddb 	bl	80127c8 <SDMMC_ReadFIFO>
 8010c12:	4603      	mov	r3, r0
 8010c14:	60fb      	str	r3, [r7, #12]
      index++;
 8010c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c18:	3301      	adds	r3, #1
 8010c1a:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8010c1c:	f7f8 f856 	bl	8008ccc <HAL_GetTick>
 8010c20:	4602      	mov	r2, r0
 8010c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c24:	1ad3      	subs	r3, r2, r3
 8010c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c2a:	d102      	bne.n	8010c32 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8010c2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010c30:	e058      	b.n	8010ce4 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010c38:	f240 532a 	movw	r3, #1322	; 0x52a
 8010c3c:	4013      	ands	r3, r2
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d0d1      	beq.n	8010be6 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c48:	f003 0308 	and.w	r3, r3, #8
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d005      	beq.n	8010c5c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	2208      	movs	r2, #8
 8010c56:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8010c58:	2308      	movs	r3, #8
 8010c5a:	e043      	b.n	8010ce4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c62:	f003 0302 	and.w	r3, r3, #2
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d005      	beq.n	8010c76 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	2202      	movs	r2, #2
 8010c70:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8010c72:	2302      	movs	r3, #2
 8010c74:	e036      	b.n	8010ce4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c7c:	f003 0320 	and.w	r3, r3, #32
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d005      	beq.n	8010c90 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	2220      	movs	r2, #32
 8010c8a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8010c8c:	2320      	movs	r3, #32
 8010c8e:	e029      	b.n	8010ce4 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	4a15      	ldr	r2, [pc, #84]	; (8010cec <SD_FindSCR+0x19c>)
 8010c96:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	061a      	lsls	r2, r3, #24
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	021b      	lsls	r3, r3, #8
 8010ca0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010ca4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	0a1b      	lsrs	r3, r3, #8
 8010caa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8010cae:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	0e1b      	lsrs	r3, r3, #24
 8010cb4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8010cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cb8:	601a      	str	r2, [r3, #0]
    scr++;
 8010cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cbc:	3304      	adds	r3, #4
 8010cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8010cc0:	68bb      	ldr	r3, [r7, #8]
 8010cc2:	061a      	lsls	r2, r3, #24
 8010cc4:	68bb      	ldr	r3, [r7, #8]
 8010cc6:	021b      	lsls	r3, r3, #8
 8010cc8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010ccc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8010cce:	68bb      	ldr	r3, [r7, #8]
 8010cd0:	0a1b      	lsrs	r3, r3, #8
 8010cd2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8010cd6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8010cd8:	68bb      	ldr	r3, [r7, #8]
 8010cda:	0e1b      	lsrs	r3, r3, #24
 8010cdc:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8010cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ce0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8010ce2:	2300      	movs	r3, #0
}
 8010ce4:	4618      	mov	r0, r3
 8010ce6:	3738      	adds	r7, #56	; 0x38
 8010ce8:	46bd      	mov	sp, r7
 8010cea:	bd80      	pop	{r7, pc}
 8010cec:	18000f3a 	.word	0x18000f3a

08010cf0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010cf0:	b580      	push	{r7, lr}
 8010cf2:	b082      	sub	sp, #8
 8010cf4:	af00      	add	r7, sp, #0
 8010cf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d101      	bne.n	8010d02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010cfe:	2301      	movs	r3, #1
 8010d00:	e049      	b.n	8010d96 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010d08:	b2db      	uxtb	r3, r3
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d106      	bne.n	8010d1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	2200      	movs	r2, #0
 8010d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010d16:	6878      	ldr	r0, [r7, #4]
 8010d18:	f000 f841 	bl	8010d9e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	2202      	movs	r2, #2
 8010d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	681a      	ldr	r2, [r3, #0]
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	3304      	adds	r3, #4
 8010d2c:	4619      	mov	r1, r3
 8010d2e:	4610      	mov	r0, r2
 8010d30:	f000 fa00 	bl	8011134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	2201      	movs	r2, #1
 8010d38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	2201      	movs	r2, #1
 8010d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	2201      	movs	r2, #1
 8010d48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	2201      	movs	r2, #1
 8010d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	2201      	movs	r2, #1
 8010d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	2201      	movs	r2, #1
 8010d60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	2201      	movs	r2, #1
 8010d68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	2201      	movs	r2, #1
 8010d70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	2201      	movs	r2, #1
 8010d78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	2201      	movs	r2, #1
 8010d80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	2201      	movs	r2, #1
 8010d88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	2201      	movs	r2, #1
 8010d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010d94:	2300      	movs	r3, #0
}
 8010d96:	4618      	mov	r0, r3
 8010d98:	3708      	adds	r7, #8
 8010d9a:	46bd      	mov	sp, r7
 8010d9c:	bd80      	pop	{r7, pc}

08010d9e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8010d9e:	b480      	push	{r7}
 8010da0:	b083      	sub	sp, #12
 8010da2:	af00      	add	r7, sp, #0
 8010da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8010da6:	bf00      	nop
 8010da8:	370c      	adds	r7, #12
 8010daa:	46bd      	mov	sp, r7
 8010dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db0:	4770      	bx	lr
	...

08010db4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010db4:	b480      	push	{r7}
 8010db6:	b085      	sub	sp, #20
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010dc2:	b2db      	uxtb	r3, r3
 8010dc4:	2b01      	cmp	r3, #1
 8010dc6:	d001      	beq.n	8010dcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010dc8:	2301      	movs	r3, #1
 8010dca:	e054      	b.n	8010e76 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	2202      	movs	r2, #2
 8010dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	68da      	ldr	r2, [r3, #12]
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	f042 0201 	orr.w	r2, r2, #1
 8010de2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	4a26      	ldr	r2, [pc, #152]	; (8010e84 <HAL_TIM_Base_Start_IT+0xd0>)
 8010dea:	4293      	cmp	r3, r2
 8010dec:	d022      	beq.n	8010e34 <HAL_TIM_Base_Start_IT+0x80>
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010df6:	d01d      	beq.n	8010e34 <HAL_TIM_Base_Start_IT+0x80>
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	4a22      	ldr	r2, [pc, #136]	; (8010e88 <HAL_TIM_Base_Start_IT+0xd4>)
 8010dfe:	4293      	cmp	r3, r2
 8010e00:	d018      	beq.n	8010e34 <HAL_TIM_Base_Start_IT+0x80>
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	4a21      	ldr	r2, [pc, #132]	; (8010e8c <HAL_TIM_Base_Start_IT+0xd8>)
 8010e08:	4293      	cmp	r3, r2
 8010e0a:	d013      	beq.n	8010e34 <HAL_TIM_Base_Start_IT+0x80>
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	4a1f      	ldr	r2, [pc, #124]	; (8010e90 <HAL_TIM_Base_Start_IT+0xdc>)
 8010e12:	4293      	cmp	r3, r2
 8010e14:	d00e      	beq.n	8010e34 <HAL_TIM_Base_Start_IT+0x80>
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	4a1e      	ldr	r2, [pc, #120]	; (8010e94 <HAL_TIM_Base_Start_IT+0xe0>)
 8010e1c:	4293      	cmp	r3, r2
 8010e1e:	d009      	beq.n	8010e34 <HAL_TIM_Base_Start_IT+0x80>
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	4a1c      	ldr	r2, [pc, #112]	; (8010e98 <HAL_TIM_Base_Start_IT+0xe4>)
 8010e26:	4293      	cmp	r3, r2
 8010e28:	d004      	beq.n	8010e34 <HAL_TIM_Base_Start_IT+0x80>
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	4a1b      	ldr	r2, [pc, #108]	; (8010e9c <HAL_TIM_Base_Start_IT+0xe8>)
 8010e30:	4293      	cmp	r3, r2
 8010e32:	d115      	bne.n	8010e60 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	689a      	ldr	r2, [r3, #8]
 8010e3a:	4b19      	ldr	r3, [pc, #100]	; (8010ea0 <HAL_TIM_Base_Start_IT+0xec>)
 8010e3c:	4013      	ands	r3, r2
 8010e3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	2b06      	cmp	r3, #6
 8010e44:	d015      	beq.n	8010e72 <HAL_TIM_Base_Start_IT+0xbe>
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010e4c:	d011      	beq.n	8010e72 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	681a      	ldr	r2, [r3, #0]
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	f042 0201 	orr.w	r2, r2, #1
 8010e5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010e5e:	e008      	b.n	8010e72 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	681a      	ldr	r2, [r3, #0]
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	f042 0201 	orr.w	r2, r2, #1
 8010e6e:	601a      	str	r2, [r3, #0]
 8010e70:	e000      	b.n	8010e74 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010e72:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010e74:	2300      	movs	r3, #0
}
 8010e76:	4618      	mov	r0, r3
 8010e78:	3714      	adds	r7, #20
 8010e7a:	46bd      	mov	sp, r7
 8010e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e80:	4770      	bx	lr
 8010e82:	bf00      	nop
 8010e84:	40010000 	.word	0x40010000
 8010e88:	40000400 	.word	0x40000400
 8010e8c:	40000800 	.word	0x40000800
 8010e90:	40000c00 	.word	0x40000c00
 8010e94:	40010400 	.word	0x40010400
 8010e98:	40001800 	.word	0x40001800
 8010e9c:	40014000 	.word	0x40014000
 8010ea0:	00010007 	.word	0x00010007

08010ea4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010ea4:	b580      	push	{r7, lr}
 8010ea6:	b082      	sub	sp, #8
 8010ea8:	af00      	add	r7, sp, #0
 8010eaa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	691b      	ldr	r3, [r3, #16]
 8010eb2:	f003 0302 	and.w	r3, r3, #2
 8010eb6:	2b02      	cmp	r3, #2
 8010eb8:	d122      	bne.n	8010f00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	68db      	ldr	r3, [r3, #12]
 8010ec0:	f003 0302 	and.w	r3, r3, #2
 8010ec4:	2b02      	cmp	r3, #2
 8010ec6:	d11b      	bne.n	8010f00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	f06f 0202 	mvn.w	r2, #2
 8010ed0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	2201      	movs	r2, #1
 8010ed6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	699b      	ldr	r3, [r3, #24]
 8010ede:	f003 0303 	and.w	r3, r3, #3
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d003      	beq.n	8010eee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010ee6:	6878      	ldr	r0, [r7, #4]
 8010ee8:	f000 f905 	bl	80110f6 <HAL_TIM_IC_CaptureCallback>
 8010eec:	e005      	b.n	8010efa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010eee:	6878      	ldr	r0, [r7, #4]
 8010ef0:	f000 f8f7 	bl	80110e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010ef4:	6878      	ldr	r0, [r7, #4]
 8010ef6:	f000 f908 	bl	801110a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	2200      	movs	r2, #0
 8010efe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	691b      	ldr	r3, [r3, #16]
 8010f06:	f003 0304 	and.w	r3, r3, #4
 8010f0a:	2b04      	cmp	r3, #4
 8010f0c:	d122      	bne.n	8010f54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	68db      	ldr	r3, [r3, #12]
 8010f14:	f003 0304 	and.w	r3, r3, #4
 8010f18:	2b04      	cmp	r3, #4
 8010f1a:	d11b      	bne.n	8010f54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	f06f 0204 	mvn.w	r2, #4
 8010f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	2202      	movs	r2, #2
 8010f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	699b      	ldr	r3, [r3, #24]
 8010f32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d003      	beq.n	8010f42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010f3a:	6878      	ldr	r0, [r7, #4]
 8010f3c:	f000 f8db 	bl	80110f6 <HAL_TIM_IC_CaptureCallback>
 8010f40:	e005      	b.n	8010f4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010f42:	6878      	ldr	r0, [r7, #4]
 8010f44:	f000 f8cd 	bl	80110e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010f48:	6878      	ldr	r0, [r7, #4]
 8010f4a:	f000 f8de 	bl	801110a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	2200      	movs	r2, #0
 8010f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	691b      	ldr	r3, [r3, #16]
 8010f5a:	f003 0308 	and.w	r3, r3, #8
 8010f5e:	2b08      	cmp	r3, #8
 8010f60:	d122      	bne.n	8010fa8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	68db      	ldr	r3, [r3, #12]
 8010f68:	f003 0308 	and.w	r3, r3, #8
 8010f6c:	2b08      	cmp	r3, #8
 8010f6e:	d11b      	bne.n	8010fa8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	f06f 0208 	mvn.w	r2, #8
 8010f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	2204      	movs	r2, #4
 8010f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	69db      	ldr	r3, [r3, #28]
 8010f86:	f003 0303 	and.w	r3, r3, #3
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d003      	beq.n	8010f96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010f8e:	6878      	ldr	r0, [r7, #4]
 8010f90:	f000 f8b1 	bl	80110f6 <HAL_TIM_IC_CaptureCallback>
 8010f94:	e005      	b.n	8010fa2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010f96:	6878      	ldr	r0, [r7, #4]
 8010f98:	f000 f8a3 	bl	80110e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010f9c:	6878      	ldr	r0, [r7, #4]
 8010f9e:	f000 f8b4 	bl	801110a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	2200      	movs	r2, #0
 8010fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	691b      	ldr	r3, [r3, #16]
 8010fae:	f003 0310 	and.w	r3, r3, #16
 8010fb2:	2b10      	cmp	r3, #16
 8010fb4:	d122      	bne.n	8010ffc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	68db      	ldr	r3, [r3, #12]
 8010fbc:	f003 0310 	and.w	r3, r3, #16
 8010fc0:	2b10      	cmp	r3, #16
 8010fc2:	d11b      	bne.n	8010ffc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	f06f 0210 	mvn.w	r2, #16
 8010fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	2208      	movs	r2, #8
 8010fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	69db      	ldr	r3, [r3, #28]
 8010fda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d003      	beq.n	8010fea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010fe2:	6878      	ldr	r0, [r7, #4]
 8010fe4:	f000 f887 	bl	80110f6 <HAL_TIM_IC_CaptureCallback>
 8010fe8:	e005      	b.n	8010ff6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010fea:	6878      	ldr	r0, [r7, #4]
 8010fec:	f000 f879 	bl	80110e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010ff0:	6878      	ldr	r0, [r7, #4]
 8010ff2:	f000 f88a 	bl	801110a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	2200      	movs	r2, #0
 8010ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	691b      	ldr	r3, [r3, #16]
 8011002:	f003 0301 	and.w	r3, r3, #1
 8011006:	2b01      	cmp	r3, #1
 8011008:	d10e      	bne.n	8011028 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	68db      	ldr	r3, [r3, #12]
 8011010:	f003 0301 	and.w	r3, r3, #1
 8011014:	2b01      	cmp	r3, #1
 8011016:	d107      	bne.n	8011028 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	f06f 0201 	mvn.w	r2, #1
 8011020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8011022:	6878      	ldr	r0, [r7, #4]
 8011024:	f7f0 f8e6 	bl	80011f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	691b      	ldr	r3, [r3, #16]
 801102e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011032:	2b80      	cmp	r3, #128	; 0x80
 8011034:	d10e      	bne.n	8011054 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	68db      	ldr	r3, [r3, #12]
 801103c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011040:	2b80      	cmp	r3, #128	; 0x80
 8011042:	d107      	bne.n	8011054 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801104c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801104e:	6878      	ldr	r0, [r7, #4]
 8011050:	f000 f914 	bl	801127c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	691b      	ldr	r3, [r3, #16]
 801105a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801105e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011062:	d10e      	bne.n	8011082 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	68db      	ldr	r3, [r3, #12]
 801106a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801106e:	2b80      	cmp	r3, #128	; 0x80
 8011070:	d107      	bne.n	8011082 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801107a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801107c:	6878      	ldr	r0, [r7, #4]
 801107e:	f000 f907 	bl	8011290 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	691b      	ldr	r3, [r3, #16]
 8011088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801108c:	2b40      	cmp	r3, #64	; 0x40
 801108e:	d10e      	bne.n	80110ae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	68db      	ldr	r3, [r3, #12]
 8011096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801109a:	2b40      	cmp	r3, #64	; 0x40
 801109c:	d107      	bne.n	80110ae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80110a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80110a8:	6878      	ldr	r0, [r7, #4]
 80110aa:	f000 f838 	bl	801111e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	691b      	ldr	r3, [r3, #16]
 80110b4:	f003 0320 	and.w	r3, r3, #32
 80110b8:	2b20      	cmp	r3, #32
 80110ba:	d10e      	bne.n	80110da <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	68db      	ldr	r3, [r3, #12]
 80110c2:	f003 0320 	and.w	r3, r3, #32
 80110c6:	2b20      	cmp	r3, #32
 80110c8:	d107      	bne.n	80110da <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	f06f 0220 	mvn.w	r2, #32
 80110d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80110d4:	6878      	ldr	r0, [r7, #4]
 80110d6:	f000 f8c7 	bl	8011268 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80110da:	bf00      	nop
 80110dc:	3708      	adds	r7, #8
 80110de:	46bd      	mov	sp, r7
 80110e0:	bd80      	pop	{r7, pc}

080110e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80110e2:	b480      	push	{r7}
 80110e4:	b083      	sub	sp, #12
 80110e6:	af00      	add	r7, sp, #0
 80110e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80110ea:	bf00      	nop
 80110ec:	370c      	adds	r7, #12
 80110ee:	46bd      	mov	sp, r7
 80110f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f4:	4770      	bx	lr

080110f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80110f6:	b480      	push	{r7}
 80110f8:	b083      	sub	sp, #12
 80110fa:	af00      	add	r7, sp, #0
 80110fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80110fe:	bf00      	nop
 8011100:	370c      	adds	r7, #12
 8011102:	46bd      	mov	sp, r7
 8011104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011108:	4770      	bx	lr

0801110a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801110a:	b480      	push	{r7}
 801110c:	b083      	sub	sp, #12
 801110e:	af00      	add	r7, sp, #0
 8011110:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8011112:	bf00      	nop
 8011114:	370c      	adds	r7, #12
 8011116:	46bd      	mov	sp, r7
 8011118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801111c:	4770      	bx	lr

0801111e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801111e:	b480      	push	{r7}
 8011120:	b083      	sub	sp, #12
 8011122:	af00      	add	r7, sp, #0
 8011124:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8011126:	bf00      	nop
 8011128:	370c      	adds	r7, #12
 801112a:	46bd      	mov	sp, r7
 801112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011130:	4770      	bx	lr
	...

08011134 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8011134:	b480      	push	{r7}
 8011136:	b085      	sub	sp, #20
 8011138:	af00      	add	r7, sp, #0
 801113a:	6078      	str	r0, [r7, #4]
 801113c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	4a40      	ldr	r2, [pc, #256]	; (8011248 <TIM_Base_SetConfig+0x114>)
 8011148:	4293      	cmp	r3, r2
 801114a:	d013      	beq.n	8011174 <TIM_Base_SetConfig+0x40>
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011152:	d00f      	beq.n	8011174 <TIM_Base_SetConfig+0x40>
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	4a3d      	ldr	r2, [pc, #244]	; (801124c <TIM_Base_SetConfig+0x118>)
 8011158:	4293      	cmp	r3, r2
 801115a:	d00b      	beq.n	8011174 <TIM_Base_SetConfig+0x40>
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	4a3c      	ldr	r2, [pc, #240]	; (8011250 <TIM_Base_SetConfig+0x11c>)
 8011160:	4293      	cmp	r3, r2
 8011162:	d007      	beq.n	8011174 <TIM_Base_SetConfig+0x40>
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	4a3b      	ldr	r2, [pc, #236]	; (8011254 <TIM_Base_SetConfig+0x120>)
 8011168:	4293      	cmp	r3, r2
 801116a:	d003      	beq.n	8011174 <TIM_Base_SetConfig+0x40>
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	4a3a      	ldr	r2, [pc, #232]	; (8011258 <TIM_Base_SetConfig+0x124>)
 8011170:	4293      	cmp	r3, r2
 8011172:	d108      	bne.n	8011186 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801117a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801117c:	683b      	ldr	r3, [r7, #0]
 801117e:	685b      	ldr	r3, [r3, #4]
 8011180:	68fa      	ldr	r2, [r7, #12]
 8011182:	4313      	orrs	r3, r2
 8011184:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	4a2f      	ldr	r2, [pc, #188]	; (8011248 <TIM_Base_SetConfig+0x114>)
 801118a:	4293      	cmp	r3, r2
 801118c:	d01f      	beq.n	80111ce <TIM_Base_SetConfig+0x9a>
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011194:	d01b      	beq.n	80111ce <TIM_Base_SetConfig+0x9a>
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	4a2c      	ldr	r2, [pc, #176]	; (801124c <TIM_Base_SetConfig+0x118>)
 801119a:	4293      	cmp	r3, r2
 801119c:	d017      	beq.n	80111ce <TIM_Base_SetConfig+0x9a>
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	4a2b      	ldr	r2, [pc, #172]	; (8011250 <TIM_Base_SetConfig+0x11c>)
 80111a2:	4293      	cmp	r3, r2
 80111a4:	d013      	beq.n	80111ce <TIM_Base_SetConfig+0x9a>
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	4a2a      	ldr	r2, [pc, #168]	; (8011254 <TIM_Base_SetConfig+0x120>)
 80111aa:	4293      	cmp	r3, r2
 80111ac:	d00f      	beq.n	80111ce <TIM_Base_SetConfig+0x9a>
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	4a29      	ldr	r2, [pc, #164]	; (8011258 <TIM_Base_SetConfig+0x124>)
 80111b2:	4293      	cmp	r3, r2
 80111b4:	d00b      	beq.n	80111ce <TIM_Base_SetConfig+0x9a>
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	4a28      	ldr	r2, [pc, #160]	; (801125c <TIM_Base_SetConfig+0x128>)
 80111ba:	4293      	cmp	r3, r2
 80111bc:	d007      	beq.n	80111ce <TIM_Base_SetConfig+0x9a>
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	4a27      	ldr	r2, [pc, #156]	; (8011260 <TIM_Base_SetConfig+0x12c>)
 80111c2:	4293      	cmp	r3, r2
 80111c4:	d003      	beq.n	80111ce <TIM_Base_SetConfig+0x9a>
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	4a26      	ldr	r2, [pc, #152]	; (8011264 <TIM_Base_SetConfig+0x130>)
 80111ca:	4293      	cmp	r3, r2
 80111cc:	d108      	bne.n	80111e0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80111d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80111d6:	683b      	ldr	r3, [r7, #0]
 80111d8:	68db      	ldr	r3, [r3, #12]
 80111da:	68fa      	ldr	r2, [r7, #12]
 80111dc:	4313      	orrs	r3, r2
 80111de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80111e6:	683b      	ldr	r3, [r7, #0]
 80111e8:	695b      	ldr	r3, [r3, #20]
 80111ea:	4313      	orrs	r3, r2
 80111ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	68fa      	ldr	r2, [r7, #12]
 80111f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80111f4:	683b      	ldr	r3, [r7, #0]
 80111f6:	689a      	ldr	r2, [r3, #8]
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80111fc:	683b      	ldr	r3, [r7, #0]
 80111fe:	681a      	ldr	r2, [r3, #0]
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	4a10      	ldr	r2, [pc, #64]	; (8011248 <TIM_Base_SetConfig+0x114>)
 8011208:	4293      	cmp	r3, r2
 801120a:	d00f      	beq.n	801122c <TIM_Base_SetConfig+0xf8>
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	4a12      	ldr	r2, [pc, #72]	; (8011258 <TIM_Base_SetConfig+0x124>)
 8011210:	4293      	cmp	r3, r2
 8011212:	d00b      	beq.n	801122c <TIM_Base_SetConfig+0xf8>
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	4a11      	ldr	r2, [pc, #68]	; (801125c <TIM_Base_SetConfig+0x128>)
 8011218:	4293      	cmp	r3, r2
 801121a:	d007      	beq.n	801122c <TIM_Base_SetConfig+0xf8>
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	4a10      	ldr	r2, [pc, #64]	; (8011260 <TIM_Base_SetConfig+0x12c>)
 8011220:	4293      	cmp	r3, r2
 8011222:	d003      	beq.n	801122c <TIM_Base_SetConfig+0xf8>
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	4a0f      	ldr	r2, [pc, #60]	; (8011264 <TIM_Base_SetConfig+0x130>)
 8011228:	4293      	cmp	r3, r2
 801122a:	d103      	bne.n	8011234 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801122c:	683b      	ldr	r3, [r7, #0]
 801122e:	691a      	ldr	r2, [r3, #16]
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	2201      	movs	r2, #1
 8011238:	615a      	str	r2, [r3, #20]
}
 801123a:	bf00      	nop
 801123c:	3714      	adds	r7, #20
 801123e:	46bd      	mov	sp, r7
 8011240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011244:	4770      	bx	lr
 8011246:	bf00      	nop
 8011248:	40010000 	.word	0x40010000
 801124c:	40000400 	.word	0x40000400
 8011250:	40000800 	.word	0x40000800
 8011254:	40000c00 	.word	0x40000c00
 8011258:	40010400 	.word	0x40010400
 801125c:	40014000 	.word	0x40014000
 8011260:	40014400 	.word	0x40014400
 8011264:	40014800 	.word	0x40014800

08011268 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011268:	b480      	push	{r7}
 801126a:	b083      	sub	sp, #12
 801126c:	af00      	add	r7, sp, #0
 801126e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011270:	bf00      	nop
 8011272:	370c      	adds	r7, #12
 8011274:	46bd      	mov	sp, r7
 8011276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801127a:	4770      	bx	lr

0801127c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801127c:	b480      	push	{r7}
 801127e:	b083      	sub	sp, #12
 8011280:	af00      	add	r7, sp, #0
 8011282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011284:	bf00      	nop
 8011286:	370c      	adds	r7, #12
 8011288:	46bd      	mov	sp, r7
 801128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801128e:	4770      	bx	lr

08011290 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8011290:	b480      	push	{r7}
 8011292:	b083      	sub	sp, #12
 8011294:	af00      	add	r7, sp, #0
 8011296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8011298:	bf00      	nop
 801129a:	370c      	adds	r7, #12
 801129c:	46bd      	mov	sp, r7
 801129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a2:	4770      	bx	lr

080112a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80112a4:	b580      	push	{r7, lr}
 80112a6:	b082      	sub	sp, #8
 80112a8:	af00      	add	r7, sp, #0
 80112aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d101      	bne.n	80112b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80112b2:	2301      	movs	r3, #1
 80112b4:	e042      	b.n	801133c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d106      	bne.n	80112ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	2200      	movs	r2, #0
 80112c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80112c8:	6878      	ldr	r0, [r7, #4]
 80112ca:	f7f0 fa47 	bl	800175c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	2224      	movs	r2, #36	; 0x24
 80112d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	681a      	ldr	r2, [r3, #0]
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	f022 0201 	bic.w	r2, r2, #1
 80112e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80112e6:	6878      	ldr	r0, [r7, #4]
 80112e8:	f000 f8ba 	bl	8011460 <UART_SetConfig>
 80112ec:	4603      	mov	r3, r0
 80112ee:	2b01      	cmp	r3, #1
 80112f0:	d101      	bne.n	80112f6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80112f2:	2301      	movs	r3, #1
 80112f4:	e022      	b.n	801133c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d002      	beq.n	8011304 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80112fe:	6878      	ldr	r0, [r7, #4]
 8011300:	f000 ff1a 	bl	8012138 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	685a      	ldr	r2, [r3, #4]
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011312:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	689a      	ldr	r2, [r3, #8]
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011322:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	681a      	ldr	r2, [r3, #0]
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	f042 0201 	orr.w	r2, r2, #1
 8011332:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011334:	6878      	ldr	r0, [r7, #4]
 8011336:	f000 ffa1 	bl	801227c <UART_CheckIdleState>
 801133a:	4603      	mov	r3, r0
}
 801133c:	4618      	mov	r0, r3
 801133e:	3708      	adds	r7, #8
 8011340:	46bd      	mov	sp, r7
 8011342:	bd80      	pop	{r7, pc}

08011344 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011344:	b580      	push	{r7, lr}
 8011346:	b08a      	sub	sp, #40	; 0x28
 8011348:	af02      	add	r7, sp, #8
 801134a:	60f8      	str	r0, [r7, #12]
 801134c:	60b9      	str	r1, [r7, #8]
 801134e:	603b      	str	r3, [r7, #0]
 8011350:	4613      	mov	r3, r2
 8011352:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801135a:	2b20      	cmp	r3, #32
 801135c:	d17b      	bne.n	8011456 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 801135e:	68bb      	ldr	r3, [r7, #8]
 8011360:	2b00      	cmp	r3, #0
 8011362:	d002      	beq.n	801136a <HAL_UART_Transmit+0x26>
 8011364:	88fb      	ldrh	r3, [r7, #6]
 8011366:	2b00      	cmp	r3, #0
 8011368:	d101      	bne.n	801136e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801136a:	2301      	movs	r3, #1
 801136c:	e074      	b.n	8011458 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	2200      	movs	r2, #0
 8011372:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	2221      	movs	r2, #33	; 0x21
 801137a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801137e:	f7f7 fca5 	bl	8008ccc <HAL_GetTick>
 8011382:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	88fa      	ldrh	r2, [r7, #6]
 8011388:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	88fa      	ldrh	r2, [r7, #6]
 8011390:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	689b      	ldr	r3, [r3, #8]
 8011398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801139c:	d108      	bne.n	80113b0 <HAL_UART_Transmit+0x6c>
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	691b      	ldr	r3, [r3, #16]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d104      	bne.n	80113b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80113a6:	2300      	movs	r3, #0
 80113a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80113aa:	68bb      	ldr	r3, [r7, #8]
 80113ac:	61bb      	str	r3, [r7, #24]
 80113ae:	e003      	b.n	80113b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80113b0:	68bb      	ldr	r3, [r7, #8]
 80113b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80113b4:	2300      	movs	r3, #0
 80113b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80113b8:	e030      	b.n	801141c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80113ba:	683b      	ldr	r3, [r7, #0]
 80113bc:	9300      	str	r3, [sp, #0]
 80113be:	697b      	ldr	r3, [r7, #20]
 80113c0:	2200      	movs	r2, #0
 80113c2:	2180      	movs	r1, #128	; 0x80
 80113c4:	68f8      	ldr	r0, [r7, #12]
 80113c6:	f001 f803 	bl	80123d0 <UART_WaitOnFlagUntilTimeout>
 80113ca:	4603      	mov	r3, r0
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d005      	beq.n	80113dc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	2220      	movs	r2, #32
 80113d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80113d8:	2303      	movs	r3, #3
 80113da:	e03d      	b.n	8011458 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80113dc:	69fb      	ldr	r3, [r7, #28]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d10b      	bne.n	80113fa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80113e2:	69bb      	ldr	r3, [r7, #24]
 80113e4:	881b      	ldrh	r3, [r3, #0]
 80113e6:	461a      	mov	r2, r3
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80113f0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80113f2:	69bb      	ldr	r3, [r7, #24]
 80113f4:	3302      	adds	r3, #2
 80113f6:	61bb      	str	r3, [r7, #24]
 80113f8:	e007      	b.n	801140a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80113fa:	69fb      	ldr	r3, [r7, #28]
 80113fc:	781a      	ldrb	r2, [r3, #0]
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8011404:	69fb      	ldr	r3, [r7, #28]
 8011406:	3301      	adds	r3, #1
 8011408:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8011410:	b29b      	uxth	r3, r3
 8011412:	3b01      	subs	r3, #1
 8011414:	b29a      	uxth	r2, r3
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8011422:	b29b      	uxth	r3, r3
 8011424:	2b00      	cmp	r3, #0
 8011426:	d1c8      	bne.n	80113ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8011428:	683b      	ldr	r3, [r7, #0]
 801142a:	9300      	str	r3, [sp, #0]
 801142c:	697b      	ldr	r3, [r7, #20]
 801142e:	2200      	movs	r2, #0
 8011430:	2140      	movs	r1, #64	; 0x40
 8011432:	68f8      	ldr	r0, [r7, #12]
 8011434:	f000 ffcc 	bl	80123d0 <UART_WaitOnFlagUntilTimeout>
 8011438:	4603      	mov	r3, r0
 801143a:	2b00      	cmp	r3, #0
 801143c:	d005      	beq.n	801144a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	2220      	movs	r2, #32
 8011442:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8011446:	2303      	movs	r3, #3
 8011448:	e006      	b.n	8011458 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	2220      	movs	r2, #32
 801144e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8011452:	2300      	movs	r3, #0
 8011454:	e000      	b.n	8011458 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8011456:	2302      	movs	r3, #2
  }
}
 8011458:	4618      	mov	r0, r3
 801145a:	3720      	adds	r7, #32
 801145c:	46bd      	mov	sp, r7
 801145e:	bd80      	pop	{r7, pc}

08011460 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011460:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011464:	b092      	sub	sp, #72	; 0x48
 8011466:	af00      	add	r7, sp, #0
 8011468:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801146a:	2300      	movs	r3, #0
 801146c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011470:	697b      	ldr	r3, [r7, #20]
 8011472:	689a      	ldr	r2, [r3, #8]
 8011474:	697b      	ldr	r3, [r7, #20]
 8011476:	691b      	ldr	r3, [r3, #16]
 8011478:	431a      	orrs	r2, r3
 801147a:	697b      	ldr	r3, [r7, #20]
 801147c:	695b      	ldr	r3, [r3, #20]
 801147e:	431a      	orrs	r2, r3
 8011480:	697b      	ldr	r3, [r7, #20]
 8011482:	69db      	ldr	r3, [r3, #28]
 8011484:	4313      	orrs	r3, r2
 8011486:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011488:	697b      	ldr	r3, [r7, #20]
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	681a      	ldr	r2, [r3, #0]
 801148e:	4bbe      	ldr	r3, [pc, #760]	; (8011788 <UART_SetConfig+0x328>)
 8011490:	4013      	ands	r3, r2
 8011492:	697a      	ldr	r2, [r7, #20]
 8011494:	6812      	ldr	r2, [r2, #0]
 8011496:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011498:	430b      	orrs	r3, r1
 801149a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801149c:	697b      	ldr	r3, [r7, #20]
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	685b      	ldr	r3, [r3, #4]
 80114a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80114a6:	697b      	ldr	r3, [r7, #20]
 80114a8:	68da      	ldr	r2, [r3, #12]
 80114aa:	697b      	ldr	r3, [r7, #20]
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	430a      	orrs	r2, r1
 80114b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80114b2:	697b      	ldr	r3, [r7, #20]
 80114b4:	699b      	ldr	r3, [r3, #24]
 80114b6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80114b8:	697b      	ldr	r3, [r7, #20]
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	4ab3      	ldr	r2, [pc, #716]	; (801178c <UART_SetConfig+0x32c>)
 80114be:	4293      	cmp	r3, r2
 80114c0:	d004      	beq.n	80114cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80114c2:	697b      	ldr	r3, [r7, #20]
 80114c4:	6a1b      	ldr	r3, [r3, #32]
 80114c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80114c8:	4313      	orrs	r3, r2
 80114ca:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80114cc:	697b      	ldr	r3, [r7, #20]
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	689a      	ldr	r2, [r3, #8]
 80114d2:	4baf      	ldr	r3, [pc, #700]	; (8011790 <UART_SetConfig+0x330>)
 80114d4:	4013      	ands	r3, r2
 80114d6:	697a      	ldr	r2, [r7, #20]
 80114d8:	6812      	ldr	r2, [r2, #0]
 80114da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80114dc:	430b      	orrs	r3, r1
 80114de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80114e0:	697b      	ldr	r3, [r7, #20]
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114e6:	f023 010f 	bic.w	r1, r3, #15
 80114ea:	697b      	ldr	r3, [r7, #20]
 80114ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80114ee:	697b      	ldr	r3, [r7, #20]
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	430a      	orrs	r2, r1
 80114f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80114f6:	697b      	ldr	r3, [r7, #20]
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	4aa6      	ldr	r2, [pc, #664]	; (8011794 <UART_SetConfig+0x334>)
 80114fc:	4293      	cmp	r3, r2
 80114fe:	d177      	bne.n	80115f0 <UART_SetConfig+0x190>
 8011500:	4ba5      	ldr	r3, [pc, #660]	; (8011798 <UART_SetConfig+0x338>)
 8011502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011504:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011508:	2b28      	cmp	r3, #40	; 0x28
 801150a:	d86d      	bhi.n	80115e8 <UART_SetConfig+0x188>
 801150c:	a201      	add	r2, pc, #4	; (adr r2, 8011514 <UART_SetConfig+0xb4>)
 801150e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011512:	bf00      	nop
 8011514:	080115b9 	.word	0x080115b9
 8011518:	080115e9 	.word	0x080115e9
 801151c:	080115e9 	.word	0x080115e9
 8011520:	080115e9 	.word	0x080115e9
 8011524:	080115e9 	.word	0x080115e9
 8011528:	080115e9 	.word	0x080115e9
 801152c:	080115e9 	.word	0x080115e9
 8011530:	080115e9 	.word	0x080115e9
 8011534:	080115c1 	.word	0x080115c1
 8011538:	080115e9 	.word	0x080115e9
 801153c:	080115e9 	.word	0x080115e9
 8011540:	080115e9 	.word	0x080115e9
 8011544:	080115e9 	.word	0x080115e9
 8011548:	080115e9 	.word	0x080115e9
 801154c:	080115e9 	.word	0x080115e9
 8011550:	080115e9 	.word	0x080115e9
 8011554:	080115c9 	.word	0x080115c9
 8011558:	080115e9 	.word	0x080115e9
 801155c:	080115e9 	.word	0x080115e9
 8011560:	080115e9 	.word	0x080115e9
 8011564:	080115e9 	.word	0x080115e9
 8011568:	080115e9 	.word	0x080115e9
 801156c:	080115e9 	.word	0x080115e9
 8011570:	080115e9 	.word	0x080115e9
 8011574:	080115d1 	.word	0x080115d1
 8011578:	080115e9 	.word	0x080115e9
 801157c:	080115e9 	.word	0x080115e9
 8011580:	080115e9 	.word	0x080115e9
 8011584:	080115e9 	.word	0x080115e9
 8011588:	080115e9 	.word	0x080115e9
 801158c:	080115e9 	.word	0x080115e9
 8011590:	080115e9 	.word	0x080115e9
 8011594:	080115d9 	.word	0x080115d9
 8011598:	080115e9 	.word	0x080115e9
 801159c:	080115e9 	.word	0x080115e9
 80115a0:	080115e9 	.word	0x080115e9
 80115a4:	080115e9 	.word	0x080115e9
 80115a8:	080115e9 	.word	0x080115e9
 80115ac:	080115e9 	.word	0x080115e9
 80115b0:	080115e9 	.word	0x080115e9
 80115b4:	080115e1 	.word	0x080115e1
 80115b8:	2301      	movs	r3, #1
 80115ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115be:	e326      	b.n	8011c0e <UART_SetConfig+0x7ae>
 80115c0:	2304      	movs	r3, #4
 80115c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115c6:	e322      	b.n	8011c0e <UART_SetConfig+0x7ae>
 80115c8:	2308      	movs	r3, #8
 80115ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115ce:	e31e      	b.n	8011c0e <UART_SetConfig+0x7ae>
 80115d0:	2310      	movs	r3, #16
 80115d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115d6:	e31a      	b.n	8011c0e <UART_SetConfig+0x7ae>
 80115d8:	2320      	movs	r3, #32
 80115da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115de:	e316      	b.n	8011c0e <UART_SetConfig+0x7ae>
 80115e0:	2340      	movs	r3, #64	; 0x40
 80115e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115e6:	e312      	b.n	8011c0e <UART_SetConfig+0x7ae>
 80115e8:	2380      	movs	r3, #128	; 0x80
 80115ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115ee:	e30e      	b.n	8011c0e <UART_SetConfig+0x7ae>
 80115f0:	697b      	ldr	r3, [r7, #20]
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	4a69      	ldr	r2, [pc, #420]	; (801179c <UART_SetConfig+0x33c>)
 80115f6:	4293      	cmp	r3, r2
 80115f8:	d130      	bne.n	801165c <UART_SetConfig+0x1fc>
 80115fa:	4b67      	ldr	r3, [pc, #412]	; (8011798 <UART_SetConfig+0x338>)
 80115fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80115fe:	f003 0307 	and.w	r3, r3, #7
 8011602:	2b05      	cmp	r3, #5
 8011604:	d826      	bhi.n	8011654 <UART_SetConfig+0x1f4>
 8011606:	a201      	add	r2, pc, #4	; (adr r2, 801160c <UART_SetConfig+0x1ac>)
 8011608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801160c:	08011625 	.word	0x08011625
 8011610:	0801162d 	.word	0x0801162d
 8011614:	08011635 	.word	0x08011635
 8011618:	0801163d 	.word	0x0801163d
 801161c:	08011645 	.word	0x08011645
 8011620:	0801164d 	.word	0x0801164d
 8011624:	2300      	movs	r3, #0
 8011626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801162a:	e2f0      	b.n	8011c0e <UART_SetConfig+0x7ae>
 801162c:	2304      	movs	r3, #4
 801162e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011632:	e2ec      	b.n	8011c0e <UART_SetConfig+0x7ae>
 8011634:	2308      	movs	r3, #8
 8011636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801163a:	e2e8      	b.n	8011c0e <UART_SetConfig+0x7ae>
 801163c:	2310      	movs	r3, #16
 801163e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011642:	e2e4      	b.n	8011c0e <UART_SetConfig+0x7ae>
 8011644:	2320      	movs	r3, #32
 8011646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801164a:	e2e0      	b.n	8011c0e <UART_SetConfig+0x7ae>
 801164c:	2340      	movs	r3, #64	; 0x40
 801164e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011652:	e2dc      	b.n	8011c0e <UART_SetConfig+0x7ae>
 8011654:	2380      	movs	r3, #128	; 0x80
 8011656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801165a:	e2d8      	b.n	8011c0e <UART_SetConfig+0x7ae>
 801165c:	697b      	ldr	r3, [r7, #20]
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	4a4f      	ldr	r2, [pc, #316]	; (80117a0 <UART_SetConfig+0x340>)
 8011662:	4293      	cmp	r3, r2
 8011664:	d130      	bne.n	80116c8 <UART_SetConfig+0x268>
 8011666:	4b4c      	ldr	r3, [pc, #304]	; (8011798 <UART_SetConfig+0x338>)
 8011668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801166a:	f003 0307 	and.w	r3, r3, #7
 801166e:	2b05      	cmp	r3, #5
 8011670:	d826      	bhi.n	80116c0 <UART_SetConfig+0x260>
 8011672:	a201      	add	r2, pc, #4	; (adr r2, 8011678 <UART_SetConfig+0x218>)
 8011674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011678:	08011691 	.word	0x08011691
 801167c:	08011699 	.word	0x08011699
 8011680:	080116a1 	.word	0x080116a1
 8011684:	080116a9 	.word	0x080116a9
 8011688:	080116b1 	.word	0x080116b1
 801168c:	080116b9 	.word	0x080116b9
 8011690:	2300      	movs	r3, #0
 8011692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011696:	e2ba      	b.n	8011c0e <UART_SetConfig+0x7ae>
 8011698:	2304      	movs	r3, #4
 801169a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801169e:	e2b6      	b.n	8011c0e <UART_SetConfig+0x7ae>
 80116a0:	2308      	movs	r3, #8
 80116a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116a6:	e2b2      	b.n	8011c0e <UART_SetConfig+0x7ae>
 80116a8:	2310      	movs	r3, #16
 80116aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116ae:	e2ae      	b.n	8011c0e <UART_SetConfig+0x7ae>
 80116b0:	2320      	movs	r3, #32
 80116b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116b6:	e2aa      	b.n	8011c0e <UART_SetConfig+0x7ae>
 80116b8:	2340      	movs	r3, #64	; 0x40
 80116ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116be:	e2a6      	b.n	8011c0e <UART_SetConfig+0x7ae>
 80116c0:	2380      	movs	r3, #128	; 0x80
 80116c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116c6:	e2a2      	b.n	8011c0e <UART_SetConfig+0x7ae>
 80116c8:	697b      	ldr	r3, [r7, #20]
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	4a35      	ldr	r2, [pc, #212]	; (80117a4 <UART_SetConfig+0x344>)
 80116ce:	4293      	cmp	r3, r2
 80116d0:	d130      	bne.n	8011734 <UART_SetConfig+0x2d4>
 80116d2:	4b31      	ldr	r3, [pc, #196]	; (8011798 <UART_SetConfig+0x338>)
 80116d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80116d6:	f003 0307 	and.w	r3, r3, #7
 80116da:	2b05      	cmp	r3, #5
 80116dc:	d826      	bhi.n	801172c <UART_SetConfig+0x2cc>
 80116de:	a201      	add	r2, pc, #4	; (adr r2, 80116e4 <UART_SetConfig+0x284>)
 80116e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116e4:	080116fd 	.word	0x080116fd
 80116e8:	08011705 	.word	0x08011705
 80116ec:	0801170d 	.word	0x0801170d
 80116f0:	08011715 	.word	0x08011715
 80116f4:	0801171d 	.word	0x0801171d
 80116f8:	08011725 	.word	0x08011725
 80116fc:	2300      	movs	r3, #0
 80116fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011702:	e284      	b.n	8011c0e <UART_SetConfig+0x7ae>
 8011704:	2304      	movs	r3, #4
 8011706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801170a:	e280      	b.n	8011c0e <UART_SetConfig+0x7ae>
 801170c:	2308      	movs	r3, #8
 801170e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011712:	e27c      	b.n	8011c0e <UART_SetConfig+0x7ae>
 8011714:	2310      	movs	r3, #16
 8011716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801171a:	e278      	b.n	8011c0e <UART_SetConfig+0x7ae>
 801171c:	2320      	movs	r3, #32
 801171e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011722:	e274      	b.n	8011c0e <UART_SetConfig+0x7ae>
 8011724:	2340      	movs	r3, #64	; 0x40
 8011726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801172a:	e270      	b.n	8011c0e <UART_SetConfig+0x7ae>
 801172c:	2380      	movs	r3, #128	; 0x80
 801172e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011732:	e26c      	b.n	8011c0e <UART_SetConfig+0x7ae>
 8011734:	697b      	ldr	r3, [r7, #20]
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	4a1b      	ldr	r2, [pc, #108]	; (80117a8 <UART_SetConfig+0x348>)
 801173a:	4293      	cmp	r3, r2
 801173c:	d142      	bne.n	80117c4 <UART_SetConfig+0x364>
 801173e:	4b16      	ldr	r3, [pc, #88]	; (8011798 <UART_SetConfig+0x338>)
 8011740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011742:	f003 0307 	and.w	r3, r3, #7
 8011746:	2b05      	cmp	r3, #5
 8011748:	d838      	bhi.n	80117bc <UART_SetConfig+0x35c>
 801174a:	a201      	add	r2, pc, #4	; (adr r2, 8011750 <UART_SetConfig+0x2f0>)
 801174c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011750:	08011769 	.word	0x08011769
 8011754:	08011771 	.word	0x08011771
 8011758:	08011779 	.word	0x08011779
 801175c:	08011781 	.word	0x08011781
 8011760:	080117ad 	.word	0x080117ad
 8011764:	080117b5 	.word	0x080117b5
 8011768:	2300      	movs	r3, #0
 801176a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801176e:	e24e      	b.n	8011c0e <UART_SetConfig+0x7ae>
 8011770:	2304      	movs	r3, #4
 8011772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011776:	e24a      	b.n	8011c0e <UART_SetConfig+0x7ae>
 8011778:	2308      	movs	r3, #8
 801177a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801177e:	e246      	b.n	8011c0e <UART_SetConfig+0x7ae>
 8011780:	2310      	movs	r3, #16
 8011782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011786:	e242      	b.n	8011c0e <UART_SetConfig+0x7ae>
 8011788:	cfff69f3 	.word	0xcfff69f3
 801178c:	58000c00 	.word	0x58000c00
 8011790:	11fff4ff 	.word	0x11fff4ff
 8011794:	40011000 	.word	0x40011000
 8011798:	58024400 	.word	0x58024400
 801179c:	40004400 	.word	0x40004400
 80117a0:	40004800 	.word	0x40004800
 80117a4:	40004c00 	.word	0x40004c00
 80117a8:	40005000 	.word	0x40005000
 80117ac:	2320      	movs	r3, #32
 80117ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117b2:	e22c      	b.n	8011c0e <UART_SetConfig+0x7ae>
 80117b4:	2340      	movs	r3, #64	; 0x40
 80117b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117ba:	e228      	b.n	8011c0e <UART_SetConfig+0x7ae>
 80117bc:	2380      	movs	r3, #128	; 0x80
 80117be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117c2:	e224      	b.n	8011c0e <UART_SetConfig+0x7ae>
 80117c4:	697b      	ldr	r3, [r7, #20]
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	4ab1      	ldr	r2, [pc, #708]	; (8011a90 <UART_SetConfig+0x630>)
 80117ca:	4293      	cmp	r3, r2
 80117cc:	d176      	bne.n	80118bc <UART_SetConfig+0x45c>
 80117ce:	4bb1      	ldr	r3, [pc, #708]	; (8011a94 <UART_SetConfig+0x634>)
 80117d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80117d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80117d6:	2b28      	cmp	r3, #40	; 0x28
 80117d8:	d86c      	bhi.n	80118b4 <UART_SetConfig+0x454>
 80117da:	a201      	add	r2, pc, #4	; (adr r2, 80117e0 <UART_SetConfig+0x380>)
 80117dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117e0:	08011885 	.word	0x08011885
 80117e4:	080118b5 	.word	0x080118b5
 80117e8:	080118b5 	.word	0x080118b5
 80117ec:	080118b5 	.word	0x080118b5
 80117f0:	080118b5 	.word	0x080118b5
 80117f4:	080118b5 	.word	0x080118b5
 80117f8:	080118b5 	.word	0x080118b5
 80117fc:	080118b5 	.word	0x080118b5
 8011800:	0801188d 	.word	0x0801188d
 8011804:	080118b5 	.word	0x080118b5
 8011808:	080118b5 	.word	0x080118b5
 801180c:	080118b5 	.word	0x080118b5
 8011810:	080118b5 	.word	0x080118b5
 8011814:	080118b5 	.word	0x080118b5
 8011818:	080118b5 	.word	0x080118b5
 801181c:	080118b5 	.word	0x080118b5
 8011820:	08011895 	.word	0x08011895
 8011824:	080118b5 	.word	0x080118b5
 8011828:	080118b5 	.word	0x080118b5
 801182c:	080118b5 	.word	0x080118b5
 8011830:	080118b5 	.word	0x080118b5
 8011834:	080118b5 	.word	0x080118b5
 8011838:	080118b5 	.word	0x080118b5
 801183c:	080118b5 	.word	0x080118b5
 8011840:	0801189d 	.word	0x0801189d
 8011844:	080118b5 	.word	0x080118b5
 8011848:	080118b5 	.word	0x080118b5
 801184c:	080118b5 	.word	0x080118b5
 8011850:	080118b5 	.word	0x080118b5
 8011854:	080118b5 	.word	0x080118b5
 8011858:	080118b5 	.word	0x080118b5
 801185c:	080118b5 	.word	0x080118b5
 8011860:	080118a5 	.word	0x080118a5
 8011864:	080118b5 	.word	0x080118b5
 8011868:	080118b5 	.word	0x080118b5
 801186c:	080118b5 	.word	0x080118b5
 8011870:	080118b5 	.word	0x080118b5
 8011874:	080118b5 	.word	0x080118b5
 8011878:	080118b5 	.word	0x080118b5
 801187c:	080118b5 	.word	0x080118b5
 8011880:	080118ad 	.word	0x080118ad
 8011884:	2301      	movs	r3, #1
 8011886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801188a:	e1c0      	b.n	8011c0e <UART_SetConfig+0x7ae>
 801188c:	2304      	movs	r3, #4
 801188e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011892:	e1bc      	b.n	8011c0e <UART_SetConfig+0x7ae>
 8011894:	2308      	movs	r3, #8
 8011896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801189a:	e1b8      	b.n	8011c0e <UART_SetConfig+0x7ae>
 801189c:	2310      	movs	r3, #16
 801189e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118a2:	e1b4      	b.n	8011c0e <UART_SetConfig+0x7ae>
 80118a4:	2320      	movs	r3, #32
 80118a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118aa:	e1b0      	b.n	8011c0e <UART_SetConfig+0x7ae>
 80118ac:	2340      	movs	r3, #64	; 0x40
 80118ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118b2:	e1ac      	b.n	8011c0e <UART_SetConfig+0x7ae>
 80118b4:	2380      	movs	r3, #128	; 0x80
 80118b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118ba:	e1a8      	b.n	8011c0e <UART_SetConfig+0x7ae>
 80118bc:	697b      	ldr	r3, [r7, #20]
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	4a75      	ldr	r2, [pc, #468]	; (8011a98 <UART_SetConfig+0x638>)
 80118c2:	4293      	cmp	r3, r2
 80118c4:	d130      	bne.n	8011928 <UART_SetConfig+0x4c8>
 80118c6:	4b73      	ldr	r3, [pc, #460]	; (8011a94 <UART_SetConfig+0x634>)
 80118c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80118ca:	f003 0307 	and.w	r3, r3, #7
 80118ce:	2b05      	cmp	r3, #5
 80118d0:	d826      	bhi.n	8011920 <UART_SetConfig+0x4c0>
 80118d2:	a201      	add	r2, pc, #4	; (adr r2, 80118d8 <UART_SetConfig+0x478>)
 80118d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118d8:	080118f1 	.word	0x080118f1
 80118dc:	080118f9 	.word	0x080118f9
 80118e0:	08011901 	.word	0x08011901
 80118e4:	08011909 	.word	0x08011909
 80118e8:	08011911 	.word	0x08011911
 80118ec:	08011919 	.word	0x08011919
 80118f0:	2300      	movs	r3, #0
 80118f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118f6:	e18a      	b.n	8011c0e <UART_SetConfig+0x7ae>
 80118f8:	2304      	movs	r3, #4
 80118fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118fe:	e186      	b.n	8011c0e <UART_SetConfig+0x7ae>
 8011900:	2308      	movs	r3, #8
 8011902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011906:	e182      	b.n	8011c0e <UART_SetConfig+0x7ae>
 8011908:	2310      	movs	r3, #16
 801190a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801190e:	e17e      	b.n	8011c0e <UART_SetConfig+0x7ae>
 8011910:	2320      	movs	r3, #32
 8011912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011916:	e17a      	b.n	8011c0e <UART_SetConfig+0x7ae>
 8011918:	2340      	movs	r3, #64	; 0x40
 801191a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801191e:	e176      	b.n	8011c0e <UART_SetConfig+0x7ae>
 8011920:	2380      	movs	r3, #128	; 0x80
 8011922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011926:	e172      	b.n	8011c0e <UART_SetConfig+0x7ae>
 8011928:	697b      	ldr	r3, [r7, #20]
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	4a5b      	ldr	r2, [pc, #364]	; (8011a9c <UART_SetConfig+0x63c>)
 801192e:	4293      	cmp	r3, r2
 8011930:	d130      	bne.n	8011994 <UART_SetConfig+0x534>
 8011932:	4b58      	ldr	r3, [pc, #352]	; (8011a94 <UART_SetConfig+0x634>)
 8011934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011936:	f003 0307 	and.w	r3, r3, #7
 801193a:	2b05      	cmp	r3, #5
 801193c:	d826      	bhi.n	801198c <UART_SetConfig+0x52c>
 801193e:	a201      	add	r2, pc, #4	; (adr r2, 8011944 <UART_SetConfig+0x4e4>)
 8011940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011944:	0801195d 	.word	0x0801195d
 8011948:	08011965 	.word	0x08011965
 801194c:	0801196d 	.word	0x0801196d
 8011950:	08011975 	.word	0x08011975
 8011954:	0801197d 	.word	0x0801197d
 8011958:	08011985 	.word	0x08011985
 801195c:	2300      	movs	r3, #0
 801195e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011962:	e154      	b.n	8011c0e <UART_SetConfig+0x7ae>
 8011964:	2304      	movs	r3, #4
 8011966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801196a:	e150      	b.n	8011c0e <UART_SetConfig+0x7ae>
 801196c:	2308      	movs	r3, #8
 801196e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011972:	e14c      	b.n	8011c0e <UART_SetConfig+0x7ae>
 8011974:	2310      	movs	r3, #16
 8011976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801197a:	e148      	b.n	8011c0e <UART_SetConfig+0x7ae>
 801197c:	2320      	movs	r3, #32
 801197e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011982:	e144      	b.n	8011c0e <UART_SetConfig+0x7ae>
 8011984:	2340      	movs	r3, #64	; 0x40
 8011986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801198a:	e140      	b.n	8011c0e <UART_SetConfig+0x7ae>
 801198c:	2380      	movs	r3, #128	; 0x80
 801198e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011992:	e13c      	b.n	8011c0e <UART_SetConfig+0x7ae>
 8011994:	697b      	ldr	r3, [r7, #20]
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	4a41      	ldr	r2, [pc, #260]	; (8011aa0 <UART_SetConfig+0x640>)
 801199a:	4293      	cmp	r3, r2
 801199c:	f040 8082 	bne.w	8011aa4 <UART_SetConfig+0x644>
 80119a0:	4b3c      	ldr	r3, [pc, #240]	; (8011a94 <UART_SetConfig+0x634>)
 80119a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80119a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80119a8:	2b28      	cmp	r3, #40	; 0x28
 80119aa:	d86d      	bhi.n	8011a88 <UART_SetConfig+0x628>
 80119ac:	a201      	add	r2, pc, #4	; (adr r2, 80119b4 <UART_SetConfig+0x554>)
 80119ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119b2:	bf00      	nop
 80119b4:	08011a59 	.word	0x08011a59
 80119b8:	08011a89 	.word	0x08011a89
 80119bc:	08011a89 	.word	0x08011a89
 80119c0:	08011a89 	.word	0x08011a89
 80119c4:	08011a89 	.word	0x08011a89
 80119c8:	08011a89 	.word	0x08011a89
 80119cc:	08011a89 	.word	0x08011a89
 80119d0:	08011a89 	.word	0x08011a89
 80119d4:	08011a61 	.word	0x08011a61
 80119d8:	08011a89 	.word	0x08011a89
 80119dc:	08011a89 	.word	0x08011a89
 80119e0:	08011a89 	.word	0x08011a89
 80119e4:	08011a89 	.word	0x08011a89
 80119e8:	08011a89 	.word	0x08011a89
 80119ec:	08011a89 	.word	0x08011a89
 80119f0:	08011a89 	.word	0x08011a89
 80119f4:	08011a69 	.word	0x08011a69
 80119f8:	08011a89 	.word	0x08011a89
 80119fc:	08011a89 	.word	0x08011a89
 8011a00:	08011a89 	.word	0x08011a89
 8011a04:	08011a89 	.word	0x08011a89
 8011a08:	08011a89 	.word	0x08011a89
 8011a0c:	08011a89 	.word	0x08011a89
 8011a10:	08011a89 	.word	0x08011a89
 8011a14:	08011a71 	.word	0x08011a71
 8011a18:	08011a89 	.word	0x08011a89
 8011a1c:	08011a89 	.word	0x08011a89
 8011a20:	08011a89 	.word	0x08011a89
 8011a24:	08011a89 	.word	0x08011a89
 8011a28:	08011a89 	.word	0x08011a89
 8011a2c:	08011a89 	.word	0x08011a89
 8011a30:	08011a89 	.word	0x08011a89
 8011a34:	08011a79 	.word	0x08011a79
 8011a38:	08011a89 	.word	0x08011a89
 8011a3c:	08011a89 	.word	0x08011a89
 8011a40:	08011a89 	.word	0x08011a89
 8011a44:	08011a89 	.word	0x08011a89
 8011a48:	08011a89 	.word	0x08011a89
 8011a4c:	08011a89 	.word	0x08011a89
 8011a50:	08011a89 	.word	0x08011a89
 8011a54:	08011a81 	.word	0x08011a81
 8011a58:	2301      	movs	r3, #1
 8011a5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a5e:	e0d6      	b.n	8011c0e <UART_SetConfig+0x7ae>
 8011a60:	2304      	movs	r3, #4
 8011a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a66:	e0d2      	b.n	8011c0e <UART_SetConfig+0x7ae>
 8011a68:	2308      	movs	r3, #8
 8011a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a6e:	e0ce      	b.n	8011c0e <UART_SetConfig+0x7ae>
 8011a70:	2310      	movs	r3, #16
 8011a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a76:	e0ca      	b.n	8011c0e <UART_SetConfig+0x7ae>
 8011a78:	2320      	movs	r3, #32
 8011a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a7e:	e0c6      	b.n	8011c0e <UART_SetConfig+0x7ae>
 8011a80:	2340      	movs	r3, #64	; 0x40
 8011a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a86:	e0c2      	b.n	8011c0e <UART_SetConfig+0x7ae>
 8011a88:	2380      	movs	r3, #128	; 0x80
 8011a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a8e:	e0be      	b.n	8011c0e <UART_SetConfig+0x7ae>
 8011a90:	40011400 	.word	0x40011400
 8011a94:	58024400 	.word	0x58024400
 8011a98:	40007800 	.word	0x40007800
 8011a9c:	40007c00 	.word	0x40007c00
 8011aa0:	40011800 	.word	0x40011800
 8011aa4:	697b      	ldr	r3, [r7, #20]
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	4aad      	ldr	r2, [pc, #692]	; (8011d60 <UART_SetConfig+0x900>)
 8011aaa:	4293      	cmp	r3, r2
 8011aac:	d176      	bne.n	8011b9c <UART_SetConfig+0x73c>
 8011aae:	4bad      	ldr	r3, [pc, #692]	; (8011d64 <UART_SetConfig+0x904>)
 8011ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011ab2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011ab6:	2b28      	cmp	r3, #40	; 0x28
 8011ab8:	d86c      	bhi.n	8011b94 <UART_SetConfig+0x734>
 8011aba:	a201      	add	r2, pc, #4	; (adr r2, 8011ac0 <UART_SetConfig+0x660>)
 8011abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ac0:	08011b65 	.word	0x08011b65
 8011ac4:	08011b95 	.word	0x08011b95
 8011ac8:	08011b95 	.word	0x08011b95
 8011acc:	08011b95 	.word	0x08011b95
 8011ad0:	08011b95 	.word	0x08011b95
 8011ad4:	08011b95 	.word	0x08011b95
 8011ad8:	08011b95 	.word	0x08011b95
 8011adc:	08011b95 	.word	0x08011b95
 8011ae0:	08011b6d 	.word	0x08011b6d
 8011ae4:	08011b95 	.word	0x08011b95
 8011ae8:	08011b95 	.word	0x08011b95
 8011aec:	08011b95 	.word	0x08011b95
 8011af0:	08011b95 	.word	0x08011b95
 8011af4:	08011b95 	.word	0x08011b95
 8011af8:	08011b95 	.word	0x08011b95
 8011afc:	08011b95 	.word	0x08011b95
 8011b00:	08011b75 	.word	0x08011b75
 8011b04:	08011b95 	.word	0x08011b95
 8011b08:	08011b95 	.word	0x08011b95
 8011b0c:	08011b95 	.word	0x08011b95
 8011b10:	08011b95 	.word	0x08011b95
 8011b14:	08011b95 	.word	0x08011b95
 8011b18:	08011b95 	.word	0x08011b95
 8011b1c:	08011b95 	.word	0x08011b95
 8011b20:	08011b7d 	.word	0x08011b7d
 8011b24:	08011b95 	.word	0x08011b95
 8011b28:	08011b95 	.word	0x08011b95
 8011b2c:	08011b95 	.word	0x08011b95
 8011b30:	08011b95 	.word	0x08011b95
 8011b34:	08011b95 	.word	0x08011b95
 8011b38:	08011b95 	.word	0x08011b95
 8011b3c:	08011b95 	.word	0x08011b95
 8011b40:	08011b85 	.word	0x08011b85
 8011b44:	08011b95 	.word	0x08011b95
 8011b48:	08011b95 	.word	0x08011b95
 8011b4c:	08011b95 	.word	0x08011b95
 8011b50:	08011b95 	.word	0x08011b95
 8011b54:	08011b95 	.word	0x08011b95
 8011b58:	08011b95 	.word	0x08011b95
 8011b5c:	08011b95 	.word	0x08011b95
 8011b60:	08011b8d 	.word	0x08011b8d
 8011b64:	2301      	movs	r3, #1
 8011b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b6a:	e050      	b.n	8011c0e <UART_SetConfig+0x7ae>
 8011b6c:	2304      	movs	r3, #4
 8011b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b72:	e04c      	b.n	8011c0e <UART_SetConfig+0x7ae>
 8011b74:	2308      	movs	r3, #8
 8011b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b7a:	e048      	b.n	8011c0e <UART_SetConfig+0x7ae>
 8011b7c:	2310      	movs	r3, #16
 8011b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b82:	e044      	b.n	8011c0e <UART_SetConfig+0x7ae>
 8011b84:	2320      	movs	r3, #32
 8011b86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b8a:	e040      	b.n	8011c0e <UART_SetConfig+0x7ae>
 8011b8c:	2340      	movs	r3, #64	; 0x40
 8011b8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b92:	e03c      	b.n	8011c0e <UART_SetConfig+0x7ae>
 8011b94:	2380      	movs	r3, #128	; 0x80
 8011b96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b9a:	e038      	b.n	8011c0e <UART_SetConfig+0x7ae>
 8011b9c:	697b      	ldr	r3, [r7, #20]
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	4a71      	ldr	r2, [pc, #452]	; (8011d68 <UART_SetConfig+0x908>)
 8011ba2:	4293      	cmp	r3, r2
 8011ba4:	d130      	bne.n	8011c08 <UART_SetConfig+0x7a8>
 8011ba6:	4b6f      	ldr	r3, [pc, #444]	; (8011d64 <UART_SetConfig+0x904>)
 8011ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011baa:	f003 0307 	and.w	r3, r3, #7
 8011bae:	2b05      	cmp	r3, #5
 8011bb0:	d826      	bhi.n	8011c00 <UART_SetConfig+0x7a0>
 8011bb2:	a201      	add	r2, pc, #4	; (adr r2, 8011bb8 <UART_SetConfig+0x758>)
 8011bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bb8:	08011bd1 	.word	0x08011bd1
 8011bbc:	08011bd9 	.word	0x08011bd9
 8011bc0:	08011be1 	.word	0x08011be1
 8011bc4:	08011be9 	.word	0x08011be9
 8011bc8:	08011bf1 	.word	0x08011bf1
 8011bcc:	08011bf9 	.word	0x08011bf9
 8011bd0:	2302      	movs	r3, #2
 8011bd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011bd6:	e01a      	b.n	8011c0e <UART_SetConfig+0x7ae>
 8011bd8:	2304      	movs	r3, #4
 8011bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011bde:	e016      	b.n	8011c0e <UART_SetConfig+0x7ae>
 8011be0:	2308      	movs	r3, #8
 8011be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011be6:	e012      	b.n	8011c0e <UART_SetConfig+0x7ae>
 8011be8:	2310      	movs	r3, #16
 8011bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011bee:	e00e      	b.n	8011c0e <UART_SetConfig+0x7ae>
 8011bf0:	2320      	movs	r3, #32
 8011bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011bf6:	e00a      	b.n	8011c0e <UART_SetConfig+0x7ae>
 8011bf8:	2340      	movs	r3, #64	; 0x40
 8011bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011bfe:	e006      	b.n	8011c0e <UART_SetConfig+0x7ae>
 8011c00:	2380      	movs	r3, #128	; 0x80
 8011c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c06:	e002      	b.n	8011c0e <UART_SetConfig+0x7ae>
 8011c08:	2380      	movs	r3, #128	; 0x80
 8011c0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011c0e:	697b      	ldr	r3, [r7, #20]
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	4a55      	ldr	r2, [pc, #340]	; (8011d68 <UART_SetConfig+0x908>)
 8011c14:	4293      	cmp	r3, r2
 8011c16:	f040 80f8 	bne.w	8011e0a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8011c1a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011c1e:	2b20      	cmp	r3, #32
 8011c20:	dc46      	bgt.n	8011cb0 <UART_SetConfig+0x850>
 8011c22:	2b02      	cmp	r3, #2
 8011c24:	db75      	blt.n	8011d12 <UART_SetConfig+0x8b2>
 8011c26:	3b02      	subs	r3, #2
 8011c28:	2b1e      	cmp	r3, #30
 8011c2a:	d872      	bhi.n	8011d12 <UART_SetConfig+0x8b2>
 8011c2c:	a201      	add	r2, pc, #4	; (adr r2, 8011c34 <UART_SetConfig+0x7d4>)
 8011c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c32:	bf00      	nop
 8011c34:	08011cb7 	.word	0x08011cb7
 8011c38:	08011d13 	.word	0x08011d13
 8011c3c:	08011cbf 	.word	0x08011cbf
 8011c40:	08011d13 	.word	0x08011d13
 8011c44:	08011d13 	.word	0x08011d13
 8011c48:	08011d13 	.word	0x08011d13
 8011c4c:	08011ccf 	.word	0x08011ccf
 8011c50:	08011d13 	.word	0x08011d13
 8011c54:	08011d13 	.word	0x08011d13
 8011c58:	08011d13 	.word	0x08011d13
 8011c5c:	08011d13 	.word	0x08011d13
 8011c60:	08011d13 	.word	0x08011d13
 8011c64:	08011d13 	.word	0x08011d13
 8011c68:	08011d13 	.word	0x08011d13
 8011c6c:	08011cdf 	.word	0x08011cdf
 8011c70:	08011d13 	.word	0x08011d13
 8011c74:	08011d13 	.word	0x08011d13
 8011c78:	08011d13 	.word	0x08011d13
 8011c7c:	08011d13 	.word	0x08011d13
 8011c80:	08011d13 	.word	0x08011d13
 8011c84:	08011d13 	.word	0x08011d13
 8011c88:	08011d13 	.word	0x08011d13
 8011c8c:	08011d13 	.word	0x08011d13
 8011c90:	08011d13 	.word	0x08011d13
 8011c94:	08011d13 	.word	0x08011d13
 8011c98:	08011d13 	.word	0x08011d13
 8011c9c:	08011d13 	.word	0x08011d13
 8011ca0:	08011d13 	.word	0x08011d13
 8011ca4:	08011d13 	.word	0x08011d13
 8011ca8:	08011d13 	.word	0x08011d13
 8011cac:	08011d05 	.word	0x08011d05
 8011cb0:	2b40      	cmp	r3, #64	; 0x40
 8011cb2:	d02a      	beq.n	8011d0a <UART_SetConfig+0x8aa>
 8011cb4:	e02d      	b.n	8011d12 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8011cb6:	f7fd f8bd 	bl	800ee34 <HAL_RCCEx_GetD3PCLK1Freq>
 8011cba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011cbc:	e02f      	b.n	8011d1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011cbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	f7fd f8cc 	bl	800ee60 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011ccc:	e027      	b.n	8011d1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011cce:	f107 0318 	add.w	r3, r7, #24
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	f7fd fa18 	bl	800f108 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011cd8:	69fb      	ldr	r3, [r7, #28]
 8011cda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011cdc:	e01f      	b.n	8011d1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011cde:	4b21      	ldr	r3, [pc, #132]	; (8011d64 <UART_SetConfig+0x904>)
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	f003 0320 	and.w	r3, r3, #32
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d009      	beq.n	8011cfe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011cea:	4b1e      	ldr	r3, [pc, #120]	; (8011d64 <UART_SetConfig+0x904>)
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	08db      	lsrs	r3, r3, #3
 8011cf0:	f003 0303 	and.w	r3, r3, #3
 8011cf4:	4a1d      	ldr	r2, [pc, #116]	; (8011d6c <UART_SetConfig+0x90c>)
 8011cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8011cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011cfc:	e00f      	b.n	8011d1e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8011cfe:	4b1b      	ldr	r3, [pc, #108]	; (8011d6c <UART_SetConfig+0x90c>)
 8011d00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011d02:	e00c      	b.n	8011d1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011d04:	4b1a      	ldr	r3, [pc, #104]	; (8011d70 <UART_SetConfig+0x910>)
 8011d06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011d08:	e009      	b.n	8011d1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011d0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011d10:	e005      	b.n	8011d1e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8011d12:	2300      	movs	r3, #0
 8011d14:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011d16:	2301      	movs	r3, #1
 8011d18:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011d1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	f000 81ee 	beq.w	8012102 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011d26:	697b      	ldr	r3, [r7, #20]
 8011d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d2a:	4a12      	ldr	r2, [pc, #72]	; (8011d74 <UART_SetConfig+0x914>)
 8011d2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011d30:	461a      	mov	r2, r3
 8011d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d34:	fbb3 f3f2 	udiv	r3, r3, r2
 8011d38:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011d3a:	697b      	ldr	r3, [r7, #20]
 8011d3c:	685a      	ldr	r2, [r3, #4]
 8011d3e:	4613      	mov	r3, r2
 8011d40:	005b      	lsls	r3, r3, #1
 8011d42:	4413      	add	r3, r2
 8011d44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011d46:	429a      	cmp	r2, r3
 8011d48:	d305      	bcc.n	8011d56 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011d4a:	697b      	ldr	r3, [r7, #20]
 8011d4c:	685b      	ldr	r3, [r3, #4]
 8011d4e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011d50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011d52:	429a      	cmp	r2, r3
 8011d54:	d910      	bls.n	8011d78 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8011d56:	2301      	movs	r3, #1
 8011d58:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011d5c:	e1d1      	b.n	8012102 <UART_SetConfig+0xca2>
 8011d5e:	bf00      	nop
 8011d60:	40011c00 	.word	0x40011c00
 8011d64:	58024400 	.word	0x58024400
 8011d68:	58000c00 	.word	0x58000c00
 8011d6c:	03d09000 	.word	0x03d09000
 8011d70:	003d0900 	.word	0x003d0900
 8011d74:	08028f04 	.word	0x08028f04
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d7a:	2200      	movs	r2, #0
 8011d7c:	60bb      	str	r3, [r7, #8]
 8011d7e:	60fa      	str	r2, [r7, #12]
 8011d80:	697b      	ldr	r3, [r7, #20]
 8011d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d84:	4ac0      	ldr	r2, [pc, #768]	; (8012088 <UART_SetConfig+0xc28>)
 8011d86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011d8a:	b29b      	uxth	r3, r3
 8011d8c:	2200      	movs	r2, #0
 8011d8e:	603b      	str	r3, [r7, #0]
 8011d90:	607a      	str	r2, [r7, #4]
 8011d92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011d96:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011d9a:	f7ee fb01 	bl	80003a0 <__aeabi_uldivmod>
 8011d9e:	4602      	mov	r2, r0
 8011da0:	460b      	mov	r3, r1
 8011da2:	4610      	mov	r0, r2
 8011da4:	4619      	mov	r1, r3
 8011da6:	f04f 0200 	mov.w	r2, #0
 8011daa:	f04f 0300 	mov.w	r3, #0
 8011dae:	020b      	lsls	r3, r1, #8
 8011db0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011db4:	0202      	lsls	r2, r0, #8
 8011db6:	6979      	ldr	r1, [r7, #20]
 8011db8:	6849      	ldr	r1, [r1, #4]
 8011dba:	0849      	lsrs	r1, r1, #1
 8011dbc:	2000      	movs	r0, #0
 8011dbe:	460c      	mov	r4, r1
 8011dc0:	4605      	mov	r5, r0
 8011dc2:	eb12 0804 	adds.w	r8, r2, r4
 8011dc6:	eb43 0905 	adc.w	r9, r3, r5
 8011dca:	697b      	ldr	r3, [r7, #20]
 8011dcc:	685b      	ldr	r3, [r3, #4]
 8011dce:	2200      	movs	r2, #0
 8011dd0:	469a      	mov	sl, r3
 8011dd2:	4693      	mov	fp, r2
 8011dd4:	4652      	mov	r2, sl
 8011dd6:	465b      	mov	r3, fp
 8011dd8:	4640      	mov	r0, r8
 8011dda:	4649      	mov	r1, r9
 8011ddc:	f7ee fae0 	bl	80003a0 <__aeabi_uldivmod>
 8011de0:	4602      	mov	r2, r0
 8011de2:	460b      	mov	r3, r1
 8011de4:	4613      	mov	r3, r2
 8011de6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011dee:	d308      	bcc.n	8011e02 <UART_SetConfig+0x9a2>
 8011df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011df2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011df6:	d204      	bcs.n	8011e02 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8011df8:	697b      	ldr	r3, [r7, #20]
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011dfe:	60da      	str	r2, [r3, #12]
 8011e00:	e17f      	b.n	8012102 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8011e02:	2301      	movs	r3, #1
 8011e04:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011e08:	e17b      	b.n	8012102 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011e0a:	697b      	ldr	r3, [r7, #20]
 8011e0c:	69db      	ldr	r3, [r3, #28]
 8011e0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011e12:	f040 80bd 	bne.w	8011f90 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8011e16:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011e1a:	2b20      	cmp	r3, #32
 8011e1c:	dc48      	bgt.n	8011eb0 <UART_SetConfig+0xa50>
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	db7b      	blt.n	8011f1a <UART_SetConfig+0xaba>
 8011e22:	2b20      	cmp	r3, #32
 8011e24:	d879      	bhi.n	8011f1a <UART_SetConfig+0xaba>
 8011e26:	a201      	add	r2, pc, #4	; (adr r2, 8011e2c <UART_SetConfig+0x9cc>)
 8011e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e2c:	08011eb7 	.word	0x08011eb7
 8011e30:	08011ebf 	.word	0x08011ebf
 8011e34:	08011f1b 	.word	0x08011f1b
 8011e38:	08011f1b 	.word	0x08011f1b
 8011e3c:	08011ec7 	.word	0x08011ec7
 8011e40:	08011f1b 	.word	0x08011f1b
 8011e44:	08011f1b 	.word	0x08011f1b
 8011e48:	08011f1b 	.word	0x08011f1b
 8011e4c:	08011ed7 	.word	0x08011ed7
 8011e50:	08011f1b 	.word	0x08011f1b
 8011e54:	08011f1b 	.word	0x08011f1b
 8011e58:	08011f1b 	.word	0x08011f1b
 8011e5c:	08011f1b 	.word	0x08011f1b
 8011e60:	08011f1b 	.word	0x08011f1b
 8011e64:	08011f1b 	.word	0x08011f1b
 8011e68:	08011f1b 	.word	0x08011f1b
 8011e6c:	08011ee7 	.word	0x08011ee7
 8011e70:	08011f1b 	.word	0x08011f1b
 8011e74:	08011f1b 	.word	0x08011f1b
 8011e78:	08011f1b 	.word	0x08011f1b
 8011e7c:	08011f1b 	.word	0x08011f1b
 8011e80:	08011f1b 	.word	0x08011f1b
 8011e84:	08011f1b 	.word	0x08011f1b
 8011e88:	08011f1b 	.word	0x08011f1b
 8011e8c:	08011f1b 	.word	0x08011f1b
 8011e90:	08011f1b 	.word	0x08011f1b
 8011e94:	08011f1b 	.word	0x08011f1b
 8011e98:	08011f1b 	.word	0x08011f1b
 8011e9c:	08011f1b 	.word	0x08011f1b
 8011ea0:	08011f1b 	.word	0x08011f1b
 8011ea4:	08011f1b 	.word	0x08011f1b
 8011ea8:	08011f1b 	.word	0x08011f1b
 8011eac:	08011f0d 	.word	0x08011f0d
 8011eb0:	2b40      	cmp	r3, #64	; 0x40
 8011eb2:	d02e      	beq.n	8011f12 <UART_SetConfig+0xab2>
 8011eb4:	e031      	b.n	8011f1a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011eb6:	f7fb f8b9 	bl	800d02c <HAL_RCC_GetPCLK1Freq>
 8011eba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011ebc:	e033      	b.n	8011f26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011ebe:	f7fb f8cb 	bl	800d058 <HAL_RCC_GetPCLK2Freq>
 8011ec2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011ec4:	e02f      	b.n	8011f26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011ec6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011eca:	4618      	mov	r0, r3
 8011ecc:	f7fc ffc8 	bl	800ee60 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011ed4:	e027      	b.n	8011f26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011ed6:	f107 0318 	add.w	r3, r7, #24
 8011eda:	4618      	mov	r0, r3
 8011edc:	f7fd f914 	bl	800f108 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011ee0:	69fb      	ldr	r3, [r7, #28]
 8011ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011ee4:	e01f      	b.n	8011f26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011ee6:	4b69      	ldr	r3, [pc, #420]	; (801208c <UART_SetConfig+0xc2c>)
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	f003 0320 	and.w	r3, r3, #32
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d009      	beq.n	8011f06 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011ef2:	4b66      	ldr	r3, [pc, #408]	; (801208c <UART_SetConfig+0xc2c>)
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	08db      	lsrs	r3, r3, #3
 8011ef8:	f003 0303 	and.w	r3, r3, #3
 8011efc:	4a64      	ldr	r2, [pc, #400]	; (8012090 <UART_SetConfig+0xc30>)
 8011efe:	fa22 f303 	lsr.w	r3, r2, r3
 8011f02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011f04:	e00f      	b.n	8011f26 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8011f06:	4b62      	ldr	r3, [pc, #392]	; (8012090 <UART_SetConfig+0xc30>)
 8011f08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011f0a:	e00c      	b.n	8011f26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011f0c:	4b61      	ldr	r3, [pc, #388]	; (8012094 <UART_SetConfig+0xc34>)
 8011f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011f10:	e009      	b.n	8011f26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011f12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011f16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011f18:	e005      	b.n	8011f26 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8011f1a:	2300      	movs	r3, #0
 8011f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011f1e:	2301      	movs	r3, #1
 8011f20:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011f24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011f26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	f000 80ea 	beq.w	8012102 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011f2e:	697b      	ldr	r3, [r7, #20]
 8011f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f32:	4a55      	ldr	r2, [pc, #340]	; (8012088 <UART_SetConfig+0xc28>)
 8011f34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011f38:	461a      	mov	r2, r3
 8011f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011f40:	005a      	lsls	r2, r3, #1
 8011f42:	697b      	ldr	r3, [r7, #20]
 8011f44:	685b      	ldr	r3, [r3, #4]
 8011f46:	085b      	lsrs	r3, r3, #1
 8011f48:	441a      	add	r2, r3
 8011f4a:	697b      	ldr	r3, [r7, #20]
 8011f4c:	685b      	ldr	r3, [r3, #4]
 8011f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011f52:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f56:	2b0f      	cmp	r3, #15
 8011f58:	d916      	bls.n	8011f88 <UART_SetConfig+0xb28>
 8011f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011f60:	d212      	bcs.n	8011f88 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f64:	b29b      	uxth	r3, r3
 8011f66:	f023 030f 	bic.w	r3, r3, #15
 8011f6a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f6e:	085b      	lsrs	r3, r3, #1
 8011f70:	b29b      	uxth	r3, r3
 8011f72:	f003 0307 	and.w	r3, r3, #7
 8011f76:	b29a      	uxth	r2, r3
 8011f78:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011f7a:	4313      	orrs	r3, r2
 8011f7c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8011f7e:	697b      	ldr	r3, [r7, #20]
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011f84:	60da      	str	r2, [r3, #12]
 8011f86:	e0bc      	b.n	8012102 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011f88:	2301      	movs	r3, #1
 8011f8a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011f8e:	e0b8      	b.n	8012102 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011f90:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011f94:	2b20      	cmp	r3, #32
 8011f96:	dc4b      	bgt.n	8012030 <UART_SetConfig+0xbd0>
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	f2c0 8087 	blt.w	80120ac <UART_SetConfig+0xc4c>
 8011f9e:	2b20      	cmp	r3, #32
 8011fa0:	f200 8084 	bhi.w	80120ac <UART_SetConfig+0xc4c>
 8011fa4:	a201      	add	r2, pc, #4	; (adr r2, 8011fac <UART_SetConfig+0xb4c>)
 8011fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011faa:	bf00      	nop
 8011fac:	08012037 	.word	0x08012037
 8011fb0:	0801203f 	.word	0x0801203f
 8011fb4:	080120ad 	.word	0x080120ad
 8011fb8:	080120ad 	.word	0x080120ad
 8011fbc:	08012047 	.word	0x08012047
 8011fc0:	080120ad 	.word	0x080120ad
 8011fc4:	080120ad 	.word	0x080120ad
 8011fc8:	080120ad 	.word	0x080120ad
 8011fcc:	08012057 	.word	0x08012057
 8011fd0:	080120ad 	.word	0x080120ad
 8011fd4:	080120ad 	.word	0x080120ad
 8011fd8:	080120ad 	.word	0x080120ad
 8011fdc:	080120ad 	.word	0x080120ad
 8011fe0:	080120ad 	.word	0x080120ad
 8011fe4:	080120ad 	.word	0x080120ad
 8011fe8:	080120ad 	.word	0x080120ad
 8011fec:	08012067 	.word	0x08012067
 8011ff0:	080120ad 	.word	0x080120ad
 8011ff4:	080120ad 	.word	0x080120ad
 8011ff8:	080120ad 	.word	0x080120ad
 8011ffc:	080120ad 	.word	0x080120ad
 8012000:	080120ad 	.word	0x080120ad
 8012004:	080120ad 	.word	0x080120ad
 8012008:	080120ad 	.word	0x080120ad
 801200c:	080120ad 	.word	0x080120ad
 8012010:	080120ad 	.word	0x080120ad
 8012014:	080120ad 	.word	0x080120ad
 8012018:	080120ad 	.word	0x080120ad
 801201c:	080120ad 	.word	0x080120ad
 8012020:	080120ad 	.word	0x080120ad
 8012024:	080120ad 	.word	0x080120ad
 8012028:	080120ad 	.word	0x080120ad
 801202c:	0801209f 	.word	0x0801209f
 8012030:	2b40      	cmp	r3, #64	; 0x40
 8012032:	d037      	beq.n	80120a4 <UART_SetConfig+0xc44>
 8012034:	e03a      	b.n	80120ac <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012036:	f7fa fff9 	bl	800d02c <HAL_RCC_GetPCLK1Freq>
 801203a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801203c:	e03c      	b.n	80120b8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801203e:	f7fb f80b 	bl	800d058 <HAL_RCC_GetPCLK2Freq>
 8012042:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012044:	e038      	b.n	80120b8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012046:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801204a:	4618      	mov	r0, r3
 801204c:	f7fc ff08 	bl	800ee60 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012052:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012054:	e030      	b.n	80120b8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012056:	f107 0318 	add.w	r3, r7, #24
 801205a:	4618      	mov	r0, r3
 801205c:	f7fd f854 	bl	800f108 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012060:	69fb      	ldr	r3, [r7, #28]
 8012062:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012064:	e028      	b.n	80120b8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012066:	4b09      	ldr	r3, [pc, #36]	; (801208c <UART_SetConfig+0xc2c>)
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	f003 0320 	and.w	r3, r3, #32
 801206e:	2b00      	cmp	r3, #0
 8012070:	d012      	beq.n	8012098 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012072:	4b06      	ldr	r3, [pc, #24]	; (801208c <UART_SetConfig+0xc2c>)
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	08db      	lsrs	r3, r3, #3
 8012078:	f003 0303 	and.w	r3, r3, #3
 801207c:	4a04      	ldr	r2, [pc, #16]	; (8012090 <UART_SetConfig+0xc30>)
 801207e:	fa22 f303 	lsr.w	r3, r2, r3
 8012082:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012084:	e018      	b.n	80120b8 <UART_SetConfig+0xc58>
 8012086:	bf00      	nop
 8012088:	08028f04 	.word	0x08028f04
 801208c:	58024400 	.word	0x58024400
 8012090:	03d09000 	.word	0x03d09000
 8012094:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8012098:	4b24      	ldr	r3, [pc, #144]	; (801212c <UART_SetConfig+0xccc>)
 801209a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801209c:	e00c      	b.n	80120b8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801209e:	4b24      	ldr	r3, [pc, #144]	; (8012130 <UART_SetConfig+0xcd0>)
 80120a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80120a2:	e009      	b.n	80120b8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80120a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80120a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80120aa:	e005      	b.n	80120b8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80120ac:	2300      	movs	r3, #0
 80120ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80120b0:	2301      	movs	r3, #1
 80120b2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80120b6:	bf00      	nop
    }

    if (pclk != 0U)
 80120b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d021      	beq.n	8012102 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80120be:	697b      	ldr	r3, [r7, #20]
 80120c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120c2:	4a1c      	ldr	r2, [pc, #112]	; (8012134 <UART_SetConfig+0xcd4>)
 80120c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80120c8:	461a      	mov	r2, r3
 80120ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120cc:	fbb3 f2f2 	udiv	r2, r3, r2
 80120d0:	697b      	ldr	r3, [r7, #20]
 80120d2:	685b      	ldr	r3, [r3, #4]
 80120d4:	085b      	lsrs	r3, r3, #1
 80120d6:	441a      	add	r2, r3
 80120d8:	697b      	ldr	r3, [r7, #20]
 80120da:	685b      	ldr	r3, [r3, #4]
 80120dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80120e0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80120e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120e4:	2b0f      	cmp	r3, #15
 80120e6:	d909      	bls.n	80120fc <UART_SetConfig+0xc9c>
 80120e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80120ee:	d205      	bcs.n	80120fc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80120f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120f2:	b29a      	uxth	r2, r3
 80120f4:	697b      	ldr	r3, [r7, #20]
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	60da      	str	r2, [r3, #12]
 80120fa:	e002      	b.n	8012102 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80120fc:	2301      	movs	r3, #1
 80120fe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8012102:	697b      	ldr	r3, [r7, #20]
 8012104:	2201      	movs	r2, #1
 8012106:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801210a:	697b      	ldr	r3, [r7, #20]
 801210c:	2201      	movs	r2, #1
 801210e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8012112:	697b      	ldr	r3, [r7, #20]
 8012114:	2200      	movs	r2, #0
 8012116:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8012118:	697b      	ldr	r3, [r7, #20]
 801211a:	2200      	movs	r2, #0
 801211c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 801211e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8012122:	4618      	mov	r0, r3
 8012124:	3748      	adds	r7, #72	; 0x48
 8012126:	46bd      	mov	sp, r7
 8012128:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801212c:	03d09000 	.word	0x03d09000
 8012130:	003d0900 	.word	0x003d0900
 8012134:	08028f04 	.word	0x08028f04

08012138 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8012138:	b480      	push	{r7}
 801213a:	b083      	sub	sp, #12
 801213c:	af00      	add	r7, sp, #0
 801213e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012144:	f003 0301 	and.w	r3, r3, #1
 8012148:	2b00      	cmp	r3, #0
 801214a:	d00a      	beq.n	8012162 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	685b      	ldr	r3, [r3, #4]
 8012152:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	430a      	orrs	r2, r1
 8012160:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012166:	f003 0302 	and.w	r3, r3, #2
 801216a:	2b00      	cmp	r3, #0
 801216c:	d00a      	beq.n	8012184 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	685b      	ldr	r3, [r3, #4]
 8012174:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	681b      	ldr	r3, [r3, #0]
 8012180:	430a      	orrs	r2, r1
 8012182:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012188:	f003 0304 	and.w	r3, r3, #4
 801218c:	2b00      	cmp	r3, #0
 801218e:	d00a      	beq.n	80121a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	685b      	ldr	r3, [r3, #4]
 8012196:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	430a      	orrs	r2, r1
 80121a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80121aa:	f003 0308 	and.w	r3, r3, #8
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d00a      	beq.n	80121c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	685b      	ldr	r3, [r3, #4]
 80121b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	430a      	orrs	r2, r1
 80121c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80121cc:	f003 0310 	and.w	r3, r3, #16
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d00a      	beq.n	80121ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	689b      	ldr	r3, [r3, #8]
 80121da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	430a      	orrs	r2, r1
 80121e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80121ee:	f003 0320 	and.w	r3, r3, #32
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d00a      	beq.n	801220c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	689b      	ldr	r3, [r3, #8]
 80121fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	430a      	orrs	r2, r1
 801220a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012214:	2b00      	cmp	r3, #0
 8012216:	d01a      	beq.n	801224e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	685b      	ldr	r3, [r3, #4]
 801221e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	430a      	orrs	r2, r1
 801222c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012232:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012236:	d10a      	bne.n	801224e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	685b      	ldr	r3, [r3, #4]
 801223e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	430a      	orrs	r2, r1
 801224c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012256:	2b00      	cmp	r3, #0
 8012258:	d00a      	beq.n	8012270 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	685b      	ldr	r3, [r3, #4]
 8012260:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	430a      	orrs	r2, r1
 801226e:	605a      	str	r2, [r3, #4]
  }
}
 8012270:	bf00      	nop
 8012272:	370c      	adds	r7, #12
 8012274:	46bd      	mov	sp, r7
 8012276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801227a:	4770      	bx	lr

0801227c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801227c:	b580      	push	{r7, lr}
 801227e:	b098      	sub	sp, #96	; 0x60
 8012280:	af02      	add	r7, sp, #8
 8012282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	2200      	movs	r2, #0
 8012288:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801228c:	f7f6 fd1e 	bl	8008ccc <HAL_GetTick>
 8012290:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	f003 0308 	and.w	r3, r3, #8
 801229c:	2b08      	cmp	r3, #8
 801229e:	d12f      	bne.n	8012300 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80122a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80122a4:	9300      	str	r3, [sp, #0]
 80122a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80122a8:	2200      	movs	r2, #0
 80122aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80122ae:	6878      	ldr	r0, [r7, #4]
 80122b0:	f000 f88e 	bl	80123d0 <UART_WaitOnFlagUntilTimeout>
 80122b4:	4603      	mov	r3, r0
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d022      	beq.n	8012300 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122c2:	e853 3f00 	ldrex	r3, [r3]
 80122c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80122c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80122ce:	653b      	str	r3, [r7, #80]	; 0x50
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	461a      	mov	r2, r3
 80122d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122d8:	647b      	str	r3, [r7, #68]	; 0x44
 80122da:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80122de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80122e0:	e841 2300 	strex	r3, r2, [r1]
 80122e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80122e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d1e6      	bne.n	80122ba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	2220      	movs	r2, #32
 80122f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	2200      	movs	r2, #0
 80122f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80122fc:	2303      	movs	r3, #3
 80122fe:	e063      	b.n	80123c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	f003 0304 	and.w	r3, r3, #4
 801230a:	2b04      	cmp	r3, #4
 801230c:	d149      	bne.n	80123a2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801230e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012312:	9300      	str	r3, [sp, #0]
 8012314:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012316:	2200      	movs	r2, #0
 8012318:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801231c:	6878      	ldr	r0, [r7, #4]
 801231e:	f000 f857 	bl	80123d0 <UART_WaitOnFlagUntilTimeout>
 8012322:	4603      	mov	r3, r0
 8012324:	2b00      	cmp	r3, #0
 8012326:	d03c      	beq.n	80123a2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012330:	e853 3f00 	ldrex	r3, [r3]
 8012334:	623b      	str	r3, [r7, #32]
   return(result);
 8012336:	6a3b      	ldr	r3, [r7, #32]
 8012338:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801233c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	681b      	ldr	r3, [r3, #0]
 8012342:	461a      	mov	r2, r3
 8012344:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012346:	633b      	str	r3, [r7, #48]	; 0x30
 8012348:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801234a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801234c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801234e:	e841 2300 	strex	r3, r2, [r1]
 8012352:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012356:	2b00      	cmp	r3, #0
 8012358:	d1e6      	bne.n	8012328 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	3308      	adds	r3, #8
 8012360:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012362:	693b      	ldr	r3, [r7, #16]
 8012364:	e853 3f00 	ldrex	r3, [r3]
 8012368:	60fb      	str	r3, [r7, #12]
   return(result);
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	f023 0301 	bic.w	r3, r3, #1
 8012370:	64bb      	str	r3, [r7, #72]	; 0x48
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	3308      	adds	r3, #8
 8012378:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801237a:	61fa      	str	r2, [r7, #28]
 801237c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801237e:	69b9      	ldr	r1, [r7, #24]
 8012380:	69fa      	ldr	r2, [r7, #28]
 8012382:	e841 2300 	strex	r3, r2, [r1]
 8012386:	617b      	str	r3, [r7, #20]
   return(result);
 8012388:	697b      	ldr	r3, [r7, #20]
 801238a:	2b00      	cmp	r3, #0
 801238c:	d1e5      	bne.n	801235a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	2220      	movs	r2, #32
 8012392:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	2200      	movs	r2, #0
 801239a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801239e:	2303      	movs	r3, #3
 80123a0:	e012      	b.n	80123c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	2220      	movs	r2, #32
 80123a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	2220      	movs	r2, #32
 80123ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	2200      	movs	r2, #0
 80123b6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	2200      	movs	r2, #0
 80123bc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	2200      	movs	r2, #0
 80123c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80123c6:	2300      	movs	r3, #0
}
 80123c8:	4618      	mov	r0, r3
 80123ca:	3758      	adds	r7, #88	; 0x58
 80123cc:	46bd      	mov	sp, r7
 80123ce:	bd80      	pop	{r7, pc}

080123d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80123d0:	b580      	push	{r7, lr}
 80123d2:	b084      	sub	sp, #16
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	60f8      	str	r0, [r7, #12]
 80123d8:	60b9      	str	r1, [r7, #8]
 80123da:	603b      	str	r3, [r7, #0]
 80123dc:	4613      	mov	r3, r2
 80123de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80123e0:	e049      	b.n	8012476 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80123e2:	69bb      	ldr	r3, [r7, #24]
 80123e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123e8:	d045      	beq.n	8012476 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80123ea:	f7f6 fc6f 	bl	8008ccc <HAL_GetTick>
 80123ee:	4602      	mov	r2, r0
 80123f0:	683b      	ldr	r3, [r7, #0]
 80123f2:	1ad3      	subs	r3, r2, r3
 80123f4:	69ba      	ldr	r2, [r7, #24]
 80123f6:	429a      	cmp	r2, r3
 80123f8:	d302      	bcc.n	8012400 <UART_WaitOnFlagUntilTimeout+0x30>
 80123fa:	69bb      	ldr	r3, [r7, #24]
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d101      	bne.n	8012404 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8012400:	2303      	movs	r3, #3
 8012402:	e048      	b.n	8012496 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	f003 0304 	and.w	r3, r3, #4
 801240e:	2b00      	cmp	r3, #0
 8012410:	d031      	beq.n	8012476 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	69db      	ldr	r3, [r3, #28]
 8012418:	f003 0308 	and.w	r3, r3, #8
 801241c:	2b08      	cmp	r3, #8
 801241e:	d110      	bne.n	8012442 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	2208      	movs	r2, #8
 8012426:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8012428:	68f8      	ldr	r0, [r7, #12]
 801242a:	f000 f839 	bl	80124a0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	2208      	movs	r2, #8
 8012432:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	2200      	movs	r2, #0
 801243a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 801243e:	2301      	movs	r3, #1
 8012440:	e029      	b.n	8012496 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	69db      	ldr	r3, [r3, #28]
 8012448:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801244c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012450:	d111      	bne.n	8012476 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801245a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801245c:	68f8      	ldr	r0, [r7, #12]
 801245e:	f000 f81f 	bl	80124a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	2220      	movs	r2, #32
 8012466:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	2200      	movs	r2, #0
 801246e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8012472:	2303      	movs	r3, #3
 8012474:	e00f      	b.n	8012496 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	69da      	ldr	r2, [r3, #28]
 801247c:	68bb      	ldr	r3, [r7, #8]
 801247e:	4013      	ands	r3, r2
 8012480:	68ba      	ldr	r2, [r7, #8]
 8012482:	429a      	cmp	r2, r3
 8012484:	bf0c      	ite	eq
 8012486:	2301      	moveq	r3, #1
 8012488:	2300      	movne	r3, #0
 801248a:	b2db      	uxtb	r3, r3
 801248c:	461a      	mov	r2, r3
 801248e:	79fb      	ldrb	r3, [r7, #7]
 8012490:	429a      	cmp	r2, r3
 8012492:	d0a6      	beq.n	80123e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012494:	2300      	movs	r3, #0
}
 8012496:	4618      	mov	r0, r3
 8012498:	3710      	adds	r7, #16
 801249a:	46bd      	mov	sp, r7
 801249c:	bd80      	pop	{r7, pc}
	...

080124a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80124a0:	b480      	push	{r7}
 80124a2:	b095      	sub	sp, #84	; 0x54
 80124a4:	af00      	add	r7, sp, #0
 80124a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124b0:	e853 3f00 	ldrex	r3, [r3]
 80124b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80124b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80124bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	461a      	mov	r2, r3
 80124c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80124c6:	643b      	str	r3, [r7, #64]	; 0x40
 80124c8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80124cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80124ce:	e841 2300 	strex	r3, r2, [r1]
 80124d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80124d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d1e6      	bne.n	80124a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	3308      	adds	r3, #8
 80124e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124e2:	6a3b      	ldr	r3, [r7, #32]
 80124e4:	e853 3f00 	ldrex	r3, [r3]
 80124e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80124ea:	69fa      	ldr	r2, [r7, #28]
 80124ec:	4b1e      	ldr	r3, [pc, #120]	; (8012568 <UART_EndRxTransfer+0xc8>)
 80124ee:	4013      	ands	r3, r2
 80124f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	3308      	adds	r3, #8
 80124f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80124fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80124fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012500:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012502:	e841 2300 	strex	r3, r2, [r1]
 8012506:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801250a:	2b00      	cmp	r3, #0
 801250c:	d1e5      	bne.n	80124da <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012512:	2b01      	cmp	r3, #1
 8012514:	d118      	bne.n	8012548 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	e853 3f00 	ldrex	r3, [r3]
 8012522:	60bb      	str	r3, [r7, #8]
   return(result);
 8012524:	68bb      	ldr	r3, [r7, #8]
 8012526:	f023 0310 	bic.w	r3, r3, #16
 801252a:	647b      	str	r3, [r7, #68]	; 0x44
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	461a      	mov	r2, r3
 8012532:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012534:	61bb      	str	r3, [r7, #24]
 8012536:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012538:	6979      	ldr	r1, [r7, #20]
 801253a:	69ba      	ldr	r2, [r7, #24]
 801253c:	e841 2300 	strex	r3, r2, [r1]
 8012540:	613b      	str	r3, [r7, #16]
   return(result);
 8012542:	693b      	ldr	r3, [r7, #16]
 8012544:	2b00      	cmp	r3, #0
 8012546:	d1e6      	bne.n	8012516 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	2220      	movs	r2, #32
 801254c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	2200      	movs	r2, #0
 8012554:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	2200      	movs	r2, #0
 801255a:	675a      	str	r2, [r3, #116]	; 0x74
}
 801255c:	bf00      	nop
 801255e:	3754      	adds	r7, #84	; 0x54
 8012560:	46bd      	mov	sp, r7
 8012562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012566:	4770      	bx	lr
 8012568:	effffffe 	.word	0xeffffffe

0801256c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801256c:	b480      	push	{r7}
 801256e:	b085      	sub	sp, #20
 8012570:	af00      	add	r7, sp, #0
 8012572:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801257a:	2b01      	cmp	r3, #1
 801257c:	d101      	bne.n	8012582 <HAL_UARTEx_DisableFifoMode+0x16>
 801257e:	2302      	movs	r3, #2
 8012580:	e027      	b.n	80125d2 <HAL_UARTEx_DisableFifoMode+0x66>
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	2201      	movs	r2, #1
 8012586:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	2224      	movs	r2, #36	; 0x24
 801258e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	681b      	ldr	r3, [r3, #0]
 8012598:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	681a      	ldr	r2, [r3, #0]
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	f022 0201 	bic.w	r2, r2, #1
 80125a8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80125b0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	2200      	movs	r2, #0
 80125b6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	68fa      	ldr	r2, [r7, #12]
 80125be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	2220      	movs	r2, #32
 80125c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	2200      	movs	r2, #0
 80125cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80125d0:	2300      	movs	r3, #0
}
 80125d2:	4618      	mov	r0, r3
 80125d4:	3714      	adds	r7, #20
 80125d6:	46bd      	mov	sp, r7
 80125d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125dc:	4770      	bx	lr

080125de <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80125de:	b580      	push	{r7, lr}
 80125e0:	b084      	sub	sp, #16
 80125e2:	af00      	add	r7, sp, #0
 80125e4:	6078      	str	r0, [r7, #4]
 80125e6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80125ee:	2b01      	cmp	r3, #1
 80125f0:	d101      	bne.n	80125f6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80125f2:	2302      	movs	r3, #2
 80125f4:	e02d      	b.n	8012652 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	2201      	movs	r2, #1
 80125fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	2224      	movs	r2, #36	; 0x24
 8012602:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	681a      	ldr	r2, [r3, #0]
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	f022 0201 	bic.w	r2, r2, #1
 801261c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	689b      	ldr	r3, [r3, #8]
 8012624:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	683a      	ldr	r2, [r7, #0]
 801262e:	430a      	orrs	r2, r1
 8012630:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012632:	6878      	ldr	r0, [r7, #4]
 8012634:	f000 f850 	bl	80126d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	68fa      	ldr	r2, [r7, #12]
 801263e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	2220      	movs	r2, #32
 8012644:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	2200      	movs	r2, #0
 801264c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012650:	2300      	movs	r3, #0
}
 8012652:	4618      	mov	r0, r3
 8012654:	3710      	adds	r7, #16
 8012656:	46bd      	mov	sp, r7
 8012658:	bd80      	pop	{r7, pc}

0801265a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801265a:	b580      	push	{r7, lr}
 801265c:	b084      	sub	sp, #16
 801265e:	af00      	add	r7, sp, #0
 8012660:	6078      	str	r0, [r7, #4]
 8012662:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801266a:	2b01      	cmp	r3, #1
 801266c:	d101      	bne.n	8012672 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801266e:	2302      	movs	r3, #2
 8012670:	e02d      	b.n	80126ce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	2201      	movs	r2, #1
 8012676:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	2224      	movs	r2, #36	; 0x24
 801267e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	681b      	ldr	r3, [r3, #0]
 801268e:	681a      	ldr	r2, [r3, #0]
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	f022 0201 	bic.w	r2, r2, #1
 8012698:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	689b      	ldr	r3, [r3, #8]
 80126a0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	683a      	ldr	r2, [r7, #0]
 80126aa:	430a      	orrs	r2, r1
 80126ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80126ae:	6878      	ldr	r0, [r7, #4]
 80126b0:	f000 f812 	bl	80126d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	68fa      	ldr	r2, [r7, #12]
 80126ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	2220      	movs	r2, #32
 80126c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	2200      	movs	r2, #0
 80126c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80126cc:	2300      	movs	r3, #0
}
 80126ce:	4618      	mov	r0, r3
 80126d0:	3710      	adds	r7, #16
 80126d2:	46bd      	mov	sp, r7
 80126d4:	bd80      	pop	{r7, pc}
	...

080126d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80126d8:	b480      	push	{r7}
 80126da:	b085      	sub	sp, #20
 80126dc:	af00      	add	r7, sp, #0
 80126de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d108      	bne.n	80126fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	2201      	movs	r2, #1
 80126ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	2201      	movs	r2, #1
 80126f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80126f8:	e031      	b.n	801275e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80126fa:	2310      	movs	r3, #16
 80126fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80126fe:	2310      	movs	r3, #16
 8012700:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	689b      	ldr	r3, [r3, #8]
 8012708:	0e5b      	lsrs	r3, r3, #25
 801270a:	b2db      	uxtb	r3, r3
 801270c:	f003 0307 	and.w	r3, r3, #7
 8012710:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	689b      	ldr	r3, [r3, #8]
 8012718:	0f5b      	lsrs	r3, r3, #29
 801271a:	b2db      	uxtb	r3, r3
 801271c:	f003 0307 	and.w	r3, r3, #7
 8012720:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012722:	7bbb      	ldrb	r3, [r7, #14]
 8012724:	7b3a      	ldrb	r2, [r7, #12]
 8012726:	4911      	ldr	r1, [pc, #68]	; (801276c <UARTEx_SetNbDataToProcess+0x94>)
 8012728:	5c8a      	ldrb	r2, [r1, r2]
 801272a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801272e:	7b3a      	ldrb	r2, [r7, #12]
 8012730:	490f      	ldr	r1, [pc, #60]	; (8012770 <UARTEx_SetNbDataToProcess+0x98>)
 8012732:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012734:	fb93 f3f2 	sdiv	r3, r3, r2
 8012738:	b29a      	uxth	r2, r3
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012740:	7bfb      	ldrb	r3, [r7, #15]
 8012742:	7b7a      	ldrb	r2, [r7, #13]
 8012744:	4909      	ldr	r1, [pc, #36]	; (801276c <UARTEx_SetNbDataToProcess+0x94>)
 8012746:	5c8a      	ldrb	r2, [r1, r2]
 8012748:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801274c:	7b7a      	ldrb	r2, [r7, #13]
 801274e:	4908      	ldr	r1, [pc, #32]	; (8012770 <UARTEx_SetNbDataToProcess+0x98>)
 8012750:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012752:	fb93 f3f2 	sdiv	r3, r3, r2
 8012756:	b29a      	uxth	r2, r3
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801275e:	bf00      	nop
 8012760:	3714      	adds	r7, #20
 8012762:	46bd      	mov	sp, r7
 8012764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012768:	4770      	bx	lr
 801276a:	bf00      	nop
 801276c:	08028f1c 	.word	0x08028f1c
 8012770:	08028f24 	.word	0x08028f24

08012774 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8012774:	b084      	sub	sp, #16
 8012776:	b480      	push	{r7}
 8012778:	b085      	sub	sp, #20
 801277a:	af00      	add	r7, sp, #0
 801277c:	6078      	str	r0, [r7, #4]
 801277e:	f107 001c 	add.w	r0, r7, #28
 8012782:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8012786:	2300      	movs	r3, #0
 8012788:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 801278a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 801278c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 801278e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8012790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8012792:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8012794:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8012796:	431a      	orrs	r2, r3
             Init.ClockDiv
 8012798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 801279a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 801279c:	68fa      	ldr	r2, [r7, #12]
 801279e:	4313      	orrs	r3, r2
 80127a0:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	685a      	ldr	r2, [r3, #4]
 80127a6:	4b07      	ldr	r3, [pc, #28]	; (80127c4 <SDMMC_Init+0x50>)
 80127a8:	4013      	ands	r3, r2
 80127aa:	68fa      	ldr	r2, [r7, #12]
 80127ac:	431a      	orrs	r2, r3
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80127b2:	2300      	movs	r3, #0
}
 80127b4:	4618      	mov	r0, r3
 80127b6:	3714      	adds	r7, #20
 80127b8:	46bd      	mov	sp, r7
 80127ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127be:	b004      	add	sp, #16
 80127c0:	4770      	bx	lr
 80127c2:	bf00      	nop
 80127c4:	ffc02c00 	.word	0xffc02c00

080127c8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80127c8:	b480      	push	{r7}
 80127ca:	b083      	sub	sp, #12
 80127cc:	af00      	add	r7, sp, #0
 80127ce:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80127d6:	4618      	mov	r0, r3
 80127d8:	370c      	adds	r7, #12
 80127da:	46bd      	mov	sp, r7
 80127dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e0:	4770      	bx	lr

080127e2 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80127e2:	b480      	push	{r7}
 80127e4:	b083      	sub	sp, #12
 80127e6:	af00      	add	r7, sp, #0
 80127e8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	f043 0203 	orr.w	r2, r3, #3
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80127f6:	2300      	movs	r3, #0
}
 80127f8:	4618      	mov	r0, r3
 80127fa:	370c      	adds	r7, #12
 80127fc:	46bd      	mov	sp, r7
 80127fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012802:	4770      	bx	lr

08012804 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8012804:	b480      	push	{r7}
 8012806:	b083      	sub	sp, #12
 8012808:	af00      	add	r7, sp, #0
 801280a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	f003 0303 	and.w	r3, r3, #3
}
 8012814:	4618      	mov	r0, r3
 8012816:	370c      	adds	r7, #12
 8012818:	46bd      	mov	sp, r7
 801281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801281e:	4770      	bx	lr

08012820 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8012820:	b480      	push	{r7}
 8012822:	b085      	sub	sp, #20
 8012824:	af00      	add	r7, sp, #0
 8012826:	6078      	str	r0, [r7, #4]
 8012828:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801282a:	2300      	movs	r3, #0
 801282c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 801282e:	683b      	ldr	r3, [r7, #0]
 8012830:	681a      	ldr	r2, [r3, #0]
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012836:	683b      	ldr	r3, [r7, #0]
 8012838:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 801283a:	683b      	ldr	r3, [r7, #0]
 801283c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801283e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8012840:	683b      	ldr	r3, [r7, #0]
 8012842:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8012844:	431a      	orrs	r2, r3
                       Command->CPSM);
 8012846:	683b      	ldr	r3, [r7, #0]
 8012848:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 801284a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801284c:	68fa      	ldr	r2, [r7, #12]
 801284e:	4313      	orrs	r3, r2
 8012850:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	68da      	ldr	r2, [r3, #12]
 8012856:	4b06      	ldr	r3, [pc, #24]	; (8012870 <SDMMC_SendCommand+0x50>)
 8012858:	4013      	ands	r3, r2
 801285a:	68fa      	ldr	r2, [r7, #12]
 801285c:	431a      	orrs	r2, r3
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012862:	2300      	movs	r3, #0
}
 8012864:	4618      	mov	r0, r3
 8012866:	3714      	adds	r7, #20
 8012868:	46bd      	mov	sp, r7
 801286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801286e:	4770      	bx	lr
 8012870:	fffee0c0 	.word	0xfffee0c0

08012874 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8012874:	b480      	push	{r7}
 8012876:	b083      	sub	sp, #12
 8012878:	af00      	add	r7, sp, #0
 801287a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	691b      	ldr	r3, [r3, #16]
 8012880:	b2db      	uxtb	r3, r3
}
 8012882:	4618      	mov	r0, r3
 8012884:	370c      	adds	r7, #12
 8012886:	46bd      	mov	sp, r7
 8012888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801288c:	4770      	bx	lr

0801288e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 801288e:	b480      	push	{r7}
 8012890:	b085      	sub	sp, #20
 8012892:	af00      	add	r7, sp, #0
 8012894:	6078      	str	r0, [r7, #4]
 8012896:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	3314      	adds	r3, #20
 801289c:	461a      	mov	r2, r3
 801289e:	683b      	ldr	r3, [r7, #0]
 80128a0:	4413      	add	r3, r2
 80128a2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	681b      	ldr	r3, [r3, #0]
}
 80128a8:	4618      	mov	r0, r3
 80128aa:	3714      	adds	r7, #20
 80128ac:	46bd      	mov	sp, r7
 80128ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128b2:	4770      	bx	lr

080128b4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 80128b4:	b480      	push	{r7}
 80128b6:	b085      	sub	sp, #20
 80128b8:	af00      	add	r7, sp, #0
 80128ba:	6078      	str	r0, [r7, #4]
 80128bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80128be:	2300      	movs	r3, #0
 80128c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80128c2:	683b      	ldr	r3, [r7, #0]
 80128c4:	681a      	ldr	r2, [r3, #0]
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80128ca:	683b      	ldr	r3, [r7, #0]
 80128cc:	685a      	ldr	r2, [r3, #4]
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80128d2:	683b      	ldr	r3, [r7, #0]
 80128d4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80128d6:	683b      	ldr	r3, [r7, #0]
 80128d8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80128da:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80128dc:	683b      	ldr	r3, [r7, #0]
 80128de:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 80128e0:	431a      	orrs	r2, r3
                       Data->DPSM);
 80128e2:	683b      	ldr	r3, [r7, #0]
 80128e4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 80128e6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80128e8:	68fa      	ldr	r2, [r7, #12]
 80128ea:	4313      	orrs	r3, r2
 80128ec:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80128f6:	68fb      	ldr	r3, [r7, #12]
 80128f8:	431a      	orrs	r2, r3
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80128fe:	2300      	movs	r3, #0

}
 8012900:	4618      	mov	r0, r3
 8012902:	3714      	adds	r7, #20
 8012904:	46bd      	mov	sp, r7
 8012906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801290a:	4770      	bx	lr

0801290c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 801290c:	b580      	push	{r7, lr}
 801290e:	b088      	sub	sp, #32
 8012910:	af00      	add	r7, sp, #0
 8012912:	6078      	str	r0, [r7, #4]
 8012914:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8012916:	683b      	ldr	r3, [r7, #0]
 8012918:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801291a:	2310      	movs	r3, #16
 801291c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801291e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012922:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012924:	2300      	movs	r3, #0
 8012926:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801292c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801292e:	f107 0308 	add.w	r3, r7, #8
 8012932:	4619      	mov	r1, r3
 8012934:	6878      	ldr	r0, [r7, #4]
 8012936:	f7ff ff73 	bl	8012820 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 801293a:	f241 3288 	movw	r2, #5000	; 0x1388
 801293e:	2110      	movs	r1, #16
 8012940:	6878      	ldr	r0, [r7, #4]
 8012942:	f000 fa21 	bl	8012d88 <SDMMC_GetCmdResp1>
 8012946:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012948:	69fb      	ldr	r3, [r7, #28]
}
 801294a:	4618      	mov	r0, r3
 801294c:	3720      	adds	r7, #32
 801294e:	46bd      	mov	sp, r7
 8012950:	bd80      	pop	{r7, pc}

08012952 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012952:	b580      	push	{r7, lr}
 8012954:	b088      	sub	sp, #32
 8012956:	af00      	add	r7, sp, #0
 8012958:	6078      	str	r0, [r7, #4]
 801295a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801295c:	683b      	ldr	r3, [r7, #0]
 801295e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8012960:	2311      	movs	r3, #17
 8012962:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012964:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012968:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801296a:	2300      	movs	r3, #0
 801296c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801296e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012972:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012974:	f107 0308 	add.w	r3, r7, #8
 8012978:	4619      	mov	r1, r3
 801297a:	6878      	ldr	r0, [r7, #4]
 801297c:	f7ff ff50 	bl	8012820 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012980:	f241 3288 	movw	r2, #5000	; 0x1388
 8012984:	2111      	movs	r1, #17
 8012986:	6878      	ldr	r0, [r7, #4]
 8012988:	f000 f9fe 	bl	8012d88 <SDMMC_GetCmdResp1>
 801298c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801298e:	69fb      	ldr	r3, [r7, #28]
}
 8012990:	4618      	mov	r0, r3
 8012992:	3720      	adds	r7, #32
 8012994:	46bd      	mov	sp, r7
 8012996:	bd80      	pop	{r7, pc}

08012998 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012998:	b580      	push	{r7, lr}
 801299a:	b088      	sub	sp, #32
 801299c:	af00      	add	r7, sp, #0
 801299e:	6078      	str	r0, [r7, #4]
 80129a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80129a2:	683b      	ldr	r3, [r7, #0]
 80129a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80129a6:	2312      	movs	r3, #18
 80129a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80129aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80129ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80129b0:	2300      	movs	r3, #0
 80129b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80129b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80129b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80129ba:	f107 0308 	add.w	r3, r7, #8
 80129be:	4619      	mov	r1, r3
 80129c0:	6878      	ldr	r0, [r7, #4]
 80129c2:	f7ff ff2d 	bl	8012820 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80129c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80129ca:	2112      	movs	r1, #18
 80129cc:	6878      	ldr	r0, [r7, #4]
 80129ce:	f000 f9db 	bl	8012d88 <SDMMC_GetCmdResp1>
 80129d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80129d4:	69fb      	ldr	r3, [r7, #28]
}
 80129d6:	4618      	mov	r0, r3
 80129d8:	3720      	adds	r7, #32
 80129da:	46bd      	mov	sp, r7
 80129dc:	bd80      	pop	{r7, pc}

080129de <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80129de:	b580      	push	{r7, lr}
 80129e0:	b088      	sub	sp, #32
 80129e2:	af00      	add	r7, sp, #0
 80129e4:	6078      	str	r0, [r7, #4]
 80129e6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80129e8:	683b      	ldr	r3, [r7, #0]
 80129ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80129ec:	2318      	movs	r3, #24
 80129ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80129f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80129f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80129f6:	2300      	movs	r3, #0
 80129f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80129fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80129fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012a00:	f107 0308 	add.w	r3, r7, #8
 8012a04:	4619      	mov	r1, r3
 8012a06:	6878      	ldr	r0, [r7, #4]
 8012a08:	f7ff ff0a 	bl	8012820 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012a10:	2118      	movs	r1, #24
 8012a12:	6878      	ldr	r0, [r7, #4]
 8012a14:	f000 f9b8 	bl	8012d88 <SDMMC_GetCmdResp1>
 8012a18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012a1a:	69fb      	ldr	r3, [r7, #28]
}
 8012a1c:	4618      	mov	r0, r3
 8012a1e:	3720      	adds	r7, #32
 8012a20:	46bd      	mov	sp, r7
 8012a22:	bd80      	pop	{r7, pc}

08012a24 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012a24:	b580      	push	{r7, lr}
 8012a26:	b088      	sub	sp, #32
 8012a28:	af00      	add	r7, sp, #0
 8012a2a:	6078      	str	r0, [r7, #4]
 8012a2c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012a2e:	683b      	ldr	r3, [r7, #0]
 8012a30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8012a32:	2319      	movs	r3, #25
 8012a34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012a36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012a3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012a3c:	2300      	movs	r3, #0
 8012a3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012a40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012a44:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012a46:	f107 0308 	add.w	r3, r7, #8
 8012a4a:	4619      	mov	r1, r3
 8012a4c:	6878      	ldr	r0, [r7, #4]
 8012a4e:	f7ff fee7 	bl	8012820 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8012a56:	2119      	movs	r1, #25
 8012a58:	6878      	ldr	r0, [r7, #4]
 8012a5a:	f000 f995 	bl	8012d88 <SDMMC_GetCmdResp1>
 8012a5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012a60:	69fb      	ldr	r3, [r7, #28]
}
 8012a62:	4618      	mov	r0, r3
 8012a64:	3720      	adds	r7, #32
 8012a66:	46bd      	mov	sp, r7
 8012a68:	bd80      	pop	{r7, pc}

08012a6a <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8012a6a:	b580      	push	{r7, lr}
 8012a6c:	b088      	sub	sp, #32
 8012a6e:	af00      	add	r7, sp, #0
 8012a70:	6078      	str	r0, [r7, #4]
 8012a72:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8012a74:	683b      	ldr	r3, [r7, #0]
 8012a76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8012a78:	2307      	movs	r3, #7
 8012a7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012a7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012a80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012a82:	2300      	movs	r3, #0
 8012a84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012a86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012a8a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012a8c:	f107 0308 	add.w	r3, r7, #8
 8012a90:	4619      	mov	r1, r3
 8012a92:	6878      	ldr	r0, [r7, #4]
 8012a94:	f7ff fec4 	bl	8012820 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8012a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8012a9c:	2107      	movs	r1, #7
 8012a9e:	6878      	ldr	r0, [r7, #4]
 8012aa0:	f000 f972 	bl	8012d88 <SDMMC_GetCmdResp1>
 8012aa4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012aa6:	69fb      	ldr	r3, [r7, #28]
}
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	3720      	adds	r7, #32
 8012aac:	46bd      	mov	sp, r7
 8012aae:	bd80      	pop	{r7, pc}

08012ab0 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8012ab0:	b580      	push	{r7, lr}
 8012ab2:	b088      	sub	sp, #32
 8012ab4:	af00      	add	r7, sp, #0
 8012ab6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8012ab8:	2300      	movs	r3, #0
 8012aba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8012abc:	2300      	movs	r3, #0
 8012abe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8012ac0:	2300      	movs	r3, #0
 8012ac2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012ac4:	2300      	movs	r3, #0
 8012ac6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012ac8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012acc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012ace:	f107 0308 	add.w	r3, r7, #8
 8012ad2:	4619      	mov	r1, r3
 8012ad4:	6878      	ldr	r0, [r7, #4]
 8012ad6:	f7ff fea3 	bl	8012820 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8012ada:	6878      	ldr	r0, [r7, #4]
 8012adc:	f000 fb96 	bl	801320c <SDMMC_GetCmdError>
 8012ae0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012ae2:	69fb      	ldr	r3, [r7, #28]
}
 8012ae4:	4618      	mov	r0, r3
 8012ae6:	3720      	adds	r7, #32
 8012ae8:	46bd      	mov	sp, r7
 8012aea:	bd80      	pop	{r7, pc}

08012aec <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8012aec:	b580      	push	{r7, lr}
 8012aee:	b088      	sub	sp, #32
 8012af0:	af00      	add	r7, sp, #0
 8012af2:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8012af4:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8012af8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8012afa:	2308      	movs	r3, #8
 8012afc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012afe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012b02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012b04:	2300      	movs	r3, #0
 8012b06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012b08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012b0c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012b0e:	f107 0308 	add.w	r3, r7, #8
 8012b12:	4619      	mov	r1, r3
 8012b14:	6878      	ldr	r0, [r7, #4]
 8012b16:	f7ff fe83 	bl	8012820 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8012b1a:	6878      	ldr	r0, [r7, #4]
 8012b1c:	f000 fb28 	bl	8013170 <SDMMC_GetCmdResp7>
 8012b20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012b22:	69fb      	ldr	r3, [r7, #28]
}
 8012b24:	4618      	mov	r0, r3
 8012b26:	3720      	adds	r7, #32
 8012b28:	46bd      	mov	sp, r7
 8012b2a:	bd80      	pop	{r7, pc}

08012b2c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012b2c:	b580      	push	{r7, lr}
 8012b2e:	b088      	sub	sp, #32
 8012b30:	af00      	add	r7, sp, #0
 8012b32:	6078      	str	r0, [r7, #4]
 8012b34:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8012b36:	683b      	ldr	r3, [r7, #0]
 8012b38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8012b3a:	2337      	movs	r3, #55	; 0x37
 8012b3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012b3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012b42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012b44:	2300      	movs	r3, #0
 8012b46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012b48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012b4c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012b4e:	f107 0308 	add.w	r3, r7, #8
 8012b52:	4619      	mov	r1, r3
 8012b54:	6878      	ldr	r0, [r7, #4]
 8012b56:	f7ff fe63 	bl	8012820 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8012b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8012b5e:	2137      	movs	r1, #55	; 0x37
 8012b60:	6878      	ldr	r0, [r7, #4]
 8012b62:	f000 f911 	bl	8012d88 <SDMMC_GetCmdResp1>
 8012b66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012b68:	69fb      	ldr	r3, [r7, #28]
}
 8012b6a:	4618      	mov	r0, r3
 8012b6c:	3720      	adds	r7, #32
 8012b6e:	46bd      	mov	sp, r7
 8012b70:	bd80      	pop	{r7, pc}

08012b72 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012b72:	b580      	push	{r7, lr}
 8012b74:	b088      	sub	sp, #32
 8012b76:	af00      	add	r7, sp, #0
 8012b78:	6078      	str	r0, [r7, #4]
 8012b7a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8012b7c:	683b      	ldr	r3, [r7, #0]
 8012b7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8012b80:	2329      	movs	r3, #41	; 0x29
 8012b82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012b84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012b88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012b8a:	2300      	movs	r3, #0
 8012b8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012b8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012b92:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012b94:	f107 0308 	add.w	r3, r7, #8
 8012b98:	4619      	mov	r1, r3
 8012b9a:	6878      	ldr	r0, [r7, #4]
 8012b9c:	f7ff fe40 	bl	8012820 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8012ba0:	6878      	ldr	r0, [r7, #4]
 8012ba2:	f000 fa2d 	bl	8013000 <SDMMC_GetCmdResp3>
 8012ba6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012ba8:	69fb      	ldr	r3, [r7, #28]
}
 8012baa:	4618      	mov	r0, r3
 8012bac:	3720      	adds	r7, #32
 8012bae:	46bd      	mov	sp, r7
 8012bb0:	bd80      	pop	{r7, pc}

08012bb2 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8012bb2:	b580      	push	{r7, lr}
 8012bb4:	b088      	sub	sp, #32
 8012bb6:	af00      	add	r7, sp, #0
 8012bb8:	6078      	str	r0, [r7, #4]
 8012bba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8012bbc:	683b      	ldr	r3, [r7, #0]
 8012bbe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8012bc0:	2306      	movs	r3, #6
 8012bc2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012bc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012bc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012bca:	2300      	movs	r3, #0
 8012bcc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012bce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012bd2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012bd4:	f107 0308 	add.w	r3, r7, #8
 8012bd8:	4619      	mov	r1, r3
 8012bda:	6878      	ldr	r0, [r7, #4]
 8012bdc:	f7ff fe20 	bl	8012820 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8012be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8012be4:	2106      	movs	r1, #6
 8012be6:	6878      	ldr	r0, [r7, #4]
 8012be8:	f000 f8ce 	bl	8012d88 <SDMMC_GetCmdResp1>
 8012bec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012bee:	69fb      	ldr	r3, [r7, #28]
}
 8012bf0:	4618      	mov	r0, r3
 8012bf2:	3720      	adds	r7, #32
 8012bf4:	46bd      	mov	sp, r7
 8012bf6:	bd80      	pop	{r7, pc}

08012bf8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8012bf8:	b580      	push	{r7, lr}
 8012bfa:	b088      	sub	sp, #32
 8012bfc:	af00      	add	r7, sp, #0
 8012bfe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8012c00:	2300      	movs	r3, #0
 8012c02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8012c04:	2333      	movs	r3, #51	; 0x33
 8012c06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012c08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012c0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012c0e:	2300      	movs	r3, #0
 8012c10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012c12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012c16:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012c18:	f107 0308 	add.w	r3, r7, #8
 8012c1c:	4619      	mov	r1, r3
 8012c1e:	6878      	ldr	r0, [r7, #4]
 8012c20:	f7ff fdfe 	bl	8012820 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8012c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8012c28:	2133      	movs	r1, #51	; 0x33
 8012c2a:	6878      	ldr	r0, [r7, #4]
 8012c2c:	f000 f8ac 	bl	8012d88 <SDMMC_GetCmdResp1>
 8012c30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012c32:	69fb      	ldr	r3, [r7, #28]
}
 8012c34:	4618      	mov	r0, r3
 8012c36:	3720      	adds	r7, #32
 8012c38:	46bd      	mov	sp, r7
 8012c3a:	bd80      	pop	{r7, pc}

08012c3c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8012c3c:	b580      	push	{r7, lr}
 8012c3e:	b088      	sub	sp, #32
 8012c40:	af00      	add	r7, sp, #0
 8012c42:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8012c44:	2300      	movs	r3, #0
 8012c46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8012c48:	2302      	movs	r3, #2
 8012c4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012c4c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012c50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012c52:	2300      	movs	r3, #0
 8012c54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012c56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012c5a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012c5c:	f107 0308 	add.w	r3, r7, #8
 8012c60:	4619      	mov	r1, r3
 8012c62:	6878      	ldr	r0, [r7, #4]
 8012c64:	f7ff fddc 	bl	8012820 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012c68:	6878      	ldr	r0, [r7, #4]
 8012c6a:	f000 f97f 	bl	8012f6c <SDMMC_GetCmdResp2>
 8012c6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012c70:	69fb      	ldr	r3, [r7, #28]
}
 8012c72:	4618      	mov	r0, r3
 8012c74:	3720      	adds	r7, #32
 8012c76:	46bd      	mov	sp, r7
 8012c78:	bd80      	pop	{r7, pc}

08012c7a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012c7a:	b580      	push	{r7, lr}
 8012c7c:	b088      	sub	sp, #32
 8012c7e:	af00      	add	r7, sp, #0
 8012c80:	6078      	str	r0, [r7, #4]
 8012c82:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8012c84:	683b      	ldr	r3, [r7, #0]
 8012c86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8012c88:	2309      	movs	r3, #9
 8012c8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012c8c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012c90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012c92:	2300      	movs	r3, #0
 8012c94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012c96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012c9a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012c9c:	f107 0308 	add.w	r3, r7, #8
 8012ca0:	4619      	mov	r1, r3
 8012ca2:	6878      	ldr	r0, [r7, #4]
 8012ca4:	f7ff fdbc 	bl	8012820 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012ca8:	6878      	ldr	r0, [r7, #4]
 8012caa:	f000 f95f 	bl	8012f6c <SDMMC_GetCmdResp2>
 8012cae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012cb0:	69fb      	ldr	r3, [r7, #28]
}
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	3720      	adds	r7, #32
 8012cb6:	46bd      	mov	sp, r7
 8012cb8:	bd80      	pop	{r7, pc}

08012cba <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8012cba:	b580      	push	{r7, lr}
 8012cbc:	b088      	sub	sp, #32
 8012cbe:	af00      	add	r7, sp, #0
 8012cc0:	6078      	str	r0, [r7, #4]
 8012cc2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8012cc4:	2300      	movs	r3, #0
 8012cc6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8012cc8:	2303      	movs	r3, #3
 8012cca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012ccc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012cd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012cd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012cda:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012cdc:	f107 0308 	add.w	r3, r7, #8
 8012ce0:	4619      	mov	r1, r3
 8012ce2:	6878      	ldr	r0, [r7, #4]
 8012ce4:	f7ff fd9c 	bl	8012820 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8012ce8:	683a      	ldr	r2, [r7, #0]
 8012cea:	2103      	movs	r1, #3
 8012cec:	6878      	ldr	r0, [r7, #4]
 8012cee:	f000 f9c7 	bl	8013080 <SDMMC_GetCmdResp6>
 8012cf2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012cf4:	69fb      	ldr	r3, [r7, #28]
}
 8012cf6:	4618      	mov	r0, r3
 8012cf8:	3720      	adds	r7, #32
 8012cfa:	46bd      	mov	sp, r7
 8012cfc:	bd80      	pop	{r7, pc}

08012cfe <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012cfe:	b580      	push	{r7, lr}
 8012d00:	b088      	sub	sp, #32
 8012d02:	af00      	add	r7, sp, #0
 8012d04:	6078      	str	r0, [r7, #4]
 8012d06:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8012d08:	683b      	ldr	r3, [r7, #0]
 8012d0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8012d0c:	230d      	movs	r3, #13
 8012d0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012d10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012d14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012d16:	2300      	movs	r3, #0
 8012d18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012d1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012d1e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012d20:	f107 0308 	add.w	r3, r7, #8
 8012d24:	4619      	mov	r1, r3
 8012d26:	6878      	ldr	r0, [r7, #4]
 8012d28:	f7ff fd7a 	bl	8012820 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8012d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012d30:	210d      	movs	r1, #13
 8012d32:	6878      	ldr	r0, [r7, #4]
 8012d34:	f000 f828 	bl	8012d88 <SDMMC_GetCmdResp1>
 8012d38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012d3a:	69fb      	ldr	r3, [r7, #28]
}
 8012d3c:	4618      	mov	r0, r3
 8012d3e:	3720      	adds	r7, #32
 8012d40:	46bd      	mov	sp, r7
 8012d42:	bd80      	pop	{r7, pc}

08012d44 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8012d44:	b580      	push	{r7, lr}
 8012d46:	b088      	sub	sp, #32
 8012d48:	af00      	add	r7, sp, #0
 8012d4a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8012d4c:	2300      	movs	r3, #0
 8012d4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8012d50:	230d      	movs	r3, #13
 8012d52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012d54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012d58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012d5a:	2300      	movs	r3, #0
 8012d5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012d5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012d62:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012d64:	f107 0308 	add.w	r3, r7, #8
 8012d68:	4619      	mov	r1, r3
 8012d6a:	6878      	ldr	r0, [r7, #4]
 8012d6c:	f7ff fd58 	bl	8012820 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8012d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8012d74:	210d      	movs	r1, #13
 8012d76:	6878      	ldr	r0, [r7, #4]
 8012d78:	f000 f806 	bl	8012d88 <SDMMC_GetCmdResp1>
 8012d7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012d7e:	69fb      	ldr	r3, [r7, #28]
}
 8012d80:	4618      	mov	r0, r3
 8012d82:	3720      	adds	r7, #32
 8012d84:	46bd      	mov	sp, r7
 8012d86:	bd80      	pop	{r7, pc}

08012d88 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8012d88:	b580      	push	{r7, lr}
 8012d8a:	b088      	sub	sp, #32
 8012d8c:	af00      	add	r7, sp, #0
 8012d8e:	60f8      	str	r0, [r7, #12]
 8012d90:	460b      	mov	r3, r1
 8012d92:	607a      	str	r2, [r7, #4]
 8012d94:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8012d96:	4b70      	ldr	r3, [pc, #448]	; (8012f58 <SDMMC_GetCmdResp1+0x1d0>)
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	4a70      	ldr	r2, [pc, #448]	; (8012f5c <SDMMC_GetCmdResp1+0x1d4>)
 8012d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8012da0:	0a5a      	lsrs	r2, r3, #9
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	fb02 f303 	mul.w	r3, r2, r3
 8012da8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8012daa:	69fb      	ldr	r3, [r7, #28]
 8012dac:	1e5a      	subs	r2, r3, #1
 8012dae:	61fa      	str	r2, [r7, #28]
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d102      	bne.n	8012dba <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012db4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012db8:	e0c9      	b.n	8012f4e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8012dba:	68fb      	ldr	r3, [r7, #12]
 8012dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012dbe:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8012dc0:	69ba      	ldr	r2, [r7, #24]
 8012dc2:	4b67      	ldr	r3, [pc, #412]	; (8012f60 <SDMMC_GetCmdResp1+0x1d8>)
 8012dc4:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d0ef      	beq.n	8012daa <SDMMC_GetCmdResp1+0x22>
 8012dca:	69bb      	ldr	r3, [r7, #24]
 8012dcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d1ea      	bne.n	8012daa <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012dd4:	68fb      	ldr	r3, [r7, #12]
 8012dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012dd8:	f003 0304 	and.w	r3, r3, #4
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d004      	beq.n	8012dea <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	2204      	movs	r2, #4
 8012de4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012de6:	2304      	movs	r3, #4
 8012de8:	e0b1      	b.n	8012f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012dea:	68fb      	ldr	r3, [r7, #12]
 8012dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012dee:	f003 0301 	and.w	r3, r3, #1
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d004      	beq.n	8012e00 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	2201      	movs	r2, #1
 8012dfa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012dfc:	2301      	movs	r3, #1
 8012dfe:	e0a6      	b.n	8012f4e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	4a58      	ldr	r2, [pc, #352]	; (8012f64 <SDMMC_GetCmdResp1+0x1dc>)
 8012e04:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012e06:	68f8      	ldr	r0, [r7, #12]
 8012e08:	f7ff fd34 	bl	8012874 <SDMMC_GetCommandResponse>
 8012e0c:	4603      	mov	r3, r0
 8012e0e:	461a      	mov	r2, r3
 8012e10:	7afb      	ldrb	r3, [r7, #11]
 8012e12:	4293      	cmp	r3, r2
 8012e14:	d001      	beq.n	8012e1a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012e16:	2301      	movs	r3, #1
 8012e18:	e099      	b.n	8012f4e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012e1a:	2100      	movs	r1, #0
 8012e1c:	68f8      	ldr	r0, [r7, #12]
 8012e1e:	f7ff fd36 	bl	801288e <SDMMC_GetResponse>
 8012e22:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8012e24:	697a      	ldr	r2, [r7, #20]
 8012e26:	4b50      	ldr	r3, [pc, #320]	; (8012f68 <SDMMC_GetCmdResp1+0x1e0>)
 8012e28:	4013      	ands	r3, r2
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d101      	bne.n	8012e32 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8012e2e:	2300      	movs	r3, #0
 8012e30:	e08d      	b.n	8012f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8012e32:	697b      	ldr	r3, [r7, #20]
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	da02      	bge.n	8012e3e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8012e38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012e3c:	e087      	b.n	8012f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8012e3e:	697b      	ldr	r3, [r7, #20]
 8012e40:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d001      	beq.n	8012e4c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8012e48:	2340      	movs	r3, #64	; 0x40
 8012e4a:	e080      	b.n	8012f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8012e4c:	697b      	ldr	r3, [r7, #20]
 8012e4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d001      	beq.n	8012e5a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8012e56:	2380      	movs	r3, #128	; 0x80
 8012e58:	e079      	b.n	8012f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8012e5a:	697b      	ldr	r3, [r7, #20]
 8012e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d002      	beq.n	8012e6a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8012e64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012e68:	e071      	b.n	8012f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8012e6a:	697b      	ldr	r3, [r7, #20]
 8012e6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d002      	beq.n	8012e7a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8012e74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012e78:	e069      	b.n	8012f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8012e7a:	697b      	ldr	r3, [r7, #20]
 8012e7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d002      	beq.n	8012e8a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8012e84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012e88:	e061      	b.n	8012f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8012e8a:	697b      	ldr	r3, [r7, #20]
 8012e8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d002      	beq.n	8012e9a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8012e94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012e98:	e059      	b.n	8012f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8012e9a:	697b      	ldr	r3, [r7, #20]
 8012e9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d002      	beq.n	8012eaa <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012ea4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012ea8:	e051      	b.n	8012f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8012eaa:	697b      	ldr	r3, [r7, #20]
 8012eac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d002      	beq.n	8012eba <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012eb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012eb8:	e049      	b.n	8012f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8012eba:	697b      	ldr	r3, [r7, #20]
 8012ebc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d002      	beq.n	8012eca <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8012ec4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012ec8:	e041      	b.n	8012f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8012eca:	697b      	ldr	r3, [r7, #20]
 8012ecc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d002      	beq.n	8012eda <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8012ed4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012ed8:	e039      	b.n	8012f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8012eda:	697b      	ldr	r3, [r7, #20]
 8012edc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d002      	beq.n	8012eea <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8012ee4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012ee8:	e031      	b.n	8012f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8012eea:	697b      	ldr	r3, [r7, #20]
 8012eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d002      	beq.n	8012efa <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8012ef4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012ef8:	e029      	b.n	8012f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8012efa:	697b      	ldr	r3, [r7, #20]
 8012efc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d002      	beq.n	8012f0a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8012f04:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012f08:	e021      	b.n	8012f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8012f0a:	697b      	ldr	r3, [r7, #20]
 8012f0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d002      	beq.n	8012f1a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8012f14:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8012f18:	e019      	b.n	8012f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8012f1a:	697b      	ldr	r3, [r7, #20]
 8012f1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d002      	beq.n	8012f2a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8012f24:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8012f28:	e011      	b.n	8012f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8012f2a:	697b      	ldr	r3, [r7, #20]
 8012f2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d002      	beq.n	8012f3a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8012f34:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012f38:	e009      	b.n	8012f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8012f3a:	697b      	ldr	r3, [r7, #20]
 8012f3c:	f003 0308 	and.w	r3, r3, #8
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d002      	beq.n	8012f4a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8012f44:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8012f48:	e001      	b.n	8012f4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012f4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012f4e:	4618      	mov	r0, r3
 8012f50:	3720      	adds	r7, #32
 8012f52:	46bd      	mov	sp, r7
 8012f54:	bd80      	pop	{r7, pc}
 8012f56:	bf00      	nop
 8012f58:	24000040 	.word	0x24000040
 8012f5c:	10624dd3 	.word	0x10624dd3
 8012f60:	00200045 	.word	0x00200045
 8012f64:	002000c5 	.word	0x002000c5
 8012f68:	fdffe008 	.word	0xfdffe008

08012f6c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8012f6c:	b480      	push	{r7}
 8012f6e:	b085      	sub	sp, #20
 8012f70:	af00      	add	r7, sp, #0
 8012f72:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012f74:	4b1f      	ldr	r3, [pc, #124]	; (8012ff4 <SDMMC_GetCmdResp2+0x88>)
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	4a1f      	ldr	r2, [pc, #124]	; (8012ff8 <SDMMC_GetCmdResp2+0x8c>)
 8012f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8012f7e:	0a5b      	lsrs	r3, r3, #9
 8012f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8012f84:	fb02 f303 	mul.w	r3, r2, r3
 8012f88:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	1e5a      	subs	r2, r3, #1
 8012f8e:	60fa      	str	r2, [r7, #12]
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d102      	bne.n	8012f9a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012f94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012f98:	e026      	b.n	8012fe8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012f9e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012fa0:	68bb      	ldr	r3, [r7, #8]
 8012fa2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d0ef      	beq.n	8012f8a <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012faa:	68bb      	ldr	r3, [r7, #8]
 8012fac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d1ea      	bne.n	8012f8a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012fb8:	f003 0304 	and.w	r3, r3, #4
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d004      	beq.n	8012fca <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	2204      	movs	r2, #4
 8012fc4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012fc6:	2304      	movs	r3, #4
 8012fc8:	e00e      	b.n	8012fe8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012fce:	f003 0301 	and.w	r3, r3, #1
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d004      	beq.n	8012fe0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	2201      	movs	r2, #1
 8012fda:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012fdc:	2301      	movs	r3, #1
 8012fde:	e003      	b.n	8012fe8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	4a06      	ldr	r2, [pc, #24]	; (8012ffc <SDMMC_GetCmdResp2+0x90>)
 8012fe4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012fe6:	2300      	movs	r3, #0
}
 8012fe8:	4618      	mov	r0, r3
 8012fea:	3714      	adds	r7, #20
 8012fec:	46bd      	mov	sp, r7
 8012fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff2:	4770      	bx	lr
 8012ff4:	24000040 	.word	0x24000040
 8012ff8:	10624dd3 	.word	0x10624dd3
 8012ffc:	002000c5 	.word	0x002000c5

08013000 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8013000:	b480      	push	{r7}
 8013002:	b085      	sub	sp, #20
 8013004:	af00      	add	r7, sp, #0
 8013006:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013008:	4b1a      	ldr	r3, [pc, #104]	; (8013074 <SDMMC_GetCmdResp3+0x74>)
 801300a:	681b      	ldr	r3, [r3, #0]
 801300c:	4a1a      	ldr	r2, [pc, #104]	; (8013078 <SDMMC_GetCmdResp3+0x78>)
 801300e:	fba2 2303 	umull	r2, r3, r2, r3
 8013012:	0a5b      	lsrs	r3, r3, #9
 8013014:	f241 3288 	movw	r2, #5000	; 0x1388
 8013018:	fb02 f303 	mul.w	r3, r2, r3
 801301c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	1e5a      	subs	r2, r3, #1
 8013022:	60fa      	str	r2, [r7, #12]
 8013024:	2b00      	cmp	r3, #0
 8013026:	d102      	bne.n	801302e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013028:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801302c:	e01b      	b.n	8013066 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013032:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013034:	68bb      	ldr	r3, [r7, #8]
 8013036:	f003 0345 	and.w	r3, r3, #69	; 0x45
 801303a:	2b00      	cmp	r3, #0
 801303c:	d0ef      	beq.n	801301e <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801303e:	68bb      	ldr	r3, [r7, #8]
 8013040:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013044:	2b00      	cmp	r3, #0
 8013046:	d1ea      	bne.n	801301e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801304c:	f003 0304 	and.w	r3, r3, #4
 8013050:	2b00      	cmp	r3, #0
 8013052:	d004      	beq.n	801305e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	2204      	movs	r2, #4
 8013058:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801305a:	2304      	movs	r3, #4
 801305c:	e003      	b.n	8013066 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	4a06      	ldr	r2, [pc, #24]	; (801307c <SDMMC_GetCmdResp3+0x7c>)
 8013062:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8013064:	2300      	movs	r3, #0
}
 8013066:	4618      	mov	r0, r3
 8013068:	3714      	adds	r7, #20
 801306a:	46bd      	mov	sp, r7
 801306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013070:	4770      	bx	lr
 8013072:	bf00      	nop
 8013074:	24000040 	.word	0x24000040
 8013078:	10624dd3 	.word	0x10624dd3
 801307c:	002000c5 	.word	0x002000c5

08013080 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8013080:	b580      	push	{r7, lr}
 8013082:	b088      	sub	sp, #32
 8013084:	af00      	add	r7, sp, #0
 8013086:	60f8      	str	r0, [r7, #12]
 8013088:	460b      	mov	r3, r1
 801308a:	607a      	str	r2, [r7, #4]
 801308c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801308e:	4b35      	ldr	r3, [pc, #212]	; (8013164 <SDMMC_GetCmdResp6+0xe4>)
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	4a35      	ldr	r2, [pc, #212]	; (8013168 <SDMMC_GetCmdResp6+0xe8>)
 8013094:	fba2 2303 	umull	r2, r3, r2, r3
 8013098:	0a5b      	lsrs	r3, r3, #9
 801309a:	f241 3288 	movw	r2, #5000	; 0x1388
 801309e:	fb02 f303 	mul.w	r3, r2, r3
 80130a2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80130a4:	69fb      	ldr	r3, [r7, #28]
 80130a6:	1e5a      	subs	r2, r3, #1
 80130a8:	61fa      	str	r2, [r7, #28]
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d102      	bne.n	80130b4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80130ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80130b2:	e052      	b.n	801315a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80130b8:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80130ba:	69bb      	ldr	r3, [r7, #24]
 80130bc:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d0ef      	beq.n	80130a4 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80130c4:	69bb      	ldr	r3, [r7, #24]
 80130c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d1ea      	bne.n	80130a4 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80130d2:	f003 0304 	and.w	r3, r3, #4
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d004      	beq.n	80130e4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	2204      	movs	r2, #4
 80130de:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80130e0:	2304      	movs	r3, #4
 80130e2:	e03a      	b.n	801315a <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80130e8:	f003 0301 	and.w	r3, r3, #1
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d004      	beq.n	80130fa <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	2201      	movs	r2, #1
 80130f4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80130f6:	2301      	movs	r3, #1
 80130f8:	e02f      	b.n	801315a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80130fa:	68f8      	ldr	r0, [r7, #12]
 80130fc:	f7ff fbba 	bl	8012874 <SDMMC_GetCommandResponse>
 8013100:	4603      	mov	r3, r0
 8013102:	461a      	mov	r2, r3
 8013104:	7afb      	ldrb	r3, [r7, #11]
 8013106:	4293      	cmp	r3, r2
 8013108:	d001      	beq.n	801310e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801310a:	2301      	movs	r3, #1
 801310c:	e025      	b.n	801315a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	4a16      	ldr	r2, [pc, #88]	; (801316c <SDMMC_GetCmdResp6+0xec>)
 8013112:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8013114:	2100      	movs	r1, #0
 8013116:	68f8      	ldr	r0, [r7, #12]
 8013118:	f7ff fbb9 	bl	801288e <SDMMC_GetResponse>
 801311c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 801311e:	697b      	ldr	r3, [r7, #20]
 8013120:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8013124:	2b00      	cmp	r3, #0
 8013126:	d106      	bne.n	8013136 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8013128:	697b      	ldr	r3, [r7, #20]
 801312a:	0c1b      	lsrs	r3, r3, #16
 801312c:	b29a      	uxth	r2, r3
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8013132:	2300      	movs	r3, #0
 8013134:	e011      	b.n	801315a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8013136:	697b      	ldr	r3, [r7, #20]
 8013138:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801313c:	2b00      	cmp	r3, #0
 801313e:	d002      	beq.n	8013146 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8013140:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013144:	e009      	b.n	801315a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8013146:	697b      	ldr	r3, [r7, #20]
 8013148:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801314c:	2b00      	cmp	r3, #0
 801314e:	d002      	beq.n	8013156 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8013150:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013154:	e001      	b.n	801315a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8013156:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801315a:	4618      	mov	r0, r3
 801315c:	3720      	adds	r7, #32
 801315e:	46bd      	mov	sp, r7
 8013160:	bd80      	pop	{r7, pc}
 8013162:	bf00      	nop
 8013164:	24000040 	.word	0x24000040
 8013168:	10624dd3 	.word	0x10624dd3
 801316c:	002000c5 	.word	0x002000c5

08013170 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8013170:	b480      	push	{r7}
 8013172:	b085      	sub	sp, #20
 8013174:	af00      	add	r7, sp, #0
 8013176:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013178:	4b22      	ldr	r3, [pc, #136]	; (8013204 <SDMMC_GetCmdResp7+0x94>)
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	4a22      	ldr	r2, [pc, #136]	; (8013208 <SDMMC_GetCmdResp7+0x98>)
 801317e:	fba2 2303 	umull	r2, r3, r2, r3
 8013182:	0a5b      	lsrs	r3, r3, #9
 8013184:	f241 3288 	movw	r2, #5000	; 0x1388
 8013188:	fb02 f303 	mul.w	r3, r2, r3
 801318c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801318e:	68fb      	ldr	r3, [r7, #12]
 8013190:	1e5a      	subs	r2, r3, #1
 8013192:	60fa      	str	r2, [r7, #12]
 8013194:	2b00      	cmp	r3, #0
 8013196:	d102      	bne.n	801319e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013198:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801319c:	e02c      	b.n	80131f8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80131a2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80131a4:	68bb      	ldr	r3, [r7, #8]
 80131a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d0ef      	beq.n	801318e <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80131ae:	68bb      	ldr	r3, [r7, #8]
 80131b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d1ea      	bne.n	801318e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80131bc:	f003 0304 	and.w	r3, r3, #4
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d004      	beq.n	80131ce <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	2204      	movs	r2, #4
 80131c8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80131ca:	2304      	movs	r3, #4
 80131cc:	e014      	b.n	80131f8 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80131d2:	f003 0301 	and.w	r3, r3, #1
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d004      	beq.n	80131e4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	2201      	movs	r2, #1
 80131de:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80131e0:	2301      	movs	r3, #1
 80131e2:	e009      	b.n	80131f8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80131e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d002      	beq.n	80131f6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	2240      	movs	r2, #64	; 0x40
 80131f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80131f6:	2300      	movs	r3, #0

}
 80131f8:	4618      	mov	r0, r3
 80131fa:	3714      	adds	r7, #20
 80131fc:	46bd      	mov	sp, r7
 80131fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013202:	4770      	bx	lr
 8013204:	24000040 	.word	0x24000040
 8013208:	10624dd3 	.word	0x10624dd3

0801320c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 801320c:	b480      	push	{r7}
 801320e:	b085      	sub	sp, #20
 8013210:	af00      	add	r7, sp, #0
 8013212:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013214:	4b11      	ldr	r3, [pc, #68]	; (801325c <SDMMC_GetCmdError+0x50>)
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	4a11      	ldr	r2, [pc, #68]	; (8013260 <SDMMC_GetCmdError+0x54>)
 801321a:	fba2 2303 	umull	r2, r3, r2, r3
 801321e:	0a5b      	lsrs	r3, r3, #9
 8013220:	f241 3288 	movw	r2, #5000	; 0x1388
 8013224:	fb02 f303 	mul.w	r3, r2, r3
 8013228:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	1e5a      	subs	r2, r3, #1
 801322e:	60fa      	str	r2, [r7, #12]
 8013230:	2b00      	cmp	r3, #0
 8013232:	d102      	bne.n	801323a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013234:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013238:	e009      	b.n	801324e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801323e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013242:	2b00      	cmp	r3, #0
 8013244:	d0f1      	beq.n	801322a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	4a06      	ldr	r2, [pc, #24]	; (8013264 <SDMMC_GetCmdError+0x58>)
 801324a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 801324c:	2300      	movs	r3, #0
}
 801324e:	4618      	mov	r0, r3
 8013250:	3714      	adds	r7, #20
 8013252:	46bd      	mov	sp, r7
 8013254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013258:	4770      	bx	lr
 801325a:	bf00      	nop
 801325c:	24000040 	.word	0x24000040
 8013260:	10624dd3 	.word	0x10624dd3
 8013264:	002000c5 	.word	0x002000c5

08013268 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8013268:	b580      	push	{r7, lr}
 801326a:	b084      	sub	sp, #16
 801326c:	af00      	add	r7, sp, #0
 801326e:	4603      	mov	r3, r0
 8013270:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8013272:	79fb      	ldrb	r3, [r7, #7]
 8013274:	4a08      	ldr	r2, [pc, #32]	; (8013298 <disk_status+0x30>)
 8013276:	009b      	lsls	r3, r3, #2
 8013278:	4413      	add	r3, r2
 801327a:	685b      	ldr	r3, [r3, #4]
 801327c:	685b      	ldr	r3, [r3, #4]
 801327e:	79fa      	ldrb	r2, [r7, #7]
 8013280:	4905      	ldr	r1, [pc, #20]	; (8013298 <disk_status+0x30>)
 8013282:	440a      	add	r2, r1
 8013284:	7a12      	ldrb	r2, [r2, #8]
 8013286:	4610      	mov	r0, r2
 8013288:	4798      	blx	r3
 801328a:	4603      	mov	r3, r0
 801328c:	73fb      	strb	r3, [r7, #15]
  return stat;
 801328e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013290:	4618      	mov	r0, r3
 8013292:	3710      	adds	r7, #16
 8013294:	46bd      	mov	sp, r7
 8013296:	bd80      	pop	{r7, pc}
 8013298:	240023d0 	.word	0x240023d0

0801329c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801329c:	b580      	push	{r7, lr}
 801329e:	b084      	sub	sp, #16
 80132a0:	af00      	add	r7, sp, #0
 80132a2:	4603      	mov	r3, r0
 80132a4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80132a6:	2300      	movs	r3, #0
 80132a8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80132aa:	79fb      	ldrb	r3, [r7, #7]
 80132ac:	4a0d      	ldr	r2, [pc, #52]	; (80132e4 <disk_initialize+0x48>)
 80132ae:	5cd3      	ldrb	r3, [r2, r3]
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d111      	bne.n	80132d8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80132b4:	79fb      	ldrb	r3, [r7, #7]
 80132b6:	4a0b      	ldr	r2, [pc, #44]	; (80132e4 <disk_initialize+0x48>)
 80132b8:	2101      	movs	r1, #1
 80132ba:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80132bc:	79fb      	ldrb	r3, [r7, #7]
 80132be:	4a09      	ldr	r2, [pc, #36]	; (80132e4 <disk_initialize+0x48>)
 80132c0:	009b      	lsls	r3, r3, #2
 80132c2:	4413      	add	r3, r2
 80132c4:	685b      	ldr	r3, [r3, #4]
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	79fa      	ldrb	r2, [r7, #7]
 80132ca:	4906      	ldr	r1, [pc, #24]	; (80132e4 <disk_initialize+0x48>)
 80132cc:	440a      	add	r2, r1
 80132ce:	7a12      	ldrb	r2, [r2, #8]
 80132d0:	4610      	mov	r0, r2
 80132d2:	4798      	blx	r3
 80132d4:	4603      	mov	r3, r0
 80132d6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80132d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80132da:	4618      	mov	r0, r3
 80132dc:	3710      	adds	r7, #16
 80132de:	46bd      	mov	sp, r7
 80132e0:	bd80      	pop	{r7, pc}
 80132e2:	bf00      	nop
 80132e4:	240023d0 	.word	0x240023d0

080132e8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80132e8:	b590      	push	{r4, r7, lr}
 80132ea:	b087      	sub	sp, #28
 80132ec:	af00      	add	r7, sp, #0
 80132ee:	60b9      	str	r1, [r7, #8]
 80132f0:	607a      	str	r2, [r7, #4]
 80132f2:	603b      	str	r3, [r7, #0]
 80132f4:	4603      	mov	r3, r0
 80132f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80132f8:	7bfb      	ldrb	r3, [r7, #15]
 80132fa:	4a0a      	ldr	r2, [pc, #40]	; (8013324 <disk_read+0x3c>)
 80132fc:	009b      	lsls	r3, r3, #2
 80132fe:	4413      	add	r3, r2
 8013300:	685b      	ldr	r3, [r3, #4]
 8013302:	689c      	ldr	r4, [r3, #8]
 8013304:	7bfb      	ldrb	r3, [r7, #15]
 8013306:	4a07      	ldr	r2, [pc, #28]	; (8013324 <disk_read+0x3c>)
 8013308:	4413      	add	r3, r2
 801330a:	7a18      	ldrb	r0, [r3, #8]
 801330c:	683b      	ldr	r3, [r7, #0]
 801330e:	687a      	ldr	r2, [r7, #4]
 8013310:	68b9      	ldr	r1, [r7, #8]
 8013312:	47a0      	blx	r4
 8013314:	4603      	mov	r3, r0
 8013316:	75fb      	strb	r3, [r7, #23]
  return res;
 8013318:	7dfb      	ldrb	r3, [r7, #23]
}
 801331a:	4618      	mov	r0, r3
 801331c:	371c      	adds	r7, #28
 801331e:	46bd      	mov	sp, r7
 8013320:	bd90      	pop	{r4, r7, pc}
 8013322:	bf00      	nop
 8013324:	240023d0 	.word	0x240023d0

08013328 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8013328:	b590      	push	{r4, r7, lr}
 801332a:	b087      	sub	sp, #28
 801332c:	af00      	add	r7, sp, #0
 801332e:	60b9      	str	r1, [r7, #8]
 8013330:	607a      	str	r2, [r7, #4]
 8013332:	603b      	str	r3, [r7, #0]
 8013334:	4603      	mov	r3, r0
 8013336:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8013338:	7bfb      	ldrb	r3, [r7, #15]
 801333a:	4a0a      	ldr	r2, [pc, #40]	; (8013364 <disk_write+0x3c>)
 801333c:	009b      	lsls	r3, r3, #2
 801333e:	4413      	add	r3, r2
 8013340:	685b      	ldr	r3, [r3, #4]
 8013342:	68dc      	ldr	r4, [r3, #12]
 8013344:	7bfb      	ldrb	r3, [r7, #15]
 8013346:	4a07      	ldr	r2, [pc, #28]	; (8013364 <disk_write+0x3c>)
 8013348:	4413      	add	r3, r2
 801334a:	7a18      	ldrb	r0, [r3, #8]
 801334c:	683b      	ldr	r3, [r7, #0]
 801334e:	687a      	ldr	r2, [r7, #4]
 8013350:	68b9      	ldr	r1, [r7, #8]
 8013352:	47a0      	blx	r4
 8013354:	4603      	mov	r3, r0
 8013356:	75fb      	strb	r3, [r7, #23]
  return res;
 8013358:	7dfb      	ldrb	r3, [r7, #23]
}
 801335a:	4618      	mov	r0, r3
 801335c:	371c      	adds	r7, #28
 801335e:	46bd      	mov	sp, r7
 8013360:	bd90      	pop	{r4, r7, pc}
 8013362:	bf00      	nop
 8013364:	240023d0 	.word	0x240023d0

08013368 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8013368:	b480      	push	{r7}
 801336a:	b085      	sub	sp, #20
 801336c:	af00      	add	r7, sp, #0
 801336e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	3301      	adds	r3, #1
 8013374:	781b      	ldrb	r3, [r3, #0]
 8013376:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8013378:	89fb      	ldrh	r3, [r7, #14]
 801337a:	021b      	lsls	r3, r3, #8
 801337c:	b21a      	sxth	r2, r3
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	781b      	ldrb	r3, [r3, #0]
 8013382:	b21b      	sxth	r3, r3
 8013384:	4313      	orrs	r3, r2
 8013386:	b21b      	sxth	r3, r3
 8013388:	81fb      	strh	r3, [r7, #14]
	return rv;
 801338a:	89fb      	ldrh	r3, [r7, #14]
}
 801338c:	4618      	mov	r0, r3
 801338e:	3714      	adds	r7, #20
 8013390:	46bd      	mov	sp, r7
 8013392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013396:	4770      	bx	lr

08013398 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8013398:	b480      	push	{r7}
 801339a:	b085      	sub	sp, #20
 801339c:	af00      	add	r7, sp, #0
 801339e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	3303      	adds	r3, #3
 80133a4:	781b      	ldrb	r3, [r3, #0]
 80133a6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80133a8:	68fb      	ldr	r3, [r7, #12]
 80133aa:	021b      	lsls	r3, r3, #8
 80133ac:	687a      	ldr	r2, [r7, #4]
 80133ae:	3202      	adds	r2, #2
 80133b0:	7812      	ldrb	r2, [r2, #0]
 80133b2:	4313      	orrs	r3, r2
 80133b4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	021b      	lsls	r3, r3, #8
 80133ba:	687a      	ldr	r2, [r7, #4]
 80133bc:	3201      	adds	r2, #1
 80133be:	7812      	ldrb	r2, [r2, #0]
 80133c0:	4313      	orrs	r3, r2
 80133c2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80133c4:	68fb      	ldr	r3, [r7, #12]
 80133c6:	021b      	lsls	r3, r3, #8
 80133c8:	687a      	ldr	r2, [r7, #4]
 80133ca:	7812      	ldrb	r2, [r2, #0]
 80133cc:	4313      	orrs	r3, r2
 80133ce:	60fb      	str	r3, [r7, #12]
	return rv;
 80133d0:	68fb      	ldr	r3, [r7, #12]
}
 80133d2:	4618      	mov	r0, r3
 80133d4:	3714      	adds	r7, #20
 80133d6:	46bd      	mov	sp, r7
 80133d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133dc:	4770      	bx	lr

080133de <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 80133de:	b580      	push	{r7, lr}
 80133e0:	b082      	sub	sp, #8
 80133e2:	af00      	add	r7, sp, #0
 80133e4:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d009      	beq.n	8013400 <lock_fs+0x22>
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	68db      	ldr	r3, [r3, #12]
 80133f0:	4618      	mov	r0, r3
 80133f2:	f000 fc8f 	bl	8013d14 <ff_req_grant>
 80133f6:	4603      	mov	r3, r0
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d001      	beq.n	8013400 <lock_fs+0x22>
 80133fc:	2301      	movs	r3, #1
 80133fe:	e000      	b.n	8013402 <lock_fs+0x24>
 8013400:	2300      	movs	r3, #0
}
 8013402:	4618      	mov	r0, r3
 8013404:	3708      	adds	r7, #8
 8013406:	46bd      	mov	sp, r7
 8013408:	bd80      	pop	{r7, pc}

0801340a <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 801340a:	b580      	push	{r7, lr}
 801340c:	b082      	sub	sp, #8
 801340e:	af00      	add	r7, sp, #0
 8013410:	6078      	str	r0, [r7, #4]
 8013412:	460b      	mov	r3, r1
 8013414:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	2b00      	cmp	r3, #0
 801341a:	d00d      	beq.n	8013438 <unlock_fs+0x2e>
 801341c:	78fb      	ldrb	r3, [r7, #3]
 801341e:	2b0c      	cmp	r3, #12
 8013420:	d00a      	beq.n	8013438 <unlock_fs+0x2e>
 8013422:	78fb      	ldrb	r3, [r7, #3]
 8013424:	2b0b      	cmp	r3, #11
 8013426:	d007      	beq.n	8013438 <unlock_fs+0x2e>
 8013428:	78fb      	ldrb	r3, [r7, #3]
 801342a:	2b0f      	cmp	r3, #15
 801342c:	d004      	beq.n	8013438 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	68db      	ldr	r3, [r3, #12]
 8013432:	4618      	mov	r0, r3
 8013434:	f000 fc83 	bl	8013d3e <ff_rel_grant>
	}
}
 8013438:	bf00      	nop
 801343a:	3708      	adds	r7, #8
 801343c:	46bd      	mov	sp, r7
 801343e:	bd80      	pop	{r7, pc}

08013440 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8013440:	b480      	push	{r7}
 8013442:	b085      	sub	sp, #20
 8013444:	af00      	add	r7, sp, #0
 8013446:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8013448:	2300      	movs	r3, #0
 801344a:	60fb      	str	r3, [r7, #12]
 801344c:	e010      	b.n	8013470 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801344e:	4a0d      	ldr	r2, [pc, #52]	; (8013484 <clear_lock+0x44>)
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	011b      	lsls	r3, r3, #4
 8013454:	4413      	add	r3, r2
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	687a      	ldr	r2, [r7, #4]
 801345a:	429a      	cmp	r2, r3
 801345c:	d105      	bne.n	801346a <clear_lock+0x2a>
 801345e:	4a09      	ldr	r2, [pc, #36]	; (8013484 <clear_lock+0x44>)
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	011b      	lsls	r3, r3, #4
 8013464:	4413      	add	r3, r2
 8013466:	2200      	movs	r2, #0
 8013468:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801346a:	68fb      	ldr	r3, [r7, #12]
 801346c:	3301      	adds	r3, #1
 801346e:	60fb      	str	r3, [r7, #12]
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	2b01      	cmp	r3, #1
 8013474:	d9eb      	bls.n	801344e <clear_lock+0xe>
	}
}
 8013476:	bf00      	nop
 8013478:	bf00      	nop
 801347a:	3714      	adds	r7, #20
 801347c:	46bd      	mov	sp, r7
 801347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013482:	4770      	bx	lr
 8013484:	240023b0 	.word	0x240023b0

08013488 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8013488:	b580      	push	{r7, lr}
 801348a:	b086      	sub	sp, #24
 801348c:	af00      	add	r7, sp, #0
 801348e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8013490:	2300      	movs	r3, #0
 8013492:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	78db      	ldrb	r3, [r3, #3]
 8013498:	2b00      	cmp	r3, #0
 801349a:	d034      	beq.n	8013506 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80134a0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	7858      	ldrb	r0, [r3, #1]
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80134ac:	2301      	movs	r3, #1
 80134ae:	697a      	ldr	r2, [r7, #20]
 80134b0:	f7ff ff3a 	bl	8013328 <disk_write>
 80134b4:	4603      	mov	r3, r0
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d002      	beq.n	80134c0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80134ba:	2301      	movs	r3, #1
 80134bc:	73fb      	strb	r3, [r7, #15]
 80134be:	e022      	b.n	8013506 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	2200      	movs	r2, #0
 80134c4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134ca:	697a      	ldr	r2, [r7, #20]
 80134cc:	1ad2      	subs	r2, r2, r3
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	69db      	ldr	r3, [r3, #28]
 80134d2:	429a      	cmp	r2, r3
 80134d4:	d217      	bcs.n	8013506 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	789b      	ldrb	r3, [r3, #2]
 80134da:	613b      	str	r3, [r7, #16]
 80134dc:	e010      	b.n	8013500 <sync_window+0x78>
					wsect += fs->fsize;
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	69db      	ldr	r3, [r3, #28]
 80134e2:	697a      	ldr	r2, [r7, #20]
 80134e4:	4413      	add	r3, r2
 80134e6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	7858      	ldrb	r0, [r3, #1]
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80134f2:	2301      	movs	r3, #1
 80134f4:	697a      	ldr	r2, [r7, #20]
 80134f6:	f7ff ff17 	bl	8013328 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80134fa:	693b      	ldr	r3, [r7, #16]
 80134fc:	3b01      	subs	r3, #1
 80134fe:	613b      	str	r3, [r7, #16]
 8013500:	693b      	ldr	r3, [r7, #16]
 8013502:	2b01      	cmp	r3, #1
 8013504:	d8eb      	bhi.n	80134de <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8013506:	7bfb      	ldrb	r3, [r7, #15]
}
 8013508:	4618      	mov	r0, r3
 801350a:	3718      	adds	r7, #24
 801350c:	46bd      	mov	sp, r7
 801350e:	bd80      	pop	{r7, pc}

08013510 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8013510:	b580      	push	{r7, lr}
 8013512:	b084      	sub	sp, #16
 8013514:	af00      	add	r7, sp, #0
 8013516:	6078      	str	r0, [r7, #4]
 8013518:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801351a:	2300      	movs	r3, #0
 801351c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013522:	683a      	ldr	r2, [r7, #0]
 8013524:	429a      	cmp	r2, r3
 8013526:	d01b      	beq.n	8013560 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8013528:	6878      	ldr	r0, [r7, #4]
 801352a:	f7ff ffad 	bl	8013488 <sync_window>
 801352e:	4603      	mov	r3, r0
 8013530:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8013532:	7bfb      	ldrb	r3, [r7, #15]
 8013534:	2b00      	cmp	r3, #0
 8013536:	d113      	bne.n	8013560 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	7858      	ldrb	r0, [r3, #1]
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8013542:	2301      	movs	r3, #1
 8013544:	683a      	ldr	r2, [r7, #0]
 8013546:	f7ff fecf 	bl	80132e8 <disk_read>
 801354a:	4603      	mov	r3, r0
 801354c:	2b00      	cmp	r3, #0
 801354e:	d004      	beq.n	801355a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8013550:	f04f 33ff 	mov.w	r3, #4294967295
 8013554:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8013556:	2301      	movs	r3, #1
 8013558:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	683a      	ldr	r2, [r7, #0]
 801355e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8013560:	7bfb      	ldrb	r3, [r7, #15]
}
 8013562:	4618      	mov	r0, r3
 8013564:	3710      	adds	r7, #16
 8013566:	46bd      	mov	sp, r7
 8013568:	bd80      	pop	{r7, pc}

0801356a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801356a:	b480      	push	{r7}
 801356c:	b087      	sub	sp, #28
 801356e:	af00      	add	r7, sp, #0
 8013570:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8013572:	f04f 33ff 	mov.w	r3, #4294967295
 8013576:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	2b00      	cmp	r3, #0
 801357e:	d031      	beq.n	80135e4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	681b      	ldr	r3, [r3, #0]
 8013584:	617b      	str	r3, [r7, #20]
 8013586:	e002      	b.n	801358e <get_ldnumber+0x24>
 8013588:	697b      	ldr	r3, [r7, #20]
 801358a:	3301      	adds	r3, #1
 801358c:	617b      	str	r3, [r7, #20]
 801358e:	697b      	ldr	r3, [r7, #20]
 8013590:	781b      	ldrb	r3, [r3, #0]
 8013592:	2b20      	cmp	r3, #32
 8013594:	d903      	bls.n	801359e <get_ldnumber+0x34>
 8013596:	697b      	ldr	r3, [r7, #20]
 8013598:	781b      	ldrb	r3, [r3, #0]
 801359a:	2b3a      	cmp	r3, #58	; 0x3a
 801359c:	d1f4      	bne.n	8013588 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801359e:	697b      	ldr	r3, [r7, #20]
 80135a0:	781b      	ldrb	r3, [r3, #0]
 80135a2:	2b3a      	cmp	r3, #58	; 0x3a
 80135a4:	d11c      	bne.n	80135e0 <get_ldnumber+0x76>
			tp = *path;
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	681b      	ldr	r3, [r3, #0]
 80135aa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	1c5a      	adds	r2, r3, #1
 80135b0:	60fa      	str	r2, [r7, #12]
 80135b2:	781b      	ldrb	r3, [r3, #0]
 80135b4:	3b30      	subs	r3, #48	; 0x30
 80135b6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80135b8:	68bb      	ldr	r3, [r7, #8]
 80135ba:	2b09      	cmp	r3, #9
 80135bc:	d80e      	bhi.n	80135dc <get_ldnumber+0x72>
 80135be:	68fa      	ldr	r2, [r7, #12]
 80135c0:	697b      	ldr	r3, [r7, #20]
 80135c2:	429a      	cmp	r2, r3
 80135c4:	d10a      	bne.n	80135dc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80135c6:	68bb      	ldr	r3, [r7, #8]
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d107      	bne.n	80135dc <get_ldnumber+0x72>
					vol = (int)i;
 80135cc:	68bb      	ldr	r3, [r7, #8]
 80135ce:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80135d0:	697b      	ldr	r3, [r7, #20]
 80135d2:	3301      	adds	r3, #1
 80135d4:	617b      	str	r3, [r7, #20]
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	697a      	ldr	r2, [r7, #20]
 80135da:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80135dc:	693b      	ldr	r3, [r7, #16]
 80135de:	e002      	b.n	80135e6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80135e0:	2300      	movs	r3, #0
 80135e2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80135e4:	693b      	ldr	r3, [r7, #16]
}
 80135e6:	4618      	mov	r0, r3
 80135e8:	371c      	adds	r7, #28
 80135ea:	46bd      	mov	sp, r7
 80135ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135f0:	4770      	bx	lr
	...

080135f4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80135f4:	b580      	push	{r7, lr}
 80135f6:	b082      	sub	sp, #8
 80135f8:	af00      	add	r7, sp, #0
 80135fa:	6078      	str	r0, [r7, #4]
 80135fc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	2200      	movs	r2, #0
 8013602:	70da      	strb	r2, [r3, #3]
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	f04f 32ff 	mov.w	r2, #4294967295
 801360a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801360c:	6839      	ldr	r1, [r7, #0]
 801360e:	6878      	ldr	r0, [r7, #4]
 8013610:	f7ff ff7e 	bl	8013510 <move_window>
 8013614:	4603      	mov	r3, r0
 8013616:	2b00      	cmp	r3, #0
 8013618:	d001      	beq.n	801361e <check_fs+0x2a>
 801361a:	2304      	movs	r3, #4
 801361c:	e038      	b.n	8013690 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	3334      	adds	r3, #52	; 0x34
 8013622:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013626:	4618      	mov	r0, r3
 8013628:	f7ff fe9e 	bl	8013368 <ld_word>
 801362c:	4603      	mov	r3, r0
 801362e:	461a      	mov	r2, r3
 8013630:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8013634:	429a      	cmp	r2, r3
 8013636:	d001      	beq.n	801363c <check_fs+0x48>
 8013638:	2303      	movs	r3, #3
 801363a:	e029      	b.n	8013690 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013642:	2be9      	cmp	r3, #233	; 0xe9
 8013644:	d009      	beq.n	801365a <check_fs+0x66>
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801364c:	2beb      	cmp	r3, #235	; 0xeb
 801364e:	d11e      	bne.n	801368e <check_fs+0x9a>
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8013656:	2b90      	cmp	r3, #144	; 0x90
 8013658:	d119      	bne.n	801368e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	3334      	adds	r3, #52	; 0x34
 801365e:	3336      	adds	r3, #54	; 0x36
 8013660:	4618      	mov	r0, r3
 8013662:	f7ff fe99 	bl	8013398 <ld_dword>
 8013666:	4603      	mov	r3, r0
 8013668:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801366c:	4a0a      	ldr	r2, [pc, #40]	; (8013698 <check_fs+0xa4>)
 801366e:	4293      	cmp	r3, r2
 8013670:	d101      	bne.n	8013676 <check_fs+0x82>
 8013672:	2300      	movs	r3, #0
 8013674:	e00c      	b.n	8013690 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	3334      	adds	r3, #52	; 0x34
 801367a:	3352      	adds	r3, #82	; 0x52
 801367c:	4618      	mov	r0, r3
 801367e:	f7ff fe8b 	bl	8013398 <ld_dword>
 8013682:	4603      	mov	r3, r0
 8013684:	4a05      	ldr	r2, [pc, #20]	; (801369c <check_fs+0xa8>)
 8013686:	4293      	cmp	r3, r2
 8013688:	d101      	bne.n	801368e <check_fs+0x9a>
 801368a:	2300      	movs	r3, #0
 801368c:	e000      	b.n	8013690 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801368e:	2302      	movs	r3, #2
}
 8013690:	4618      	mov	r0, r3
 8013692:	3708      	adds	r7, #8
 8013694:	46bd      	mov	sp, r7
 8013696:	bd80      	pop	{r7, pc}
 8013698:	00544146 	.word	0x00544146
 801369c:	33544146 	.word	0x33544146

080136a0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80136a0:	b580      	push	{r7, lr}
 80136a2:	b096      	sub	sp, #88	; 0x58
 80136a4:	af00      	add	r7, sp, #0
 80136a6:	60f8      	str	r0, [r7, #12]
 80136a8:	60b9      	str	r1, [r7, #8]
 80136aa:	4613      	mov	r3, r2
 80136ac:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80136ae:	68bb      	ldr	r3, [r7, #8]
 80136b0:	2200      	movs	r2, #0
 80136b2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80136b4:	68f8      	ldr	r0, [r7, #12]
 80136b6:	f7ff ff58 	bl	801356a <get_ldnumber>
 80136ba:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80136bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80136be:	2b00      	cmp	r3, #0
 80136c0:	da01      	bge.n	80136c6 <find_volume+0x26>
 80136c2:	230b      	movs	r3, #11
 80136c4:	e235      	b.n	8013b32 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80136c6:	4aa5      	ldr	r2, [pc, #660]	; (801395c <find_volume+0x2bc>)
 80136c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80136ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80136ce:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80136d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d101      	bne.n	80136da <find_volume+0x3a>
 80136d6:	230c      	movs	r3, #12
 80136d8:	e22b      	b.n	8013b32 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 80136da:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80136dc:	f7ff fe7f 	bl	80133de <lock_fs>
 80136e0:	4603      	mov	r3, r0
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d101      	bne.n	80136ea <find_volume+0x4a>
 80136e6:	230f      	movs	r3, #15
 80136e8:	e223      	b.n	8013b32 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 80136ea:	68bb      	ldr	r3, [r7, #8]
 80136ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80136ee:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80136f0:	79fb      	ldrb	r3, [r7, #7]
 80136f2:	f023 0301 	bic.w	r3, r3, #1
 80136f6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80136f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136fa:	781b      	ldrb	r3, [r3, #0]
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d01a      	beq.n	8013736 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8013700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013702:	785b      	ldrb	r3, [r3, #1]
 8013704:	4618      	mov	r0, r3
 8013706:	f7ff fdaf 	bl	8013268 <disk_status>
 801370a:	4603      	mov	r3, r0
 801370c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8013710:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013714:	f003 0301 	and.w	r3, r3, #1
 8013718:	2b00      	cmp	r3, #0
 801371a:	d10c      	bne.n	8013736 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801371c:	79fb      	ldrb	r3, [r7, #7]
 801371e:	2b00      	cmp	r3, #0
 8013720:	d007      	beq.n	8013732 <find_volume+0x92>
 8013722:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013726:	f003 0304 	and.w	r3, r3, #4
 801372a:	2b00      	cmp	r3, #0
 801372c:	d001      	beq.n	8013732 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 801372e:	230a      	movs	r3, #10
 8013730:	e1ff      	b.n	8013b32 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 8013732:	2300      	movs	r3, #0
 8013734:	e1fd      	b.n	8013b32 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8013736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013738:	2200      	movs	r2, #0
 801373a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801373c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801373e:	b2da      	uxtb	r2, r3
 8013740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013742:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8013744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013746:	785b      	ldrb	r3, [r3, #1]
 8013748:	4618      	mov	r0, r3
 801374a:	f7ff fda7 	bl	801329c <disk_initialize>
 801374e:	4603      	mov	r3, r0
 8013750:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8013754:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013758:	f003 0301 	and.w	r3, r3, #1
 801375c:	2b00      	cmp	r3, #0
 801375e:	d001      	beq.n	8013764 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8013760:	2303      	movs	r3, #3
 8013762:	e1e6      	b.n	8013b32 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8013764:	79fb      	ldrb	r3, [r7, #7]
 8013766:	2b00      	cmp	r3, #0
 8013768:	d007      	beq.n	801377a <find_volume+0xda>
 801376a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801376e:	f003 0304 	and.w	r3, r3, #4
 8013772:	2b00      	cmp	r3, #0
 8013774:	d001      	beq.n	801377a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8013776:	230a      	movs	r3, #10
 8013778:	e1db      	b.n	8013b32 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801377a:	2300      	movs	r3, #0
 801377c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801377e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013780:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013782:	f7ff ff37 	bl	80135f4 <check_fs>
 8013786:	4603      	mov	r3, r0
 8013788:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801378c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013790:	2b02      	cmp	r3, #2
 8013792:	d149      	bne.n	8013828 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013794:	2300      	movs	r3, #0
 8013796:	643b      	str	r3, [r7, #64]	; 0x40
 8013798:	e01e      	b.n	80137d8 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801379a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801379c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80137a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80137a2:	011b      	lsls	r3, r3, #4
 80137a4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80137a8:	4413      	add	r3, r2
 80137aa:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80137ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137ae:	3304      	adds	r3, #4
 80137b0:	781b      	ldrb	r3, [r3, #0]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d006      	beq.n	80137c4 <find_volume+0x124>
 80137b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137b8:	3308      	adds	r3, #8
 80137ba:	4618      	mov	r0, r3
 80137bc:	f7ff fdec 	bl	8013398 <ld_dword>
 80137c0:	4602      	mov	r2, r0
 80137c2:	e000      	b.n	80137c6 <find_volume+0x126>
 80137c4:	2200      	movs	r2, #0
 80137c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80137c8:	009b      	lsls	r3, r3, #2
 80137ca:	3358      	adds	r3, #88	; 0x58
 80137cc:	443b      	add	r3, r7
 80137ce:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80137d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80137d4:	3301      	adds	r3, #1
 80137d6:	643b      	str	r3, [r7, #64]	; 0x40
 80137d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80137da:	2b03      	cmp	r3, #3
 80137dc:	d9dd      	bls.n	801379a <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80137de:	2300      	movs	r3, #0
 80137e0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80137e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d002      	beq.n	80137ee <find_volume+0x14e>
 80137e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80137ea:	3b01      	subs	r3, #1
 80137ec:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80137ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80137f0:	009b      	lsls	r3, r3, #2
 80137f2:	3358      	adds	r3, #88	; 0x58
 80137f4:	443b      	add	r3, r7
 80137f6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80137fa:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80137fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d005      	beq.n	801380e <find_volume+0x16e>
 8013802:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013804:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013806:	f7ff fef5 	bl	80135f4 <check_fs>
 801380a:	4603      	mov	r3, r0
 801380c:	e000      	b.n	8013810 <find_volume+0x170>
 801380e:	2303      	movs	r3, #3
 8013810:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8013814:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013818:	2b01      	cmp	r3, #1
 801381a:	d905      	bls.n	8013828 <find_volume+0x188>
 801381c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801381e:	3301      	adds	r3, #1
 8013820:	643b      	str	r3, [r7, #64]	; 0x40
 8013822:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013824:	2b03      	cmp	r3, #3
 8013826:	d9e2      	bls.n	80137ee <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8013828:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801382c:	2b04      	cmp	r3, #4
 801382e:	d101      	bne.n	8013834 <find_volume+0x194>
 8013830:	2301      	movs	r3, #1
 8013832:	e17e      	b.n	8013b32 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8013834:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013838:	2b01      	cmp	r3, #1
 801383a:	d901      	bls.n	8013840 <find_volume+0x1a0>
 801383c:	230d      	movs	r3, #13
 801383e:	e178      	b.n	8013b32 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8013840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013842:	3334      	adds	r3, #52	; 0x34
 8013844:	330b      	adds	r3, #11
 8013846:	4618      	mov	r0, r3
 8013848:	f7ff fd8e 	bl	8013368 <ld_word>
 801384c:	4603      	mov	r3, r0
 801384e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013852:	d001      	beq.n	8013858 <find_volume+0x1b8>
 8013854:	230d      	movs	r3, #13
 8013856:	e16c      	b.n	8013b32 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8013858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801385a:	3334      	adds	r3, #52	; 0x34
 801385c:	3316      	adds	r3, #22
 801385e:	4618      	mov	r0, r3
 8013860:	f7ff fd82 	bl	8013368 <ld_word>
 8013864:	4603      	mov	r3, r0
 8013866:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8013868:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801386a:	2b00      	cmp	r3, #0
 801386c:	d106      	bne.n	801387c <find_volume+0x1dc>
 801386e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013870:	3334      	adds	r3, #52	; 0x34
 8013872:	3324      	adds	r3, #36	; 0x24
 8013874:	4618      	mov	r0, r3
 8013876:	f7ff fd8f 	bl	8013398 <ld_dword>
 801387a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 801387c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801387e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013880:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8013882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013884:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8013888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801388a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801388c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801388e:	789b      	ldrb	r3, [r3, #2]
 8013890:	2b01      	cmp	r3, #1
 8013892:	d005      	beq.n	80138a0 <find_volume+0x200>
 8013894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013896:	789b      	ldrb	r3, [r3, #2]
 8013898:	2b02      	cmp	r3, #2
 801389a:	d001      	beq.n	80138a0 <find_volume+0x200>
 801389c:	230d      	movs	r3, #13
 801389e:	e148      	b.n	8013b32 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80138a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138a2:	789b      	ldrb	r3, [r3, #2]
 80138a4:	461a      	mov	r2, r3
 80138a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80138a8:	fb02 f303 	mul.w	r3, r2, r3
 80138ac:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80138ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80138b4:	b29a      	uxth	r2, r3
 80138b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138b8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80138ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138bc:	895b      	ldrh	r3, [r3, #10]
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d008      	beq.n	80138d4 <find_volume+0x234>
 80138c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138c4:	895b      	ldrh	r3, [r3, #10]
 80138c6:	461a      	mov	r2, r3
 80138c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138ca:	895b      	ldrh	r3, [r3, #10]
 80138cc:	3b01      	subs	r3, #1
 80138ce:	4013      	ands	r3, r2
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d001      	beq.n	80138d8 <find_volume+0x238>
 80138d4:	230d      	movs	r3, #13
 80138d6:	e12c      	b.n	8013b32 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80138d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138da:	3334      	adds	r3, #52	; 0x34
 80138dc:	3311      	adds	r3, #17
 80138de:	4618      	mov	r0, r3
 80138e0:	f7ff fd42 	bl	8013368 <ld_word>
 80138e4:	4603      	mov	r3, r0
 80138e6:	461a      	mov	r2, r3
 80138e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138ea:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80138ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138ee:	891b      	ldrh	r3, [r3, #8]
 80138f0:	f003 030f 	and.w	r3, r3, #15
 80138f4:	b29b      	uxth	r3, r3
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d001      	beq.n	80138fe <find_volume+0x25e>
 80138fa:	230d      	movs	r3, #13
 80138fc:	e119      	b.n	8013b32 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80138fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013900:	3334      	adds	r3, #52	; 0x34
 8013902:	3313      	adds	r3, #19
 8013904:	4618      	mov	r0, r3
 8013906:	f7ff fd2f 	bl	8013368 <ld_word>
 801390a:	4603      	mov	r3, r0
 801390c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801390e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013910:	2b00      	cmp	r3, #0
 8013912:	d106      	bne.n	8013922 <find_volume+0x282>
 8013914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013916:	3334      	adds	r3, #52	; 0x34
 8013918:	3320      	adds	r3, #32
 801391a:	4618      	mov	r0, r3
 801391c:	f7ff fd3c 	bl	8013398 <ld_dword>
 8013920:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8013922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013924:	3334      	adds	r3, #52	; 0x34
 8013926:	330e      	adds	r3, #14
 8013928:	4618      	mov	r0, r3
 801392a:	f7ff fd1d 	bl	8013368 <ld_word>
 801392e:	4603      	mov	r3, r0
 8013930:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8013932:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013934:	2b00      	cmp	r3, #0
 8013936:	d101      	bne.n	801393c <find_volume+0x29c>
 8013938:	230d      	movs	r3, #13
 801393a:	e0fa      	b.n	8013b32 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801393c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801393e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013940:	4413      	add	r3, r2
 8013942:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013944:	8912      	ldrh	r2, [r2, #8]
 8013946:	0912      	lsrs	r2, r2, #4
 8013948:	b292      	uxth	r2, r2
 801394a:	4413      	add	r3, r2
 801394c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801394e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013952:	429a      	cmp	r2, r3
 8013954:	d204      	bcs.n	8013960 <find_volume+0x2c0>
 8013956:	230d      	movs	r3, #13
 8013958:	e0eb      	b.n	8013b32 <find_volume+0x492>
 801395a:	bf00      	nop
 801395c:	240023a8 	.word	0x240023a8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8013960:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013964:	1ad3      	subs	r3, r2, r3
 8013966:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013968:	8952      	ldrh	r2, [r2, #10]
 801396a:	fbb3 f3f2 	udiv	r3, r3, r2
 801396e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8013970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013972:	2b00      	cmp	r3, #0
 8013974:	d101      	bne.n	801397a <find_volume+0x2da>
 8013976:	230d      	movs	r3, #13
 8013978:	e0db      	b.n	8013b32 <find_volume+0x492>
		fmt = FS_FAT32;
 801397a:	2303      	movs	r3, #3
 801397c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8013980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013982:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8013986:	4293      	cmp	r3, r2
 8013988:	d802      	bhi.n	8013990 <find_volume+0x2f0>
 801398a:	2302      	movs	r3, #2
 801398c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8013990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013992:	f640 72f5 	movw	r2, #4085	; 0xff5
 8013996:	4293      	cmp	r3, r2
 8013998:	d802      	bhi.n	80139a0 <find_volume+0x300>
 801399a:	2301      	movs	r3, #1
 801399c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80139a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139a2:	1c9a      	adds	r2, r3, #2
 80139a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139a6:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80139a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80139ac:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80139ae:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80139b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139b2:	441a      	add	r2, r3
 80139b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139b6:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80139b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80139ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139bc:	441a      	add	r2, r3
 80139be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139c0:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80139c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80139c6:	2b03      	cmp	r3, #3
 80139c8:	d11e      	bne.n	8013a08 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80139ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139cc:	3334      	adds	r3, #52	; 0x34
 80139ce:	332a      	adds	r3, #42	; 0x2a
 80139d0:	4618      	mov	r0, r3
 80139d2:	f7ff fcc9 	bl	8013368 <ld_word>
 80139d6:	4603      	mov	r3, r0
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d001      	beq.n	80139e0 <find_volume+0x340>
 80139dc:	230d      	movs	r3, #13
 80139de:	e0a8      	b.n	8013b32 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80139e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139e2:	891b      	ldrh	r3, [r3, #8]
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d001      	beq.n	80139ec <find_volume+0x34c>
 80139e8:	230d      	movs	r3, #13
 80139ea:	e0a2      	b.n	8013b32 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80139ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139ee:	3334      	adds	r3, #52	; 0x34
 80139f0:	332c      	adds	r3, #44	; 0x2c
 80139f2:	4618      	mov	r0, r3
 80139f4:	f7ff fcd0 	bl	8013398 <ld_dword>
 80139f8:	4602      	mov	r2, r0
 80139fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139fc:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80139fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a00:	699b      	ldr	r3, [r3, #24]
 8013a02:	009b      	lsls	r3, r3, #2
 8013a04:	647b      	str	r3, [r7, #68]	; 0x44
 8013a06:	e01f      	b.n	8013a48 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8013a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a0a:	891b      	ldrh	r3, [r3, #8]
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d101      	bne.n	8013a14 <find_volume+0x374>
 8013a10:	230d      	movs	r3, #13
 8013a12:	e08e      	b.n	8013b32 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8013a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013a18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a1a:	441a      	add	r2, r3
 8013a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a1e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013a20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013a24:	2b02      	cmp	r3, #2
 8013a26:	d103      	bne.n	8013a30 <find_volume+0x390>
 8013a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a2a:	699b      	ldr	r3, [r3, #24]
 8013a2c:	005b      	lsls	r3, r3, #1
 8013a2e:	e00a      	b.n	8013a46 <find_volume+0x3a6>
 8013a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a32:	699a      	ldr	r2, [r3, #24]
 8013a34:	4613      	mov	r3, r2
 8013a36:	005b      	lsls	r3, r3, #1
 8013a38:	4413      	add	r3, r2
 8013a3a:	085a      	lsrs	r2, r3, #1
 8013a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a3e:	699b      	ldr	r3, [r3, #24]
 8013a40:	f003 0301 	and.w	r3, r3, #1
 8013a44:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8013a46:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8013a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a4a:	69da      	ldr	r2, [r3, #28]
 8013a4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013a4e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8013a52:	0a5b      	lsrs	r3, r3, #9
 8013a54:	429a      	cmp	r2, r3
 8013a56:	d201      	bcs.n	8013a5c <find_volume+0x3bc>
 8013a58:	230d      	movs	r3, #13
 8013a5a:	e06a      	b.n	8013b32 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a5e:	f04f 32ff 	mov.w	r2, #4294967295
 8013a62:	615a      	str	r2, [r3, #20]
 8013a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a66:	695a      	ldr	r2, [r3, #20]
 8013a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a6a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8013a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a6e:	2280      	movs	r2, #128	; 0x80
 8013a70:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8013a72:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013a76:	2b03      	cmp	r3, #3
 8013a78:	d149      	bne.n	8013b0e <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8013a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a7c:	3334      	adds	r3, #52	; 0x34
 8013a7e:	3330      	adds	r3, #48	; 0x30
 8013a80:	4618      	mov	r0, r3
 8013a82:	f7ff fc71 	bl	8013368 <ld_word>
 8013a86:	4603      	mov	r3, r0
 8013a88:	2b01      	cmp	r3, #1
 8013a8a:	d140      	bne.n	8013b0e <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8013a8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a8e:	3301      	adds	r3, #1
 8013a90:	4619      	mov	r1, r3
 8013a92:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013a94:	f7ff fd3c 	bl	8013510 <move_window>
 8013a98:	4603      	mov	r3, r0
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d137      	bne.n	8013b0e <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 8013a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013aa0:	2200      	movs	r2, #0
 8013aa2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8013aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013aa6:	3334      	adds	r3, #52	; 0x34
 8013aa8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013aac:	4618      	mov	r0, r3
 8013aae:	f7ff fc5b 	bl	8013368 <ld_word>
 8013ab2:	4603      	mov	r3, r0
 8013ab4:	461a      	mov	r2, r3
 8013ab6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8013aba:	429a      	cmp	r2, r3
 8013abc:	d127      	bne.n	8013b0e <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8013abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ac0:	3334      	adds	r3, #52	; 0x34
 8013ac2:	4618      	mov	r0, r3
 8013ac4:	f7ff fc68 	bl	8013398 <ld_dword>
 8013ac8:	4603      	mov	r3, r0
 8013aca:	4a1c      	ldr	r2, [pc, #112]	; (8013b3c <find_volume+0x49c>)
 8013acc:	4293      	cmp	r3, r2
 8013ace:	d11e      	bne.n	8013b0e <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8013ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ad2:	3334      	adds	r3, #52	; 0x34
 8013ad4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8013ad8:	4618      	mov	r0, r3
 8013ada:	f7ff fc5d 	bl	8013398 <ld_dword>
 8013ade:	4603      	mov	r3, r0
 8013ae0:	4a17      	ldr	r2, [pc, #92]	; (8013b40 <find_volume+0x4a0>)
 8013ae2:	4293      	cmp	r3, r2
 8013ae4:	d113      	bne.n	8013b0e <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8013ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ae8:	3334      	adds	r3, #52	; 0x34
 8013aea:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8013aee:	4618      	mov	r0, r3
 8013af0:	f7ff fc52 	bl	8013398 <ld_dword>
 8013af4:	4602      	mov	r2, r0
 8013af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013af8:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8013afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013afc:	3334      	adds	r3, #52	; 0x34
 8013afe:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8013b02:	4618      	mov	r0, r3
 8013b04:	f7ff fc48 	bl	8013398 <ld_dword>
 8013b08:	4602      	mov	r2, r0
 8013b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b0c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8013b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b10:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8013b14:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8013b16:	4b0b      	ldr	r3, [pc, #44]	; (8013b44 <find_volume+0x4a4>)
 8013b18:	881b      	ldrh	r3, [r3, #0]
 8013b1a:	3301      	adds	r3, #1
 8013b1c:	b29a      	uxth	r2, r3
 8013b1e:	4b09      	ldr	r3, [pc, #36]	; (8013b44 <find_volume+0x4a4>)
 8013b20:	801a      	strh	r2, [r3, #0]
 8013b22:	4b08      	ldr	r3, [pc, #32]	; (8013b44 <find_volume+0x4a4>)
 8013b24:	881a      	ldrh	r2, [r3, #0]
 8013b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b28:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8013b2a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013b2c:	f7ff fc88 	bl	8013440 <clear_lock>
#endif
	return FR_OK;
 8013b30:	2300      	movs	r3, #0
}
 8013b32:	4618      	mov	r0, r3
 8013b34:	3758      	adds	r7, #88	; 0x58
 8013b36:	46bd      	mov	sp, r7
 8013b38:	bd80      	pop	{r7, pc}
 8013b3a:	bf00      	nop
 8013b3c:	41615252 	.word	0x41615252
 8013b40:	61417272 	.word	0x61417272
 8013b44:	240023ac 	.word	0x240023ac

08013b48 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8013b48:	b580      	push	{r7, lr}
 8013b4a:	b088      	sub	sp, #32
 8013b4c:	af00      	add	r7, sp, #0
 8013b4e:	60f8      	str	r0, [r7, #12]
 8013b50:	60b9      	str	r1, [r7, #8]
 8013b52:	4613      	mov	r3, r2
 8013b54:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8013b56:	68bb      	ldr	r3, [r7, #8]
 8013b58:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8013b5a:	f107 0310 	add.w	r3, r7, #16
 8013b5e:	4618      	mov	r0, r3
 8013b60:	f7ff fd03 	bl	801356a <get_ldnumber>
 8013b64:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8013b66:	69fb      	ldr	r3, [r7, #28]
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	da01      	bge.n	8013b70 <f_mount+0x28>
 8013b6c:	230b      	movs	r3, #11
 8013b6e:	e048      	b.n	8013c02 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013b70:	4a26      	ldr	r2, [pc, #152]	; (8013c0c <f_mount+0xc4>)
 8013b72:	69fb      	ldr	r3, [r7, #28]
 8013b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013b78:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8013b7a:	69bb      	ldr	r3, [r7, #24]
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d00f      	beq.n	8013ba0 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8013b80:	69b8      	ldr	r0, [r7, #24]
 8013b82:	f7ff fc5d 	bl	8013440 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8013b86:	69bb      	ldr	r3, [r7, #24]
 8013b88:	68db      	ldr	r3, [r3, #12]
 8013b8a:	4618      	mov	r0, r3
 8013b8c:	f000 f8b6 	bl	8013cfc <ff_del_syncobj>
 8013b90:	4603      	mov	r3, r0
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d101      	bne.n	8013b9a <f_mount+0x52>
 8013b96:	2302      	movs	r3, #2
 8013b98:	e033      	b.n	8013c02 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8013b9a:	69bb      	ldr	r3, [r7, #24]
 8013b9c:	2200      	movs	r2, #0
 8013b9e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013ba0:	68fb      	ldr	r3, [r7, #12]
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d00f      	beq.n	8013bc6 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8013ba6:	68fb      	ldr	r3, [r7, #12]
 8013ba8:	2200      	movs	r2, #0
 8013baa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8013bac:	69fb      	ldr	r3, [r7, #28]
 8013bae:	b2da      	uxtb	r2, r3
 8013bb0:	68fb      	ldr	r3, [r7, #12]
 8013bb2:	330c      	adds	r3, #12
 8013bb4:	4619      	mov	r1, r3
 8013bb6:	4610      	mov	r0, r2
 8013bb8:	f000 f885 	bl	8013cc6 <ff_cre_syncobj>
 8013bbc:	4603      	mov	r3, r0
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d101      	bne.n	8013bc6 <f_mount+0x7e>
 8013bc2:	2302      	movs	r3, #2
 8013bc4:	e01d      	b.n	8013c02 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8013bc6:	68fa      	ldr	r2, [r7, #12]
 8013bc8:	4910      	ldr	r1, [pc, #64]	; (8013c0c <f_mount+0xc4>)
 8013bca:	69fb      	ldr	r3, [r7, #28]
 8013bcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8013bd0:	68fb      	ldr	r3, [r7, #12]
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d002      	beq.n	8013bdc <f_mount+0x94>
 8013bd6:	79fb      	ldrb	r3, [r7, #7]
 8013bd8:	2b01      	cmp	r3, #1
 8013bda:	d001      	beq.n	8013be0 <f_mount+0x98>
 8013bdc:	2300      	movs	r3, #0
 8013bde:	e010      	b.n	8013c02 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8013be0:	f107 010c 	add.w	r1, r7, #12
 8013be4:	f107 0308 	add.w	r3, r7, #8
 8013be8:	2200      	movs	r2, #0
 8013bea:	4618      	mov	r0, r3
 8013bec:	f7ff fd58 	bl	80136a0 <find_volume>
 8013bf0:	4603      	mov	r3, r0
 8013bf2:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	7dfa      	ldrb	r2, [r7, #23]
 8013bf8:	4611      	mov	r1, r2
 8013bfa:	4618      	mov	r0, r3
 8013bfc:	f7ff fc05 	bl	801340a <unlock_fs>
 8013c00:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c02:	4618      	mov	r0, r3
 8013c04:	3720      	adds	r7, #32
 8013c06:	46bd      	mov	sp, r7
 8013c08:	bd80      	pop	{r7, pc}
 8013c0a:	bf00      	nop
 8013c0c:	240023a8 	.word	0x240023a8

08013c10 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8013c10:	b480      	push	{r7}
 8013c12:	b087      	sub	sp, #28
 8013c14:	af00      	add	r7, sp, #0
 8013c16:	60f8      	str	r0, [r7, #12]
 8013c18:	60b9      	str	r1, [r7, #8]
 8013c1a:	4613      	mov	r3, r2
 8013c1c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8013c1e:	2301      	movs	r3, #1
 8013c20:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8013c22:	2300      	movs	r3, #0
 8013c24:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8013c26:	4b1f      	ldr	r3, [pc, #124]	; (8013ca4 <FATFS_LinkDriverEx+0x94>)
 8013c28:	7a5b      	ldrb	r3, [r3, #9]
 8013c2a:	b2db      	uxtb	r3, r3
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d131      	bne.n	8013c94 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8013c30:	4b1c      	ldr	r3, [pc, #112]	; (8013ca4 <FATFS_LinkDriverEx+0x94>)
 8013c32:	7a5b      	ldrb	r3, [r3, #9]
 8013c34:	b2db      	uxtb	r3, r3
 8013c36:	461a      	mov	r2, r3
 8013c38:	4b1a      	ldr	r3, [pc, #104]	; (8013ca4 <FATFS_LinkDriverEx+0x94>)
 8013c3a:	2100      	movs	r1, #0
 8013c3c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8013c3e:	4b19      	ldr	r3, [pc, #100]	; (8013ca4 <FATFS_LinkDriverEx+0x94>)
 8013c40:	7a5b      	ldrb	r3, [r3, #9]
 8013c42:	b2db      	uxtb	r3, r3
 8013c44:	4a17      	ldr	r2, [pc, #92]	; (8013ca4 <FATFS_LinkDriverEx+0x94>)
 8013c46:	009b      	lsls	r3, r3, #2
 8013c48:	4413      	add	r3, r2
 8013c4a:	68fa      	ldr	r2, [r7, #12]
 8013c4c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8013c4e:	4b15      	ldr	r3, [pc, #84]	; (8013ca4 <FATFS_LinkDriverEx+0x94>)
 8013c50:	7a5b      	ldrb	r3, [r3, #9]
 8013c52:	b2db      	uxtb	r3, r3
 8013c54:	461a      	mov	r2, r3
 8013c56:	4b13      	ldr	r3, [pc, #76]	; (8013ca4 <FATFS_LinkDriverEx+0x94>)
 8013c58:	4413      	add	r3, r2
 8013c5a:	79fa      	ldrb	r2, [r7, #7]
 8013c5c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8013c5e:	4b11      	ldr	r3, [pc, #68]	; (8013ca4 <FATFS_LinkDriverEx+0x94>)
 8013c60:	7a5b      	ldrb	r3, [r3, #9]
 8013c62:	b2db      	uxtb	r3, r3
 8013c64:	1c5a      	adds	r2, r3, #1
 8013c66:	b2d1      	uxtb	r1, r2
 8013c68:	4a0e      	ldr	r2, [pc, #56]	; (8013ca4 <FATFS_LinkDriverEx+0x94>)
 8013c6a:	7251      	strb	r1, [r2, #9]
 8013c6c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8013c6e:	7dbb      	ldrb	r3, [r7, #22]
 8013c70:	3330      	adds	r3, #48	; 0x30
 8013c72:	b2da      	uxtb	r2, r3
 8013c74:	68bb      	ldr	r3, [r7, #8]
 8013c76:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8013c78:	68bb      	ldr	r3, [r7, #8]
 8013c7a:	3301      	adds	r3, #1
 8013c7c:	223a      	movs	r2, #58	; 0x3a
 8013c7e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8013c80:	68bb      	ldr	r3, [r7, #8]
 8013c82:	3302      	adds	r3, #2
 8013c84:	222f      	movs	r2, #47	; 0x2f
 8013c86:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8013c88:	68bb      	ldr	r3, [r7, #8]
 8013c8a:	3303      	adds	r3, #3
 8013c8c:	2200      	movs	r2, #0
 8013c8e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8013c90:	2300      	movs	r3, #0
 8013c92:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8013c94:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c96:	4618      	mov	r0, r3
 8013c98:	371c      	adds	r7, #28
 8013c9a:	46bd      	mov	sp, r7
 8013c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ca0:	4770      	bx	lr
 8013ca2:	bf00      	nop
 8013ca4:	240023d0 	.word	0x240023d0

08013ca8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8013ca8:	b580      	push	{r7, lr}
 8013caa:	b082      	sub	sp, #8
 8013cac:	af00      	add	r7, sp, #0
 8013cae:	6078      	str	r0, [r7, #4]
 8013cb0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8013cb2:	2200      	movs	r2, #0
 8013cb4:	6839      	ldr	r1, [r7, #0]
 8013cb6:	6878      	ldr	r0, [r7, #4]
 8013cb8:	f7ff ffaa 	bl	8013c10 <FATFS_LinkDriverEx>
 8013cbc:	4603      	mov	r3, r0
}
 8013cbe:	4618      	mov	r0, r3
 8013cc0:	3708      	adds	r7, #8
 8013cc2:	46bd      	mov	sp, r7
 8013cc4:	bd80      	pop	{r7, pc}

08013cc6 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8013cc6:	b580      	push	{r7, lr}
 8013cc8:	b084      	sub	sp, #16
 8013cca:	af00      	add	r7, sp, #0
 8013ccc:	4603      	mov	r3, r0
 8013cce:	6039      	str	r1, [r7, #0]
 8013cd0:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8013cd2:	2200      	movs	r2, #0
 8013cd4:	2101      	movs	r1, #1
 8013cd6:	2001      	movs	r0, #1
 8013cd8:	f000 f9ae 	bl	8014038 <osSemaphoreNew>
 8013cdc:	4602      	mov	r2, r0
 8013cde:	683b      	ldr	r3, [r7, #0]
 8013ce0:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8013ce2:	683b      	ldr	r3, [r7, #0]
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	bf14      	ite	ne
 8013cea:	2301      	movne	r3, #1
 8013cec:	2300      	moveq	r3, #0
 8013cee:	b2db      	uxtb	r3, r3
 8013cf0:	60fb      	str	r3, [r7, #12]

    return ret;
 8013cf2:	68fb      	ldr	r3, [r7, #12]
}
 8013cf4:	4618      	mov	r0, r3
 8013cf6:	3710      	adds	r7, #16
 8013cf8:	46bd      	mov	sp, r7
 8013cfa:	bd80      	pop	{r7, pc}

08013cfc <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8013cfc:	b580      	push	{r7, lr}
 8013cfe:	b082      	sub	sp, #8
 8013d00:	af00      	add	r7, sp, #0
 8013d02:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8013d04:	6878      	ldr	r0, [r7, #4]
 8013d06:	f000 fab7 	bl	8014278 <osSemaphoreDelete>
#endif
    return 1;
 8013d0a:	2301      	movs	r3, #1
}
 8013d0c:	4618      	mov	r0, r3
 8013d0e:	3708      	adds	r7, #8
 8013d10:	46bd      	mov	sp, r7
 8013d12:	bd80      	pop	{r7, pc}

08013d14 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8013d14:	b580      	push	{r7, lr}
 8013d16:	b084      	sub	sp, #16
 8013d18:	af00      	add	r7, sp, #0
 8013d1a:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8013d1c:	2300      	movs	r3, #0
 8013d1e:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8013d20:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8013d24:	6878      	ldr	r0, [r7, #4]
 8013d26:	f000 fa11 	bl	801414c <osSemaphoreAcquire>
 8013d2a:	4603      	mov	r3, r0
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d101      	bne.n	8013d34 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8013d30:	2301      	movs	r3, #1
 8013d32:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8013d34:	68fb      	ldr	r3, [r7, #12]
}
 8013d36:	4618      	mov	r0, r3
 8013d38:	3710      	adds	r7, #16
 8013d3a:	46bd      	mov	sp, r7
 8013d3c:	bd80      	pop	{r7, pc}

08013d3e <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8013d3e:	b580      	push	{r7, lr}
 8013d40:	b082      	sub	sp, #8
 8013d42:	af00      	add	r7, sp, #0
 8013d44:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8013d46:	6878      	ldr	r0, [r7, #4]
 8013d48:	f000 fa52 	bl	80141f0 <osSemaphoreRelease>
#endif
}
 8013d4c:	bf00      	nop
 8013d4e:	3708      	adds	r7, #8
 8013d50:	46bd      	mov	sp, r7
 8013d52:	bd80      	pop	{r7, pc}

08013d54 <__NVIC_SetPriority>:
{
 8013d54:	b480      	push	{r7}
 8013d56:	b083      	sub	sp, #12
 8013d58:	af00      	add	r7, sp, #0
 8013d5a:	4603      	mov	r3, r0
 8013d5c:	6039      	str	r1, [r7, #0]
 8013d5e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8013d60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	db0a      	blt.n	8013d7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013d68:	683b      	ldr	r3, [r7, #0]
 8013d6a:	b2da      	uxtb	r2, r3
 8013d6c:	490c      	ldr	r1, [pc, #48]	; (8013da0 <__NVIC_SetPriority+0x4c>)
 8013d6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013d72:	0112      	lsls	r2, r2, #4
 8013d74:	b2d2      	uxtb	r2, r2
 8013d76:	440b      	add	r3, r1
 8013d78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8013d7c:	e00a      	b.n	8013d94 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013d7e:	683b      	ldr	r3, [r7, #0]
 8013d80:	b2da      	uxtb	r2, r3
 8013d82:	4908      	ldr	r1, [pc, #32]	; (8013da4 <__NVIC_SetPriority+0x50>)
 8013d84:	88fb      	ldrh	r3, [r7, #6]
 8013d86:	f003 030f 	and.w	r3, r3, #15
 8013d8a:	3b04      	subs	r3, #4
 8013d8c:	0112      	lsls	r2, r2, #4
 8013d8e:	b2d2      	uxtb	r2, r2
 8013d90:	440b      	add	r3, r1
 8013d92:	761a      	strb	r2, [r3, #24]
}
 8013d94:	bf00      	nop
 8013d96:	370c      	adds	r7, #12
 8013d98:	46bd      	mov	sp, r7
 8013d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d9e:	4770      	bx	lr
 8013da0:	e000e100 	.word	0xe000e100
 8013da4:	e000ed00 	.word	0xe000ed00

08013da8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8013da8:	b580      	push	{r7, lr}
 8013daa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8013dac:	4b05      	ldr	r3, [pc, #20]	; (8013dc4 <SysTick_Handler+0x1c>)
 8013dae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8013db0:	f002 ff18 	bl	8016be4 <xTaskGetSchedulerState>
 8013db4:	4603      	mov	r3, r0
 8013db6:	2b01      	cmp	r3, #1
 8013db8:	d001      	beq.n	8013dbe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8013dba:	f001 f845 	bl	8014e48 <xPortSysTickHandler>
  }
}
 8013dbe:	bf00      	nop
 8013dc0:	bd80      	pop	{r7, pc}
 8013dc2:	bf00      	nop
 8013dc4:	e000e010 	.word	0xe000e010

08013dc8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8013dc8:	b580      	push	{r7, lr}
 8013dca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8013dcc:	2100      	movs	r1, #0
 8013dce:	f06f 0004 	mvn.w	r0, #4
 8013dd2:	f7ff ffbf 	bl	8013d54 <__NVIC_SetPriority>
#endif
}
 8013dd6:	bf00      	nop
 8013dd8:	bd80      	pop	{r7, pc}
	...

08013ddc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8013ddc:	b480      	push	{r7}
 8013dde:	b083      	sub	sp, #12
 8013de0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013de2:	f3ef 8305 	mrs	r3, IPSR
 8013de6:	603b      	str	r3, [r7, #0]
  return(result);
 8013de8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	d003      	beq.n	8013df6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8013dee:	f06f 0305 	mvn.w	r3, #5
 8013df2:	607b      	str	r3, [r7, #4]
 8013df4:	e00c      	b.n	8013e10 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8013df6:	4b0a      	ldr	r3, [pc, #40]	; (8013e20 <osKernelInitialize+0x44>)
 8013df8:	681b      	ldr	r3, [r3, #0]
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d105      	bne.n	8013e0a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8013dfe:	4b08      	ldr	r3, [pc, #32]	; (8013e20 <osKernelInitialize+0x44>)
 8013e00:	2201      	movs	r2, #1
 8013e02:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8013e04:	2300      	movs	r3, #0
 8013e06:	607b      	str	r3, [r7, #4]
 8013e08:	e002      	b.n	8013e10 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8013e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8013e0e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8013e10:	687b      	ldr	r3, [r7, #4]
}
 8013e12:	4618      	mov	r0, r3
 8013e14:	370c      	adds	r7, #12
 8013e16:	46bd      	mov	sp, r7
 8013e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e1c:	4770      	bx	lr
 8013e1e:	bf00      	nop
 8013e20:	240023dc 	.word	0x240023dc

08013e24 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8013e24:	b580      	push	{r7, lr}
 8013e26:	b082      	sub	sp, #8
 8013e28:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8013e2a:	f002 fedb 	bl	8016be4 <xTaskGetSchedulerState>
 8013e2e:	4603      	mov	r3, r0
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d004      	beq.n	8013e3e <osKernelGetState+0x1a>
 8013e34:	2b02      	cmp	r3, #2
 8013e36:	d105      	bne.n	8013e44 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8013e38:	2302      	movs	r3, #2
 8013e3a:	607b      	str	r3, [r7, #4]
      break;
 8013e3c:	e00c      	b.n	8013e58 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8013e3e:	2303      	movs	r3, #3
 8013e40:	607b      	str	r3, [r7, #4]
      break;
 8013e42:	e009      	b.n	8013e58 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8013e44:	4b07      	ldr	r3, [pc, #28]	; (8013e64 <osKernelGetState+0x40>)
 8013e46:	681b      	ldr	r3, [r3, #0]
 8013e48:	2b01      	cmp	r3, #1
 8013e4a:	d102      	bne.n	8013e52 <osKernelGetState+0x2e>
        state = osKernelReady;
 8013e4c:	2301      	movs	r3, #1
 8013e4e:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8013e50:	e001      	b.n	8013e56 <osKernelGetState+0x32>
        state = osKernelInactive;
 8013e52:	2300      	movs	r3, #0
 8013e54:	607b      	str	r3, [r7, #4]
      break;
 8013e56:	bf00      	nop
  }

  return (state);
 8013e58:	687b      	ldr	r3, [r7, #4]
}
 8013e5a:	4618      	mov	r0, r3
 8013e5c:	3708      	adds	r7, #8
 8013e5e:	46bd      	mov	sp, r7
 8013e60:	bd80      	pop	{r7, pc}
 8013e62:	bf00      	nop
 8013e64:	240023dc 	.word	0x240023dc

08013e68 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8013e68:	b580      	push	{r7, lr}
 8013e6a:	b082      	sub	sp, #8
 8013e6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013e6e:	f3ef 8305 	mrs	r3, IPSR
 8013e72:	603b      	str	r3, [r7, #0]
  return(result);
 8013e74:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d003      	beq.n	8013e82 <osKernelStart+0x1a>
    stat = osErrorISR;
 8013e7a:	f06f 0305 	mvn.w	r3, #5
 8013e7e:	607b      	str	r3, [r7, #4]
 8013e80:	e010      	b.n	8013ea4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8013e82:	4b0b      	ldr	r3, [pc, #44]	; (8013eb0 <osKernelStart+0x48>)
 8013e84:	681b      	ldr	r3, [r3, #0]
 8013e86:	2b01      	cmp	r3, #1
 8013e88:	d109      	bne.n	8013e9e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8013e8a:	f7ff ff9d 	bl	8013dc8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8013e8e:	4b08      	ldr	r3, [pc, #32]	; (8013eb0 <osKernelStart+0x48>)
 8013e90:	2202      	movs	r2, #2
 8013e92:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8013e94:	f002 fa4c 	bl	8016330 <vTaskStartScheduler>
      stat = osOK;
 8013e98:	2300      	movs	r3, #0
 8013e9a:	607b      	str	r3, [r7, #4]
 8013e9c:	e002      	b.n	8013ea4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8013e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8013ea2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8013ea4:	687b      	ldr	r3, [r7, #4]
}
 8013ea6:	4618      	mov	r0, r3
 8013ea8:	3708      	adds	r7, #8
 8013eaa:	46bd      	mov	sp, r7
 8013eac:	bd80      	pop	{r7, pc}
 8013eae:	bf00      	nop
 8013eb0:	240023dc 	.word	0x240023dc

08013eb4 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8013eb4:	b580      	push	{r7, lr}
 8013eb6:	b082      	sub	sp, #8
 8013eb8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013eba:	f3ef 8305 	mrs	r3, IPSR
 8013ebe:	603b      	str	r3, [r7, #0]
  return(result);
 8013ec0:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d003      	beq.n	8013ece <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8013ec6:	f002 fb55 	bl	8016574 <xTaskGetTickCountFromISR>
 8013eca:	6078      	str	r0, [r7, #4]
 8013ecc:	e002      	b.n	8013ed4 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8013ece:	f002 fb41 	bl	8016554 <xTaskGetTickCount>
 8013ed2:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8013ed4:	687b      	ldr	r3, [r7, #4]
}
 8013ed6:	4618      	mov	r0, r3
 8013ed8:	3708      	adds	r7, #8
 8013eda:	46bd      	mov	sp, r7
 8013edc:	bd80      	pop	{r7, pc}

08013ede <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8013ede:	b580      	push	{r7, lr}
 8013ee0:	b08e      	sub	sp, #56	; 0x38
 8013ee2:	af04      	add	r7, sp, #16
 8013ee4:	60f8      	str	r0, [r7, #12]
 8013ee6:	60b9      	str	r1, [r7, #8]
 8013ee8:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8013eea:	2300      	movs	r3, #0
 8013eec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013eee:	f3ef 8305 	mrs	r3, IPSR
 8013ef2:	617b      	str	r3, [r7, #20]
  return(result);
 8013ef4:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d17e      	bne.n	8013ff8 <osThreadNew+0x11a>
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d07b      	beq.n	8013ff8 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8013f00:	2380      	movs	r3, #128	; 0x80
 8013f02:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8013f04:	2318      	movs	r3, #24
 8013f06:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8013f08:	2300      	movs	r3, #0
 8013f0a:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8013f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8013f10:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d045      	beq.n	8013fa4 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	681b      	ldr	r3, [r3, #0]
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d002      	beq.n	8013f26 <osThreadNew+0x48>
        name = attr->name;
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	699b      	ldr	r3, [r3, #24]
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d002      	beq.n	8013f34 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	699b      	ldr	r3, [r3, #24]
 8013f32:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8013f34:	69fb      	ldr	r3, [r7, #28]
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d008      	beq.n	8013f4c <osThreadNew+0x6e>
 8013f3a:	69fb      	ldr	r3, [r7, #28]
 8013f3c:	2b38      	cmp	r3, #56	; 0x38
 8013f3e:	d805      	bhi.n	8013f4c <osThreadNew+0x6e>
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	685b      	ldr	r3, [r3, #4]
 8013f44:	f003 0301 	and.w	r3, r3, #1
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d001      	beq.n	8013f50 <osThreadNew+0x72>
        return (NULL);
 8013f4c:	2300      	movs	r3, #0
 8013f4e:	e054      	b.n	8013ffa <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	695b      	ldr	r3, [r3, #20]
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d003      	beq.n	8013f60 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	695b      	ldr	r3, [r3, #20]
 8013f5c:	089b      	lsrs	r3, r3, #2
 8013f5e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	689b      	ldr	r3, [r3, #8]
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d00e      	beq.n	8013f86 <osThreadNew+0xa8>
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	68db      	ldr	r3, [r3, #12]
 8013f6c:	2b5b      	cmp	r3, #91	; 0x5b
 8013f6e:	d90a      	bls.n	8013f86 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d006      	beq.n	8013f86 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	695b      	ldr	r3, [r3, #20]
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d002      	beq.n	8013f86 <osThreadNew+0xa8>
        mem = 1;
 8013f80:	2301      	movs	r3, #1
 8013f82:	61bb      	str	r3, [r7, #24]
 8013f84:	e010      	b.n	8013fa8 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	689b      	ldr	r3, [r3, #8]
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d10c      	bne.n	8013fa8 <osThreadNew+0xca>
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	68db      	ldr	r3, [r3, #12]
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d108      	bne.n	8013fa8 <osThreadNew+0xca>
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	691b      	ldr	r3, [r3, #16]
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d104      	bne.n	8013fa8 <osThreadNew+0xca>
          mem = 0;
 8013f9e:	2300      	movs	r3, #0
 8013fa0:	61bb      	str	r3, [r7, #24]
 8013fa2:	e001      	b.n	8013fa8 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8013fa4:	2300      	movs	r3, #0
 8013fa6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8013fa8:	69bb      	ldr	r3, [r7, #24]
 8013faa:	2b01      	cmp	r3, #1
 8013fac:	d110      	bne.n	8013fd0 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8013fb2:	687a      	ldr	r2, [r7, #4]
 8013fb4:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8013fb6:	9202      	str	r2, [sp, #8]
 8013fb8:	9301      	str	r3, [sp, #4]
 8013fba:	69fb      	ldr	r3, [r7, #28]
 8013fbc:	9300      	str	r3, [sp, #0]
 8013fbe:	68bb      	ldr	r3, [r7, #8]
 8013fc0:	6a3a      	ldr	r2, [r7, #32]
 8013fc2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013fc4:	68f8      	ldr	r0, [r7, #12]
 8013fc6:	f001 ffdd 	bl	8015f84 <xTaskCreateStatic>
 8013fca:	4603      	mov	r3, r0
 8013fcc:	613b      	str	r3, [r7, #16]
 8013fce:	e013      	b.n	8013ff8 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8013fd0:	69bb      	ldr	r3, [r7, #24]
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d110      	bne.n	8013ff8 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8013fd6:	6a3b      	ldr	r3, [r7, #32]
 8013fd8:	b29a      	uxth	r2, r3
 8013fda:	f107 0310 	add.w	r3, r7, #16
 8013fde:	9301      	str	r3, [sp, #4]
 8013fe0:	69fb      	ldr	r3, [r7, #28]
 8013fe2:	9300      	str	r3, [sp, #0]
 8013fe4:	68bb      	ldr	r3, [r7, #8]
 8013fe6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013fe8:	68f8      	ldr	r0, [r7, #12]
 8013fea:	f002 f828 	bl	801603e <xTaskCreate>
 8013fee:	4603      	mov	r3, r0
 8013ff0:	2b01      	cmp	r3, #1
 8013ff2:	d001      	beq.n	8013ff8 <osThreadNew+0x11a>
            hTask = NULL;
 8013ff4:	2300      	movs	r3, #0
 8013ff6:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8013ff8:	693b      	ldr	r3, [r7, #16]
}
 8013ffa:	4618      	mov	r0, r3
 8013ffc:	3728      	adds	r7, #40	; 0x28
 8013ffe:	46bd      	mov	sp, r7
 8014000:	bd80      	pop	{r7, pc}

08014002 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8014002:	b580      	push	{r7, lr}
 8014004:	b084      	sub	sp, #16
 8014006:	af00      	add	r7, sp, #0
 8014008:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801400a:	f3ef 8305 	mrs	r3, IPSR
 801400e:	60bb      	str	r3, [r7, #8]
  return(result);
 8014010:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014012:	2b00      	cmp	r3, #0
 8014014:	d003      	beq.n	801401e <osDelay+0x1c>
    stat = osErrorISR;
 8014016:	f06f 0305 	mvn.w	r3, #5
 801401a:	60fb      	str	r3, [r7, #12]
 801401c:	e007      	b.n	801402e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 801401e:	2300      	movs	r3, #0
 8014020:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	2b00      	cmp	r3, #0
 8014026:	d002      	beq.n	801402e <osDelay+0x2c>
      vTaskDelay(ticks);
 8014028:	6878      	ldr	r0, [r7, #4]
 801402a:	f002 f94d 	bl	80162c8 <vTaskDelay>
    }
  }

  return (stat);
 801402e:	68fb      	ldr	r3, [r7, #12]
}
 8014030:	4618      	mov	r0, r3
 8014032:	3710      	adds	r7, #16
 8014034:	46bd      	mov	sp, r7
 8014036:	bd80      	pop	{r7, pc}

08014038 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8014038:	b580      	push	{r7, lr}
 801403a:	b08a      	sub	sp, #40	; 0x28
 801403c:	af02      	add	r7, sp, #8
 801403e:	60f8      	str	r0, [r7, #12]
 8014040:	60b9      	str	r1, [r7, #8]
 8014042:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8014044:	2300      	movs	r3, #0
 8014046:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014048:	f3ef 8305 	mrs	r3, IPSR
 801404c:	613b      	str	r3, [r7, #16]
  return(result);
 801404e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8014050:	2b00      	cmp	r3, #0
 8014052:	d175      	bne.n	8014140 <osSemaphoreNew+0x108>
 8014054:	68fb      	ldr	r3, [r7, #12]
 8014056:	2b00      	cmp	r3, #0
 8014058:	d072      	beq.n	8014140 <osSemaphoreNew+0x108>
 801405a:	68ba      	ldr	r2, [r7, #8]
 801405c:	68fb      	ldr	r3, [r7, #12]
 801405e:	429a      	cmp	r2, r3
 8014060:	d86e      	bhi.n	8014140 <osSemaphoreNew+0x108>
    mem = -1;
 8014062:	f04f 33ff 	mov.w	r3, #4294967295
 8014066:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	2b00      	cmp	r3, #0
 801406c:	d015      	beq.n	801409a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	689b      	ldr	r3, [r3, #8]
 8014072:	2b00      	cmp	r3, #0
 8014074:	d006      	beq.n	8014084 <osSemaphoreNew+0x4c>
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	68db      	ldr	r3, [r3, #12]
 801407a:	2b4f      	cmp	r3, #79	; 0x4f
 801407c:	d902      	bls.n	8014084 <osSemaphoreNew+0x4c>
        mem = 1;
 801407e:	2301      	movs	r3, #1
 8014080:	61bb      	str	r3, [r7, #24]
 8014082:	e00c      	b.n	801409e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	689b      	ldr	r3, [r3, #8]
 8014088:	2b00      	cmp	r3, #0
 801408a:	d108      	bne.n	801409e <osSemaphoreNew+0x66>
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	68db      	ldr	r3, [r3, #12]
 8014090:	2b00      	cmp	r3, #0
 8014092:	d104      	bne.n	801409e <osSemaphoreNew+0x66>
          mem = 0;
 8014094:	2300      	movs	r3, #0
 8014096:	61bb      	str	r3, [r7, #24]
 8014098:	e001      	b.n	801409e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 801409a:	2300      	movs	r3, #0
 801409c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 801409e:	69bb      	ldr	r3, [r7, #24]
 80140a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140a4:	d04c      	beq.n	8014140 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80140a6:	68fb      	ldr	r3, [r7, #12]
 80140a8:	2b01      	cmp	r3, #1
 80140aa:	d128      	bne.n	80140fe <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80140ac:	69bb      	ldr	r3, [r7, #24]
 80140ae:	2b01      	cmp	r3, #1
 80140b0:	d10a      	bne.n	80140c8 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	689b      	ldr	r3, [r3, #8]
 80140b6:	2203      	movs	r2, #3
 80140b8:	9200      	str	r2, [sp, #0]
 80140ba:	2200      	movs	r2, #0
 80140bc:	2100      	movs	r1, #0
 80140be:	2001      	movs	r0, #1
 80140c0:	f000 ffba 	bl	8015038 <xQueueGenericCreateStatic>
 80140c4:	61f8      	str	r0, [r7, #28]
 80140c6:	e005      	b.n	80140d4 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80140c8:	2203      	movs	r2, #3
 80140ca:	2100      	movs	r1, #0
 80140cc:	2001      	movs	r0, #1
 80140ce:	f001 f82b 	bl	8015128 <xQueueGenericCreate>
 80140d2:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80140d4:	69fb      	ldr	r3, [r7, #28]
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d022      	beq.n	8014120 <osSemaphoreNew+0xe8>
 80140da:	68bb      	ldr	r3, [r7, #8]
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d01f      	beq.n	8014120 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80140e0:	2300      	movs	r3, #0
 80140e2:	2200      	movs	r2, #0
 80140e4:	2100      	movs	r1, #0
 80140e6:	69f8      	ldr	r0, [r7, #28]
 80140e8:	f001 f8e6 	bl	80152b8 <xQueueGenericSend>
 80140ec:	4603      	mov	r3, r0
 80140ee:	2b01      	cmp	r3, #1
 80140f0:	d016      	beq.n	8014120 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80140f2:	69f8      	ldr	r0, [r7, #28]
 80140f4:	f001 fd72 	bl	8015bdc <vQueueDelete>
            hSemaphore = NULL;
 80140f8:	2300      	movs	r3, #0
 80140fa:	61fb      	str	r3, [r7, #28]
 80140fc:	e010      	b.n	8014120 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80140fe:	69bb      	ldr	r3, [r7, #24]
 8014100:	2b01      	cmp	r3, #1
 8014102:	d108      	bne.n	8014116 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	689b      	ldr	r3, [r3, #8]
 8014108:	461a      	mov	r2, r3
 801410a:	68b9      	ldr	r1, [r7, #8]
 801410c:	68f8      	ldr	r0, [r7, #12]
 801410e:	f001 f868 	bl	80151e2 <xQueueCreateCountingSemaphoreStatic>
 8014112:	61f8      	str	r0, [r7, #28]
 8014114:	e004      	b.n	8014120 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8014116:	68b9      	ldr	r1, [r7, #8]
 8014118:	68f8      	ldr	r0, [r7, #12]
 801411a:	f001 f899 	bl	8015250 <xQueueCreateCountingSemaphore>
 801411e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8014120:	69fb      	ldr	r3, [r7, #28]
 8014122:	2b00      	cmp	r3, #0
 8014124:	d00c      	beq.n	8014140 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	2b00      	cmp	r3, #0
 801412a:	d003      	beq.n	8014134 <osSemaphoreNew+0xfc>
          name = attr->name;
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	681b      	ldr	r3, [r3, #0]
 8014130:	617b      	str	r3, [r7, #20]
 8014132:	e001      	b.n	8014138 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8014134:	2300      	movs	r3, #0
 8014136:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8014138:	6979      	ldr	r1, [r7, #20]
 801413a:	69f8      	ldr	r0, [r7, #28]
 801413c:	f001 fe9a 	bl	8015e74 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8014140:	69fb      	ldr	r3, [r7, #28]
}
 8014142:	4618      	mov	r0, r3
 8014144:	3720      	adds	r7, #32
 8014146:	46bd      	mov	sp, r7
 8014148:	bd80      	pop	{r7, pc}
	...

0801414c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 801414c:	b580      	push	{r7, lr}
 801414e:	b086      	sub	sp, #24
 8014150:	af00      	add	r7, sp, #0
 8014152:	6078      	str	r0, [r7, #4]
 8014154:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801415a:	2300      	movs	r3, #0
 801415c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 801415e:	693b      	ldr	r3, [r7, #16]
 8014160:	2b00      	cmp	r3, #0
 8014162:	d103      	bne.n	801416c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8014164:	f06f 0303 	mvn.w	r3, #3
 8014168:	617b      	str	r3, [r7, #20]
 801416a:	e039      	b.n	80141e0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801416c:	f3ef 8305 	mrs	r3, IPSR
 8014170:	60fb      	str	r3, [r7, #12]
  return(result);
 8014172:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8014174:	2b00      	cmp	r3, #0
 8014176:	d022      	beq.n	80141be <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8014178:	683b      	ldr	r3, [r7, #0]
 801417a:	2b00      	cmp	r3, #0
 801417c:	d003      	beq.n	8014186 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 801417e:	f06f 0303 	mvn.w	r3, #3
 8014182:	617b      	str	r3, [r7, #20]
 8014184:	e02c      	b.n	80141e0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8014186:	2300      	movs	r3, #0
 8014188:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 801418a:	f107 0308 	add.w	r3, r7, #8
 801418e:	461a      	mov	r2, r3
 8014190:	2100      	movs	r1, #0
 8014192:	6938      	ldr	r0, [r7, #16]
 8014194:	f001 fca2 	bl	8015adc <xQueueReceiveFromISR>
 8014198:	4603      	mov	r3, r0
 801419a:	2b01      	cmp	r3, #1
 801419c:	d003      	beq.n	80141a6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 801419e:	f06f 0302 	mvn.w	r3, #2
 80141a2:	617b      	str	r3, [r7, #20]
 80141a4:	e01c      	b.n	80141e0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80141a6:	68bb      	ldr	r3, [r7, #8]
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d019      	beq.n	80141e0 <osSemaphoreAcquire+0x94>
 80141ac:	4b0f      	ldr	r3, [pc, #60]	; (80141ec <osSemaphoreAcquire+0xa0>)
 80141ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80141b2:	601a      	str	r2, [r3, #0]
 80141b4:	f3bf 8f4f 	dsb	sy
 80141b8:	f3bf 8f6f 	isb	sy
 80141bc:	e010      	b.n	80141e0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80141be:	6839      	ldr	r1, [r7, #0]
 80141c0:	6938      	ldr	r0, [r7, #16]
 80141c2:	f001 fb7f 	bl	80158c4 <xQueueSemaphoreTake>
 80141c6:	4603      	mov	r3, r0
 80141c8:	2b01      	cmp	r3, #1
 80141ca:	d009      	beq.n	80141e0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80141cc:	683b      	ldr	r3, [r7, #0]
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d003      	beq.n	80141da <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80141d2:	f06f 0301 	mvn.w	r3, #1
 80141d6:	617b      	str	r3, [r7, #20]
 80141d8:	e002      	b.n	80141e0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80141da:	f06f 0302 	mvn.w	r3, #2
 80141de:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80141e0:	697b      	ldr	r3, [r7, #20]
}
 80141e2:	4618      	mov	r0, r3
 80141e4:	3718      	adds	r7, #24
 80141e6:	46bd      	mov	sp, r7
 80141e8:	bd80      	pop	{r7, pc}
 80141ea:	bf00      	nop
 80141ec:	e000ed04 	.word	0xe000ed04

080141f0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80141f0:	b580      	push	{r7, lr}
 80141f2:	b086      	sub	sp, #24
 80141f4:	af00      	add	r7, sp, #0
 80141f6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80141fc:	2300      	movs	r3, #0
 80141fe:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8014200:	693b      	ldr	r3, [r7, #16]
 8014202:	2b00      	cmp	r3, #0
 8014204:	d103      	bne.n	801420e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8014206:	f06f 0303 	mvn.w	r3, #3
 801420a:	617b      	str	r3, [r7, #20]
 801420c:	e02c      	b.n	8014268 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801420e:	f3ef 8305 	mrs	r3, IPSR
 8014212:	60fb      	str	r3, [r7, #12]
  return(result);
 8014214:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8014216:	2b00      	cmp	r3, #0
 8014218:	d01a      	beq.n	8014250 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 801421a:	2300      	movs	r3, #0
 801421c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801421e:	f107 0308 	add.w	r3, r7, #8
 8014222:	4619      	mov	r1, r3
 8014224:	6938      	ldr	r0, [r7, #16]
 8014226:	f001 f9e0 	bl	80155ea <xQueueGiveFromISR>
 801422a:	4603      	mov	r3, r0
 801422c:	2b01      	cmp	r3, #1
 801422e:	d003      	beq.n	8014238 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8014230:	f06f 0302 	mvn.w	r3, #2
 8014234:	617b      	str	r3, [r7, #20]
 8014236:	e017      	b.n	8014268 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8014238:	68bb      	ldr	r3, [r7, #8]
 801423a:	2b00      	cmp	r3, #0
 801423c:	d014      	beq.n	8014268 <osSemaphoreRelease+0x78>
 801423e:	4b0d      	ldr	r3, [pc, #52]	; (8014274 <osSemaphoreRelease+0x84>)
 8014240:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014244:	601a      	str	r2, [r3, #0]
 8014246:	f3bf 8f4f 	dsb	sy
 801424a:	f3bf 8f6f 	isb	sy
 801424e:	e00b      	b.n	8014268 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8014250:	2300      	movs	r3, #0
 8014252:	2200      	movs	r2, #0
 8014254:	2100      	movs	r1, #0
 8014256:	6938      	ldr	r0, [r7, #16]
 8014258:	f001 f82e 	bl	80152b8 <xQueueGenericSend>
 801425c:	4603      	mov	r3, r0
 801425e:	2b01      	cmp	r3, #1
 8014260:	d002      	beq.n	8014268 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8014262:	f06f 0302 	mvn.w	r3, #2
 8014266:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8014268:	697b      	ldr	r3, [r7, #20]
}
 801426a:	4618      	mov	r0, r3
 801426c:	3718      	adds	r7, #24
 801426e:	46bd      	mov	sp, r7
 8014270:	bd80      	pop	{r7, pc}
 8014272:	bf00      	nop
 8014274:	e000ed04 	.word	0xe000ed04

08014278 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8014278:	b580      	push	{r7, lr}
 801427a:	b086      	sub	sp, #24
 801427c:	af00      	add	r7, sp, #0
 801427e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014284:	f3ef 8305 	mrs	r3, IPSR
 8014288:	60fb      	str	r3, [r7, #12]
  return(result);
 801428a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 801428c:	2b00      	cmp	r3, #0
 801428e:	d003      	beq.n	8014298 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8014290:	f06f 0305 	mvn.w	r3, #5
 8014294:	617b      	str	r3, [r7, #20]
 8014296:	e00e      	b.n	80142b6 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8014298:	693b      	ldr	r3, [r7, #16]
 801429a:	2b00      	cmp	r3, #0
 801429c:	d103      	bne.n	80142a6 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 801429e:	f06f 0303 	mvn.w	r3, #3
 80142a2:	617b      	str	r3, [r7, #20]
 80142a4:	e007      	b.n	80142b6 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 80142a6:	6938      	ldr	r0, [r7, #16]
 80142a8:	f001 fe0e 	bl	8015ec8 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 80142ac:	2300      	movs	r3, #0
 80142ae:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 80142b0:	6938      	ldr	r0, [r7, #16]
 80142b2:	f001 fc93 	bl	8015bdc <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80142b6:	697b      	ldr	r3, [r7, #20]
}
 80142b8:	4618      	mov	r0, r3
 80142ba:	3718      	adds	r7, #24
 80142bc:	46bd      	mov	sp, r7
 80142be:	bd80      	pop	{r7, pc}

080142c0 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80142c0:	b580      	push	{r7, lr}
 80142c2:	b08a      	sub	sp, #40	; 0x28
 80142c4:	af02      	add	r7, sp, #8
 80142c6:	60f8      	str	r0, [r7, #12]
 80142c8:	60b9      	str	r1, [r7, #8]
 80142ca:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80142cc:	2300      	movs	r3, #0
 80142ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80142d0:	f3ef 8305 	mrs	r3, IPSR
 80142d4:	613b      	str	r3, [r7, #16]
  return(result);
 80142d6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d15f      	bne.n	801439c <osMessageQueueNew+0xdc>
 80142dc:	68fb      	ldr	r3, [r7, #12]
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d05c      	beq.n	801439c <osMessageQueueNew+0xdc>
 80142e2:	68bb      	ldr	r3, [r7, #8]
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d059      	beq.n	801439c <osMessageQueueNew+0xdc>
    mem = -1;
 80142e8:	f04f 33ff 	mov.w	r3, #4294967295
 80142ec:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d029      	beq.n	8014348 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	689b      	ldr	r3, [r3, #8]
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d012      	beq.n	8014322 <osMessageQueueNew+0x62>
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	68db      	ldr	r3, [r3, #12]
 8014300:	2b4f      	cmp	r3, #79	; 0x4f
 8014302:	d90e      	bls.n	8014322 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8014308:	2b00      	cmp	r3, #0
 801430a:	d00a      	beq.n	8014322 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	695a      	ldr	r2, [r3, #20]
 8014310:	68fb      	ldr	r3, [r7, #12]
 8014312:	68b9      	ldr	r1, [r7, #8]
 8014314:	fb01 f303 	mul.w	r3, r1, r3
 8014318:	429a      	cmp	r2, r3
 801431a:	d302      	bcc.n	8014322 <osMessageQueueNew+0x62>
        mem = 1;
 801431c:	2301      	movs	r3, #1
 801431e:	61bb      	str	r3, [r7, #24]
 8014320:	e014      	b.n	801434c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	689b      	ldr	r3, [r3, #8]
 8014326:	2b00      	cmp	r3, #0
 8014328:	d110      	bne.n	801434c <osMessageQueueNew+0x8c>
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	68db      	ldr	r3, [r3, #12]
 801432e:	2b00      	cmp	r3, #0
 8014330:	d10c      	bne.n	801434c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8014336:	2b00      	cmp	r3, #0
 8014338:	d108      	bne.n	801434c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	695b      	ldr	r3, [r3, #20]
 801433e:	2b00      	cmp	r3, #0
 8014340:	d104      	bne.n	801434c <osMessageQueueNew+0x8c>
          mem = 0;
 8014342:	2300      	movs	r3, #0
 8014344:	61bb      	str	r3, [r7, #24]
 8014346:	e001      	b.n	801434c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8014348:	2300      	movs	r3, #0
 801434a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801434c:	69bb      	ldr	r3, [r7, #24]
 801434e:	2b01      	cmp	r3, #1
 8014350:	d10b      	bne.n	801436a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	691a      	ldr	r2, [r3, #16]
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	689b      	ldr	r3, [r3, #8]
 801435a:	2100      	movs	r1, #0
 801435c:	9100      	str	r1, [sp, #0]
 801435e:	68b9      	ldr	r1, [r7, #8]
 8014360:	68f8      	ldr	r0, [r7, #12]
 8014362:	f000 fe69 	bl	8015038 <xQueueGenericCreateStatic>
 8014366:	61f8      	str	r0, [r7, #28]
 8014368:	e008      	b.n	801437c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 801436a:	69bb      	ldr	r3, [r7, #24]
 801436c:	2b00      	cmp	r3, #0
 801436e:	d105      	bne.n	801437c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8014370:	2200      	movs	r2, #0
 8014372:	68b9      	ldr	r1, [r7, #8]
 8014374:	68f8      	ldr	r0, [r7, #12]
 8014376:	f000 fed7 	bl	8015128 <xQueueGenericCreate>
 801437a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 801437c:	69fb      	ldr	r3, [r7, #28]
 801437e:	2b00      	cmp	r3, #0
 8014380:	d00c      	beq.n	801439c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	2b00      	cmp	r3, #0
 8014386:	d003      	beq.n	8014390 <osMessageQueueNew+0xd0>
        name = attr->name;
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	681b      	ldr	r3, [r3, #0]
 801438c:	617b      	str	r3, [r7, #20]
 801438e:	e001      	b.n	8014394 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8014390:	2300      	movs	r3, #0
 8014392:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8014394:	6979      	ldr	r1, [r7, #20]
 8014396:	69f8      	ldr	r0, [r7, #28]
 8014398:	f001 fd6c 	bl	8015e74 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 801439c:	69fb      	ldr	r3, [r7, #28]
}
 801439e:	4618      	mov	r0, r3
 80143a0:	3720      	adds	r7, #32
 80143a2:	46bd      	mov	sp, r7
 80143a4:	bd80      	pop	{r7, pc}
	...

080143a8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80143a8:	b580      	push	{r7, lr}
 80143aa:	b088      	sub	sp, #32
 80143ac:	af00      	add	r7, sp, #0
 80143ae:	60f8      	str	r0, [r7, #12]
 80143b0:	60b9      	str	r1, [r7, #8]
 80143b2:	603b      	str	r3, [r7, #0]
 80143b4:	4613      	mov	r3, r2
 80143b6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80143b8:	68fb      	ldr	r3, [r7, #12]
 80143ba:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80143bc:	2300      	movs	r3, #0
 80143be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80143c0:	f3ef 8305 	mrs	r3, IPSR
 80143c4:	617b      	str	r3, [r7, #20]
  return(result);
 80143c6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d028      	beq.n	801441e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80143cc:	69bb      	ldr	r3, [r7, #24]
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d005      	beq.n	80143de <osMessageQueuePut+0x36>
 80143d2:	68bb      	ldr	r3, [r7, #8]
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	d002      	beq.n	80143de <osMessageQueuePut+0x36>
 80143d8:	683b      	ldr	r3, [r7, #0]
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d003      	beq.n	80143e6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80143de:	f06f 0303 	mvn.w	r3, #3
 80143e2:	61fb      	str	r3, [r7, #28]
 80143e4:	e038      	b.n	8014458 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80143e6:	2300      	movs	r3, #0
 80143e8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80143ea:	f107 0210 	add.w	r2, r7, #16
 80143ee:	2300      	movs	r3, #0
 80143f0:	68b9      	ldr	r1, [r7, #8]
 80143f2:	69b8      	ldr	r0, [r7, #24]
 80143f4:	f001 f85e 	bl	80154b4 <xQueueGenericSendFromISR>
 80143f8:	4603      	mov	r3, r0
 80143fa:	2b01      	cmp	r3, #1
 80143fc:	d003      	beq.n	8014406 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80143fe:	f06f 0302 	mvn.w	r3, #2
 8014402:	61fb      	str	r3, [r7, #28]
 8014404:	e028      	b.n	8014458 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8014406:	693b      	ldr	r3, [r7, #16]
 8014408:	2b00      	cmp	r3, #0
 801440a:	d025      	beq.n	8014458 <osMessageQueuePut+0xb0>
 801440c:	4b15      	ldr	r3, [pc, #84]	; (8014464 <osMessageQueuePut+0xbc>)
 801440e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014412:	601a      	str	r2, [r3, #0]
 8014414:	f3bf 8f4f 	dsb	sy
 8014418:	f3bf 8f6f 	isb	sy
 801441c:	e01c      	b.n	8014458 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801441e:	69bb      	ldr	r3, [r7, #24]
 8014420:	2b00      	cmp	r3, #0
 8014422:	d002      	beq.n	801442a <osMessageQueuePut+0x82>
 8014424:	68bb      	ldr	r3, [r7, #8]
 8014426:	2b00      	cmp	r3, #0
 8014428:	d103      	bne.n	8014432 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 801442a:	f06f 0303 	mvn.w	r3, #3
 801442e:	61fb      	str	r3, [r7, #28]
 8014430:	e012      	b.n	8014458 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8014432:	2300      	movs	r3, #0
 8014434:	683a      	ldr	r2, [r7, #0]
 8014436:	68b9      	ldr	r1, [r7, #8]
 8014438:	69b8      	ldr	r0, [r7, #24]
 801443a:	f000 ff3d 	bl	80152b8 <xQueueGenericSend>
 801443e:	4603      	mov	r3, r0
 8014440:	2b01      	cmp	r3, #1
 8014442:	d009      	beq.n	8014458 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8014444:	683b      	ldr	r3, [r7, #0]
 8014446:	2b00      	cmp	r3, #0
 8014448:	d003      	beq.n	8014452 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 801444a:	f06f 0301 	mvn.w	r3, #1
 801444e:	61fb      	str	r3, [r7, #28]
 8014450:	e002      	b.n	8014458 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8014452:	f06f 0302 	mvn.w	r3, #2
 8014456:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8014458:	69fb      	ldr	r3, [r7, #28]
}
 801445a:	4618      	mov	r0, r3
 801445c:	3720      	adds	r7, #32
 801445e:	46bd      	mov	sp, r7
 8014460:	bd80      	pop	{r7, pc}
 8014462:	bf00      	nop
 8014464:	e000ed04 	.word	0xe000ed04

08014468 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8014468:	b580      	push	{r7, lr}
 801446a:	b088      	sub	sp, #32
 801446c:	af00      	add	r7, sp, #0
 801446e:	60f8      	str	r0, [r7, #12]
 8014470:	60b9      	str	r1, [r7, #8]
 8014472:	607a      	str	r2, [r7, #4]
 8014474:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8014476:	68fb      	ldr	r3, [r7, #12]
 8014478:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801447a:	2300      	movs	r3, #0
 801447c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801447e:	f3ef 8305 	mrs	r3, IPSR
 8014482:	617b      	str	r3, [r7, #20]
  return(result);
 8014484:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8014486:	2b00      	cmp	r3, #0
 8014488:	d028      	beq.n	80144dc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801448a:	69bb      	ldr	r3, [r7, #24]
 801448c:	2b00      	cmp	r3, #0
 801448e:	d005      	beq.n	801449c <osMessageQueueGet+0x34>
 8014490:	68bb      	ldr	r3, [r7, #8]
 8014492:	2b00      	cmp	r3, #0
 8014494:	d002      	beq.n	801449c <osMessageQueueGet+0x34>
 8014496:	683b      	ldr	r3, [r7, #0]
 8014498:	2b00      	cmp	r3, #0
 801449a:	d003      	beq.n	80144a4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 801449c:	f06f 0303 	mvn.w	r3, #3
 80144a0:	61fb      	str	r3, [r7, #28]
 80144a2:	e037      	b.n	8014514 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80144a4:	2300      	movs	r3, #0
 80144a6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80144a8:	f107 0310 	add.w	r3, r7, #16
 80144ac:	461a      	mov	r2, r3
 80144ae:	68b9      	ldr	r1, [r7, #8]
 80144b0:	69b8      	ldr	r0, [r7, #24]
 80144b2:	f001 fb13 	bl	8015adc <xQueueReceiveFromISR>
 80144b6:	4603      	mov	r3, r0
 80144b8:	2b01      	cmp	r3, #1
 80144ba:	d003      	beq.n	80144c4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80144bc:	f06f 0302 	mvn.w	r3, #2
 80144c0:	61fb      	str	r3, [r7, #28]
 80144c2:	e027      	b.n	8014514 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80144c4:	693b      	ldr	r3, [r7, #16]
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d024      	beq.n	8014514 <osMessageQueueGet+0xac>
 80144ca:	4b15      	ldr	r3, [pc, #84]	; (8014520 <osMessageQueueGet+0xb8>)
 80144cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80144d0:	601a      	str	r2, [r3, #0]
 80144d2:	f3bf 8f4f 	dsb	sy
 80144d6:	f3bf 8f6f 	isb	sy
 80144da:	e01b      	b.n	8014514 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80144dc:	69bb      	ldr	r3, [r7, #24]
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d002      	beq.n	80144e8 <osMessageQueueGet+0x80>
 80144e2:	68bb      	ldr	r3, [r7, #8]
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d103      	bne.n	80144f0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80144e8:	f06f 0303 	mvn.w	r3, #3
 80144ec:	61fb      	str	r3, [r7, #28]
 80144ee:	e011      	b.n	8014514 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80144f0:	683a      	ldr	r2, [r7, #0]
 80144f2:	68b9      	ldr	r1, [r7, #8]
 80144f4:	69b8      	ldr	r0, [r7, #24]
 80144f6:	f001 f905 	bl	8015704 <xQueueReceive>
 80144fa:	4603      	mov	r3, r0
 80144fc:	2b01      	cmp	r3, #1
 80144fe:	d009      	beq.n	8014514 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8014500:	683b      	ldr	r3, [r7, #0]
 8014502:	2b00      	cmp	r3, #0
 8014504:	d003      	beq.n	801450e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8014506:	f06f 0301 	mvn.w	r3, #1
 801450a:	61fb      	str	r3, [r7, #28]
 801450c:	e002      	b.n	8014514 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 801450e:	f06f 0302 	mvn.w	r3, #2
 8014512:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8014514:	69fb      	ldr	r3, [r7, #28]
}
 8014516:	4618      	mov	r0, r3
 8014518:	3720      	adds	r7, #32
 801451a:	46bd      	mov	sp, r7
 801451c:	bd80      	pop	{r7, pc}
 801451e:	bf00      	nop
 8014520:	e000ed04 	.word	0xe000ed04

08014524 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8014524:	b480      	push	{r7}
 8014526:	b085      	sub	sp, #20
 8014528:	af00      	add	r7, sp, #0
 801452a:	60f8      	str	r0, [r7, #12]
 801452c:	60b9      	str	r1, [r7, #8]
 801452e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	4a07      	ldr	r2, [pc, #28]	; (8014550 <vApplicationGetIdleTaskMemory+0x2c>)
 8014534:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8014536:	68bb      	ldr	r3, [r7, #8]
 8014538:	4a06      	ldr	r2, [pc, #24]	; (8014554 <vApplicationGetIdleTaskMemory+0x30>)
 801453a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	2280      	movs	r2, #128	; 0x80
 8014540:	601a      	str	r2, [r3, #0]
}
 8014542:	bf00      	nop
 8014544:	3714      	adds	r7, #20
 8014546:	46bd      	mov	sp, r7
 8014548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801454c:	4770      	bx	lr
 801454e:	bf00      	nop
 8014550:	240023e0 	.word	0x240023e0
 8014554:	2400243c 	.word	0x2400243c

08014558 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8014558:	b480      	push	{r7}
 801455a:	b085      	sub	sp, #20
 801455c:	af00      	add	r7, sp, #0
 801455e:	60f8      	str	r0, [r7, #12]
 8014560:	60b9      	str	r1, [r7, #8]
 8014562:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8014564:	68fb      	ldr	r3, [r7, #12]
 8014566:	4a07      	ldr	r2, [pc, #28]	; (8014584 <vApplicationGetTimerTaskMemory+0x2c>)
 8014568:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801456a:	68bb      	ldr	r3, [r7, #8]
 801456c:	4a06      	ldr	r2, [pc, #24]	; (8014588 <vApplicationGetTimerTaskMemory+0x30>)
 801456e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014576:	601a      	str	r2, [r3, #0]
}
 8014578:	bf00      	nop
 801457a:	3714      	adds	r7, #20
 801457c:	46bd      	mov	sp, r7
 801457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014582:	4770      	bx	lr
 8014584:	2400263c 	.word	0x2400263c
 8014588:	24002698 	.word	0x24002698

0801458c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801458c:	b580      	push	{r7, lr}
 801458e:	b08a      	sub	sp, #40	; 0x28
 8014590:	af00      	add	r7, sp, #0
 8014592:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014594:	2300      	movs	r3, #0
 8014596:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014598:	f001 ff30 	bl	80163fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801459c:	4b5b      	ldr	r3, [pc, #364]	; (801470c <pvPortMalloc+0x180>)
 801459e:	681b      	ldr	r3, [r3, #0]
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	d101      	bne.n	80145a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80145a4:	f000 f920 	bl	80147e8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80145a8:	4b59      	ldr	r3, [pc, #356]	; (8014710 <pvPortMalloc+0x184>)
 80145aa:	681a      	ldr	r2, [r3, #0]
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	4013      	ands	r3, r2
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	f040 8093 	bne.w	80146dc <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d01d      	beq.n	80145f8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80145bc:	2208      	movs	r2, #8
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	4413      	add	r3, r2
 80145c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	f003 0307 	and.w	r3, r3, #7
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d014      	beq.n	80145f8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	f023 0307 	bic.w	r3, r3, #7
 80145d4:	3308      	adds	r3, #8
 80145d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	f003 0307 	and.w	r3, r3, #7
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d00a      	beq.n	80145f8 <pvPortMalloc+0x6c>
	__asm volatile
 80145e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145e6:	f383 8811 	msr	BASEPRI, r3
 80145ea:	f3bf 8f6f 	isb	sy
 80145ee:	f3bf 8f4f 	dsb	sy
 80145f2:	617b      	str	r3, [r7, #20]
}
 80145f4:	bf00      	nop
 80145f6:	e7fe      	b.n	80145f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	2b00      	cmp	r3, #0
 80145fc:	d06e      	beq.n	80146dc <pvPortMalloc+0x150>
 80145fe:	4b45      	ldr	r3, [pc, #276]	; (8014714 <pvPortMalloc+0x188>)
 8014600:	681b      	ldr	r3, [r3, #0]
 8014602:	687a      	ldr	r2, [r7, #4]
 8014604:	429a      	cmp	r2, r3
 8014606:	d869      	bhi.n	80146dc <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014608:	4b43      	ldr	r3, [pc, #268]	; (8014718 <pvPortMalloc+0x18c>)
 801460a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801460c:	4b42      	ldr	r3, [pc, #264]	; (8014718 <pvPortMalloc+0x18c>)
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014612:	e004      	b.n	801461e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8014614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014616:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801461a:	681b      	ldr	r3, [r3, #0]
 801461c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801461e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014620:	685b      	ldr	r3, [r3, #4]
 8014622:	687a      	ldr	r2, [r7, #4]
 8014624:	429a      	cmp	r2, r3
 8014626:	d903      	bls.n	8014630 <pvPortMalloc+0xa4>
 8014628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801462a:	681b      	ldr	r3, [r3, #0]
 801462c:	2b00      	cmp	r3, #0
 801462e:	d1f1      	bne.n	8014614 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8014630:	4b36      	ldr	r3, [pc, #216]	; (801470c <pvPortMalloc+0x180>)
 8014632:	681b      	ldr	r3, [r3, #0]
 8014634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014636:	429a      	cmp	r2, r3
 8014638:	d050      	beq.n	80146dc <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801463a:	6a3b      	ldr	r3, [r7, #32]
 801463c:	681b      	ldr	r3, [r3, #0]
 801463e:	2208      	movs	r2, #8
 8014640:	4413      	add	r3, r2
 8014642:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014646:	681a      	ldr	r2, [r3, #0]
 8014648:	6a3b      	ldr	r3, [r7, #32]
 801464a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801464c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801464e:	685a      	ldr	r2, [r3, #4]
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	1ad2      	subs	r2, r2, r3
 8014654:	2308      	movs	r3, #8
 8014656:	005b      	lsls	r3, r3, #1
 8014658:	429a      	cmp	r2, r3
 801465a:	d91f      	bls.n	801469c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801465c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	4413      	add	r3, r2
 8014662:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014664:	69bb      	ldr	r3, [r7, #24]
 8014666:	f003 0307 	and.w	r3, r3, #7
 801466a:	2b00      	cmp	r3, #0
 801466c:	d00a      	beq.n	8014684 <pvPortMalloc+0xf8>
	__asm volatile
 801466e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014672:	f383 8811 	msr	BASEPRI, r3
 8014676:	f3bf 8f6f 	isb	sy
 801467a:	f3bf 8f4f 	dsb	sy
 801467e:	613b      	str	r3, [r7, #16]
}
 8014680:	bf00      	nop
 8014682:	e7fe      	b.n	8014682 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014686:	685a      	ldr	r2, [r3, #4]
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	1ad2      	subs	r2, r2, r3
 801468c:	69bb      	ldr	r3, [r7, #24]
 801468e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014692:	687a      	ldr	r2, [r7, #4]
 8014694:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014696:	69b8      	ldr	r0, [r7, #24]
 8014698:	f000 f908 	bl	80148ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801469c:	4b1d      	ldr	r3, [pc, #116]	; (8014714 <pvPortMalloc+0x188>)
 801469e:	681a      	ldr	r2, [r3, #0]
 80146a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146a2:	685b      	ldr	r3, [r3, #4]
 80146a4:	1ad3      	subs	r3, r2, r3
 80146a6:	4a1b      	ldr	r2, [pc, #108]	; (8014714 <pvPortMalloc+0x188>)
 80146a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80146aa:	4b1a      	ldr	r3, [pc, #104]	; (8014714 <pvPortMalloc+0x188>)
 80146ac:	681a      	ldr	r2, [r3, #0]
 80146ae:	4b1b      	ldr	r3, [pc, #108]	; (801471c <pvPortMalloc+0x190>)
 80146b0:	681b      	ldr	r3, [r3, #0]
 80146b2:	429a      	cmp	r2, r3
 80146b4:	d203      	bcs.n	80146be <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80146b6:	4b17      	ldr	r3, [pc, #92]	; (8014714 <pvPortMalloc+0x188>)
 80146b8:	681b      	ldr	r3, [r3, #0]
 80146ba:	4a18      	ldr	r2, [pc, #96]	; (801471c <pvPortMalloc+0x190>)
 80146bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80146be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146c0:	685a      	ldr	r2, [r3, #4]
 80146c2:	4b13      	ldr	r3, [pc, #76]	; (8014710 <pvPortMalloc+0x184>)
 80146c4:	681b      	ldr	r3, [r3, #0]
 80146c6:	431a      	orrs	r2, r3
 80146c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80146cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146ce:	2200      	movs	r2, #0
 80146d0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80146d2:	4b13      	ldr	r3, [pc, #76]	; (8014720 <pvPortMalloc+0x194>)
 80146d4:	681b      	ldr	r3, [r3, #0]
 80146d6:	3301      	adds	r3, #1
 80146d8:	4a11      	ldr	r2, [pc, #68]	; (8014720 <pvPortMalloc+0x194>)
 80146da:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80146dc:	f001 fe9c 	bl	8016418 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80146e0:	69fb      	ldr	r3, [r7, #28]
 80146e2:	f003 0307 	and.w	r3, r3, #7
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d00a      	beq.n	8014700 <pvPortMalloc+0x174>
	__asm volatile
 80146ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146ee:	f383 8811 	msr	BASEPRI, r3
 80146f2:	f3bf 8f6f 	isb	sy
 80146f6:	f3bf 8f4f 	dsb	sy
 80146fa:	60fb      	str	r3, [r7, #12]
}
 80146fc:	bf00      	nop
 80146fe:	e7fe      	b.n	80146fe <pvPortMalloc+0x172>
	return pvReturn;
 8014700:	69fb      	ldr	r3, [r7, #28]
}
 8014702:	4618      	mov	r0, r3
 8014704:	3728      	adds	r7, #40	; 0x28
 8014706:	46bd      	mov	sp, r7
 8014708:	bd80      	pop	{r7, pc}
 801470a:	bf00      	nop
 801470c:	240066a0 	.word	0x240066a0
 8014710:	240066b4 	.word	0x240066b4
 8014714:	240066a4 	.word	0x240066a4
 8014718:	24006698 	.word	0x24006698
 801471c:	240066a8 	.word	0x240066a8
 8014720:	240066ac 	.word	0x240066ac

08014724 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014724:	b580      	push	{r7, lr}
 8014726:	b086      	sub	sp, #24
 8014728:	af00      	add	r7, sp, #0
 801472a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	2b00      	cmp	r3, #0
 8014734:	d04d      	beq.n	80147d2 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014736:	2308      	movs	r3, #8
 8014738:	425b      	negs	r3, r3
 801473a:	697a      	ldr	r2, [r7, #20]
 801473c:	4413      	add	r3, r2
 801473e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8014740:	697b      	ldr	r3, [r7, #20]
 8014742:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014744:	693b      	ldr	r3, [r7, #16]
 8014746:	685a      	ldr	r2, [r3, #4]
 8014748:	4b24      	ldr	r3, [pc, #144]	; (80147dc <vPortFree+0xb8>)
 801474a:	681b      	ldr	r3, [r3, #0]
 801474c:	4013      	ands	r3, r2
 801474e:	2b00      	cmp	r3, #0
 8014750:	d10a      	bne.n	8014768 <vPortFree+0x44>
	__asm volatile
 8014752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014756:	f383 8811 	msr	BASEPRI, r3
 801475a:	f3bf 8f6f 	isb	sy
 801475e:	f3bf 8f4f 	dsb	sy
 8014762:	60fb      	str	r3, [r7, #12]
}
 8014764:	bf00      	nop
 8014766:	e7fe      	b.n	8014766 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014768:	693b      	ldr	r3, [r7, #16]
 801476a:	681b      	ldr	r3, [r3, #0]
 801476c:	2b00      	cmp	r3, #0
 801476e:	d00a      	beq.n	8014786 <vPortFree+0x62>
	__asm volatile
 8014770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014774:	f383 8811 	msr	BASEPRI, r3
 8014778:	f3bf 8f6f 	isb	sy
 801477c:	f3bf 8f4f 	dsb	sy
 8014780:	60bb      	str	r3, [r7, #8]
}
 8014782:	bf00      	nop
 8014784:	e7fe      	b.n	8014784 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014786:	693b      	ldr	r3, [r7, #16]
 8014788:	685a      	ldr	r2, [r3, #4]
 801478a:	4b14      	ldr	r3, [pc, #80]	; (80147dc <vPortFree+0xb8>)
 801478c:	681b      	ldr	r3, [r3, #0]
 801478e:	4013      	ands	r3, r2
 8014790:	2b00      	cmp	r3, #0
 8014792:	d01e      	beq.n	80147d2 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014794:	693b      	ldr	r3, [r7, #16]
 8014796:	681b      	ldr	r3, [r3, #0]
 8014798:	2b00      	cmp	r3, #0
 801479a:	d11a      	bne.n	80147d2 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801479c:	693b      	ldr	r3, [r7, #16]
 801479e:	685a      	ldr	r2, [r3, #4]
 80147a0:	4b0e      	ldr	r3, [pc, #56]	; (80147dc <vPortFree+0xb8>)
 80147a2:	681b      	ldr	r3, [r3, #0]
 80147a4:	43db      	mvns	r3, r3
 80147a6:	401a      	ands	r2, r3
 80147a8:	693b      	ldr	r3, [r7, #16]
 80147aa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80147ac:	f001 fe26 	bl	80163fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80147b0:	693b      	ldr	r3, [r7, #16]
 80147b2:	685a      	ldr	r2, [r3, #4]
 80147b4:	4b0a      	ldr	r3, [pc, #40]	; (80147e0 <vPortFree+0xbc>)
 80147b6:	681b      	ldr	r3, [r3, #0]
 80147b8:	4413      	add	r3, r2
 80147ba:	4a09      	ldr	r2, [pc, #36]	; (80147e0 <vPortFree+0xbc>)
 80147bc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80147be:	6938      	ldr	r0, [r7, #16]
 80147c0:	f000 f874 	bl	80148ac <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80147c4:	4b07      	ldr	r3, [pc, #28]	; (80147e4 <vPortFree+0xc0>)
 80147c6:	681b      	ldr	r3, [r3, #0]
 80147c8:	3301      	adds	r3, #1
 80147ca:	4a06      	ldr	r2, [pc, #24]	; (80147e4 <vPortFree+0xc0>)
 80147cc:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80147ce:	f001 fe23 	bl	8016418 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80147d2:	bf00      	nop
 80147d4:	3718      	adds	r7, #24
 80147d6:	46bd      	mov	sp, r7
 80147d8:	bd80      	pop	{r7, pc}
 80147da:	bf00      	nop
 80147dc:	240066b4 	.word	0x240066b4
 80147e0:	240066a4 	.word	0x240066a4
 80147e4:	240066b0 	.word	0x240066b0

080147e8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80147e8:	b480      	push	{r7}
 80147ea:	b085      	sub	sp, #20
 80147ec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80147ee:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80147f2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80147f4:	4b27      	ldr	r3, [pc, #156]	; (8014894 <prvHeapInit+0xac>)
 80147f6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80147f8:	68fb      	ldr	r3, [r7, #12]
 80147fa:	f003 0307 	and.w	r3, r3, #7
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d00c      	beq.n	801481c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8014802:	68fb      	ldr	r3, [r7, #12]
 8014804:	3307      	adds	r3, #7
 8014806:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014808:	68fb      	ldr	r3, [r7, #12]
 801480a:	f023 0307 	bic.w	r3, r3, #7
 801480e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8014810:	68ba      	ldr	r2, [r7, #8]
 8014812:	68fb      	ldr	r3, [r7, #12]
 8014814:	1ad3      	subs	r3, r2, r3
 8014816:	4a1f      	ldr	r2, [pc, #124]	; (8014894 <prvHeapInit+0xac>)
 8014818:	4413      	add	r3, r2
 801481a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801481c:	68fb      	ldr	r3, [r7, #12]
 801481e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8014820:	4a1d      	ldr	r2, [pc, #116]	; (8014898 <prvHeapInit+0xb0>)
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014826:	4b1c      	ldr	r3, [pc, #112]	; (8014898 <prvHeapInit+0xb0>)
 8014828:	2200      	movs	r2, #0
 801482a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	68ba      	ldr	r2, [r7, #8]
 8014830:	4413      	add	r3, r2
 8014832:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014834:	2208      	movs	r2, #8
 8014836:	68fb      	ldr	r3, [r7, #12]
 8014838:	1a9b      	subs	r3, r3, r2
 801483a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801483c:	68fb      	ldr	r3, [r7, #12]
 801483e:	f023 0307 	bic.w	r3, r3, #7
 8014842:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014844:	68fb      	ldr	r3, [r7, #12]
 8014846:	4a15      	ldr	r2, [pc, #84]	; (801489c <prvHeapInit+0xb4>)
 8014848:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801484a:	4b14      	ldr	r3, [pc, #80]	; (801489c <prvHeapInit+0xb4>)
 801484c:	681b      	ldr	r3, [r3, #0]
 801484e:	2200      	movs	r2, #0
 8014850:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8014852:	4b12      	ldr	r3, [pc, #72]	; (801489c <prvHeapInit+0xb4>)
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	2200      	movs	r2, #0
 8014858:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801485e:	683b      	ldr	r3, [r7, #0]
 8014860:	68fa      	ldr	r2, [r7, #12]
 8014862:	1ad2      	subs	r2, r2, r3
 8014864:	683b      	ldr	r3, [r7, #0]
 8014866:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014868:	4b0c      	ldr	r3, [pc, #48]	; (801489c <prvHeapInit+0xb4>)
 801486a:	681a      	ldr	r2, [r3, #0]
 801486c:	683b      	ldr	r3, [r7, #0]
 801486e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014870:	683b      	ldr	r3, [r7, #0]
 8014872:	685b      	ldr	r3, [r3, #4]
 8014874:	4a0a      	ldr	r2, [pc, #40]	; (80148a0 <prvHeapInit+0xb8>)
 8014876:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014878:	683b      	ldr	r3, [r7, #0]
 801487a:	685b      	ldr	r3, [r3, #4]
 801487c:	4a09      	ldr	r2, [pc, #36]	; (80148a4 <prvHeapInit+0xbc>)
 801487e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8014880:	4b09      	ldr	r3, [pc, #36]	; (80148a8 <prvHeapInit+0xc0>)
 8014882:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014886:	601a      	str	r2, [r3, #0]
}
 8014888:	bf00      	nop
 801488a:	3714      	adds	r7, #20
 801488c:	46bd      	mov	sp, r7
 801488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014892:	4770      	bx	lr
 8014894:	24002a98 	.word	0x24002a98
 8014898:	24006698 	.word	0x24006698
 801489c:	240066a0 	.word	0x240066a0
 80148a0:	240066a8 	.word	0x240066a8
 80148a4:	240066a4 	.word	0x240066a4
 80148a8:	240066b4 	.word	0x240066b4

080148ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80148ac:	b480      	push	{r7}
 80148ae:	b085      	sub	sp, #20
 80148b0:	af00      	add	r7, sp, #0
 80148b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80148b4:	4b28      	ldr	r3, [pc, #160]	; (8014958 <prvInsertBlockIntoFreeList+0xac>)
 80148b6:	60fb      	str	r3, [r7, #12]
 80148b8:	e002      	b.n	80148c0 <prvInsertBlockIntoFreeList+0x14>
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	681b      	ldr	r3, [r3, #0]
 80148be:	60fb      	str	r3, [r7, #12]
 80148c0:	68fb      	ldr	r3, [r7, #12]
 80148c2:	681b      	ldr	r3, [r3, #0]
 80148c4:	687a      	ldr	r2, [r7, #4]
 80148c6:	429a      	cmp	r2, r3
 80148c8:	d8f7      	bhi.n	80148ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80148ca:	68fb      	ldr	r3, [r7, #12]
 80148cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80148ce:	68fb      	ldr	r3, [r7, #12]
 80148d0:	685b      	ldr	r3, [r3, #4]
 80148d2:	68ba      	ldr	r2, [r7, #8]
 80148d4:	4413      	add	r3, r2
 80148d6:	687a      	ldr	r2, [r7, #4]
 80148d8:	429a      	cmp	r2, r3
 80148da:	d108      	bne.n	80148ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80148dc:	68fb      	ldr	r3, [r7, #12]
 80148de:	685a      	ldr	r2, [r3, #4]
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	685b      	ldr	r3, [r3, #4]
 80148e4:	441a      	add	r2, r3
 80148e6:	68fb      	ldr	r3, [r7, #12]
 80148e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	685b      	ldr	r3, [r3, #4]
 80148f6:	68ba      	ldr	r2, [r7, #8]
 80148f8:	441a      	add	r2, r3
 80148fa:	68fb      	ldr	r3, [r7, #12]
 80148fc:	681b      	ldr	r3, [r3, #0]
 80148fe:	429a      	cmp	r2, r3
 8014900:	d118      	bne.n	8014934 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8014902:	68fb      	ldr	r3, [r7, #12]
 8014904:	681a      	ldr	r2, [r3, #0]
 8014906:	4b15      	ldr	r3, [pc, #84]	; (801495c <prvInsertBlockIntoFreeList+0xb0>)
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	429a      	cmp	r2, r3
 801490c:	d00d      	beq.n	801492a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	685a      	ldr	r2, [r3, #4]
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	681b      	ldr	r3, [r3, #0]
 8014916:	685b      	ldr	r3, [r3, #4]
 8014918:	441a      	add	r2, r3
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801491e:	68fb      	ldr	r3, [r7, #12]
 8014920:	681b      	ldr	r3, [r3, #0]
 8014922:	681a      	ldr	r2, [r3, #0]
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	601a      	str	r2, [r3, #0]
 8014928:	e008      	b.n	801493c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801492a:	4b0c      	ldr	r3, [pc, #48]	; (801495c <prvInsertBlockIntoFreeList+0xb0>)
 801492c:	681a      	ldr	r2, [r3, #0]
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	601a      	str	r2, [r3, #0]
 8014932:	e003      	b.n	801493c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014934:	68fb      	ldr	r3, [r7, #12]
 8014936:	681a      	ldr	r2, [r3, #0]
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801493c:	68fa      	ldr	r2, [r7, #12]
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	429a      	cmp	r2, r3
 8014942:	d002      	beq.n	801494a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014944:	68fb      	ldr	r3, [r7, #12]
 8014946:	687a      	ldr	r2, [r7, #4]
 8014948:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801494a:	bf00      	nop
 801494c:	3714      	adds	r7, #20
 801494e:	46bd      	mov	sp, r7
 8014950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014954:	4770      	bx	lr
 8014956:	bf00      	nop
 8014958:	24006698 	.word	0x24006698
 801495c:	240066a0 	.word	0x240066a0

08014960 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8014960:	b480      	push	{r7}
 8014962:	b083      	sub	sp, #12
 8014964:	af00      	add	r7, sp, #0
 8014966:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	f103 0208 	add.w	r2, r3, #8
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	f04f 32ff 	mov.w	r2, #4294967295
 8014978:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	f103 0208 	add.w	r2, r3, #8
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	f103 0208 	add.w	r2, r3, #8
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	2200      	movs	r2, #0
 8014992:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8014994:	bf00      	nop
 8014996:	370c      	adds	r7, #12
 8014998:	46bd      	mov	sp, r7
 801499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801499e:	4770      	bx	lr

080149a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80149a0:	b480      	push	{r7}
 80149a2:	b083      	sub	sp, #12
 80149a4:	af00      	add	r7, sp, #0
 80149a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	2200      	movs	r2, #0
 80149ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80149ae:	bf00      	nop
 80149b0:	370c      	adds	r7, #12
 80149b2:	46bd      	mov	sp, r7
 80149b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149b8:	4770      	bx	lr

080149ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80149ba:	b480      	push	{r7}
 80149bc:	b085      	sub	sp, #20
 80149be:	af00      	add	r7, sp, #0
 80149c0:	6078      	str	r0, [r7, #4]
 80149c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	685b      	ldr	r3, [r3, #4]
 80149c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80149ca:	683b      	ldr	r3, [r7, #0]
 80149cc:	68fa      	ldr	r2, [r7, #12]
 80149ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80149d0:	68fb      	ldr	r3, [r7, #12]
 80149d2:	689a      	ldr	r2, [r3, #8]
 80149d4:	683b      	ldr	r3, [r7, #0]
 80149d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80149d8:	68fb      	ldr	r3, [r7, #12]
 80149da:	689b      	ldr	r3, [r3, #8]
 80149dc:	683a      	ldr	r2, [r7, #0]
 80149de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80149e0:	68fb      	ldr	r3, [r7, #12]
 80149e2:	683a      	ldr	r2, [r7, #0]
 80149e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80149e6:	683b      	ldr	r3, [r7, #0]
 80149e8:	687a      	ldr	r2, [r7, #4]
 80149ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	681b      	ldr	r3, [r3, #0]
 80149f0:	1c5a      	adds	r2, r3, #1
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	601a      	str	r2, [r3, #0]
}
 80149f6:	bf00      	nop
 80149f8:	3714      	adds	r7, #20
 80149fa:	46bd      	mov	sp, r7
 80149fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a00:	4770      	bx	lr

08014a02 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014a02:	b480      	push	{r7}
 8014a04:	b085      	sub	sp, #20
 8014a06:	af00      	add	r7, sp, #0
 8014a08:	6078      	str	r0, [r7, #4]
 8014a0a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8014a0c:	683b      	ldr	r3, [r7, #0]
 8014a0e:	681b      	ldr	r3, [r3, #0]
 8014a10:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8014a12:	68bb      	ldr	r3, [r7, #8]
 8014a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a18:	d103      	bne.n	8014a22 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	691b      	ldr	r3, [r3, #16]
 8014a1e:	60fb      	str	r3, [r7, #12]
 8014a20:	e00c      	b.n	8014a3c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	3308      	adds	r3, #8
 8014a26:	60fb      	str	r3, [r7, #12]
 8014a28:	e002      	b.n	8014a30 <vListInsert+0x2e>
 8014a2a:	68fb      	ldr	r3, [r7, #12]
 8014a2c:	685b      	ldr	r3, [r3, #4]
 8014a2e:	60fb      	str	r3, [r7, #12]
 8014a30:	68fb      	ldr	r3, [r7, #12]
 8014a32:	685b      	ldr	r3, [r3, #4]
 8014a34:	681b      	ldr	r3, [r3, #0]
 8014a36:	68ba      	ldr	r2, [r7, #8]
 8014a38:	429a      	cmp	r2, r3
 8014a3a:	d2f6      	bcs.n	8014a2a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8014a3c:	68fb      	ldr	r3, [r7, #12]
 8014a3e:	685a      	ldr	r2, [r3, #4]
 8014a40:	683b      	ldr	r3, [r7, #0]
 8014a42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8014a44:	683b      	ldr	r3, [r7, #0]
 8014a46:	685b      	ldr	r3, [r3, #4]
 8014a48:	683a      	ldr	r2, [r7, #0]
 8014a4a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8014a4c:	683b      	ldr	r3, [r7, #0]
 8014a4e:	68fa      	ldr	r2, [r7, #12]
 8014a50:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8014a52:	68fb      	ldr	r3, [r7, #12]
 8014a54:	683a      	ldr	r2, [r7, #0]
 8014a56:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8014a58:	683b      	ldr	r3, [r7, #0]
 8014a5a:	687a      	ldr	r2, [r7, #4]
 8014a5c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	681b      	ldr	r3, [r3, #0]
 8014a62:	1c5a      	adds	r2, r3, #1
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	601a      	str	r2, [r3, #0]
}
 8014a68:	bf00      	nop
 8014a6a:	3714      	adds	r7, #20
 8014a6c:	46bd      	mov	sp, r7
 8014a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a72:	4770      	bx	lr

08014a74 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8014a74:	b480      	push	{r7}
 8014a76:	b085      	sub	sp, #20
 8014a78:	af00      	add	r7, sp, #0
 8014a7a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	691b      	ldr	r3, [r3, #16]
 8014a80:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	685b      	ldr	r3, [r3, #4]
 8014a86:	687a      	ldr	r2, [r7, #4]
 8014a88:	6892      	ldr	r2, [r2, #8]
 8014a8a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	689b      	ldr	r3, [r3, #8]
 8014a90:	687a      	ldr	r2, [r7, #4]
 8014a92:	6852      	ldr	r2, [r2, #4]
 8014a94:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8014a96:	68fb      	ldr	r3, [r7, #12]
 8014a98:	685b      	ldr	r3, [r3, #4]
 8014a9a:	687a      	ldr	r2, [r7, #4]
 8014a9c:	429a      	cmp	r2, r3
 8014a9e:	d103      	bne.n	8014aa8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	689a      	ldr	r2, [r3, #8]
 8014aa4:	68fb      	ldr	r3, [r7, #12]
 8014aa6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	2200      	movs	r2, #0
 8014aac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8014aae:	68fb      	ldr	r3, [r7, #12]
 8014ab0:	681b      	ldr	r3, [r3, #0]
 8014ab2:	1e5a      	subs	r2, r3, #1
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8014ab8:	68fb      	ldr	r3, [r7, #12]
 8014aba:	681b      	ldr	r3, [r3, #0]
}
 8014abc:	4618      	mov	r0, r3
 8014abe:	3714      	adds	r7, #20
 8014ac0:	46bd      	mov	sp, r7
 8014ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ac6:	4770      	bx	lr

08014ac8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014ac8:	b480      	push	{r7}
 8014aca:	b085      	sub	sp, #20
 8014acc:	af00      	add	r7, sp, #0
 8014ace:	60f8      	str	r0, [r7, #12]
 8014ad0:	60b9      	str	r1, [r7, #8]
 8014ad2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014ad4:	68fb      	ldr	r3, [r7, #12]
 8014ad6:	3b04      	subs	r3, #4
 8014ad8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014ada:	68fb      	ldr	r3, [r7, #12]
 8014adc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014ae0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014ae2:	68fb      	ldr	r3, [r7, #12]
 8014ae4:	3b04      	subs	r3, #4
 8014ae6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014ae8:	68bb      	ldr	r3, [r7, #8]
 8014aea:	f023 0201 	bic.w	r2, r3, #1
 8014aee:	68fb      	ldr	r3, [r7, #12]
 8014af0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	3b04      	subs	r3, #4
 8014af6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014af8:	4a0c      	ldr	r2, [pc, #48]	; (8014b2c <pxPortInitialiseStack+0x64>)
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014afe:	68fb      	ldr	r3, [r7, #12]
 8014b00:	3b14      	subs	r3, #20
 8014b02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014b04:	687a      	ldr	r2, [r7, #4]
 8014b06:	68fb      	ldr	r3, [r7, #12]
 8014b08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014b0a:	68fb      	ldr	r3, [r7, #12]
 8014b0c:	3b04      	subs	r3, #4
 8014b0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014b10:	68fb      	ldr	r3, [r7, #12]
 8014b12:	f06f 0202 	mvn.w	r2, #2
 8014b16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014b18:	68fb      	ldr	r3, [r7, #12]
 8014b1a:	3b20      	subs	r3, #32
 8014b1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014b1e:	68fb      	ldr	r3, [r7, #12]
}
 8014b20:	4618      	mov	r0, r3
 8014b22:	3714      	adds	r7, #20
 8014b24:	46bd      	mov	sp, r7
 8014b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b2a:	4770      	bx	lr
 8014b2c:	08014b31 	.word	0x08014b31

08014b30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014b30:	b480      	push	{r7}
 8014b32:	b085      	sub	sp, #20
 8014b34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014b36:	2300      	movs	r3, #0
 8014b38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014b3a:	4b12      	ldr	r3, [pc, #72]	; (8014b84 <prvTaskExitError+0x54>)
 8014b3c:	681b      	ldr	r3, [r3, #0]
 8014b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b42:	d00a      	beq.n	8014b5a <prvTaskExitError+0x2a>
	__asm volatile
 8014b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b48:	f383 8811 	msr	BASEPRI, r3
 8014b4c:	f3bf 8f6f 	isb	sy
 8014b50:	f3bf 8f4f 	dsb	sy
 8014b54:	60fb      	str	r3, [r7, #12]
}
 8014b56:	bf00      	nop
 8014b58:	e7fe      	b.n	8014b58 <prvTaskExitError+0x28>
	__asm volatile
 8014b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b5e:	f383 8811 	msr	BASEPRI, r3
 8014b62:	f3bf 8f6f 	isb	sy
 8014b66:	f3bf 8f4f 	dsb	sy
 8014b6a:	60bb      	str	r3, [r7, #8]
}
 8014b6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014b6e:	bf00      	nop
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d0fc      	beq.n	8014b70 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014b76:	bf00      	nop
 8014b78:	bf00      	nop
 8014b7a:	3714      	adds	r7, #20
 8014b7c:	46bd      	mov	sp, r7
 8014b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b82:	4770      	bx	lr
 8014b84:	24000050 	.word	0x24000050
	...

08014b90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014b90:	4b07      	ldr	r3, [pc, #28]	; (8014bb0 <pxCurrentTCBConst2>)
 8014b92:	6819      	ldr	r1, [r3, #0]
 8014b94:	6808      	ldr	r0, [r1, #0]
 8014b96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b9a:	f380 8809 	msr	PSP, r0
 8014b9e:	f3bf 8f6f 	isb	sy
 8014ba2:	f04f 0000 	mov.w	r0, #0
 8014ba6:	f380 8811 	msr	BASEPRI, r0
 8014baa:	4770      	bx	lr
 8014bac:	f3af 8000 	nop.w

08014bb0 <pxCurrentTCBConst2>:
 8014bb0:	24006700 	.word	0x24006700
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014bb4:	bf00      	nop
 8014bb6:	bf00      	nop

08014bb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014bb8:	4808      	ldr	r0, [pc, #32]	; (8014bdc <prvPortStartFirstTask+0x24>)
 8014bba:	6800      	ldr	r0, [r0, #0]
 8014bbc:	6800      	ldr	r0, [r0, #0]
 8014bbe:	f380 8808 	msr	MSP, r0
 8014bc2:	f04f 0000 	mov.w	r0, #0
 8014bc6:	f380 8814 	msr	CONTROL, r0
 8014bca:	b662      	cpsie	i
 8014bcc:	b661      	cpsie	f
 8014bce:	f3bf 8f4f 	dsb	sy
 8014bd2:	f3bf 8f6f 	isb	sy
 8014bd6:	df00      	svc	0
 8014bd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014bda:	bf00      	nop
 8014bdc:	e000ed08 	.word	0xe000ed08

08014be0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014be0:	b580      	push	{r7, lr}
 8014be2:	b086      	sub	sp, #24
 8014be4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014be6:	4b46      	ldr	r3, [pc, #280]	; (8014d00 <xPortStartScheduler+0x120>)
 8014be8:	681b      	ldr	r3, [r3, #0]
 8014bea:	4a46      	ldr	r2, [pc, #280]	; (8014d04 <xPortStartScheduler+0x124>)
 8014bec:	4293      	cmp	r3, r2
 8014bee:	d10a      	bne.n	8014c06 <xPortStartScheduler+0x26>
	__asm volatile
 8014bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bf4:	f383 8811 	msr	BASEPRI, r3
 8014bf8:	f3bf 8f6f 	isb	sy
 8014bfc:	f3bf 8f4f 	dsb	sy
 8014c00:	613b      	str	r3, [r7, #16]
}
 8014c02:	bf00      	nop
 8014c04:	e7fe      	b.n	8014c04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014c06:	4b3e      	ldr	r3, [pc, #248]	; (8014d00 <xPortStartScheduler+0x120>)
 8014c08:	681b      	ldr	r3, [r3, #0]
 8014c0a:	4a3f      	ldr	r2, [pc, #252]	; (8014d08 <xPortStartScheduler+0x128>)
 8014c0c:	4293      	cmp	r3, r2
 8014c0e:	d10a      	bne.n	8014c26 <xPortStartScheduler+0x46>
	__asm volatile
 8014c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c14:	f383 8811 	msr	BASEPRI, r3
 8014c18:	f3bf 8f6f 	isb	sy
 8014c1c:	f3bf 8f4f 	dsb	sy
 8014c20:	60fb      	str	r3, [r7, #12]
}
 8014c22:	bf00      	nop
 8014c24:	e7fe      	b.n	8014c24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014c26:	4b39      	ldr	r3, [pc, #228]	; (8014d0c <xPortStartScheduler+0x12c>)
 8014c28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014c2a:	697b      	ldr	r3, [r7, #20]
 8014c2c:	781b      	ldrb	r3, [r3, #0]
 8014c2e:	b2db      	uxtb	r3, r3
 8014c30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014c32:	697b      	ldr	r3, [r7, #20]
 8014c34:	22ff      	movs	r2, #255	; 0xff
 8014c36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014c38:	697b      	ldr	r3, [r7, #20]
 8014c3a:	781b      	ldrb	r3, [r3, #0]
 8014c3c:	b2db      	uxtb	r3, r3
 8014c3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014c40:	78fb      	ldrb	r3, [r7, #3]
 8014c42:	b2db      	uxtb	r3, r3
 8014c44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014c48:	b2da      	uxtb	r2, r3
 8014c4a:	4b31      	ldr	r3, [pc, #196]	; (8014d10 <xPortStartScheduler+0x130>)
 8014c4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014c4e:	4b31      	ldr	r3, [pc, #196]	; (8014d14 <xPortStartScheduler+0x134>)
 8014c50:	2207      	movs	r2, #7
 8014c52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014c54:	e009      	b.n	8014c6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8014c56:	4b2f      	ldr	r3, [pc, #188]	; (8014d14 <xPortStartScheduler+0x134>)
 8014c58:	681b      	ldr	r3, [r3, #0]
 8014c5a:	3b01      	subs	r3, #1
 8014c5c:	4a2d      	ldr	r2, [pc, #180]	; (8014d14 <xPortStartScheduler+0x134>)
 8014c5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014c60:	78fb      	ldrb	r3, [r7, #3]
 8014c62:	b2db      	uxtb	r3, r3
 8014c64:	005b      	lsls	r3, r3, #1
 8014c66:	b2db      	uxtb	r3, r3
 8014c68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014c6a:	78fb      	ldrb	r3, [r7, #3]
 8014c6c:	b2db      	uxtb	r3, r3
 8014c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014c72:	2b80      	cmp	r3, #128	; 0x80
 8014c74:	d0ef      	beq.n	8014c56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014c76:	4b27      	ldr	r3, [pc, #156]	; (8014d14 <xPortStartScheduler+0x134>)
 8014c78:	681b      	ldr	r3, [r3, #0]
 8014c7a:	f1c3 0307 	rsb	r3, r3, #7
 8014c7e:	2b04      	cmp	r3, #4
 8014c80:	d00a      	beq.n	8014c98 <xPortStartScheduler+0xb8>
	__asm volatile
 8014c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c86:	f383 8811 	msr	BASEPRI, r3
 8014c8a:	f3bf 8f6f 	isb	sy
 8014c8e:	f3bf 8f4f 	dsb	sy
 8014c92:	60bb      	str	r3, [r7, #8]
}
 8014c94:	bf00      	nop
 8014c96:	e7fe      	b.n	8014c96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014c98:	4b1e      	ldr	r3, [pc, #120]	; (8014d14 <xPortStartScheduler+0x134>)
 8014c9a:	681b      	ldr	r3, [r3, #0]
 8014c9c:	021b      	lsls	r3, r3, #8
 8014c9e:	4a1d      	ldr	r2, [pc, #116]	; (8014d14 <xPortStartScheduler+0x134>)
 8014ca0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014ca2:	4b1c      	ldr	r3, [pc, #112]	; (8014d14 <xPortStartScheduler+0x134>)
 8014ca4:	681b      	ldr	r3, [r3, #0]
 8014ca6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014caa:	4a1a      	ldr	r2, [pc, #104]	; (8014d14 <xPortStartScheduler+0x134>)
 8014cac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	b2da      	uxtb	r2, r3
 8014cb2:	697b      	ldr	r3, [r7, #20]
 8014cb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014cb6:	4b18      	ldr	r3, [pc, #96]	; (8014d18 <xPortStartScheduler+0x138>)
 8014cb8:	681b      	ldr	r3, [r3, #0]
 8014cba:	4a17      	ldr	r2, [pc, #92]	; (8014d18 <xPortStartScheduler+0x138>)
 8014cbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014cc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014cc2:	4b15      	ldr	r3, [pc, #84]	; (8014d18 <xPortStartScheduler+0x138>)
 8014cc4:	681b      	ldr	r3, [r3, #0]
 8014cc6:	4a14      	ldr	r2, [pc, #80]	; (8014d18 <xPortStartScheduler+0x138>)
 8014cc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8014ccc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014cce:	f000 f8dd 	bl	8014e8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014cd2:	4b12      	ldr	r3, [pc, #72]	; (8014d1c <xPortStartScheduler+0x13c>)
 8014cd4:	2200      	movs	r2, #0
 8014cd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014cd8:	f000 f8fc 	bl	8014ed4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014cdc:	4b10      	ldr	r3, [pc, #64]	; (8014d20 <xPortStartScheduler+0x140>)
 8014cde:	681b      	ldr	r3, [r3, #0]
 8014ce0:	4a0f      	ldr	r2, [pc, #60]	; (8014d20 <xPortStartScheduler+0x140>)
 8014ce2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014ce6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014ce8:	f7ff ff66 	bl	8014bb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014cec:	f001 fd0e 	bl	801670c <vTaskSwitchContext>
	prvTaskExitError();
 8014cf0:	f7ff ff1e 	bl	8014b30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014cf4:	2300      	movs	r3, #0
}
 8014cf6:	4618      	mov	r0, r3
 8014cf8:	3718      	adds	r7, #24
 8014cfa:	46bd      	mov	sp, r7
 8014cfc:	bd80      	pop	{r7, pc}
 8014cfe:	bf00      	nop
 8014d00:	e000ed00 	.word	0xe000ed00
 8014d04:	410fc271 	.word	0x410fc271
 8014d08:	410fc270 	.word	0x410fc270
 8014d0c:	e000e400 	.word	0xe000e400
 8014d10:	240066b8 	.word	0x240066b8
 8014d14:	240066bc 	.word	0x240066bc
 8014d18:	e000ed20 	.word	0xe000ed20
 8014d1c:	24000050 	.word	0x24000050
 8014d20:	e000ef34 	.word	0xe000ef34

08014d24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014d24:	b480      	push	{r7}
 8014d26:	b083      	sub	sp, #12
 8014d28:	af00      	add	r7, sp, #0
	__asm volatile
 8014d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d2e:	f383 8811 	msr	BASEPRI, r3
 8014d32:	f3bf 8f6f 	isb	sy
 8014d36:	f3bf 8f4f 	dsb	sy
 8014d3a:	607b      	str	r3, [r7, #4]
}
 8014d3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014d3e:	4b0f      	ldr	r3, [pc, #60]	; (8014d7c <vPortEnterCritical+0x58>)
 8014d40:	681b      	ldr	r3, [r3, #0]
 8014d42:	3301      	adds	r3, #1
 8014d44:	4a0d      	ldr	r2, [pc, #52]	; (8014d7c <vPortEnterCritical+0x58>)
 8014d46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014d48:	4b0c      	ldr	r3, [pc, #48]	; (8014d7c <vPortEnterCritical+0x58>)
 8014d4a:	681b      	ldr	r3, [r3, #0]
 8014d4c:	2b01      	cmp	r3, #1
 8014d4e:	d10f      	bne.n	8014d70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014d50:	4b0b      	ldr	r3, [pc, #44]	; (8014d80 <vPortEnterCritical+0x5c>)
 8014d52:	681b      	ldr	r3, [r3, #0]
 8014d54:	b2db      	uxtb	r3, r3
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	d00a      	beq.n	8014d70 <vPortEnterCritical+0x4c>
	__asm volatile
 8014d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d5e:	f383 8811 	msr	BASEPRI, r3
 8014d62:	f3bf 8f6f 	isb	sy
 8014d66:	f3bf 8f4f 	dsb	sy
 8014d6a:	603b      	str	r3, [r7, #0]
}
 8014d6c:	bf00      	nop
 8014d6e:	e7fe      	b.n	8014d6e <vPortEnterCritical+0x4a>
	}
}
 8014d70:	bf00      	nop
 8014d72:	370c      	adds	r7, #12
 8014d74:	46bd      	mov	sp, r7
 8014d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d7a:	4770      	bx	lr
 8014d7c:	24000050 	.word	0x24000050
 8014d80:	e000ed04 	.word	0xe000ed04

08014d84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014d84:	b480      	push	{r7}
 8014d86:	b083      	sub	sp, #12
 8014d88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014d8a:	4b12      	ldr	r3, [pc, #72]	; (8014dd4 <vPortExitCritical+0x50>)
 8014d8c:	681b      	ldr	r3, [r3, #0]
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	d10a      	bne.n	8014da8 <vPortExitCritical+0x24>
	__asm volatile
 8014d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d96:	f383 8811 	msr	BASEPRI, r3
 8014d9a:	f3bf 8f6f 	isb	sy
 8014d9e:	f3bf 8f4f 	dsb	sy
 8014da2:	607b      	str	r3, [r7, #4]
}
 8014da4:	bf00      	nop
 8014da6:	e7fe      	b.n	8014da6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8014da8:	4b0a      	ldr	r3, [pc, #40]	; (8014dd4 <vPortExitCritical+0x50>)
 8014daa:	681b      	ldr	r3, [r3, #0]
 8014dac:	3b01      	subs	r3, #1
 8014dae:	4a09      	ldr	r2, [pc, #36]	; (8014dd4 <vPortExitCritical+0x50>)
 8014db0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014db2:	4b08      	ldr	r3, [pc, #32]	; (8014dd4 <vPortExitCritical+0x50>)
 8014db4:	681b      	ldr	r3, [r3, #0]
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	d105      	bne.n	8014dc6 <vPortExitCritical+0x42>
 8014dba:	2300      	movs	r3, #0
 8014dbc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8014dbe:	683b      	ldr	r3, [r7, #0]
 8014dc0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8014dc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014dc6:	bf00      	nop
 8014dc8:	370c      	adds	r7, #12
 8014dca:	46bd      	mov	sp, r7
 8014dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dd0:	4770      	bx	lr
 8014dd2:	bf00      	nop
 8014dd4:	24000050 	.word	0x24000050
	...

08014de0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014de0:	f3ef 8009 	mrs	r0, PSP
 8014de4:	f3bf 8f6f 	isb	sy
 8014de8:	4b15      	ldr	r3, [pc, #84]	; (8014e40 <pxCurrentTCBConst>)
 8014dea:	681a      	ldr	r2, [r3, #0]
 8014dec:	f01e 0f10 	tst.w	lr, #16
 8014df0:	bf08      	it	eq
 8014df2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014df6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dfa:	6010      	str	r0, [r2, #0]
 8014dfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014e00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014e04:	f380 8811 	msr	BASEPRI, r0
 8014e08:	f3bf 8f4f 	dsb	sy
 8014e0c:	f3bf 8f6f 	isb	sy
 8014e10:	f001 fc7c 	bl	801670c <vTaskSwitchContext>
 8014e14:	f04f 0000 	mov.w	r0, #0
 8014e18:	f380 8811 	msr	BASEPRI, r0
 8014e1c:	bc09      	pop	{r0, r3}
 8014e1e:	6819      	ldr	r1, [r3, #0]
 8014e20:	6808      	ldr	r0, [r1, #0]
 8014e22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e26:	f01e 0f10 	tst.w	lr, #16
 8014e2a:	bf08      	it	eq
 8014e2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014e30:	f380 8809 	msr	PSP, r0
 8014e34:	f3bf 8f6f 	isb	sy
 8014e38:	4770      	bx	lr
 8014e3a:	bf00      	nop
 8014e3c:	f3af 8000 	nop.w

08014e40 <pxCurrentTCBConst>:
 8014e40:	24006700 	.word	0x24006700
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014e44:	bf00      	nop
 8014e46:	bf00      	nop

08014e48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014e48:	b580      	push	{r7, lr}
 8014e4a:	b082      	sub	sp, #8
 8014e4c:	af00      	add	r7, sp, #0
	__asm volatile
 8014e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e52:	f383 8811 	msr	BASEPRI, r3
 8014e56:	f3bf 8f6f 	isb	sy
 8014e5a:	f3bf 8f4f 	dsb	sy
 8014e5e:	607b      	str	r3, [r7, #4]
}
 8014e60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014e62:	f001 fb99 	bl	8016598 <xTaskIncrementTick>
 8014e66:	4603      	mov	r3, r0
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	d003      	beq.n	8014e74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014e6c:	4b06      	ldr	r3, [pc, #24]	; (8014e88 <xPortSysTickHandler+0x40>)
 8014e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014e72:	601a      	str	r2, [r3, #0]
 8014e74:	2300      	movs	r3, #0
 8014e76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014e78:	683b      	ldr	r3, [r7, #0]
 8014e7a:	f383 8811 	msr	BASEPRI, r3
}
 8014e7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014e80:	bf00      	nop
 8014e82:	3708      	adds	r7, #8
 8014e84:	46bd      	mov	sp, r7
 8014e86:	bd80      	pop	{r7, pc}
 8014e88:	e000ed04 	.word	0xe000ed04

08014e8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014e8c:	b480      	push	{r7}
 8014e8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014e90:	4b0b      	ldr	r3, [pc, #44]	; (8014ec0 <vPortSetupTimerInterrupt+0x34>)
 8014e92:	2200      	movs	r2, #0
 8014e94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014e96:	4b0b      	ldr	r3, [pc, #44]	; (8014ec4 <vPortSetupTimerInterrupt+0x38>)
 8014e98:	2200      	movs	r2, #0
 8014e9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014e9c:	4b0a      	ldr	r3, [pc, #40]	; (8014ec8 <vPortSetupTimerInterrupt+0x3c>)
 8014e9e:	681b      	ldr	r3, [r3, #0]
 8014ea0:	4a0a      	ldr	r2, [pc, #40]	; (8014ecc <vPortSetupTimerInterrupt+0x40>)
 8014ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8014ea6:	099b      	lsrs	r3, r3, #6
 8014ea8:	4a09      	ldr	r2, [pc, #36]	; (8014ed0 <vPortSetupTimerInterrupt+0x44>)
 8014eaa:	3b01      	subs	r3, #1
 8014eac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014eae:	4b04      	ldr	r3, [pc, #16]	; (8014ec0 <vPortSetupTimerInterrupt+0x34>)
 8014eb0:	2207      	movs	r2, #7
 8014eb2:	601a      	str	r2, [r3, #0]
}
 8014eb4:	bf00      	nop
 8014eb6:	46bd      	mov	sp, r7
 8014eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ebc:	4770      	bx	lr
 8014ebe:	bf00      	nop
 8014ec0:	e000e010 	.word	0xe000e010
 8014ec4:	e000e018 	.word	0xe000e018
 8014ec8:	24000040 	.word	0x24000040
 8014ecc:	10624dd3 	.word	0x10624dd3
 8014ed0:	e000e014 	.word	0xe000e014

08014ed4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014ed4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014ee4 <vPortEnableVFP+0x10>
 8014ed8:	6801      	ldr	r1, [r0, #0]
 8014eda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8014ede:	6001      	str	r1, [r0, #0]
 8014ee0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014ee2:	bf00      	nop
 8014ee4:	e000ed88 	.word	0xe000ed88

08014ee8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014ee8:	b480      	push	{r7}
 8014eea:	b085      	sub	sp, #20
 8014eec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8014eee:	f3ef 8305 	mrs	r3, IPSR
 8014ef2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014ef4:	68fb      	ldr	r3, [r7, #12]
 8014ef6:	2b0f      	cmp	r3, #15
 8014ef8:	d914      	bls.n	8014f24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014efa:	4a17      	ldr	r2, [pc, #92]	; (8014f58 <vPortValidateInterruptPriority+0x70>)
 8014efc:	68fb      	ldr	r3, [r7, #12]
 8014efe:	4413      	add	r3, r2
 8014f00:	781b      	ldrb	r3, [r3, #0]
 8014f02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014f04:	4b15      	ldr	r3, [pc, #84]	; (8014f5c <vPortValidateInterruptPriority+0x74>)
 8014f06:	781b      	ldrb	r3, [r3, #0]
 8014f08:	7afa      	ldrb	r2, [r7, #11]
 8014f0a:	429a      	cmp	r2, r3
 8014f0c:	d20a      	bcs.n	8014f24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8014f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f12:	f383 8811 	msr	BASEPRI, r3
 8014f16:	f3bf 8f6f 	isb	sy
 8014f1a:	f3bf 8f4f 	dsb	sy
 8014f1e:	607b      	str	r3, [r7, #4]
}
 8014f20:	bf00      	nop
 8014f22:	e7fe      	b.n	8014f22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014f24:	4b0e      	ldr	r3, [pc, #56]	; (8014f60 <vPortValidateInterruptPriority+0x78>)
 8014f26:	681b      	ldr	r3, [r3, #0]
 8014f28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8014f2c:	4b0d      	ldr	r3, [pc, #52]	; (8014f64 <vPortValidateInterruptPriority+0x7c>)
 8014f2e:	681b      	ldr	r3, [r3, #0]
 8014f30:	429a      	cmp	r2, r3
 8014f32:	d90a      	bls.n	8014f4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8014f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f38:	f383 8811 	msr	BASEPRI, r3
 8014f3c:	f3bf 8f6f 	isb	sy
 8014f40:	f3bf 8f4f 	dsb	sy
 8014f44:	603b      	str	r3, [r7, #0]
}
 8014f46:	bf00      	nop
 8014f48:	e7fe      	b.n	8014f48 <vPortValidateInterruptPriority+0x60>
	}
 8014f4a:	bf00      	nop
 8014f4c:	3714      	adds	r7, #20
 8014f4e:	46bd      	mov	sp, r7
 8014f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f54:	4770      	bx	lr
 8014f56:	bf00      	nop
 8014f58:	e000e3f0 	.word	0xe000e3f0
 8014f5c:	240066b8 	.word	0x240066b8
 8014f60:	e000ed0c 	.word	0xe000ed0c
 8014f64:	240066bc 	.word	0x240066bc

08014f68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8014f68:	b580      	push	{r7, lr}
 8014f6a:	b084      	sub	sp, #16
 8014f6c:	af00      	add	r7, sp, #0
 8014f6e:	6078      	str	r0, [r7, #4]
 8014f70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8014f76:	68fb      	ldr	r3, [r7, #12]
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d10a      	bne.n	8014f92 <xQueueGenericReset+0x2a>
	__asm volatile
 8014f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f80:	f383 8811 	msr	BASEPRI, r3
 8014f84:	f3bf 8f6f 	isb	sy
 8014f88:	f3bf 8f4f 	dsb	sy
 8014f8c:	60bb      	str	r3, [r7, #8]
}
 8014f8e:	bf00      	nop
 8014f90:	e7fe      	b.n	8014f90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8014f92:	f7ff fec7 	bl	8014d24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014f96:	68fb      	ldr	r3, [r7, #12]
 8014f98:	681a      	ldr	r2, [r3, #0]
 8014f9a:	68fb      	ldr	r3, [r7, #12]
 8014f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014f9e:	68f9      	ldr	r1, [r7, #12]
 8014fa0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8014fa2:	fb01 f303 	mul.w	r3, r1, r3
 8014fa6:	441a      	add	r2, r3
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8014fac:	68fb      	ldr	r3, [r7, #12]
 8014fae:	2200      	movs	r2, #0
 8014fb0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8014fb2:	68fb      	ldr	r3, [r7, #12]
 8014fb4:	681a      	ldr	r2, [r3, #0]
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014fba:	68fb      	ldr	r3, [r7, #12]
 8014fbc:	681a      	ldr	r2, [r3, #0]
 8014fbe:	68fb      	ldr	r3, [r7, #12]
 8014fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014fc2:	3b01      	subs	r3, #1
 8014fc4:	68f9      	ldr	r1, [r7, #12]
 8014fc6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8014fc8:	fb01 f303 	mul.w	r3, r1, r3
 8014fcc:	441a      	add	r2, r3
 8014fce:	68fb      	ldr	r3, [r7, #12]
 8014fd0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8014fd2:	68fb      	ldr	r3, [r7, #12]
 8014fd4:	22ff      	movs	r2, #255	; 0xff
 8014fd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8014fda:	68fb      	ldr	r3, [r7, #12]
 8014fdc:	22ff      	movs	r2, #255	; 0xff
 8014fde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8014fe2:	683b      	ldr	r3, [r7, #0]
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	d114      	bne.n	8015012 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014fe8:	68fb      	ldr	r3, [r7, #12]
 8014fea:	691b      	ldr	r3, [r3, #16]
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d01a      	beq.n	8015026 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	3310      	adds	r3, #16
 8014ff4:	4618      	mov	r0, r3
 8014ff6:	f001 fc37 	bl	8016868 <xTaskRemoveFromEventList>
 8014ffa:	4603      	mov	r3, r0
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	d012      	beq.n	8015026 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8015000:	4b0c      	ldr	r3, [pc, #48]	; (8015034 <xQueueGenericReset+0xcc>)
 8015002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015006:	601a      	str	r2, [r3, #0]
 8015008:	f3bf 8f4f 	dsb	sy
 801500c:	f3bf 8f6f 	isb	sy
 8015010:	e009      	b.n	8015026 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8015012:	68fb      	ldr	r3, [r7, #12]
 8015014:	3310      	adds	r3, #16
 8015016:	4618      	mov	r0, r3
 8015018:	f7ff fca2 	bl	8014960 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801501c:	68fb      	ldr	r3, [r7, #12]
 801501e:	3324      	adds	r3, #36	; 0x24
 8015020:	4618      	mov	r0, r3
 8015022:	f7ff fc9d 	bl	8014960 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8015026:	f7ff fead 	bl	8014d84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801502a:	2301      	movs	r3, #1
}
 801502c:	4618      	mov	r0, r3
 801502e:	3710      	adds	r7, #16
 8015030:	46bd      	mov	sp, r7
 8015032:	bd80      	pop	{r7, pc}
 8015034:	e000ed04 	.word	0xe000ed04

08015038 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8015038:	b580      	push	{r7, lr}
 801503a:	b08e      	sub	sp, #56	; 0x38
 801503c:	af02      	add	r7, sp, #8
 801503e:	60f8      	str	r0, [r7, #12]
 8015040:	60b9      	str	r1, [r7, #8]
 8015042:	607a      	str	r2, [r7, #4]
 8015044:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015046:	68fb      	ldr	r3, [r7, #12]
 8015048:	2b00      	cmp	r3, #0
 801504a:	d10a      	bne.n	8015062 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 801504c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015050:	f383 8811 	msr	BASEPRI, r3
 8015054:	f3bf 8f6f 	isb	sy
 8015058:	f3bf 8f4f 	dsb	sy
 801505c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801505e:	bf00      	nop
 8015060:	e7fe      	b.n	8015060 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8015062:	683b      	ldr	r3, [r7, #0]
 8015064:	2b00      	cmp	r3, #0
 8015066:	d10a      	bne.n	801507e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8015068:	f04f 0350 	mov.w	r3, #80	; 0x50
 801506c:	f383 8811 	msr	BASEPRI, r3
 8015070:	f3bf 8f6f 	isb	sy
 8015074:	f3bf 8f4f 	dsb	sy
 8015078:	627b      	str	r3, [r7, #36]	; 0x24
}
 801507a:	bf00      	nop
 801507c:	e7fe      	b.n	801507c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	2b00      	cmp	r3, #0
 8015082:	d002      	beq.n	801508a <xQueueGenericCreateStatic+0x52>
 8015084:	68bb      	ldr	r3, [r7, #8]
 8015086:	2b00      	cmp	r3, #0
 8015088:	d001      	beq.n	801508e <xQueueGenericCreateStatic+0x56>
 801508a:	2301      	movs	r3, #1
 801508c:	e000      	b.n	8015090 <xQueueGenericCreateStatic+0x58>
 801508e:	2300      	movs	r3, #0
 8015090:	2b00      	cmp	r3, #0
 8015092:	d10a      	bne.n	80150aa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8015094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015098:	f383 8811 	msr	BASEPRI, r3
 801509c:	f3bf 8f6f 	isb	sy
 80150a0:	f3bf 8f4f 	dsb	sy
 80150a4:	623b      	str	r3, [r7, #32]
}
 80150a6:	bf00      	nop
 80150a8:	e7fe      	b.n	80150a8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	d102      	bne.n	80150b6 <xQueueGenericCreateStatic+0x7e>
 80150b0:	68bb      	ldr	r3, [r7, #8]
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d101      	bne.n	80150ba <xQueueGenericCreateStatic+0x82>
 80150b6:	2301      	movs	r3, #1
 80150b8:	e000      	b.n	80150bc <xQueueGenericCreateStatic+0x84>
 80150ba:	2300      	movs	r3, #0
 80150bc:	2b00      	cmp	r3, #0
 80150be:	d10a      	bne.n	80150d6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80150c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150c4:	f383 8811 	msr	BASEPRI, r3
 80150c8:	f3bf 8f6f 	isb	sy
 80150cc:	f3bf 8f4f 	dsb	sy
 80150d0:	61fb      	str	r3, [r7, #28]
}
 80150d2:	bf00      	nop
 80150d4:	e7fe      	b.n	80150d4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80150d6:	2350      	movs	r3, #80	; 0x50
 80150d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80150da:	697b      	ldr	r3, [r7, #20]
 80150dc:	2b50      	cmp	r3, #80	; 0x50
 80150de:	d00a      	beq.n	80150f6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80150e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150e4:	f383 8811 	msr	BASEPRI, r3
 80150e8:	f3bf 8f6f 	isb	sy
 80150ec:	f3bf 8f4f 	dsb	sy
 80150f0:	61bb      	str	r3, [r7, #24]
}
 80150f2:	bf00      	nop
 80150f4:	e7fe      	b.n	80150f4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80150f6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80150f8:	683b      	ldr	r3, [r7, #0]
 80150fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80150fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d00d      	beq.n	801511e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8015102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015104:	2201      	movs	r2, #1
 8015106:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801510a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801510e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015110:	9300      	str	r3, [sp, #0]
 8015112:	4613      	mov	r3, r2
 8015114:	687a      	ldr	r2, [r7, #4]
 8015116:	68b9      	ldr	r1, [r7, #8]
 8015118:	68f8      	ldr	r0, [r7, #12]
 801511a:	f000 f83f 	bl	801519c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801511e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8015120:	4618      	mov	r0, r3
 8015122:	3730      	adds	r7, #48	; 0x30
 8015124:	46bd      	mov	sp, r7
 8015126:	bd80      	pop	{r7, pc}

08015128 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8015128:	b580      	push	{r7, lr}
 801512a:	b08a      	sub	sp, #40	; 0x28
 801512c:	af02      	add	r7, sp, #8
 801512e:	60f8      	str	r0, [r7, #12]
 8015130:	60b9      	str	r1, [r7, #8]
 8015132:	4613      	mov	r3, r2
 8015134:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015136:	68fb      	ldr	r3, [r7, #12]
 8015138:	2b00      	cmp	r3, #0
 801513a:	d10a      	bne.n	8015152 <xQueueGenericCreate+0x2a>
	__asm volatile
 801513c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015140:	f383 8811 	msr	BASEPRI, r3
 8015144:	f3bf 8f6f 	isb	sy
 8015148:	f3bf 8f4f 	dsb	sy
 801514c:	613b      	str	r3, [r7, #16]
}
 801514e:	bf00      	nop
 8015150:	e7fe      	b.n	8015150 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	68ba      	ldr	r2, [r7, #8]
 8015156:	fb02 f303 	mul.w	r3, r2, r3
 801515a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801515c:	69fb      	ldr	r3, [r7, #28]
 801515e:	3350      	adds	r3, #80	; 0x50
 8015160:	4618      	mov	r0, r3
 8015162:	f7ff fa13 	bl	801458c <pvPortMalloc>
 8015166:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8015168:	69bb      	ldr	r3, [r7, #24]
 801516a:	2b00      	cmp	r3, #0
 801516c:	d011      	beq.n	8015192 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801516e:	69bb      	ldr	r3, [r7, #24]
 8015170:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015172:	697b      	ldr	r3, [r7, #20]
 8015174:	3350      	adds	r3, #80	; 0x50
 8015176:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015178:	69bb      	ldr	r3, [r7, #24]
 801517a:	2200      	movs	r2, #0
 801517c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015180:	79fa      	ldrb	r2, [r7, #7]
 8015182:	69bb      	ldr	r3, [r7, #24]
 8015184:	9300      	str	r3, [sp, #0]
 8015186:	4613      	mov	r3, r2
 8015188:	697a      	ldr	r2, [r7, #20]
 801518a:	68b9      	ldr	r1, [r7, #8]
 801518c:	68f8      	ldr	r0, [r7, #12]
 801518e:	f000 f805 	bl	801519c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015192:	69bb      	ldr	r3, [r7, #24]
	}
 8015194:	4618      	mov	r0, r3
 8015196:	3720      	adds	r7, #32
 8015198:	46bd      	mov	sp, r7
 801519a:	bd80      	pop	{r7, pc}

0801519c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801519c:	b580      	push	{r7, lr}
 801519e:	b084      	sub	sp, #16
 80151a0:	af00      	add	r7, sp, #0
 80151a2:	60f8      	str	r0, [r7, #12]
 80151a4:	60b9      	str	r1, [r7, #8]
 80151a6:	607a      	str	r2, [r7, #4]
 80151a8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80151aa:	68bb      	ldr	r3, [r7, #8]
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d103      	bne.n	80151b8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80151b0:	69bb      	ldr	r3, [r7, #24]
 80151b2:	69ba      	ldr	r2, [r7, #24]
 80151b4:	601a      	str	r2, [r3, #0]
 80151b6:	e002      	b.n	80151be <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80151b8:	69bb      	ldr	r3, [r7, #24]
 80151ba:	687a      	ldr	r2, [r7, #4]
 80151bc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80151be:	69bb      	ldr	r3, [r7, #24]
 80151c0:	68fa      	ldr	r2, [r7, #12]
 80151c2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80151c4:	69bb      	ldr	r3, [r7, #24]
 80151c6:	68ba      	ldr	r2, [r7, #8]
 80151c8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80151ca:	2101      	movs	r1, #1
 80151cc:	69b8      	ldr	r0, [r7, #24]
 80151ce:	f7ff fecb 	bl	8014f68 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80151d2:	69bb      	ldr	r3, [r7, #24]
 80151d4:	78fa      	ldrb	r2, [r7, #3]
 80151d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80151da:	bf00      	nop
 80151dc:	3710      	adds	r7, #16
 80151de:	46bd      	mov	sp, r7
 80151e0:	bd80      	pop	{r7, pc}

080151e2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80151e2:	b580      	push	{r7, lr}
 80151e4:	b08a      	sub	sp, #40	; 0x28
 80151e6:	af02      	add	r7, sp, #8
 80151e8:	60f8      	str	r0, [r7, #12]
 80151ea:	60b9      	str	r1, [r7, #8]
 80151ec:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80151ee:	68fb      	ldr	r3, [r7, #12]
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	d10a      	bne.n	801520a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80151f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151f8:	f383 8811 	msr	BASEPRI, r3
 80151fc:	f3bf 8f6f 	isb	sy
 8015200:	f3bf 8f4f 	dsb	sy
 8015204:	61bb      	str	r3, [r7, #24]
}
 8015206:	bf00      	nop
 8015208:	e7fe      	b.n	8015208 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 801520a:	68ba      	ldr	r2, [r7, #8]
 801520c:	68fb      	ldr	r3, [r7, #12]
 801520e:	429a      	cmp	r2, r3
 8015210:	d90a      	bls.n	8015228 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8015212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015216:	f383 8811 	msr	BASEPRI, r3
 801521a:	f3bf 8f6f 	isb	sy
 801521e:	f3bf 8f4f 	dsb	sy
 8015222:	617b      	str	r3, [r7, #20]
}
 8015224:	bf00      	nop
 8015226:	e7fe      	b.n	8015226 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8015228:	2302      	movs	r3, #2
 801522a:	9300      	str	r3, [sp, #0]
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	2200      	movs	r2, #0
 8015230:	2100      	movs	r1, #0
 8015232:	68f8      	ldr	r0, [r7, #12]
 8015234:	f7ff ff00 	bl	8015038 <xQueueGenericCreateStatic>
 8015238:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801523a:	69fb      	ldr	r3, [r7, #28]
 801523c:	2b00      	cmp	r3, #0
 801523e:	d002      	beq.n	8015246 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8015240:	69fb      	ldr	r3, [r7, #28]
 8015242:	68ba      	ldr	r2, [r7, #8]
 8015244:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8015246:	69fb      	ldr	r3, [r7, #28]
	}
 8015248:	4618      	mov	r0, r3
 801524a:	3720      	adds	r7, #32
 801524c:	46bd      	mov	sp, r7
 801524e:	bd80      	pop	{r7, pc}

08015250 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8015250:	b580      	push	{r7, lr}
 8015252:	b086      	sub	sp, #24
 8015254:	af00      	add	r7, sp, #0
 8015256:	6078      	str	r0, [r7, #4]
 8015258:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	2b00      	cmp	r3, #0
 801525e:	d10a      	bne.n	8015276 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8015260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015264:	f383 8811 	msr	BASEPRI, r3
 8015268:	f3bf 8f6f 	isb	sy
 801526c:	f3bf 8f4f 	dsb	sy
 8015270:	613b      	str	r3, [r7, #16]
}
 8015272:	bf00      	nop
 8015274:	e7fe      	b.n	8015274 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8015276:	683a      	ldr	r2, [r7, #0]
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	429a      	cmp	r2, r3
 801527c:	d90a      	bls.n	8015294 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 801527e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015282:	f383 8811 	msr	BASEPRI, r3
 8015286:	f3bf 8f6f 	isb	sy
 801528a:	f3bf 8f4f 	dsb	sy
 801528e:	60fb      	str	r3, [r7, #12]
}
 8015290:	bf00      	nop
 8015292:	e7fe      	b.n	8015292 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8015294:	2202      	movs	r2, #2
 8015296:	2100      	movs	r1, #0
 8015298:	6878      	ldr	r0, [r7, #4]
 801529a:	f7ff ff45 	bl	8015128 <xQueueGenericCreate>
 801529e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80152a0:	697b      	ldr	r3, [r7, #20]
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d002      	beq.n	80152ac <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80152a6:	697b      	ldr	r3, [r7, #20]
 80152a8:	683a      	ldr	r2, [r7, #0]
 80152aa:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80152ac:	697b      	ldr	r3, [r7, #20]
	}
 80152ae:	4618      	mov	r0, r3
 80152b0:	3718      	adds	r7, #24
 80152b2:	46bd      	mov	sp, r7
 80152b4:	bd80      	pop	{r7, pc}
	...

080152b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80152b8:	b580      	push	{r7, lr}
 80152ba:	b08e      	sub	sp, #56	; 0x38
 80152bc:	af00      	add	r7, sp, #0
 80152be:	60f8      	str	r0, [r7, #12]
 80152c0:	60b9      	str	r1, [r7, #8]
 80152c2:	607a      	str	r2, [r7, #4]
 80152c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80152c6:	2300      	movs	r3, #0
 80152c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80152ca:	68fb      	ldr	r3, [r7, #12]
 80152cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80152ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d10a      	bne.n	80152ea <xQueueGenericSend+0x32>
	__asm volatile
 80152d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152d8:	f383 8811 	msr	BASEPRI, r3
 80152dc:	f3bf 8f6f 	isb	sy
 80152e0:	f3bf 8f4f 	dsb	sy
 80152e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80152e6:	bf00      	nop
 80152e8:	e7fe      	b.n	80152e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80152ea:	68bb      	ldr	r3, [r7, #8]
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	d103      	bne.n	80152f8 <xQueueGenericSend+0x40>
 80152f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80152f4:	2b00      	cmp	r3, #0
 80152f6:	d101      	bne.n	80152fc <xQueueGenericSend+0x44>
 80152f8:	2301      	movs	r3, #1
 80152fa:	e000      	b.n	80152fe <xQueueGenericSend+0x46>
 80152fc:	2300      	movs	r3, #0
 80152fe:	2b00      	cmp	r3, #0
 8015300:	d10a      	bne.n	8015318 <xQueueGenericSend+0x60>
	__asm volatile
 8015302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015306:	f383 8811 	msr	BASEPRI, r3
 801530a:	f3bf 8f6f 	isb	sy
 801530e:	f3bf 8f4f 	dsb	sy
 8015312:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015314:	bf00      	nop
 8015316:	e7fe      	b.n	8015316 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015318:	683b      	ldr	r3, [r7, #0]
 801531a:	2b02      	cmp	r3, #2
 801531c:	d103      	bne.n	8015326 <xQueueGenericSend+0x6e>
 801531e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015322:	2b01      	cmp	r3, #1
 8015324:	d101      	bne.n	801532a <xQueueGenericSend+0x72>
 8015326:	2301      	movs	r3, #1
 8015328:	e000      	b.n	801532c <xQueueGenericSend+0x74>
 801532a:	2300      	movs	r3, #0
 801532c:	2b00      	cmp	r3, #0
 801532e:	d10a      	bne.n	8015346 <xQueueGenericSend+0x8e>
	__asm volatile
 8015330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015334:	f383 8811 	msr	BASEPRI, r3
 8015338:	f3bf 8f6f 	isb	sy
 801533c:	f3bf 8f4f 	dsb	sy
 8015340:	623b      	str	r3, [r7, #32]
}
 8015342:	bf00      	nop
 8015344:	e7fe      	b.n	8015344 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015346:	f001 fc4d 	bl	8016be4 <xTaskGetSchedulerState>
 801534a:	4603      	mov	r3, r0
 801534c:	2b00      	cmp	r3, #0
 801534e:	d102      	bne.n	8015356 <xQueueGenericSend+0x9e>
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	2b00      	cmp	r3, #0
 8015354:	d101      	bne.n	801535a <xQueueGenericSend+0xa2>
 8015356:	2301      	movs	r3, #1
 8015358:	e000      	b.n	801535c <xQueueGenericSend+0xa4>
 801535a:	2300      	movs	r3, #0
 801535c:	2b00      	cmp	r3, #0
 801535e:	d10a      	bne.n	8015376 <xQueueGenericSend+0xbe>
	__asm volatile
 8015360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015364:	f383 8811 	msr	BASEPRI, r3
 8015368:	f3bf 8f6f 	isb	sy
 801536c:	f3bf 8f4f 	dsb	sy
 8015370:	61fb      	str	r3, [r7, #28]
}
 8015372:	bf00      	nop
 8015374:	e7fe      	b.n	8015374 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015376:	f7ff fcd5 	bl	8014d24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801537a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801537c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801537e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015382:	429a      	cmp	r2, r3
 8015384:	d302      	bcc.n	801538c <xQueueGenericSend+0xd4>
 8015386:	683b      	ldr	r3, [r7, #0]
 8015388:	2b02      	cmp	r3, #2
 801538a:	d129      	bne.n	80153e0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801538c:	683a      	ldr	r2, [r7, #0]
 801538e:	68b9      	ldr	r1, [r7, #8]
 8015390:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015392:	f000 fc5e 	bl	8015c52 <prvCopyDataToQueue>
 8015396:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801539a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801539c:	2b00      	cmp	r3, #0
 801539e:	d010      	beq.n	80153c2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80153a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153a2:	3324      	adds	r3, #36	; 0x24
 80153a4:	4618      	mov	r0, r3
 80153a6:	f001 fa5f 	bl	8016868 <xTaskRemoveFromEventList>
 80153aa:	4603      	mov	r3, r0
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	d013      	beq.n	80153d8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80153b0:	4b3f      	ldr	r3, [pc, #252]	; (80154b0 <xQueueGenericSend+0x1f8>)
 80153b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80153b6:	601a      	str	r2, [r3, #0]
 80153b8:	f3bf 8f4f 	dsb	sy
 80153bc:	f3bf 8f6f 	isb	sy
 80153c0:	e00a      	b.n	80153d8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80153c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153c4:	2b00      	cmp	r3, #0
 80153c6:	d007      	beq.n	80153d8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80153c8:	4b39      	ldr	r3, [pc, #228]	; (80154b0 <xQueueGenericSend+0x1f8>)
 80153ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80153ce:	601a      	str	r2, [r3, #0]
 80153d0:	f3bf 8f4f 	dsb	sy
 80153d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80153d8:	f7ff fcd4 	bl	8014d84 <vPortExitCritical>
				return pdPASS;
 80153dc:	2301      	movs	r3, #1
 80153de:	e063      	b.n	80154a8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	2b00      	cmp	r3, #0
 80153e4:	d103      	bne.n	80153ee <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80153e6:	f7ff fccd 	bl	8014d84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80153ea:	2300      	movs	r3, #0
 80153ec:	e05c      	b.n	80154a8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80153ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	d106      	bne.n	8015402 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80153f4:	f107 0314 	add.w	r3, r7, #20
 80153f8:	4618      	mov	r0, r3
 80153fa:	f001 fa99 	bl	8016930 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80153fe:	2301      	movs	r3, #1
 8015400:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015402:	f7ff fcbf 	bl	8014d84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015406:	f000 fff9 	bl	80163fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801540a:	f7ff fc8b 	bl	8014d24 <vPortEnterCritical>
 801540e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015410:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015414:	b25b      	sxtb	r3, r3
 8015416:	f1b3 3fff 	cmp.w	r3, #4294967295
 801541a:	d103      	bne.n	8015424 <xQueueGenericSend+0x16c>
 801541c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801541e:	2200      	movs	r2, #0
 8015420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015426:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801542a:	b25b      	sxtb	r3, r3
 801542c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015430:	d103      	bne.n	801543a <xQueueGenericSend+0x182>
 8015432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015434:	2200      	movs	r2, #0
 8015436:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801543a:	f7ff fca3 	bl	8014d84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801543e:	1d3a      	adds	r2, r7, #4
 8015440:	f107 0314 	add.w	r3, r7, #20
 8015444:	4611      	mov	r1, r2
 8015446:	4618      	mov	r0, r3
 8015448:	f001 fa88 	bl	801695c <xTaskCheckForTimeOut>
 801544c:	4603      	mov	r3, r0
 801544e:	2b00      	cmp	r3, #0
 8015450:	d124      	bne.n	801549c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8015452:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015454:	f000 fcf5 	bl	8015e42 <prvIsQueueFull>
 8015458:	4603      	mov	r3, r0
 801545a:	2b00      	cmp	r3, #0
 801545c:	d018      	beq.n	8015490 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801545e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015460:	3310      	adds	r3, #16
 8015462:	687a      	ldr	r2, [r7, #4]
 8015464:	4611      	mov	r1, r2
 8015466:	4618      	mov	r0, r3
 8015468:	f001 f9ae 	bl	80167c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801546c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801546e:	f000 fc80 	bl	8015d72 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8015472:	f000 ffd1 	bl	8016418 <xTaskResumeAll>
 8015476:	4603      	mov	r3, r0
 8015478:	2b00      	cmp	r3, #0
 801547a:	f47f af7c 	bne.w	8015376 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801547e:	4b0c      	ldr	r3, [pc, #48]	; (80154b0 <xQueueGenericSend+0x1f8>)
 8015480:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015484:	601a      	str	r2, [r3, #0]
 8015486:	f3bf 8f4f 	dsb	sy
 801548a:	f3bf 8f6f 	isb	sy
 801548e:	e772      	b.n	8015376 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015490:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015492:	f000 fc6e 	bl	8015d72 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015496:	f000 ffbf 	bl	8016418 <xTaskResumeAll>
 801549a:	e76c      	b.n	8015376 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801549c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801549e:	f000 fc68 	bl	8015d72 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80154a2:	f000 ffb9 	bl	8016418 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80154a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80154a8:	4618      	mov	r0, r3
 80154aa:	3738      	adds	r7, #56	; 0x38
 80154ac:	46bd      	mov	sp, r7
 80154ae:	bd80      	pop	{r7, pc}
 80154b0:	e000ed04 	.word	0xe000ed04

080154b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80154b4:	b580      	push	{r7, lr}
 80154b6:	b090      	sub	sp, #64	; 0x40
 80154b8:	af00      	add	r7, sp, #0
 80154ba:	60f8      	str	r0, [r7, #12]
 80154bc:	60b9      	str	r1, [r7, #8]
 80154be:	607a      	str	r2, [r7, #4]
 80154c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80154c2:	68fb      	ldr	r3, [r7, #12]
 80154c4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80154c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80154c8:	2b00      	cmp	r3, #0
 80154ca:	d10a      	bne.n	80154e2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80154cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154d0:	f383 8811 	msr	BASEPRI, r3
 80154d4:	f3bf 8f6f 	isb	sy
 80154d8:	f3bf 8f4f 	dsb	sy
 80154dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80154de:	bf00      	nop
 80154e0:	e7fe      	b.n	80154e0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80154e2:	68bb      	ldr	r3, [r7, #8]
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	d103      	bne.n	80154f0 <xQueueGenericSendFromISR+0x3c>
 80154e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80154ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d101      	bne.n	80154f4 <xQueueGenericSendFromISR+0x40>
 80154f0:	2301      	movs	r3, #1
 80154f2:	e000      	b.n	80154f6 <xQueueGenericSendFromISR+0x42>
 80154f4:	2300      	movs	r3, #0
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	d10a      	bne.n	8015510 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80154fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154fe:	f383 8811 	msr	BASEPRI, r3
 8015502:	f3bf 8f6f 	isb	sy
 8015506:	f3bf 8f4f 	dsb	sy
 801550a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801550c:	bf00      	nop
 801550e:	e7fe      	b.n	801550e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015510:	683b      	ldr	r3, [r7, #0]
 8015512:	2b02      	cmp	r3, #2
 8015514:	d103      	bne.n	801551e <xQueueGenericSendFromISR+0x6a>
 8015516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801551a:	2b01      	cmp	r3, #1
 801551c:	d101      	bne.n	8015522 <xQueueGenericSendFromISR+0x6e>
 801551e:	2301      	movs	r3, #1
 8015520:	e000      	b.n	8015524 <xQueueGenericSendFromISR+0x70>
 8015522:	2300      	movs	r3, #0
 8015524:	2b00      	cmp	r3, #0
 8015526:	d10a      	bne.n	801553e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8015528:	f04f 0350 	mov.w	r3, #80	; 0x50
 801552c:	f383 8811 	msr	BASEPRI, r3
 8015530:	f3bf 8f6f 	isb	sy
 8015534:	f3bf 8f4f 	dsb	sy
 8015538:	623b      	str	r3, [r7, #32]
}
 801553a:	bf00      	nop
 801553c:	e7fe      	b.n	801553c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801553e:	f7ff fcd3 	bl	8014ee8 <vPortValidateInterruptPriority>
	__asm volatile
 8015542:	f3ef 8211 	mrs	r2, BASEPRI
 8015546:	f04f 0350 	mov.w	r3, #80	; 0x50
 801554a:	f383 8811 	msr	BASEPRI, r3
 801554e:	f3bf 8f6f 	isb	sy
 8015552:	f3bf 8f4f 	dsb	sy
 8015556:	61fa      	str	r2, [r7, #28]
 8015558:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 801555a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801555c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801555e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015560:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015566:	429a      	cmp	r2, r3
 8015568:	d302      	bcc.n	8015570 <xQueueGenericSendFromISR+0xbc>
 801556a:	683b      	ldr	r3, [r7, #0]
 801556c:	2b02      	cmp	r3, #2
 801556e:	d12f      	bne.n	80155d0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015572:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801557a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801557c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801557e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015580:	683a      	ldr	r2, [r7, #0]
 8015582:	68b9      	ldr	r1, [r7, #8]
 8015584:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015586:	f000 fb64 	bl	8015c52 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801558a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801558e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015592:	d112      	bne.n	80155ba <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015598:	2b00      	cmp	r3, #0
 801559a:	d016      	beq.n	80155ca <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801559c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801559e:	3324      	adds	r3, #36	; 0x24
 80155a0:	4618      	mov	r0, r3
 80155a2:	f001 f961 	bl	8016868 <xTaskRemoveFromEventList>
 80155a6:	4603      	mov	r3, r0
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	d00e      	beq.n	80155ca <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	d00b      	beq.n	80155ca <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	2201      	movs	r2, #1
 80155b6:	601a      	str	r2, [r3, #0]
 80155b8:	e007      	b.n	80155ca <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80155ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80155be:	3301      	adds	r3, #1
 80155c0:	b2db      	uxtb	r3, r3
 80155c2:	b25a      	sxtb	r2, r3
 80155c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80155c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80155ca:	2301      	movs	r3, #1
 80155cc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80155ce:	e001      	b.n	80155d4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80155d0:	2300      	movs	r3, #0
 80155d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80155d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80155d6:	617b      	str	r3, [r7, #20]
	__asm volatile
 80155d8:	697b      	ldr	r3, [r7, #20]
 80155da:	f383 8811 	msr	BASEPRI, r3
}
 80155de:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80155e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80155e2:	4618      	mov	r0, r3
 80155e4:	3740      	adds	r7, #64	; 0x40
 80155e6:	46bd      	mov	sp, r7
 80155e8:	bd80      	pop	{r7, pc}

080155ea <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80155ea:	b580      	push	{r7, lr}
 80155ec:	b08e      	sub	sp, #56	; 0x38
 80155ee:	af00      	add	r7, sp, #0
 80155f0:	6078      	str	r0, [r7, #4]
 80155f2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80155f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d10a      	bne.n	8015614 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80155fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015602:	f383 8811 	msr	BASEPRI, r3
 8015606:	f3bf 8f6f 	isb	sy
 801560a:	f3bf 8f4f 	dsb	sy
 801560e:	623b      	str	r3, [r7, #32]
}
 8015610:	bf00      	nop
 8015612:	e7fe      	b.n	8015612 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8015614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015618:	2b00      	cmp	r3, #0
 801561a:	d00a      	beq.n	8015632 <xQueueGiveFromISR+0x48>
	__asm volatile
 801561c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015620:	f383 8811 	msr	BASEPRI, r3
 8015624:	f3bf 8f6f 	isb	sy
 8015628:	f3bf 8f4f 	dsb	sy
 801562c:	61fb      	str	r3, [r7, #28]
}
 801562e:	bf00      	nop
 8015630:	e7fe      	b.n	8015630 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8015632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015634:	681b      	ldr	r3, [r3, #0]
 8015636:	2b00      	cmp	r3, #0
 8015638:	d103      	bne.n	8015642 <xQueueGiveFromISR+0x58>
 801563a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801563c:	689b      	ldr	r3, [r3, #8]
 801563e:	2b00      	cmp	r3, #0
 8015640:	d101      	bne.n	8015646 <xQueueGiveFromISR+0x5c>
 8015642:	2301      	movs	r3, #1
 8015644:	e000      	b.n	8015648 <xQueueGiveFromISR+0x5e>
 8015646:	2300      	movs	r3, #0
 8015648:	2b00      	cmp	r3, #0
 801564a:	d10a      	bne.n	8015662 <xQueueGiveFromISR+0x78>
	__asm volatile
 801564c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015650:	f383 8811 	msr	BASEPRI, r3
 8015654:	f3bf 8f6f 	isb	sy
 8015658:	f3bf 8f4f 	dsb	sy
 801565c:	61bb      	str	r3, [r7, #24]
}
 801565e:	bf00      	nop
 8015660:	e7fe      	b.n	8015660 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015662:	f7ff fc41 	bl	8014ee8 <vPortValidateInterruptPriority>
	__asm volatile
 8015666:	f3ef 8211 	mrs	r2, BASEPRI
 801566a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801566e:	f383 8811 	msr	BASEPRI, r3
 8015672:	f3bf 8f6f 	isb	sy
 8015676:	f3bf 8f4f 	dsb	sy
 801567a:	617a      	str	r2, [r7, #20]
 801567c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801567e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015680:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015686:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8015688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801568a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801568c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801568e:	429a      	cmp	r2, r3
 8015690:	d22b      	bcs.n	80156ea <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015694:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015698:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801569c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801569e:	1c5a      	adds	r2, r3, #1
 80156a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156a2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80156a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80156a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80156ac:	d112      	bne.n	80156d4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80156ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d016      	beq.n	80156e4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80156b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156b8:	3324      	adds	r3, #36	; 0x24
 80156ba:	4618      	mov	r0, r3
 80156bc:	f001 f8d4 	bl	8016868 <xTaskRemoveFromEventList>
 80156c0:	4603      	mov	r3, r0
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	d00e      	beq.n	80156e4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80156c6:	683b      	ldr	r3, [r7, #0]
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	d00b      	beq.n	80156e4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80156cc:	683b      	ldr	r3, [r7, #0]
 80156ce:	2201      	movs	r2, #1
 80156d0:	601a      	str	r2, [r3, #0]
 80156d2:	e007      	b.n	80156e4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80156d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80156d8:	3301      	adds	r3, #1
 80156da:	b2db      	uxtb	r3, r3
 80156dc:	b25a      	sxtb	r2, r3
 80156de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80156e4:	2301      	movs	r3, #1
 80156e6:	637b      	str	r3, [r7, #52]	; 0x34
 80156e8:	e001      	b.n	80156ee <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80156ea:	2300      	movs	r3, #0
 80156ec:	637b      	str	r3, [r7, #52]	; 0x34
 80156ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156f0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80156f2:	68fb      	ldr	r3, [r7, #12]
 80156f4:	f383 8811 	msr	BASEPRI, r3
}
 80156f8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80156fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80156fc:	4618      	mov	r0, r3
 80156fe:	3738      	adds	r7, #56	; 0x38
 8015700:	46bd      	mov	sp, r7
 8015702:	bd80      	pop	{r7, pc}

08015704 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8015704:	b580      	push	{r7, lr}
 8015706:	b08c      	sub	sp, #48	; 0x30
 8015708:	af00      	add	r7, sp, #0
 801570a:	60f8      	str	r0, [r7, #12]
 801570c:	60b9      	str	r1, [r7, #8]
 801570e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8015710:	2300      	movs	r3, #0
 8015712:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015714:	68fb      	ldr	r3, [r7, #12]
 8015716:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801571a:	2b00      	cmp	r3, #0
 801571c:	d10a      	bne.n	8015734 <xQueueReceive+0x30>
	__asm volatile
 801571e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015722:	f383 8811 	msr	BASEPRI, r3
 8015726:	f3bf 8f6f 	isb	sy
 801572a:	f3bf 8f4f 	dsb	sy
 801572e:	623b      	str	r3, [r7, #32]
}
 8015730:	bf00      	nop
 8015732:	e7fe      	b.n	8015732 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015734:	68bb      	ldr	r3, [r7, #8]
 8015736:	2b00      	cmp	r3, #0
 8015738:	d103      	bne.n	8015742 <xQueueReceive+0x3e>
 801573a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801573c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801573e:	2b00      	cmp	r3, #0
 8015740:	d101      	bne.n	8015746 <xQueueReceive+0x42>
 8015742:	2301      	movs	r3, #1
 8015744:	e000      	b.n	8015748 <xQueueReceive+0x44>
 8015746:	2300      	movs	r3, #0
 8015748:	2b00      	cmp	r3, #0
 801574a:	d10a      	bne.n	8015762 <xQueueReceive+0x5e>
	__asm volatile
 801574c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015750:	f383 8811 	msr	BASEPRI, r3
 8015754:	f3bf 8f6f 	isb	sy
 8015758:	f3bf 8f4f 	dsb	sy
 801575c:	61fb      	str	r3, [r7, #28]
}
 801575e:	bf00      	nop
 8015760:	e7fe      	b.n	8015760 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015762:	f001 fa3f 	bl	8016be4 <xTaskGetSchedulerState>
 8015766:	4603      	mov	r3, r0
 8015768:	2b00      	cmp	r3, #0
 801576a:	d102      	bne.n	8015772 <xQueueReceive+0x6e>
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	2b00      	cmp	r3, #0
 8015770:	d101      	bne.n	8015776 <xQueueReceive+0x72>
 8015772:	2301      	movs	r3, #1
 8015774:	e000      	b.n	8015778 <xQueueReceive+0x74>
 8015776:	2300      	movs	r3, #0
 8015778:	2b00      	cmp	r3, #0
 801577a:	d10a      	bne.n	8015792 <xQueueReceive+0x8e>
	__asm volatile
 801577c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015780:	f383 8811 	msr	BASEPRI, r3
 8015784:	f3bf 8f6f 	isb	sy
 8015788:	f3bf 8f4f 	dsb	sy
 801578c:	61bb      	str	r3, [r7, #24]
}
 801578e:	bf00      	nop
 8015790:	e7fe      	b.n	8015790 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015792:	f7ff fac7 	bl	8014d24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801579a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801579c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d01f      	beq.n	80157e2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80157a2:	68b9      	ldr	r1, [r7, #8]
 80157a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80157a6:	f000 fabe 	bl	8015d26 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80157aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157ac:	1e5a      	subs	r2, r3, #1
 80157ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157b0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80157b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157b4:	691b      	ldr	r3, [r3, #16]
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d00f      	beq.n	80157da <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80157ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157bc:	3310      	adds	r3, #16
 80157be:	4618      	mov	r0, r3
 80157c0:	f001 f852 	bl	8016868 <xTaskRemoveFromEventList>
 80157c4:	4603      	mov	r3, r0
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	d007      	beq.n	80157da <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80157ca:	4b3d      	ldr	r3, [pc, #244]	; (80158c0 <xQueueReceive+0x1bc>)
 80157cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80157d0:	601a      	str	r2, [r3, #0]
 80157d2:	f3bf 8f4f 	dsb	sy
 80157d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80157da:	f7ff fad3 	bl	8014d84 <vPortExitCritical>
				return pdPASS;
 80157de:	2301      	movs	r3, #1
 80157e0:	e069      	b.n	80158b6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	d103      	bne.n	80157f0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80157e8:	f7ff facc 	bl	8014d84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80157ec:	2300      	movs	r3, #0
 80157ee:	e062      	b.n	80158b6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80157f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	d106      	bne.n	8015804 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80157f6:	f107 0310 	add.w	r3, r7, #16
 80157fa:	4618      	mov	r0, r3
 80157fc:	f001 f898 	bl	8016930 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015800:	2301      	movs	r3, #1
 8015802:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015804:	f7ff fabe 	bl	8014d84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015808:	f000 fdf8 	bl	80163fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801580c:	f7ff fa8a 	bl	8014d24 <vPortEnterCritical>
 8015810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015812:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015816:	b25b      	sxtb	r3, r3
 8015818:	f1b3 3fff 	cmp.w	r3, #4294967295
 801581c:	d103      	bne.n	8015826 <xQueueReceive+0x122>
 801581e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015820:	2200      	movs	r2, #0
 8015822:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015828:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801582c:	b25b      	sxtb	r3, r3
 801582e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015832:	d103      	bne.n	801583c <xQueueReceive+0x138>
 8015834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015836:	2200      	movs	r2, #0
 8015838:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801583c:	f7ff faa2 	bl	8014d84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015840:	1d3a      	adds	r2, r7, #4
 8015842:	f107 0310 	add.w	r3, r7, #16
 8015846:	4611      	mov	r1, r2
 8015848:	4618      	mov	r0, r3
 801584a:	f001 f887 	bl	801695c <xTaskCheckForTimeOut>
 801584e:	4603      	mov	r3, r0
 8015850:	2b00      	cmp	r3, #0
 8015852:	d123      	bne.n	801589c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015854:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015856:	f000 fade 	bl	8015e16 <prvIsQueueEmpty>
 801585a:	4603      	mov	r3, r0
 801585c:	2b00      	cmp	r3, #0
 801585e:	d017      	beq.n	8015890 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015862:	3324      	adds	r3, #36	; 0x24
 8015864:	687a      	ldr	r2, [r7, #4]
 8015866:	4611      	mov	r1, r2
 8015868:	4618      	mov	r0, r3
 801586a:	f000 ffad 	bl	80167c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801586e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015870:	f000 fa7f 	bl	8015d72 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015874:	f000 fdd0 	bl	8016418 <xTaskResumeAll>
 8015878:	4603      	mov	r3, r0
 801587a:	2b00      	cmp	r3, #0
 801587c:	d189      	bne.n	8015792 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801587e:	4b10      	ldr	r3, [pc, #64]	; (80158c0 <xQueueReceive+0x1bc>)
 8015880:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015884:	601a      	str	r2, [r3, #0]
 8015886:	f3bf 8f4f 	dsb	sy
 801588a:	f3bf 8f6f 	isb	sy
 801588e:	e780      	b.n	8015792 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8015890:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015892:	f000 fa6e 	bl	8015d72 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015896:	f000 fdbf 	bl	8016418 <xTaskResumeAll>
 801589a:	e77a      	b.n	8015792 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801589c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801589e:	f000 fa68 	bl	8015d72 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80158a2:	f000 fdb9 	bl	8016418 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80158a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80158a8:	f000 fab5 	bl	8015e16 <prvIsQueueEmpty>
 80158ac:	4603      	mov	r3, r0
 80158ae:	2b00      	cmp	r3, #0
 80158b0:	f43f af6f 	beq.w	8015792 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80158b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80158b6:	4618      	mov	r0, r3
 80158b8:	3730      	adds	r7, #48	; 0x30
 80158ba:	46bd      	mov	sp, r7
 80158bc:	bd80      	pop	{r7, pc}
 80158be:	bf00      	nop
 80158c0:	e000ed04 	.word	0xe000ed04

080158c4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80158c4:	b580      	push	{r7, lr}
 80158c6:	b08e      	sub	sp, #56	; 0x38
 80158c8:	af00      	add	r7, sp, #0
 80158ca:	6078      	str	r0, [r7, #4]
 80158cc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80158ce:	2300      	movs	r3, #0
 80158d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80158d6:	2300      	movs	r3, #0
 80158d8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80158da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158dc:	2b00      	cmp	r3, #0
 80158de:	d10a      	bne.n	80158f6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80158e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158e4:	f383 8811 	msr	BASEPRI, r3
 80158e8:	f3bf 8f6f 	isb	sy
 80158ec:	f3bf 8f4f 	dsb	sy
 80158f0:	623b      	str	r3, [r7, #32]
}
 80158f2:	bf00      	nop
 80158f4:	e7fe      	b.n	80158f4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80158f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d00a      	beq.n	8015914 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80158fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015902:	f383 8811 	msr	BASEPRI, r3
 8015906:	f3bf 8f6f 	isb	sy
 801590a:	f3bf 8f4f 	dsb	sy
 801590e:	61fb      	str	r3, [r7, #28]
}
 8015910:	bf00      	nop
 8015912:	e7fe      	b.n	8015912 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015914:	f001 f966 	bl	8016be4 <xTaskGetSchedulerState>
 8015918:	4603      	mov	r3, r0
 801591a:	2b00      	cmp	r3, #0
 801591c:	d102      	bne.n	8015924 <xQueueSemaphoreTake+0x60>
 801591e:	683b      	ldr	r3, [r7, #0]
 8015920:	2b00      	cmp	r3, #0
 8015922:	d101      	bne.n	8015928 <xQueueSemaphoreTake+0x64>
 8015924:	2301      	movs	r3, #1
 8015926:	e000      	b.n	801592a <xQueueSemaphoreTake+0x66>
 8015928:	2300      	movs	r3, #0
 801592a:	2b00      	cmp	r3, #0
 801592c:	d10a      	bne.n	8015944 <xQueueSemaphoreTake+0x80>
	__asm volatile
 801592e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015932:	f383 8811 	msr	BASEPRI, r3
 8015936:	f3bf 8f6f 	isb	sy
 801593a:	f3bf 8f4f 	dsb	sy
 801593e:	61bb      	str	r3, [r7, #24]
}
 8015940:	bf00      	nop
 8015942:	e7fe      	b.n	8015942 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015944:	f7ff f9ee 	bl	8014d24 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8015948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801594a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801594c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801594e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015950:	2b00      	cmp	r3, #0
 8015952:	d024      	beq.n	801599e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8015954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015956:	1e5a      	subs	r2, r3, #1
 8015958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801595a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801595c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801595e:	681b      	ldr	r3, [r3, #0]
 8015960:	2b00      	cmp	r3, #0
 8015962:	d104      	bne.n	801596e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8015964:	f001 fab4 	bl	8016ed0 <pvTaskIncrementMutexHeldCount>
 8015968:	4602      	mov	r2, r0
 801596a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801596c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801596e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015970:	691b      	ldr	r3, [r3, #16]
 8015972:	2b00      	cmp	r3, #0
 8015974:	d00f      	beq.n	8015996 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015978:	3310      	adds	r3, #16
 801597a:	4618      	mov	r0, r3
 801597c:	f000 ff74 	bl	8016868 <xTaskRemoveFromEventList>
 8015980:	4603      	mov	r3, r0
 8015982:	2b00      	cmp	r3, #0
 8015984:	d007      	beq.n	8015996 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8015986:	4b54      	ldr	r3, [pc, #336]	; (8015ad8 <xQueueSemaphoreTake+0x214>)
 8015988:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801598c:	601a      	str	r2, [r3, #0]
 801598e:	f3bf 8f4f 	dsb	sy
 8015992:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8015996:	f7ff f9f5 	bl	8014d84 <vPortExitCritical>
				return pdPASS;
 801599a:	2301      	movs	r3, #1
 801599c:	e097      	b.n	8015ace <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801599e:	683b      	ldr	r3, [r7, #0]
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d111      	bne.n	80159c8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80159a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d00a      	beq.n	80159c0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80159aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159ae:	f383 8811 	msr	BASEPRI, r3
 80159b2:	f3bf 8f6f 	isb	sy
 80159b6:	f3bf 8f4f 	dsb	sy
 80159ba:	617b      	str	r3, [r7, #20]
}
 80159bc:	bf00      	nop
 80159be:	e7fe      	b.n	80159be <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80159c0:	f7ff f9e0 	bl	8014d84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80159c4:	2300      	movs	r3, #0
 80159c6:	e082      	b.n	8015ace <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80159c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	d106      	bne.n	80159dc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80159ce:	f107 030c 	add.w	r3, r7, #12
 80159d2:	4618      	mov	r0, r3
 80159d4:	f000 ffac 	bl	8016930 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80159d8:	2301      	movs	r3, #1
 80159da:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80159dc:	f7ff f9d2 	bl	8014d84 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80159e0:	f000 fd0c 	bl	80163fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80159e4:	f7ff f99e 	bl	8014d24 <vPortEnterCritical>
 80159e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80159ee:	b25b      	sxtb	r3, r3
 80159f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80159f4:	d103      	bne.n	80159fe <xQueueSemaphoreTake+0x13a>
 80159f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159f8:	2200      	movs	r2, #0
 80159fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80159fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015a04:	b25b      	sxtb	r3, r3
 8015a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a0a:	d103      	bne.n	8015a14 <xQueueSemaphoreTake+0x150>
 8015a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a0e:	2200      	movs	r2, #0
 8015a10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015a14:	f7ff f9b6 	bl	8014d84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015a18:	463a      	mov	r2, r7
 8015a1a:	f107 030c 	add.w	r3, r7, #12
 8015a1e:	4611      	mov	r1, r2
 8015a20:	4618      	mov	r0, r3
 8015a22:	f000 ff9b 	bl	801695c <xTaskCheckForTimeOut>
 8015a26:	4603      	mov	r3, r0
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	d132      	bne.n	8015a92 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015a2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015a2e:	f000 f9f2 	bl	8015e16 <prvIsQueueEmpty>
 8015a32:	4603      	mov	r3, r0
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	d026      	beq.n	8015a86 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a3a:	681b      	ldr	r3, [r3, #0]
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	d109      	bne.n	8015a54 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8015a40:	f7ff f970 	bl	8014d24 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a46:	689b      	ldr	r3, [r3, #8]
 8015a48:	4618      	mov	r0, r3
 8015a4a:	f001 f8e9 	bl	8016c20 <xTaskPriorityInherit>
 8015a4e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8015a50:	f7ff f998 	bl	8014d84 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a56:	3324      	adds	r3, #36	; 0x24
 8015a58:	683a      	ldr	r2, [r7, #0]
 8015a5a:	4611      	mov	r1, r2
 8015a5c:	4618      	mov	r0, r3
 8015a5e:	f000 feb3 	bl	80167c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015a62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015a64:	f000 f985 	bl	8015d72 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015a68:	f000 fcd6 	bl	8016418 <xTaskResumeAll>
 8015a6c:	4603      	mov	r3, r0
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	f47f af68 	bne.w	8015944 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8015a74:	4b18      	ldr	r3, [pc, #96]	; (8015ad8 <xQueueSemaphoreTake+0x214>)
 8015a76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015a7a:	601a      	str	r2, [r3, #0]
 8015a7c:	f3bf 8f4f 	dsb	sy
 8015a80:	f3bf 8f6f 	isb	sy
 8015a84:	e75e      	b.n	8015944 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8015a86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015a88:	f000 f973 	bl	8015d72 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015a8c:	f000 fcc4 	bl	8016418 <xTaskResumeAll>
 8015a90:	e758      	b.n	8015944 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8015a92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015a94:	f000 f96d 	bl	8015d72 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015a98:	f000 fcbe 	bl	8016418 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015a9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015a9e:	f000 f9ba 	bl	8015e16 <prvIsQueueEmpty>
 8015aa2:	4603      	mov	r3, r0
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	f43f af4d 	beq.w	8015944 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8015aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d00d      	beq.n	8015acc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8015ab0:	f7ff f938 	bl	8014d24 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8015ab4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015ab6:	f000 f8b4 	bl	8015c22 <prvGetDisinheritPriorityAfterTimeout>
 8015aba:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8015abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015abe:	689b      	ldr	r3, [r3, #8]
 8015ac0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015ac2:	4618      	mov	r0, r3
 8015ac4:	f001 f982 	bl	8016dcc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8015ac8:	f7ff f95c 	bl	8014d84 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8015acc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8015ace:	4618      	mov	r0, r3
 8015ad0:	3738      	adds	r7, #56	; 0x38
 8015ad2:	46bd      	mov	sp, r7
 8015ad4:	bd80      	pop	{r7, pc}
 8015ad6:	bf00      	nop
 8015ad8:	e000ed04 	.word	0xe000ed04

08015adc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8015adc:	b580      	push	{r7, lr}
 8015ade:	b08e      	sub	sp, #56	; 0x38
 8015ae0:	af00      	add	r7, sp, #0
 8015ae2:	60f8      	str	r0, [r7, #12]
 8015ae4:	60b9      	str	r1, [r7, #8]
 8015ae6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015ae8:	68fb      	ldr	r3, [r7, #12]
 8015aea:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d10a      	bne.n	8015b08 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8015af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015af6:	f383 8811 	msr	BASEPRI, r3
 8015afa:	f3bf 8f6f 	isb	sy
 8015afe:	f3bf 8f4f 	dsb	sy
 8015b02:	623b      	str	r3, [r7, #32]
}
 8015b04:	bf00      	nop
 8015b06:	e7fe      	b.n	8015b06 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015b08:	68bb      	ldr	r3, [r7, #8]
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	d103      	bne.n	8015b16 <xQueueReceiveFromISR+0x3a>
 8015b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	d101      	bne.n	8015b1a <xQueueReceiveFromISR+0x3e>
 8015b16:	2301      	movs	r3, #1
 8015b18:	e000      	b.n	8015b1c <xQueueReceiveFromISR+0x40>
 8015b1a:	2300      	movs	r3, #0
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	d10a      	bne.n	8015b36 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8015b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b24:	f383 8811 	msr	BASEPRI, r3
 8015b28:	f3bf 8f6f 	isb	sy
 8015b2c:	f3bf 8f4f 	dsb	sy
 8015b30:	61fb      	str	r3, [r7, #28]
}
 8015b32:	bf00      	nop
 8015b34:	e7fe      	b.n	8015b34 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015b36:	f7ff f9d7 	bl	8014ee8 <vPortValidateInterruptPriority>
	__asm volatile
 8015b3a:	f3ef 8211 	mrs	r2, BASEPRI
 8015b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b42:	f383 8811 	msr	BASEPRI, r3
 8015b46:	f3bf 8f6f 	isb	sy
 8015b4a:	f3bf 8f4f 	dsb	sy
 8015b4e:	61ba      	str	r2, [r7, #24]
 8015b50:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8015b52:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015b54:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015b5a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	d02f      	beq.n	8015bc2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8015b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015b68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015b6c:	68b9      	ldr	r1, [r7, #8]
 8015b6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015b70:	f000 f8d9 	bl	8015d26 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b76:	1e5a      	subs	r2, r3, #1
 8015b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b7a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8015b7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b84:	d112      	bne.n	8015bac <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b88:	691b      	ldr	r3, [r3, #16]
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d016      	beq.n	8015bbc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b90:	3310      	adds	r3, #16
 8015b92:	4618      	mov	r0, r3
 8015b94:	f000 fe68 	bl	8016868 <xTaskRemoveFromEventList>
 8015b98:	4603      	mov	r3, r0
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	d00e      	beq.n	8015bbc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	d00b      	beq.n	8015bbc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	2201      	movs	r2, #1
 8015ba8:	601a      	str	r2, [r3, #0]
 8015baa:	e007      	b.n	8015bbc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8015bac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015bb0:	3301      	adds	r3, #1
 8015bb2:	b2db      	uxtb	r3, r3
 8015bb4:	b25a      	sxtb	r2, r3
 8015bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8015bbc:	2301      	movs	r3, #1
 8015bbe:	637b      	str	r3, [r7, #52]	; 0x34
 8015bc0:	e001      	b.n	8015bc6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8015bc2:	2300      	movs	r3, #0
 8015bc4:	637b      	str	r3, [r7, #52]	; 0x34
 8015bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bc8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8015bca:	693b      	ldr	r3, [r7, #16]
 8015bcc:	f383 8811 	msr	BASEPRI, r3
}
 8015bd0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015bd4:	4618      	mov	r0, r3
 8015bd6:	3738      	adds	r7, #56	; 0x38
 8015bd8:	46bd      	mov	sp, r7
 8015bda:	bd80      	pop	{r7, pc}

08015bdc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8015bdc:	b580      	push	{r7, lr}
 8015bde:	b084      	sub	sp, #16
 8015be0:	af00      	add	r7, sp, #0
 8015be2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015be8:	68fb      	ldr	r3, [r7, #12]
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	d10a      	bne.n	8015c04 <vQueueDelete+0x28>
	__asm volatile
 8015bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bf2:	f383 8811 	msr	BASEPRI, r3
 8015bf6:	f3bf 8f6f 	isb	sy
 8015bfa:	f3bf 8f4f 	dsb	sy
 8015bfe:	60bb      	str	r3, [r7, #8]
}
 8015c00:	bf00      	nop
 8015c02:	e7fe      	b.n	8015c02 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8015c04:	68f8      	ldr	r0, [r7, #12]
 8015c06:	f000 f95f 	bl	8015ec8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8015c0a:	68fb      	ldr	r3, [r7, #12]
 8015c0c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	d102      	bne.n	8015c1a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8015c14:	68f8      	ldr	r0, [r7, #12]
 8015c16:	f7fe fd85 	bl	8014724 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8015c1a:	bf00      	nop
 8015c1c:	3710      	adds	r7, #16
 8015c1e:	46bd      	mov	sp, r7
 8015c20:	bd80      	pop	{r7, pc}

08015c22 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8015c22:	b480      	push	{r7}
 8015c24:	b085      	sub	sp, #20
 8015c26:	af00      	add	r7, sp, #0
 8015c28:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c2e:	2b00      	cmp	r3, #0
 8015c30:	d006      	beq.n	8015c40 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c36:	681b      	ldr	r3, [r3, #0]
 8015c38:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8015c3c:	60fb      	str	r3, [r7, #12]
 8015c3e:	e001      	b.n	8015c44 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8015c40:	2300      	movs	r3, #0
 8015c42:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8015c44:	68fb      	ldr	r3, [r7, #12]
	}
 8015c46:	4618      	mov	r0, r3
 8015c48:	3714      	adds	r7, #20
 8015c4a:	46bd      	mov	sp, r7
 8015c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c50:	4770      	bx	lr

08015c52 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8015c52:	b580      	push	{r7, lr}
 8015c54:	b086      	sub	sp, #24
 8015c56:	af00      	add	r7, sp, #0
 8015c58:	60f8      	str	r0, [r7, #12]
 8015c5a:	60b9      	str	r1, [r7, #8]
 8015c5c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8015c5e:	2300      	movs	r3, #0
 8015c60:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015c62:	68fb      	ldr	r3, [r7, #12]
 8015c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015c66:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8015c68:	68fb      	ldr	r3, [r7, #12]
 8015c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	d10d      	bne.n	8015c8c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015c70:	68fb      	ldr	r3, [r7, #12]
 8015c72:	681b      	ldr	r3, [r3, #0]
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d14d      	bne.n	8015d14 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015c78:	68fb      	ldr	r3, [r7, #12]
 8015c7a:	689b      	ldr	r3, [r3, #8]
 8015c7c:	4618      	mov	r0, r3
 8015c7e:	f001 f837 	bl	8016cf0 <xTaskPriorityDisinherit>
 8015c82:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8015c84:	68fb      	ldr	r3, [r7, #12]
 8015c86:	2200      	movs	r2, #0
 8015c88:	609a      	str	r2, [r3, #8]
 8015c8a:	e043      	b.n	8015d14 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	d119      	bne.n	8015cc6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015c92:	68fb      	ldr	r3, [r7, #12]
 8015c94:	6858      	ldr	r0, [r3, #4]
 8015c96:	68fb      	ldr	r3, [r7, #12]
 8015c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015c9a:	461a      	mov	r2, r3
 8015c9c:	68b9      	ldr	r1, [r7, #8]
 8015c9e:	f011 f9fe 	bl	802709e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015ca2:	68fb      	ldr	r3, [r7, #12]
 8015ca4:	685a      	ldr	r2, [r3, #4]
 8015ca6:	68fb      	ldr	r3, [r7, #12]
 8015ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015caa:	441a      	add	r2, r3
 8015cac:	68fb      	ldr	r3, [r7, #12]
 8015cae:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015cb0:	68fb      	ldr	r3, [r7, #12]
 8015cb2:	685a      	ldr	r2, [r3, #4]
 8015cb4:	68fb      	ldr	r3, [r7, #12]
 8015cb6:	689b      	ldr	r3, [r3, #8]
 8015cb8:	429a      	cmp	r2, r3
 8015cba:	d32b      	bcc.n	8015d14 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8015cbc:	68fb      	ldr	r3, [r7, #12]
 8015cbe:	681a      	ldr	r2, [r3, #0]
 8015cc0:	68fb      	ldr	r3, [r7, #12]
 8015cc2:	605a      	str	r2, [r3, #4]
 8015cc4:	e026      	b.n	8015d14 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8015cc6:	68fb      	ldr	r3, [r7, #12]
 8015cc8:	68d8      	ldr	r0, [r3, #12]
 8015cca:	68fb      	ldr	r3, [r7, #12]
 8015ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015cce:	461a      	mov	r2, r3
 8015cd0:	68b9      	ldr	r1, [r7, #8]
 8015cd2:	f011 f9e4 	bl	802709e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8015cd6:	68fb      	ldr	r3, [r7, #12]
 8015cd8:	68da      	ldr	r2, [r3, #12]
 8015cda:	68fb      	ldr	r3, [r7, #12]
 8015cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015cde:	425b      	negs	r3, r3
 8015ce0:	441a      	add	r2, r3
 8015ce2:	68fb      	ldr	r3, [r7, #12]
 8015ce4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015ce6:	68fb      	ldr	r3, [r7, #12]
 8015ce8:	68da      	ldr	r2, [r3, #12]
 8015cea:	68fb      	ldr	r3, [r7, #12]
 8015cec:	681b      	ldr	r3, [r3, #0]
 8015cee:	429a      	cmp	r2, r3
 8015cf0:	d207      	bcs.n	8015d02 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8015cf2:	68fb      	ldr	r3, [r7, #12]
 8015cf4:	689a      	ldr	r2, [r3, #8]
 8015cf6:	68fb      	ldr	r3, [r7, #12]
 8015cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015cfa:	425b      	negs	r3, r3
 8015cfc:	441a      	add	r2, r3
 8015cfe:	68fb      	ldr	r3, [r7, #12]
 8015d00:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	2b02      	cmp	r3, #2
 8015d06:	d105      	bne.n	8015d14 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015d08:	693b      	ldr	r3, [r7, #16]
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	d002      	beq.n	8015d14 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8015d0e:	693b      	ldr	r3, [r7, #16]
 8015d10:	3b01      	subs	r3, #1
 8015d12:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015d14:	693b      	ldr	r3, [r7, #16]
 8015d16:	1c5a      	adds	r2, r3, #1
 8015d18:	68fb      	ldr	r3, [r7, #12]
 8015d1a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8015d1c:	697b      	ldr	r3, [r7, #20]
}
 8015d1e:	4618      	mov	r0, r3
 8015d20:	3718      	adds	r7, #24
 8015d22:	46bd      	mov	sp, r7
 8015d24:	bd80      	pop	{r7, pc}

08015d26 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8015d26:	b580      	push	{r7, lr}
 8015d28:	b082      	sub	sp, #8
 8015d2a:	af00      	add	r7, sp, #0
 8015d2c:	6078      	str	r0, [r7, #4]
 8015d2e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015d34:	2b00      	cmp	r3, #0
 8015d36:	d018      	beq.n	8015d6a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	68da      	ldr	r2, [r3, #12]
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015d40:	441a      	add	r2, r3
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	68da      	ldr	r2, [r3, #12]
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	689b      	ldr	r3, [r3, #8]
 8015d4e:	429a      	cmp	r2, r3
 8015d50:	d303      	bcc.n	8015d5a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	681a      	ldr	r2, [r3, #0]
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	68d9      	ldr	r1, [r3, #12]
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015d62:	461a      	mov	r2, r3
 8015d64:	6838      	ldr	r0, [r7, #0]
 8015d66:	f011 f99a 	bl	802709e <memcpy>
	}
}
 8015d6a:	bf00      	nop
 8015d6c:	3708      	adds	r7, #8
 8015d6e:	46bd      	mov	sp, r7
 8015d70:	bd80      	pop	{r7, pc}

08015d72 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8015d72:	b580      	push	{r7, lr}
 8015d74:	b084      	sub	sp, #16
 8015d76:	af00      	add	r7, sp, #0
 8015d78:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8015d7a:	f7fe ffd3 	bl	8014d24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015d84:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015d86:	e011      	b.n	8015dac <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d8c:	2b00      	cmp	r3, #0
 8015d8e:	d012      	beq.n	8015db6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	3324      	adds	r3, #36	; 0x24
 8015d94:	4618      	mov	r0, r3
 8015d96:	f000 fd67 	bl	8016868 <xTaskRemoveFromEventList>
 8015d9a:	4603      	mov	r3, r0
 8015d9c:	2b00      	cmp	r3, #0
 8015d9e:	d001      	beq.n	8015da4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8015da0:	f000 fe3e 	bl	8016a20 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8015da4:	7bfb      	ldrb	r3, [r7, #15]
 8015da6:	3b01      	subs	r3, #1
 8015da8:	b2db      	uxtb	r3, r3
 8015daa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015dac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015db0:	2b00      	cmp	r3, #0
 8015db2:	dce9      	bgt.n	8015d88 <prvUnlockQueue+0x16>
 8015db4:	e000      	b.n	8015db8 <prvUnlockQueue+0x46>
					break;
 8015db6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	22ff      	movs	r2, #255	; 0xff
 8015dbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8015dc0:	f7fe ffe0 	bl	8014d84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8015dc4:	f7fe ffae 	bl	8014d24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015dce:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015dd0:	e011      	b.n	8015df6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	691b      	ldr	r3, [r3, #16]
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d012      	beq.n	8015e00 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	3310      	adds	r3, #16
 8015dde:	4618      	mov	r0, r3
 8015de0:	f000 fd42 	bl	8016868 <xTaskRemoveFromEventList>
 8015de4:	4603      	mov	r3, r0
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d001      	beq.n	8015dee <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8015dea:	f000 fe19 	bl	8016a20 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8015dee:	7bbb      	ldrb	r3, [r7, #14]
 8015df0:	3b01      	subs	r3, #1
 8015df2:	b2db      	uxtb	r3, r3
 8015df4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015df6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015dfa:	2b00      	cmp	r3, #0
 8015dfc:	dce9      	bgt.n	8015dd2 <prvUnlockQueue+0x60>
 8015dfe:	e000      	b.n	8015e02 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8015e00:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	22ff      	movs	r2, #255	; 0xff
 8015e06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8015e0a:	f7fe ffbb 	bl	8014d84 <vPortExitCritical>
}
 8015e0e:	bf00      	nop
 8015e10:	3710      	adds	r7, #16
 8015e12:	46bd      	mov	sp, r7
 8015e14:	bd80      	pop	{r7, pc}

08015e16 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8015e16:	b580      	push	{r7, lr}
 8015e18:	b084      	sub	sp, #16
 8015e1a:	af00      	add	r7, sp, #0
 8015e1c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015e1e:	f7fe ff81 	bl	8014d24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	d102      	bne.n	8015e30 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8015e2a:	2301      	movs	r3, #1
 8015e2c:	60fb      	str	r3, [r7, #12]
 8015e2e:	e001      	b.n	8015e34 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8015e30:	2300      	movs	r3, #0
 8015e32:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015e34:	f7fe ffa6 	bl	8014d84 <vPortExitCritical>

	return xReturn;
 8015e38:	68fb      	ldr	r3, [r7, #12]
}
 8015e3a:	4618      	mov	r0, r3
 8015e3c:	3710      	adds	r7, #16
 8015e3e:	46bd      	mov	sp, r7
 8015e40:	bd80      	pop	{r7, pc}

08015e42 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8015e42:	b580      	push	{r7, lr}
 8015e44:	b084      	sub	sp, #16
 8015e46:	af00      	add	r7, sp, #0
 8015e48:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015e4a:	f7fe ff6b 	bl	8014d24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015e56:	429a      	cmp	r2, r3
 8015e58:	d102      	bne.n	8015e60 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8015e5a:	2301      	movs	r3, #1
 8015e5c:	60fb      	str	r3, [r7, #12]
 8015e5e:	e001      	b.n	8015e64 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8015e60:	2300      	movs	r3, #0
 8015e62:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015e64:	f7fe ff8e 	bl	8014d84 <vPortExitCritical>

	return xReturn;
 8015e68:	68fb      	ldr	r3, [r7, #12]
}
 8015e6a:	4618      	mov	r0, r3
 8015e6c:	3710      	adds	r7, #16
 8015e6e:	46bd      	mov	sp, r7
 8015e70:	bd80      	pop	{r7, pc}
	...

08015e74 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8015e74:	b480      	push	{r7}
 8015e76:	b085      	sub	sp, #20
 8015e78:	af00      	add	r7, sp, #0
 8015e7a:	6078      	str	r0, [r7, #4]
 8015e7c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015e7e:	2300      	movs	r3, #0
 8015e80:	60fb      	str	r3, [r7, #12]
 8015e82:	e014      	b.n	8015eae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8015e84:	4a0f      	ldr	r2, [pc, #60]	; (8015ec4 <vQueueAddToRegistry+0x50>)
 8015e86:	68fb      	ldr	r3, [r7, #12]
 8015e88:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	d10b      	bne.n	8015ea8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8015e90:	490c      	ldr	r1, [pc, #48]	; (8015ec4 <vQueueAddToRegistry+0x50>)
 8015e92:	68fb      	ldr	r3, [r7, #12]
 8015e94:	683a      	ldr	r2, [r7, #0]
 8015e96:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8015e9a:	4a0a      	ldr	r2, [pc, #40]	; (8015ec4 <vQueueAddToRegistry+0x50>)
 8015e9c:	68fb      	ldr	r3, [r7, #12]
 8015e9e:	00db      	lsls	r3, r3, #3
 8015ea0:	4413      	add	r3, r2
 8015ea2:	687a      	ldr	r2, [r7, #4]
 8015ea4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8015ea6:	e006      	b.n	8015eb6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015ea8:	68fb      	ldr	r3, [r7, #12]
 8015eaa:	3301      	adds	r3, #1
 8015eac:	60fb      	str	r3, [r7, #12]
 8015eae:	68fb      	ldr	r3, [r7, #12]
 8015eb0:	2b07      	cmp	r3, #7
 8015eb2:	d9e7      	bls.n	8015e84 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8015eb4:	bf00      	nop
 8015eb6:	bf00      	nop
 8015eb8:	3714      	adds	r7, #20
 8015eba:	46bd      	mov	sp, r7
 8015ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ec0:	4770      	bx	lr
 8015ec2:	bf00      	nop
 8015ec4:	240066c0 	.word	0x240066c0

08015ec8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8015ec8:	b480      	push	{r7}
 8015eca:	b085      	sub	sp, #20
 8015ecc:	af00      	add	r7, sp, #0
 8015ece:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015ed0:	2300      	movs	r3, #0
 8015ed2:	60fb      	str	r3, [r7, #12]
 8015ed4:	e016      	b.n	8015f04 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8015ed6:	4a10      	ldr	r2, [pc, #64]	; (8015f18 <vQueueUnregisterQueue+0x50>)
 8015ed8:	68fb      	ldr	r3, [r7, #12]
 8015eda:	00db      	lsls	r3, r3, #3
 8015edc:	4413      	add	r3, r2
 8015ede:	685b      	ldr	r3, [r3, #4]
 8015ee0:	687a      	ldr	r2, [r7, #4]
 8015ee2:	429a      	cmp	r2, r3
 8015ee4:	d10b      	bne.n	8015efe <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8015ee6:	4a0c      	ldr	r2, [pc, #48]	; (8015f18 <vQueueUnregisterQueue+0x50>)
 8015ee8:	68fb      	ldr	r3, [r7, #12]
 8015eea:	2100      	movs	r1, #0
 8015eec:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8015ef0:	4a09      	ldr	r2, [pc, #36]	; (8015f18 <vQueueUnregisterQueue+0x50>)
 8015ef2:	68fb      	ldr	r3, [r7, #12]
 8015ef4:	00db      	lsls	r3, r3, #3
 8015ef6:	4413      	add	r3, r2
 8015ef8:	2200      	movs	r2, #0
 8015efa:	605a      	str	r2, [r3, #4]
				break;
 8015efc:	e006      	b.n	8015f0c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015efe:	68fb      	ldr	r3, [r7, #12]
 8015f00:	3301      	adds	r3, #1
 8015f02:	60fb      	str	r3, [r7, #12]
 8015f04:	68fb      	ldr	r3, [r7, #12]
 8015f06:	2b07      	cmp	r3, #7
 8015f08:	d9e5      	bls.n	8015ed6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8015f0a:	bf00      	nop
 8015f0c:	bf00      	nop
 8015f0e:	3714      	adds	r7, #20
 8015f10:	46bd      	mov	sp, r7
 8015f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f16:	4770      	bx	lr
 8015f18:	240066c0 	.word	0x240066c0

08015f1c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8015f1c:	b580      	push	{r7, lr}
 8015f1e:	b086      	sub	sp, #24
 8015f20:	af00      	add	r7, sp, #0
 8015f22:	60f8      	str	r0, [r7, #12]
 8015f24:	60b9      	str	r1, [r7, #8]
 8015f26:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8015f28:	68fb      	ldr	r3, [r7, #12]
 8015f2a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8015f2c:	f7fe fefa 	bl	8014d24 <vPortEnterCritical>
 8015f30:	697b      	ldr	r3, [r7, #20]
 8015f32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015f36:	b25b      	sxtb	r3, r3
 8015f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f3c:	d103      	bne.n	8015f46 <vQueueWaitForMessageRestricted+0x2a>
 8015f3e:	697b      	ldr	r3, [r7, #20]
 8015f40:	2200      	movs	r2, #0
 8015f42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015f46:	697b      	ldr	r3, [r7, #20]
 8015f48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015f4c:	b25b      	sxtb	r3, r3
 8015f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f52:	d103      	bne.n	8015f5c <vQueueWaitForMessageRestricted+0x40>
 8015f54:	697b      	ldr	r3, [r7, #20]
 8015f56:	2200      	movs	r2, #0
 8015f58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015f5c:	f7fe ff12 	bl	8014d84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8015f60:	697b      	ldr	r3, [r7, #20]
 8015f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	d106      	bne.n	8015f76 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8015f68:	697b      	ldr	r3, [r7, #20]
 8015f6a:	3324      	adds	r3, #36	; 0x24
 8015f6c:	687a      	ldr	r2, [r7, #4]
 8015f6e:	68b9      	ldr	r1, [r7, #8]
 8015f70:	4618      	mov	r0, r3
 8015f72:	f000 fc4d 	bl	8016810 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8015f76:	6978      	ldr	r0, [r7, #20]
 8015f78:	f7ff fefb 	bl	8015d72 <prvUnlockQueue>
	}
 8015f7c:	bf00      	nop
 8015f7e:	3718      	adds	r7, #24
 8015f80:	46bd      	mov	sp, r7
 8015f82:	bd80      	pop	{r7, pc}

08015f84 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8015f84:	b580      	push	{r7, lr}
 8015f86:	b08e      	sub	sp, #56	; 0x38
 8015f88:	af04      	add	r7, sp, #16
 8015f8a:	60f8      	str	r0, [r7, #12]
 8015f8c:	60b9      	str	r1, [r7, #8]
 8015f8e:	607a      	str	r2, [r7, #4]
 8015f90:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8015f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	d10a      	bne.n	8015fae <xTaskCreateStatic+0x2a>
	__asm volatile
 8015f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f9c:	f383 8811 	msr	BASEPRI, r3
 8015fa0:	f3bf 8f6f 	isb	sy
 8015fa4:	f3bf 8f4f 	dsb	sy
 8015fa8:	623b      	str	r3, [r7, #32]
}
 8015faa:	bf00      	nop
 8015fac:	e7fe      	b.n	8015fac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8015fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015fb0:	2b00      	cmp	r3, #0
 8015fb2:	d10a      	bne.n	8015fca <xTaskCreateStatic+0x46>
	__asm volatile
 8015fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fb8:	f383 8811 	msr	BASEPRI, r3
 8015fbc:	f3bf 8f6f 	isb	sy
 8015fc0:	f3bf 8f4f 	dsb	sy
 8015fc4:	61fb      	str	r3, [r7, #28]
}
 8015fc6:	bf00      	nop
 8015fc8:	e7fe      	b.n	8015fc8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8015fca:	235c      	movs	r3, #92	; 0x5c
 8015fcc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8015fce:	693b      	ldr	r3, [r7, #16]
 8015fd0:	2b5c      	cmp	r3, #92	; 0x5c
 8015fd2:	d00a      	beq.n	8015fea <xTaskCreateStatic+0x66>
	__asm volatile
 8015fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fd8:	f383 8811 	msr	BASEPRI, r3
 8015fdc:	f3bf 8f6f 	isb	sy
 8015fe0:	f3bf 8f4f 	dsb	sy
 8015fe4:	61bb      	str	r3, [r7, #24]
}
 8015fe6:	bf00      	nop
 8015fe8:	e7fe      	b.n	8015fe8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8015fea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8015fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	d01e      	beq.n	8016030 <xTaskCreateStatic+0xac>
 8015ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	d01b      	beq.n	8016030 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ffa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8015ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ffe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016000:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8016002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016004:	2202      	movs	r2, #2
 8016006:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801600a:	2300      	movs	r3, #0
 801600c:	9303      	str	r3, [sp, #12]
 801600e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016010:	9302      	str	r3, [sp, #8]
 8016012:	f107 0314 	add.w	r3, r7, #20
 8016016:	9301      	str	r3, [sp, #4]
 8016018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801601a:	9300      	str	r3, [sp, #0]
 801601c:	683b      	ldr	r3, [r7, #0]
 801601e:	687a      	ldr	r2, [r7, #4]
 8016020:	68b9      	ldr	r1, [r7, #8]
 8016022:	68f8      	ldr	r0, [r7, #12]
 8016024:	f000 f850 	bl	80160c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016028:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801602a:	f000 f8dd 	bl	80161e8 <prvAddNewTaskToReadyList>
 801602e:	e001      	b.n	8016034 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8016030:	2300      	movs	r3, #0
 8016032:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8016034:	697b      	ldr	r3, [r7, #20]
	}
 8016036:	4618      	mov	r0, r3
 8016038:	3728      	adds	r7, #40	; 0x28
 801603a:	46bd      	mov	sp, r7
 801603c:	bd80      	pop	{r7, pc}

0801603e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801603e:	b580      	push	{r7, lr}
 8016040:	b08c      	sub	sp, #48	; 0x30
 8016042:	af04      	add	r7, sp, #16
 8016044:	60f8      	str	r0, [r7, #12]
 8016046:	60b9      	str	r1, [r7, #8]
 8016048:	603b      	str	r3, [r7, #0]
 801604a:	4613      	mov	r3, r2
 801604c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801604e:	88fb      	ldrh	r3, [r7, #6]
 8016050:	009b      	lsls	r3, r3, #2
 8016052:	4618      	mov	r0, r3
 8016054:	f7fe fa9a 	bl	801458c <pvPortMalloc>
 8016058:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801605a:	697b      	ldr	r3, [r7, #20]
 801605c:	2b00      	cmp	r3, #0
 801605e:	d00e      	beq.n	801607e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8016060:	205c      	movs	r0, #92	; 0x5c
 8016062:	f7fe fa93 	bl	801458c <pvPortMalloc>
 8016066:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8016068:	69fb      	ldr	r3, [r7, #28]
 801606a:	2b00      	cmp	r3, #0
 801606c:	d003      	beq.n	8016076 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801606e:	69fb      	ldr	r3, [r7, #28]
 8016070:	697a      	ldr	r2, [r7, #20]
 8016072:	631a      	str	r2, [r3, #48]	; 0x30
 8016074:	e005      	b.n	8016082 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8016076:	6978      	ldr	r0, [r7, #20]
 8016078:	f7fe fb54 	bl	8014724 <vPortFree>
 801607c:	e001      	b.n	8016082 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801607e:	2300      	movs	r3, #0
 8016080:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8016082:	69fb      	ldr	r3, [r7, #28]
 8016084:	2b00      	cmp	r3, #0
 8016086:	d017      	beq.n	80160b8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8016088:	69fb      	ldr	r3, [r7, #28]
 801608a:	2200      	movs	r2, #0
 801608c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8016090:	88fa      	ldrh	r2, [r7, #6]
 8016092:	2300      	movs	r3, #0
 8016094:	9303      	str	r3, [sp, #12]
 8016096:	69fb      	ldr	r3, [r7, #28]
 8016098:	9302      	str	r3, [sp, #8]
 801609a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801609c:	9301      	str	r3, [sp, #4]
 801609e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160a0:	9300      	str	r3, [sp, #0]
 80160a2:	683b      	ldr	r3, [r7, #0]
 80160a4:	68b9      	ldr	r1, [r7, #8]
 80160a6:	68f8      	ldr	r0, [r7, #12]
 80160a8:	f000 f80e 	bl	80160c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80160ac:	69f8      	ldr	r0, [r7, #28]
 80160ae:	f000 f89b 	bl	80161e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80160b2:	2301      	movs	r3, #1
 80160b4:	61bb      	str	r3, [r7, #24]
 80160b6:	e002      	b.n	80160be <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80160b8:	f04f 33ff 	mov.w	r3, #4294967295
 80160bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80160be:	69bb      	ldr	r3, [r7, #24]
	}
 80160c0:	4618      	mov	r0, r3
 80160c2:	3720      	adds	r7, #32
 80160c4:	46bd      	mov	sp, r7
 80160c6:	bd80      	pop	{r7, pc}

080160c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80160c8:	b580      	push	{r7, lr}
 80160ca:	b088      	sub	sp, #32
 80160cc:	af00      	add	r7, sp, #0
 80160ce:	60f8      	str	r0, [r7, #12]
 80160d0:	60b9      	str	r1, [r7, #8]
 80160d2:	607a      	str	r2, [r7, #4]
 80160d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80160d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	009b      	lsls	r3, r3, #2
 80160de:	461a      	mov	r2, r3
 80160e0:	21a5      	movs	r1, #165	; 0xa5
 80160e2:	f010 ff0c 	bl	8026efe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80160e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80160ea:	6879      	ldr	r1, [r7, #4]
 80160ec:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80160f0:	440b      	add	r3, r1
 80160f2:	009b      	lsls	r3, r3, #2
 80160f4:	4413      	add	r3, r2
 80160f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80160f8:	69bb      	ldr	r3, [r7, #24]
 80160fa:	f023 0307 	bic.w	r3, r3, #7
 80160fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8016100:	69bb      	ldr	r3, [r7, #24]
 8016102:	f003 0307 	and.w	r3, r3, #7
 8016106:	2b00      	cmp	r3, #0
 8016108:	d00a      	beq.n	8016120 <prvInitialiseNewTask+0x58>
	__asm volatile
 801610a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801610e:	f383 8811 	msr	BASEPRI, r3
 8016112:	f3bf 8f6f 	isb	sy
 8016116:	f3bf 8f4f 	dsb	sy
 801611a:	617b      	str	r3, [r7, #20]
}
 801611c:	bf00      	nop
 801611e:	e7fe      	b.n	801611e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8016120:	68bb      	ldr	r3, [r7, #8]
 8016122:	2b00      	cmp	r3, #0
 8016124:	d01f      	beq.n	8016166 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016126:	2300      	movs	r3, #0
 8016128:	61fb      	str	r3, [r7, #28]
 801612a:	e012      	b.n	8016152 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801612c:	68ba      	ldr	r2, [r7, #8]
 801612e:	69fb      	ldr	r3, [r7, #28]
 8016130:	4413      	add	r3, r2
 8016132:	7819      	ldrb	r1, [r3, #0]
 8016134:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016136:	69fb      	ldr	r3, [r7, #28]
 8016138:	4413      	add	r3, r2
 801613a:	3334      	adds	r3, #52	; 0x34
 801613c:	460a      	mov	r2, r1
 801613e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8016140:	68ba      	ldr	r2, [r7, #8]
 8016142:	69fb      	ldr	r3, [r7, #28]
 8016144:	4413      	add	r3, r2
 8016146:	781b      	ldrb	r3, [r3, #0]
 8016148:	2b00      	cmp	r3, #0
 801614a:	d006      	beq.n	801615a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801614c:	69fb      	ldr	r3, [r7, #28]
 801614e:	3301      	adds	r3, #1
 8016150:	61fb      	str	r3, [r7, #28]
 8016152:	69fb      	ldr	r3, [r7, #28]
 8016154:	2b0f      	cmp	r3, #15
 8016156:	d9e9      	bls.n	801612c <prvInitialiseNewTask+0x64>
 8016158:	e000      	b.n	801615c <prvInitialiseNewTask+0x94>
			{
				break;
 801615a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801615c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801615e:	2200      	movs	r2, #0
 8016160:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8016164:	e003      	b.n	801616e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8016166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016168:	2200      	movs	r2, #0
 801616a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801616e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016170:	2b37      	cmp	r3, #55	; 0x37
 8016172:	d901      	bls.n	8016178 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8016174:	2337      	movs	r3, #55	; 0x37
 8016176:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8016178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801617a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801617c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801617e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016180:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016182:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8016184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016186:	2200      	movs	r2, #0
 8016188:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801618a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801618c:	3304      	adds	r3, #4
 801618e:	4618      	mov	r0, r3
 8016190:	f7fe fc06 	bl	80149a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8016194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016196:	3318      	adds	r3, #24
 8016198:	4618      	mov	r0, r3
 801619a:	f7fe fc01 	bl	80149a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801619e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80161a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80161a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80161aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80161ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80161b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80161b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161b6:	2200      	movs	r2, #0
 80161b8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80161ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161bc:	2200      	movs	r2, #0
 80161be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80161c2:	683a      	ldr	r2, [r7, #0]
 80161c4:	68f9      	ldr	r1, [r7, #12]
 80161c6:	69b8      	ldr	r0, [r7, #24]
 80161c8:	f7fe fc7e 	bl	8014ac8 <pxPortInitialiseStack>
 80161cc:	4602      	mov	r2, r0
 80161ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161d0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80161d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d002      	beq.n	80161de <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80161d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80161dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80161de:	bf00      	nop
 80161e0:	3720      	adds	r7, #32
 80161e2:	46bd      	mov	sp, r7
 80161e4:	bd80      	pop	{r7, pc}
	...

080161e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80161e8:	b580      	push	{r7, lr}
 80161ea:	b082      	sub	sp, #8
 80161ec:	af00      	add	r7, sp, #0
 80161ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80161f0:	f7fe fd98 	bl	8014d24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80161f4:	4b2d      	ldr	r3, [pc, #180]	; (80162ac <prvAddNewTaskToReadyList+0xc4>)
 80161f6:	681b      	ldr	r3, [r3, #0]
 80161f8:	3301      	adds	r3, #1
 80161fa:	4a2c      	ldr	r2, [pc, #176]	; (80162ac <prvAddNewTaskToReadyList+0xc4>)
 80161fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80161fe:	4b2c      	ldr	r3, [pc, #176]	; (80162b0 <prvAddNewTaskToReadyList+0xc8>)
 8016200:	681b      	ldr	r3, [r3, #0]
 8016202:	2b00      	cmp	r3, #0
 8016204:	d109      	bne.n	801621a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8016206:	4a2a      	ldr	r2, [pc, #168]	; (80162b0 <prvAddNewTaskToReadyList+0xc8>)
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801620c:	4b27      	ldr	r3, [pc, #156]	; (80162ac <prvAddNewTaskToReadyList+0xc4>)
 801620e:	681b      	ldr	r3, [r3, #0]
 8016210:	2b01      	cmp	r3, #1
 8016212:	d110      	bne.n	8016236 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8016214:	f000 fc28 	bl	8016a68 <prvInitialiseTaskLists>
 8016218:	e00d      	b.n	8016236 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801621a:	4b26      	ldr	r3, [pc, #152]	; (80162b4 <prvAddNewTaskToReadyList+0xcc>)
 801621c:	681b      	ldr	r3, [r3, #0]
 801621e:	2b00      	cmp	r3, #0
 8016220:	d109      	bne.n	8016236 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8016222:	4b23      	ldr	r3, [pc, #140]	; (80162b0 <prvAddNewTaskToReadyList+0xc8>)
 8016224:	681b      	ldr	r3, [r3, #0]
 8016226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801622c:	429a      	cmp	r2, r3
 801622e:	d802      	bhi.n	8016236 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8016230:	4a1f      	ldr	r2, [pc, #124]	; (80162b0 <prvAddNewTaskToReadyList+0xc8>)
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8016236:	4b20      	ldr	r3, [pc, #128]	; (80162b8 <prvAddNewTaskToReadyList+0xd0>)
 8016238:	681b      	ldr	r3, [r3, #0]
 801623a:	3301      	adds	r3, #1
 801623c:	4a1e      	ldr	r2, [pc, #120]	; (80162b8 <prvAddNewTaskToReadyList+0xd0>)
 801623e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8016240:	4b1d      	ldr	r3, [pc, #116]	; (80162b8 <prvAddNewTaskToReadyList+0xd0>)
 8016242:	681a      	ldr	r2, [r3, #0]
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801624c:	4b1b      	ldr	r3, [pc, #108]	; (80162bc <prvAddNewTaskToReadyList+0xd4>)
 801624e:	681b      	ldr	r3, [r3, #0]
 8016250:	429a      	cmp	r2, r3
 8016252:	d903      	bls.n	801625c <prvAddNewTaskToReadyList+0x74>
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016258:	4a18      	ldr	r2, [pc, #96]	; (80162bc <prvAddNewTaskToReadyList+0xd4>)
 801625a:	6013      	str	r3, [r2, #0]
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016260:	4613      	mov	r3, r2
 8016262:	009b      	lsls	r3, r3, #2
 8016264:	4413      	add	r3, r2
 8016266:	009b      	lsls	r3, r3, #2
 8016268:	4a15      	ldr	r2, [pc, #84]	; (80162c0 <prvAddNewTaskToReadyList+0xd8>)
 801626a:	441a      	add	r2, r3
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	3304      	adds	r3, #4
 8016270:	4619      	mov	r1, r3
 8016272:	4610      	mov	r0, r2
 8016274:	f7fe fba1 	bl	80149ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8016278:	f7fe fd84 	bl	8014d84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801627c:	4b0d      	ldr	r3, [pc, #52]	; (80162b4 <prvAddNewTaskToReadyList+0xcc>)
 801627e:	681b      	ldr	r3, [r3, #0]
 8016280:	2b00      	cmp	r3, #0
 8016282:	d00e      	beq.n	80162a2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8016284:	4b0a      	ldr	r3, [pc, #40]	; (80162b0 <prvAddNewTaskToReadyList+0xc8>)
 8016286:	681b      	ldr	r3, [r3, #0]
 8016288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801628e:	429a      	cmp	r2, r3
 8016290:	d207      	bcs.n	80162a2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8016292:	4b0c      	ldr	r3, [pc, #48]	; (80162c4 <prvAddNewTaskToReadyList+0xdc>)
 8016294:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016298:	601a      	str	r2, [r3, #0]
 801629a:	f3bf 8f4f 	dsb	sy
 801629e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80162a2:	bf00      	nop
 80162a4:	3708      	adds	r7, #8
 80162a6:	46bd      	mov	sp, r7
 80162a8:	bd80      	pop	{r7, pc}
 80162aa:	bf00      	nop
 80162ac:	24006bd4 	.word	0x24006bd4
 80162b0:	24006700 	.word	0x24006700
 80162b4:	24006be0 	.word	0x24006be0
 80162b8:	24006bf0 	.word	0x24006bf0
 80162bc:	24006bdc 	.word	0x24006bdc
 80162c0:	24006704 	.word	0x24006704
 80162c4:	e000ed04 	.word	0xe000ed04

080162c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80162c8:	b580      	push	{r7, lr}
 80162ca:	b084      	sub	sp, #16
 80162cc:	af00      	add	r7, sp, #0
 80162ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80162d0:	2300      	movs	r3, #0
 80162d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80162d4:	687b      	ldr	r3, [r7, #4]
 80162d6:	2b00      	cmp	r3, #0
 80162d8:	d017      	beq.n	801630a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80162da:	4b13      	ldr	r3, [pc, #76]	; (8016328 <vTaskDelay+0x60>)
 80162dc:	681b      	ldr	r3, [r3, #0]
 80162de:	2b00      	cmp	r3, #0
 80162e0:	d00a      	beq.n	80162f8 <vTaskDelay+0x30>
	__asm volatile
 80162e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162e6:	f383 8811 	msr	BASEPRI, r3
 80162ea:	f3bf 8f6f 	isb	sy
 80162ee:	f3bf 8f4f 	dsb	sy
 80162f2:	60bb      	str	r3, [r7, #8]
}
 80162f4:	bf00      	nop
 80162f6:	e7fe      	b.n	80162f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80162f8:	f000 f880 	bl	80163fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80162fc:	2100      	movs	r1, #0
 80162fe:	6878      	ldr	r0, [r7, #4]
 8016300:	f000 fdfa 	bl	8016ef8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8016304:	f000 f888 	bl	8016418 <xTaskResumeAll>
 8016308:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801630a:	68fb      	ldr	r3, [r7, #12]
 801630c:	2b00      	cmp	r3, #0
 801630e:	d107      	bne.n	8016320 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8016310:	4b06      	ldr	r3, [pc, #24]	; (801632c <vTaskDelay+0x64>)
 8016312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016316:	601a      	str	r2, [r3, #0]
 8016318:	f3bf 8f4f 	dsb	sy
 801631c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016320:	bf00      	nop
 8016322:	3710      	adds	r7, #16
 8016324:	46bd      	mov	sp, r7
 8016326:	bd80      	pop	{r7, pc}
 8016328:	24006bfc 	.word	0x24006bfc
 801632c:	e000ed04 	.word	0xe000ed04

08016330 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8016330:	b580      	push	{r7, lr}
 8016332:	b08a      	sub	sp, #40	; 0x28
 8016334:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8016336:	2300      	movs	r3, #0
 8016338:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801633a:	2300      	movs	r3, #0
 801633c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801633e:	463a      	mov	r2, r7
 8016340:	1d39      	adds	r1, r7, #4
 8016342:	f107 0308 	add.w	r3, r7, #8
 8016346:	4618      	mov	r0, r3
 8016348:	f7fe f8ec 	bl	8014524 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801634c:	6839      	ldr	r1, [r7, #0]
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	68ba      	ldr	r2, [r7, #8]
 8016352:	9202      	str	r2, [sp, #8]
 8016354:	9301      	str	r3, [sp, #4]
 8016356:	2300      	movs	r3, #0
 8016358:	9300      	str	r3, [sp, #0]
 801635a:	2300      	movs	r3, #0
 801635c:	460a      	mov	r2, r1
 801635e:	4921      	ldr	r1, [pc, #132]	; (80163e4 <vTaskStartScheduler+0xb4>)
 8016360:	4821      	ldr	r0, [pc, #132]	; (80163e8 <vTaskStartScheduler+0xb8>)
 8016362:	f7ff fe0f 	bl	8015f84 <xTaskCreateStatic>
 8016366:	4603      	mov	r3, r0
 8016368:	4a20      	ldr	r2, [pc, #128]	; (80163ec <vTaskStartScheduler+0xbc>)
 801636a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801636c:	4b1f      	ldr	r3, [pc, #124]	; (80163ec <vTaskStartScheduler+0xbc>)
 801636e:	681b      	ldr	r3, [r3, #0]
 8016370:	2b00      	cmp	r3, #0
 8016372:	d002      	beq.n	801637a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8016374:	2301      	movs	r3, #1
 8016376:	617b      	str	r3, [r7, #20]
 8016378:	e001      	b.n	801637e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801637a:	2300      	movs	r3, #0
 801637c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801637e:	697b      	ldr	r3, [r7, #20]
 8016380:	2b01      	cmp	r3, #1
 8016382:	d102      	bne.n	801638a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8016384:	f000 fe0c 	bl	8016fa0 <xTimerCreateTimerTask>
 8016388:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801638a:	697b      	ldr	r3, [r7, #20]
 801638c:	2b01      	cmp	r3, #1
 801638e:	d116      	bne.n	80163be <vTaskStartScheduler+0x8e>
	__asm volatile
 8016390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016394:	f383 8811 	msr	BASEPRI, r3
 8016398:	f3bf 8f6f 	isb	sy
 801639c:	f3bf 8f4f 	dsb	sy
 80163a0:	613b      	str	r3, [r7, #16]
}
 80163a2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80163a4:	4b12      	ldr	r3, [pc, #72]	; (80163f0 <vTaskStartScheduler+0xc0>)
 80163a6:	f04f 32ff 	mov.w	r2, #4294967295
 80163aa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80163ac:	4b11      	ldr	r3, [pc, #68]	; (80163f4 <vTaskStartScheduler+0xc4>)
 80163ae:	2201      	movs	r2, #1
 80163b0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80163b2:	4b11      	ldr	r3, [pc, #68]	; (80163f8 <vTaskStartScheduler+0xc8>)
 80163b4:	2200      	movs	r2, #0
 80163b6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80163b8:	f7fe fc12 	bl	8014be0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80163bc:	e00e      	b.n	80163dc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80163be:	697b      	ldr	r3, [r7, #20]
 80163c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80163c4:	d10a      	bne.n	80163dc <vTaskStartScheduler+0xac>
	__asm volatile
 80163c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163ca:	f383 8811 	msr	BASEPRI, r3
 80163ce:	f3bf 8f6f 	isb	sy
 80163d2:	f3bf 8f4f 	dsb	sy
 80163d6:	60fb      	str	r3, [r7, #12]
}
 80163d8:	bf00      	nop
 80163da:	e7fe      	b.n	80163da <vTaskStartScheduler+0xaa>
}
 80163dc:	bf00      	nop
 80163de:	3718      	adds	r7, #24
 80163e0:	46bd      	mov	sp, r7
 80163e2:	bd80      	pop	{r7, pc}
 80163e4:	08028678 	.word	0x08028678
 80163e8:	08016a39 	.word	0x08016a39
 80163ec:	24006bf8 	.word	0x24006bf8
 80163f0:	24006bf4 	.word	0x24006bf4
 80163f4:	24006be0 	.word	0x24006be0
 80163f8:	24006bd8 	.word	0x24006bd8

080163fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80163fc:	b480      	push	{r7}
 80163fe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8016400:	4b04      	ldr	r3, [pc, #16]	; (8016414 <vTaskSuspendAll+0x18>)
 8016402:	681b      	ldr	r3, [r3, #0]
 8016404:	3301      	adds	r3, #1
 8016406:	4a03      	ldr	r2, [pc, #12]	; (8016414 <vTaskSuspendAll+0x18>)
 8016408:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801640a:	bf00      	nop
 801640c:	46bd      	mov	sp, r7
 801640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016412:	4770      	bx	lr
 8016414:	24006bfc 	.word	0x24006bfc

08016418 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8016418:	b580      	push	{r7, lr}
 801641a:	b084      	sub	sp, #16
 801641c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801641e:	2300      	movs	r3, #0
 8016420:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8016422:	2300      	movs	r3, #0
 8016424:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8016426:	4b42      	ldr	r3, [pc, #264]	; (8016530 <xTaskResumeAll+0x118>)
 8016428:	681b      	ldr	r3, [r3, #0]
 801642a:	2b00      	cmp	r3, #0
 801642c:	d10a      	bne.n	8016444 <xTaskResumeAll+0x2c>
	__asm volatile
 801642e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016432:	f383 8811 	msr	BASEPRI, r3
 8016436:	f3bf 8f6f 	isb	sy
 801643a:	f3bf 8f4f 	dsb	sy
 801643e:	603b      	str	r3, [r7, #0]
}
 8016440:	bf00      	nop
 8016442:	e7fe      	b.n	8016442 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8016444:	f7fe fc6e 	bl	8014d24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8016448:	4b39      	ldr	r3, [pc, #228]	; (8016530 <xTaskResumeAll+0x118>)
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	3b01      	subs	r3, #1
 801644e:	4a38      	ldr	r2, [pc, #224]	; (8016530 <xTaskResumeAll+0x118>)
 8016450:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016452:	4b37      	ldr	r3, [pc, #220]	; (8016530 <xTaskResumeAll+0x118>)
 8016454:	681b      	ldr	r3, [r3, #0]
 8016456:	2b00      	cmp	r3, #0
 8016458:	d162      	bne.n	8016520 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801645a:	4b36      	ldr	r3, [pc, #216]	; (8016534 <xTaskResumeAll+0x11c>)
 801645c:	681b      	ldr	r3, [r3, #0]
 801645e:	2b00      	cmp	r3, #0
 8016460:	d05e      	beq.n	8016520 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016462:	e02f      	b.n	80164c4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016464:	4b34      	ldr	r3, [pc, #208]	; (8016538 <xTaskResumeAll+0x120>)
 8016466:	68db      	ldr	r3, [r3, #12]
 8016468:	68db      	ldr	r3, [r3, #12]
 801646a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801646c:	68fb      	ldr	r3, [r7, #12]
 801646e:	3318      	adds	r3, #24
 8016470:	4618      	mov	r0, r3
 8016472:	f7fe faff 	bl	8014a74 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016476:	68fb      	ldr	r3, [r7, #12]
 8016478:	3304      	adds	r3, #4
 801647a:	4618      	mov	r0, r3
 801647c:	f7fe fafa 	bl	8014a74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8016480:	68fb      	ldr	r3, [r7, #12]
 8016482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016484:	4b2d      	ldr	r3, [pc, #180]	; (801653c <xTaskResumeAll+0x124>)
 8016486:	681b      	ldr	r3, [r3, #0]
 8016488:	429a      	cmp	r2, r3
 801648a:	d903      	bls.n	8016494 <xTaskResumeAll+0x7c>
 801648c:	68fb      	ldr	r3, [r7, #12]
 801648e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016490:	4a2a      	ldr	r2, [pc, #168]	; (801653c <xTaskResumeAll+0x124>)
 8016492:	6013      	str	r3, [r2, #0]
 8016494:	68fb      	ldr	r3, [r7, #12]
 8016496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016498:	4613      	mov	r3, r2
 801649a:	009b      	lsls	r3, r3, #2
 801649c:	4413      	add	r3, r2
 801649e:	009b      	lsls	r3, r3, #2
 80164a0:	4a27      	ldr	r2, [pc, #156]	; (8016540 <xTaskResumeAll+0x128>)
 80164a2:	441a      	add	r2, r3
 80164a4:	68fb      	ldr	r3, [r7, #12]
 80164a6:	3304      	adds	r3, #4
 80164a8:	4619      	mov	r1, r3
 80164aa:	4610      	mov	r0, r2
 80164ac:	f7fe fa85 	bl	80149ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80164b0:	68fb      	ldr	r3, [r7, #12]
 80164b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80164b4:	4b23      	ldr	r3, [pc, #140]	; (8016544 <xTaskResumeAll+0x12c>)
 80164b6:	681b      	ldr	r3, [r3, #0]
 80164b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80164ba:	429a      	cmp	r2, r3
 80164bc:	d302      	bcc.n	80164c4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80164be:	4b22      	ldr	r3, [pc, #136]	; (8016548 <xTaskResumeAll+0x130>)
 80164c0:	2201      	movs	r2, #1
 80164c2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80164c4:	4b1c      	ldr	r3, [pc, #112]	; (8016538 <xTaskResumeAll+0x120>)
 80164c6:	681b      	ldr	r3, [r3, #0]
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d1cb      	bne.n	8016464 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80164cc:	68fb      	ldr	r3, [r7, #12]
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	d001      	beq.n	80164d6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80164d2:	f000 fb67 	bl	8016ba4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80164d6:	4b1d      	ldr	r3, [pc, #116]	; (801654c <xTaskResumeAll+0x134>)
 80164d8:	681b      	ldr	r3, [r3, #0]
 80164da:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	2b00      	cmp	r3, #0
 80164e0:	d010      	beq.n	8016504 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80164e2:	f000 f859 	bl	8016598 <xTaskIncrementTick>
 80164e6:	4603      	mov	r3, r0
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	d002      	beq.n	80164f2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80164ec:	4b16      	ldr	r3, [pc, #88]	; (8016548 <xTaskResumeAll+0x130>)
 80164ee:	2201      	movs	r2, #1
 80164f0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	3b01      	subs	r3, #1
 80164f6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	d1f1      	bne.n	80164e2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80164fe:	4b13      	ldr	r3, [pc, #76]	; (801654c <xTaskResumeAll+0x134>)
 8016500:	2200      	movs	r2, #0
 8016502:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8016504:	4b10      	ldr	r3, [pc, #64]	; (8016548 <xTaskResumeAll+0x130>)
 8016506:	681b      	ldr	r3, [r3, #0]
 8016508:	2b00      	cmp	r3, #0
 801650a:	d009      	beq.n	8016520 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801650c:	2301      	movs	r3, #1
 801650e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8016510:	4b0f      	ldr	r3, [pc, #60]	; (8016550 <xTaskResumeAll+0x138>)
 8016512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016516:	601a      	str	r2, [r3, #0]
 8016518:	f3bf 8f4f 	dsb	sy
 801651c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8016520:	f7fe fc30 	bl	8014d84 <vPortExitCritical>

	return xAlreadyYielded;
 8016524:	68bb      	ldr	r3, [r7, #8]
}
 8016526:	4618      	mov	r0, r3
 8016528:	3710      	adds	r7, #16
 801652a:	46bd      	mov	sp, r7
 801652c:	bd80      	pop	{r7, pc}
 801652e:	bf00      	nop
 8016530:	24006bfc 	.word	0x24006bfc
 8016534:	24006bd4 	.word	0x24006bd4
 8016538:	24006b94 	.word	0x24006b94
 801653c:	24006bdc 	.word	0x24006bdc
 8016540:	24006704 	.word	0x24006704
 8016544:	24006700 	.word	0x24006700
 8016548:	24006be8 	.word	0x24006be8
 801654c:	24006be4 	.word	0x24006be4
 8016550:	e000ed04 	.word	0xe000ed04

08016554 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8016554:	b480      	push	{r7}
 8016556:	b083      	sub	sp, #12
 8016558:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801655a:	4b05      	ldr	r3, [pc, #20]	; (8016570 <xTaskGetTickCount+0x1c>)
 801655c:	681b      	ldr	r3, [r3, #0]
 801655e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8016560:	687b      	ldr	r3, [r7, #4]
}
 8016562:	4618      	mov	r0, r3
 8016564:	370c      	adds	r7, #12
 8016566:	46bd      	mov	sp, r7
 8016568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801656c:	4770      	bx	lr
 801656e:	bf00      	nop
 8016570:	24006bd8 	.word	0x24006bd8

08016574 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8016574:	b580      	push	{r7, lr}
 8016576:	b082      	sub	sp, #8
 8016578:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801657a:	f7fe fcb5 	bl	8014ee8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801657e:	2300      	movs	r3, #0
 8016580:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8016582:	4b04      	ldr	r3, [pc, #16]	; (8016594 <xTaskGetTickCountFromISR+0x20>)
 8016584:	681b      	ldr	r3, [r3, #0]
 8016586:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016588:	683b      	ldr	r3, [r7, #0]
}
 801658a:	4618      	mov	r0, r3
 801658c:	3708      	adds	r7, #8
 801658e:	46bd      	mov	sp, r7
 8016590:	bd80      	pop	{r7, pc}
 8016592:	bf00      	nop
 8016594:	24006bd8 	.word	0x24006bd8

08016598 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8016598:	b580      	push	{r7, lr}
 801659a:	b086      	sub	sp, #24
 801659c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801659e:	2300      	movs	r3, #0
 80165a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80165a2:	4b4f      	ldr	r3, [pc, #316]	; (80166e0 <xTaskIncrementTick+0x148>)
 80165a4:	681b      	ldr	r3, [r3, #0]
 80165a6:	2b00      	cmp	r3, #0
 80165a8:	f040 808f 	bne.w	80166ca <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80165ac:	4b4d      	ldr	r3, [pc, #308]	; (80166e4 <xTaskIncrementTick+0x14c>)
 80165ae:	681b      	ldr	r3, [r3, #0]
 80165b0:	3301      	adds	r3, #1
 80165b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80165b4:	4a4b      	ldr	r2, [pc, #300]	; (80166e4 <xTaskIncrementTick+0x14c>)
 80165b6:	693b      	ldr	r3, [r7, #16]
 80165b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80165ba:	693b      	ldr	r3, [r7, #16]
 80165bc:	2b00      	cmp	r3, #0
 80165be:	d120      	bne.n	8016602 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80165c0:	4b49      	ldr	r3, [pc, #292]	; (80166e8 <xTaskIncrementTick+0x150>)
 80165c2:	681b      	ldr	r3, [r3, #0]
 80165c4:	681b      	ldr	r3, [r3, #0]
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d00a      	beq.n	80165e0 <xTaskIncrementTick+0x48>
	__asm volatile
 80165ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165ce:	f383 8811 	msr	BASEPRI, r3
 80165d2:	f3bf 8f6f 	isb	sy
 80165d6:	f3bf 8f4f 	dsb	sy
 80165da:	603b      	str	r3, [r7, #0]
}
 80165dc:	bf00      	nop
 80165de:	e7fe      	b.n	80165de <xTaskIncrementTick+0x46>
 80165e0:	4b41      	ldr	r3, [pc, #260]	; (80166e8 <xTaskIncrementTick+0x150>)
 80165e2:	681b      	ldr	r3, [r3, #0]
 80165e4:	60fb      	str	r3, [r7, #12]
 80165e6:	4b41      	ldr	r3, [pc, #260]	; (80166ec <xTaskIncrementTick+0x154>)
 80165e8:	681b      	ldr	r3, [r3, #0]
 80165ea:	4a3f      	ldr	r2, [pc, #252]	; (80166e8 <xTaskIncrementTick+0x150>)
 80165ec:	6013      	str	r3, [r2, #0]
 80165ee:	4a3f      	ldr	r2, [pc, #252]	; (80166ec <xTaskIncrementTick+0x154>)
 80165f0:	68fb      	ldr	r3, [r7, #12]
 80165f2:	6013      	str	r3, [r2, #0]
 80165f4:	4b3e      	ldr	r3, [pc, #248]	; (80166f0 <xTaskIncrementTick+0x158>)
 80165f6:	681b      	ldr	r3, [r3, #0]
 80165f8:	3301      	adds	r3, #1
 80165fa:	4a3d      	ldr	r2, [pc, #244]	; (80166f0 <xTaskIncrementTick+0x158>)
 80165fc:	6013      	str	r3, [r2, #0]
 80165fe:	f000 fad1 	bl	8016ba4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8016602:	4b3c      	ldr	r3, [pc, #240]	; (80166f4 <xTaskIncrementTick+0x15c>)
 8016604:	681b      	ldr	r3, [r3, #0]
 8016606:	693a      	ldr	r2, [r7, #16]
 8016608:	429a      	cmp	r2, r3
 801660a:	d349      	bcc.n	80166a0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801660c:	4b36      	ldr	r3, [pc, #216]	; (80166e8 <xTaskIncrementTick+0x150>)
 801660e:	681b      	ldr	r3, [r3, #0]
 8016610:	681b      	ldr	r3, [r3, #0]
 8016612:	2b00      	cmp	r3, #0
 8016614:	d104      	bne.n	8016620 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016616:	4b37      	ldr	r3, [pc, #220]	; (80166f4 <xTaskIncrementTick+0x15c>)
 8016618:	f04f 32ff 	mov.w	r2, #4294967295
 801661c:	601a      	str	r2, [r3, #0]
					break;
 801661e:	e03f      	b.n	80166a0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016620:	4b31      	ldr	r3, [pc, #196]	; (80166e8 <xTaskIncrementTick+0x150>)
 8016622:	681b      	ldr	r3, [r3, #0]
 8016624:	68db      	ldr	r3, [r3, #12]
 8016626:	68db      	ldr	r3, [r3, #12]
 8016628:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801662a:	68bb      	ldr	r3, [r7, #8]
 801662c:	685b      	ldr	r3, [r3, #4]
 801662e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8016630:	693a      	ldr	r2, [r7, #16]
 8016632:	687b      	ldr	r3, [r7, #4]
 8016634:	429a      	cmp	r2, r3
 8016636:	d203      	bcs.n	8016640 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8016638:	4a2e      	ldr	r2, [pc, #184]	; (80166f4 <xTaskIncrementTick+0x15c>)
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801663e:	e02f      	b.n	80166a0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016640:	68bb      	ldr	r3, [r7, #8]
 8016642:	3304      	adds	r3, #4
 8016644:	4618      	mov	r0, r3
 8016646:	f7fe fa15 	bl	8014a74 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801664a:	68bb      	ldr	r3, [r7, #8]
 801664c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801664e:	2b00      	cmp	r3, #0
 8016650:	d004      	beq.n	801665c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016652:	68bb      	ldr	r3, [r7, #8]
 8016654:	3318      	adds	r3, #24
 8016656:	4618      	mov	r0, r3
 8016658:	f7fe fa0c 	bl	8014a74 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801665c:	68bb      	ldr	r3, [r7, #8]
 801665e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016660:	4b25      	ldr	r3, [pc, #148]	; (80166f8 <xTaskIncrementTick+0x160>)
 8016662:	681b      	ldr	r3, [r3, #0]
 8016664:	429a      	cmp	r2, r3
 8016666:	d903      	bls.n	8016670 <xTaskIncrementTick+0xd8>
 8016668:	68bb      	ldr	r3, [r7, #8]
 801666a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801666c:	4a22      	ldr	r2, [pc, #136]	; (80166f8 <xTaskIncrementTick+0x160>)
 801666e:	6013      	str	r3, [r2, #0]
 8016670:	68bb      	ldr	r3, [r7, #8]
 8016672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016674:	4613      	mov	r3, r2
 8016676:	009b      	lsls	r3, r3, #2
 8016678:	4413      	add	r3, r2
 801667a:	009b      	lsls	r3, r3, #2
 801667c:	4a1f      	ldr	r2, [pc, #124]	; (80166fc <xTaskIncrementTick+0x164>)
 801667e:	441a      	add	r2, r3
 8016680:	68bb      	ldr	r3, [r7, #8]
 8016682:	3304      	adds	r3, #4
 8016684:	4619      	mov	r1, r3
 8016686:	4610      	mov	r0, r2
 8016688:	f7fe f997 	bl	80149ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801668c:	68bb      	ldr	r3, [r7, #8]
 801668e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016690:	4b1b      	ldr	r3, [pc, #108]	; (8016700 <xTaskIncrementTick+0x168>)
 8016692:	681b      	ldr	r3, [r3, #0]
 8016694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016696:	429a      	cmp	r2, r3
 8016698:	d3b8      	bcc.n	801660c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801669a:	2301      	movs	r3, #1
 801669c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801669e:	e7b5      	b.n	801660c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80166a0:	4b17      	ldr	r3, [pc, #92]	; (8016700 <xTaskIncrementTick+0x168>)
 80166a2:	681b      	ldr	r3, [r3, #0]
 80166a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80166a6:	4915      	ldr	r1, [pc, #84]	; (80166fc <xTaskIncrementTick+0x164>)
 80166a8:	4613      	mov	r3, r2
 80166aa:	009b      	lsls	r3, r3, #2
 80166ac:	4413      	add	r3, r2
 80166ae:	009b      	lsls	r3, r3, #2
 80166b0:	440b      	add	r3, r1
 80166b2:	681b      	ldr	r3, [r3, #0]
 80166b4:	2b01      	cmp	r3, #1
 80166b6:	d901      	bls.n	80166bc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80166b8:	2301      	movs	r3, #1
 80166ba:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80166bc:	4b11      	ldr	r3, [pc, #68]	; (8016704 <xTaskIncrementTick+0x16c>)
 80166be:	681b      	ldr	r3, [r3, #0]
 80166c0:	2b00      	cmp	r3, #0
 80166c2:	d007      	beq.n	80166d4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80166c4:	2301      	movs	r3, #1
 80166c6:	617b      	str	r3, [r7, #20]
 80166c8:	e004      	b.n	80166d4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80166ca:	4b0f      	ldr	r3, [pc, #60]	; (8016708 <xTaskIncrementTick+0x170>)
 80166cc:	681b      	ldr	r3, [r3, #0]
 80166ce:	3301      	adds	r3, #1
 80166d0:	4a0d      	ldr	r2, [pc, #52]	; (8016708 <xTaskIncrementTick+0x170>)
 80166d2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80166d4:	697b      	ldr	r3, [r7, #20]
}
 80166d6:	4618      	mov	r0, r3
 80166d8:	3718      	adds	r7, #24
 80166da:	46bd      	mov	sp, r7
 80166dc:	bd80      	pop	{r7, pc}
 80166de:	bf00      	nop
 80166e0:	24006bfc 	.word	0x24006bfc
 80166e4:	24006bd8 	.word	0x24006bd8
 80166e8:	24006b8c 	.word	0x24006b8c
 80166ec:	24006b90 	.word	0x24006b90
 80166f0:	24006bec 	.word	0x24006bec
 80166f4:	24006bf4 	.word	0x24006bf4
 80166f8:	24006bdc 	.word	0x24006bdc
 80166fc:	24006704 	.word	0x24006704
 8016700:	24006700 	.word	0x24006700
 8016704:	24006be8 	.word	0x24006be8
 8016708:	24006be4 	.word	0x24006be4

0801670c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801670c:	b480      	push	{r7}
 801670e:	b085      	sub	sp, #20
 8016710:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8016712:	4b28      	ldr	r3, [pc, #160]	; (80167b4 <vTaskSwitchContext+0xa8>)
 8016714:	681b      	ldr	r3, [r3, #0]
 8016716:	2b00      	cmp	r3, #0
 8016718:	d003      	beq.n	8016722 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801671a:	4b27      	ldr	r3, [pc, #156]	; (80167b8 <vTaskSwitchContext+0xac>)
 801671c:	2201      	movs	r2, #1
 801671e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8016720:	e041      	b.n	80167a6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8016722:	4b25      	ldr	r3, [pc, #148]	; (80167b8 <vTaskSwitchContext+0xac>)
 8016724:	2200      	movs	r2, #0
 8016726:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016728:	4b24      	ldr	r3, [pc, #144]	; (80167bc <vTaskSwitchContext+0xb0>)
 801672a:	681b      	ldr	r3, [r3, #0]
 801672c:	60fb      	str	r3, [r7, #12]
 801672e:	e010      	b.n	8016752 <vTaskSwitchContext+0x46>
 8016730:	68fb      	ldr	r3, [r7, #12]
 8016732:	2b00      	cmp	r3, #0
 8016734:	d10a      	bne.n	801674c <vTaskSwitchContext+0x40>
	__asm volatile
 8016736:	f04f 0350 	mov.w	r3, #80	; 0x50
 801673a:	f383 8811 	msr	BASEPRI, r3
 801673e:	f3bf 8f6f 	isb	sy
 8016742:	f3bf 8f4f 	dsb	sy
 8016746:	607b      	str	r3, [r7, #4]
}
 8016748:	bf00      	nop
 801674a:	e7fe      	b.n	801674a <vTaskSwitchContext+0x3e>
 801674c:	68fb      	ldr	r3, [r7, #12]
 801674e:	3b01      	subs	r3, #1
 8016750:	60fb      	str	r3, [r7, #12]
 8016752:	491b      	ldr	r1, [pc, #108]	; (80167c0 <vTaskSwitchContext+0xb4>)
 8016754:	68fa      	ldr	r2, [r7, #12]
 8016756:	4613      	mov	r3, r2
 8016758:	009b      	lsls	r3, r3, #2
 801675a:	4413      	add	r3, r2
 801675c:	009b      	lsls	r3, r3, #2
 801675e:	440b      	add	r3, r1
 8016760:	681b      	ldr	r3, [r3, #0]
 8016762:	2b00      	cmp	r3, #0
 8016764:	d0e4      	beq.n	8016730 <vTaskSwitchContext+0x24>
 8016766:	68fa      	ldr	r2, [r7, #12]
 8016768:	4613      	mov	r3, r2
 801676a:	009b      	lsls	r3, r3, #2
 801676c:	4413      	add	r3, r2
 801676e:	009b      	lsls	r3, r3, #2
 8016770:	4a13      	ldr	r2, [pc, #76]	; (80167c0 <vTaskSwitchContext+0xb4>)
 8016772:	4413      	add	r3, r2
 8016774:	60bb      	str	r3, [r7, #8]
 8016776:	68bb      	ldr	r3, [r7, #8]
 8016778:	685b      	ldr	r3, [r3, #4]
 801677a:	685a      	ldr	r2, [r3, #4]
 801677c:	68bb      	ldr	r3, [r7, #8]
 801677e:	605a      	str	r2, [r3, #4]
 8016780:	68bb      	ldr	r3, [r7, #8]
 8016782:	685a      	ldr	r2, [r3, #4]
 8016784:	68bb      	ldr	r3, [r7, #8]
 8016786:	3308      	adds	r3, #8
 8016788:	429a      	cmp	r2, r3
 801678a:	d104      	bne.n	8016796 <vTaskSwitchContext+0x8a>
 801678c:	68bb      	ldr	r3, [r7, #8]
 801678e:	685b      	ldr	r3, [r3, #4]
 8016790:	685a      	ldr	r2, [r3, #4]
 8016792:	68bb      	ldr	r3, [r7, #8]
 8016794:	605a      	str	r2, [r3, #4]
 8016796:	68bb      	ldr	r3, [r7, #8]
 8016798:	685b      	ldr	r3, [r3, #4]
 801679a:	68db      	ldr	r3, [r3, #12]
 801679c:	4a09      	ldr	r2, [pc, #36]	; (80167c4 <vTaskSwitchContext+0xb8>)
 801679e:	6013      	str	r3, [r2, #0]
 80167a0:	4a06      	ldr	r2, [pc, #24]	; (80167bc <vTaskSwitchContext+0xb0>)
 80167a2:	68fb      	ldr	r3, [r7, #12]
 80167a4:	6013      	str	r3, [r2, #0]
}
 80167a6:	bf00      	nop
 80167a8:	3714      	adds	r7, #20
 80167aa:	46bd      	mov	sp, r7
 80167ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167b0:	4770      	bx	lr
 80167b2:	bf00      	nop
 80167b4:	24006bfc 	.word	0x24006bfc
 80167b8:	24006be8 	.word	0x24006be8
 80167bc:	24006bdc 	.word	0x24006bdc
 80167c0:	24006704 	.word	0x24006704
 80167c4:	24006700 	.word	0x24006700

080167c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80167c8:	b580      	push	{r7, lr}
 80167ca:	b084      	sub	sp, #16
 80167cc:	af00      	add	r7, sp, #0
 80167ce:	6078      	str	r0, [r7, #4]
 80167d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80167d2:	687b      	ldr	r3, [r7, #4]
 80167d4:	2b00      	cmp	r3, #0
 80167d6:	d10a      	bne.n	80167ee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80167d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167dc:	f383 8811 	msr	BASEPRI, r3
 80167e0:	f3bf 8f6f 	isb	sy
 80167e4:	f3bf 8f4f 	dsb	sy
 80167e8:	60fb      	str	r3, [r7, #12]
}
 80167ea:	bf00      	nop
 80167ec:	e7fe      	b.n	80167ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80167ee:	4b07      	ldr	r3, [pc, #28]	; (801680c <vTaskPlaceOnEventList+0x44>)
 80167f0:	681b      	ldr	r3, [r3, #0]
 80167f2:	3318      	adds	r3, #24
 80167f4:	4619      	mov	r1, r3
 80167f6:	6878      	ldr	r0, [r7, #4]
 80167f8:	f7fe f903 	bl	8014a02 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80167fc:	2101      	movs	r1, #1
 80167fe:	6838      	ldr	r0, [r7, #0]
 8016800:	f000 fb7a 	bl	8016ef8 <prvAddCurrentTaskToDelayedList>
}
 8016804:	bf00      	nop
 8016806:	3710      	adds	r7, #16
 8016808:	46bd      	mov	sp, r7
 801680a:	bd80      	pop	{r7, pc}
 801680c:	24006700 	.word	0x24006700

08016810 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8016810:	b580      	push	{r7, lr}
 8016812:	b086      	sub	sp, #24
 8016814:	af00      	add	r7, sp, #0
 8016816:	60f8      	str	r0, [r7, #12]
 8016818:	60b9      	str	r1, [r7, #8]
 801681a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801681c:	68fb      	ldr	r3, [r7, #12]
 801681e:	2b00      	cmp	r3, #0
 8016820:	d10a      	bne.n	8016838 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8016822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016826:	f383 8811 	msr	BASEPRI, r3
 801682a:	f3bf 8f6f 	isb	sy
 801682e:	f3bf 8f4f 	dsb	sy
 8016832:	617b      	str	r3, [r7, #20]
}
 8016834:	bf00      	nop
 8016836:	e7fe      	b.n	8016836 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016838:	4b0a      	ldr	r3, [pc, #40]	; (8016864 <vTaskPlaceOnEventListRestricted+0x54>)
 801683a:	681b      	ldr	r3, [r3, #0]
 801683c:	3318      	adds	r3, #24
 801683e:	4619      	mov	r1, r3
 8016840:	68f8      	ldr	r0, [r7, #12]
 8016842:	f7fe f8ba 	bl	80149ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	2b00      	cmp	r3, #0
 801684a:	d002      	beq.n	8016852 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801684c:	f04f 33ff 	mov.w	r3, #4294967295
 8016850:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8016852:	6879      	ldr	r1, [r7, #4]
 8016854:	68b8      	ldr	r0, [r7, #8]
 8016856:	f000 fb4f 	bl	8016ef8 <prvAddCurrentTaskToDelayedList>
	}
 801685a:	bf00      	nop
 801685c:	3718      	adds	r7, #24
 801685e:	46bd      	mov	sp, r7
 8016860:	bd80      	pop	{r7, pc}
 8016862:	bf00      	nop
 8016864:	24006700 	.word	0x24006700

08016868 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8016868:	b580      	push	{r7, lr}
 801686a:	b086      	sub	sp, #24
 801686c:	af00      	add	r7, sp, #0
 801686e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	68db      	ldr	r3, [r3, #12]
 8016874:	68db      	ldr	r3, [r3, #12]
 8016876:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8016878:	693b      	ldr	r3, [r7, #16]
 801687a:	2b00      	cmp	r3, #0
 801687c:	d10a      	bne.n	8016894 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801687e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016882:	f383 8811 	msr	BASEPRI, r3
 8016886:	f3bf 8f6f 	isb	sy
 801688a:	f3bf 8f4f 	dsb	sy
 801688e:	60fb      	str	r3, [r7, #12]
}
 8016890:	bf00      	nop
 8016892:	e7fe      	b.n	8016892 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8016894:	693b      	ldr	r3, [r7, #16]
 8016896:	3318      	adds	r3, #24
 8016898:	4618      	mov	r0, r3
 801689a:	f7fe f8eb 	bl	8014a74 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801689e:	4b1e      	ldr	r3, [pc, #120]	; (8016918 <xTaskRemoveFromEventList+0xb0>)
 80168a0:	681b      	ldr	r3, [r3, #0]
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	d11d      	bne.n	80168e2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80168a6:	693b      	ldr	r3, [r7, #16]
 80168a8:	3304      	adds	r3, #4
 80168aa:	4618      	mov	r0, r3
 80168ac:	f7fe f8e2 	bl	8014a74 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80168b0:	693b      	ldr	r3, [r7, #16]
 80168b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80168b4:	4b19      	ldr	r3, [pc, #100]	; (801691c <xTaskRemoveFromEventList+0xb4>)
 80168b6:	681b      	ldr	r3, [r3, #0]
 80168b8:	429a      	cmp	r2, r3
 80168ba:	d903      	bls.n	80168c4 <xTaskRemoveFromEventList+0x5c>
 80168bc:	693b      	ldr	r3, [r7, #16]
 80168be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80168c0:	4a16      	ldr	r2, [pc, #88]	; (801691c <xTaskRemoveFromEventList+0xb4>)
 80168c2:	6013      	str	r3, [r2, #0]
 80168c4:	693b      	ldr	r3, [r7, #16]
 80168c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80168c8:	4613      	mov	r3, r2
 80168ca:	009b      	lsls	r3, r3, #2
 80168cc:	4413      	add	r3, r2
 80168ce:	009b      	lsls	r3, r3, #2
 80168d0:	4a13      	ldr	r2, [pc, #76]	; (8016920 <xTaskRemoveFromEventList+0xb8>)
 80168d2:	441a      	add	r2, r3
 80168d4:	693b      	ldr	r3, [r7, #16]
 80168d6:	3304      	adds	r3, #4
 80168d8:	4619      	mov	r1, r3
 80168da:	4610      	mov	r0, r2
 80168dc:	f7fe f86d 	bl	80149ba <vListInsertEnd>
 80168e0:	e005      	b.n	80168ee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80168e2:	693b      	ldr	r3, [r7, #16]
 80168e4:	3318      	adds	r3, #24
 80168e6:	4619      	mov	r1, r3
 80168e8:	480e      	ldr	r0, [pc, #56]	; (8016924 <xTaskRemoveFromEventList+0xbc>)
 80168ea:	f7fe f866 	bl	80149ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80168ee:	693b      	ldr	r3, [r7, #16]
 80168f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80168f2:	4b0d      	ldr	r3, [pc, #52]	; (8016928 <xTaskRemoveFromEventList+0xc0>)
 80168f4:	681b      	ldr	r3, [r3, #0]
 80168f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80168f8:	429a      	cmp	r2, r3
 80168fa:	d905      	bls.n	8016908 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80168fc:	2301      	movs	r3, #1
 80168fe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8016900:	4b0a      	ldr	r3, [pc, #40]	; (801692c <xTaskRemoveFromEventList+0xc4>)
 8016902:	2201      	movs	r2, #1
 8016904:	601a      	str	r2, [r3, #0]
 8016906:	e001      	b.n	801690c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8016908:	2300      	movs	r3, #0
 801690a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801690c:	697b      	ldr	r3, [r7, #20]
}
 801690e:	4618      	mov	r0, r3
 8016910:	3718      	adds	r7, #24
 8016912:	46bd      	mov	sp, r7
 8016914:	bd80      	pop	{r7, pc}
 8016916:	bf00      	nop
 8016918:	24006bfc 	.word	0x24006bfc
 801691c:	24006bdc 	.word	0x24006bdc
 8016920:	24006704 	.word	0x24006704
 8016924:	24006b94 	.word	0x24006b94
 8016928:	24006700 	.word	0x24006700
 801692c:	24006be8 	.word	0x24006be8

08016930 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8016930:	b480      	push	{r7}
 8016932:	b083      	sub	sp, #12
 8016934:	af00      	add	r7, sp, #0
 8016936:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016938:	4b06      	ldr	r3, [pc, #24]	; (8016954 <vTaskInternalSetTimeOutState+0x24>)
 801693a:	681a      	ldr	r2, [r3, #0]
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8016940:	4b05      	ldr	r3, [pc, #20]	; (8016958 <vTaskInternalSetTimeOutState+0x28>)
 8016942:	681a      	ldr	r2, [r3, #0]
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	605a      	str	r2, [r3, #4]
}
 8016948:	bf00      	nop
 801694a:	370c      	adds	r7, #12
 801694c:	46bd      	mov	sp, r7
 801694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016952:	4770      	bx	lr
 8016954:	24006bec 	.word	0x24006bec
 8016958:	24006bd8 	.word	0x24006bd8

0801695c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801695c:	b580      	push	{r7, lr}
 801695e:	b088      	sub	sp, #32
 8016960:	af00      	add	r7, sp, #0
 8016962:	6078      	str	r0, [r7, #4]
 8016964:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	2b00      	cmp	r3, #0
 801696a:	d10a      	bne.n	8016982 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801696c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016970:	f383 8811 	msr	BASEPRI, r3
 8016974:	f3bf 8f6f 	isb	sy
 8016978:	f3bf 8f4f 	dsb	sy
 801697c:	613b      	str	r3, [r7, #16]
}
 801697e:	bf00      	nop
 8016980:	e7fe      	b.n	8016980 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8016982:	683b      	ldr	r3, [r7, #0]
 8016984:	2b00      	cmp	r3, #0
 8016986:	d10a      	bne.n	801699e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8016988:	f04f 0350 	mov.w	r3, #80	; 0x50
 801698c:	f383 8811 	msr	BASEPRI, r3
 8016990:	f3bf 8f6f 	isb	sy
 8016994:	f3bf 8f4f 	dsb	sy
 8016998:	60fb      	str	r3, [r7, #12]
}
 801699a:	bf00      	nop
 801699c:	e7fe      	b.n	801699c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801699e:	f7fe f9c1 	bl	8014d24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80169a2:	4b1d      	ldr	r3, [pc, #116]	; (8016a18 <xTaskCheckForTimeOut+0xbc>)
 80169a4:	681b      	ldr	r3, [r3, #0]
 80169a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	685b      	ldr	r3, [r3, #4]
 80169ac:	69ba      	ldr	r2, [r7, #24]
 80169ae:	1ad3      	subs	r3, r2, r3
 80169b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80169b2:	683b      	ldr	r3, [r7, #0]
 80169b4:	681b      	ldr	r3, [r3, #0]
 80169b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80169ba:	d102      	bne.n	80169c2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80169bc:	2300      	movs	r3, #0
 80169be:	61fb      	str	r3, [r7, #28]
 80169c0:	e023      	b.n	8016a0a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80169c2:	687b      	ldr	r3, [r7, #4]
 80169c4:	681a      	ldr	r2, [r3, #0]
 80169c6:	4b15      	ldr	r3, [pc, #84]	; (8016a1c <xTaskCheckForTimeOut+0xc0>)
 80169c8:	681b      	ldr	r3, [r3, #0]
 80169ca:	429a      	cmp	r2, r3
 80169cc:	d007      	beq.n	80169de <xTaskCheckForTimeOut+0x82>
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	685b      	ldr	r3, [r3, #4]
 80169d2:	69ba      	ldr	r2, [r7, #24]
 80169d4:	429a      	cmp	r2, r3
 80169d6:	d302      	bcc.n	80169de <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80169d8:	2301      	movs	r3, #1
 80169da:	61fb      	str	r3, [r7, #28]
 80169dc:	e015      	b.n	8016a0a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80169de:	683b      	ldr	r3, [r7, #0]
 80169e0:	681b      	ldr	r3, [r3, #0]
 80169e2:	697a      	ldr	r2, [r7, #20]
 80169e4:	429a      	cmp	r2, r3
 80169e6:	d20b      	bcs.n	8016a00 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80169e8:	683b      	ldr	r3, [r7, #0]
 80169ea:	681a      	ldr	r2, [r3, #0]
 80169ec:	697b      	ldr	r3, [r7, #20]
 80169ee:	1ad2      	subs	r2, r2, r3
 80169f0:	683b      	ldr	r3, [r7, #0]
 80169f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80169f4:	6878      	ldr	r0, [r7, #4]
 80169f6:	f7ff ff9b 	bl	8016930 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80169fa:	2300      	movs	r3, #0
 80169fc:	61fb      	str	r3, [r7, #28]
 80169fe:	e004      	b.n	8016a0a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8016a00:	683b      	ldr	r3, [r7, #0]
 8016a02:	2200      	movs	r2, #0
 8016a04:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8016a06:	2301      	movs	r3, #1
 8016a08:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8016a0a:	f7fe f9bb 	bl	8014d84 <vPortExitCritical>

	return xReturn;
 8016a0e:	69fb      	ldr	r3, [r7, #28]
}
 8016a10:	4618      	mov	r0, r3
 8016a12:	3720      	adds	r7, #32
 8016a14:	46bd      	mov	sp, r7
 8016a16:	bd80      	pop	{r7, pc}
 8016a18:	24006bd8 	.word	0x24006bd8
 8016a1c:	24006bec 	.word	0x24006bec

08016a20 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8016a20:	b480      	push	{r7}
 8016a22:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8016a24:	4b03      	ldr	r3, [pc, #12]	; (8016a34 <vTaskMissedYield+0x14>)
 8016a26:	2201      	movs	r2, #1
 8016a28:	601a      	str	r2, [r3, #0]
}
 8016a2a:	bf00      	nop
 8016a2c:	46bd      	mov	sp, r7
 8016a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a32:	4770      	bx	lr
 8016a34:	24006be8 	.word	0x24006be8

08016a38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8016a38:	b580      	push	{r7, lr}
 8016a3a:	b082      	sub	sp, #8
 8016a3c:	af00      	add	r7, sp, #0
 8016a3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8016a40:	f000 f852 	bl	8016ae8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8016a44:	4b06      	ldr	r3, [pc, #24]	; (8016a60 <prvIdleTask+0x28>)
 8016a46:	681b      	ldr	r3, [r3, #0]
 8016a48:	2b01      	cmp	r3, #1
 8016a4a:	d9f9      	bls.n	8016a40 <prvIdleTask+0x8>
			{
				taskYIELD();
 8016a4c:	4b05      	ldr	r3, [pc, #20]	; (8016a64 <prvIdleTask+0x2c>)
 8016a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016a52:	601a      	str	r2, [r3, #0]
 8016a54:	f3bf 8f4f 	dsb	sy
 8016a58:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8016a5c:	e7f0      	b.n	8016a40 <prvIdleTask+0x8>
 8016a5e:	bf00      	nop
 8016a60:	24006704 	.word	0x24006704
 8016a64:	e000ed04 	.word	0xe000ed04

08016a68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8016a68:	b580      	push	{r7, lr}
 8016a6a:	b082      	sub	sp, #8
 8016a6c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016a6e:	2300      	movs	r3, #0
 8016a70:	607b      	str	r3, [r7, #4]
 8016a72:	e00c      	b.n	8016a8e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8016a74:	687a      	ldr	r2, [r7, #4]
 8016a76:	4613      	mov	r3, r2
 8016a78:	009b      	lsls	r3, r3, #2
 8016a7a:	4413      	add	r3, r2
 8016a7c:	009b      	lsls	r3, r3, #2
 8016a7e:	4a12      	ldr	r2, [pc, #72]	; (8016ac8 <prvInitialiseTaskLists+0x60>)
 8016a80:	4413      	add	r3, r2
 8016a82:	4618      	mov	r0, r3
 8016a84:	f7fd ff6c 	bl	8014960 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	3301      	adds	r3, #1
 8016a8c:	607b      	str	r3, [r7, #4]
 8016a8e:	687b      	ldr	r3, [r7, #4]
 8016a90:	2b37      	cmp	r3, #55	; 0x37
 8016a92:	d9ef      	bls.n	8016a74 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8016a94:	480d      	ldr	r0, [pc, #52]	; (8016acc <prvInitialiseTaskLists+0x64>)
 8016a96:	f7fd ff63 	bl	8014960 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8016a9a:	480d      	ldr	r0, [pc, #52]	; (8016ad0 <prvInitialiseTaskLists+0x68>)
 8016a9c:	f7fd ff60 	bl	8014960 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8016aa0:	480c      	ldr	r0, [pc, #48]	; (8016ad4 <prvInitialiseTaskLists+0x6c>)
 8016aa2:	f7fd ff5d 	bl	8014960 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8016aa6:	480c      	ldr	r0, [pc, #48]	; (8016ad8 <prvInitialiseTaskLists+0x70>)
 8016aa8:	f7fd ff5a 	bl	8014960 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8016aac:	480b      	ldr	r0, [pc, #44]	; (8016adc <prvInitialiseTaskLists+0x74>)
 8016aae:	f7fd ff57 	bl	8014960 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8016ab2:	4b0b      	ldr	r3, [pc, #44]	; (8016ae0 <prvInitialiseTaskLists+0x78>)
 8016ab4:	4a05      	ldr	r2, [pc, #20]	; (8016acc <prvInitialiseTaskLists+0x64>)
 8016ab6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8016ab8:	4b0a      	ldr	r3, [pc, #40]	; (8016ae4 <prvInitialiseTaskLists+0x7c>)
 8016aba:	4a05      	ldr	r2, [pc, #20]	; (8016ad0 <prvInitialiseTaskLists+0x68>)
 8016abc:	601a      	str	r2, [r3, #0]
}
 8016abe:	bf00      	nop
 8016ac0:	3708      	adds	r7, #8
 8016ac2:	46bd      	mov	sp, r7
 8016ac4:	bd80      	pop	{r7, pc}
 8016ac6:	bf00      	nop
 8016ac8:	24006704 	.word	0x24006704
 8016acc:	24006b64 	.word	0x24006b64
 8016ad0:	24006b78 	.word	0x24006b78
 8016ad4:	24006b94 	.word	0x24006b94
 8016ad8:	24006ba8 	.word	0x24006ba8
 8016adc:	24006bc0 	.word	0x24006bc0
 8016ae0:	24006b8c 	.word	0x24006b8c
 8016ae4:	24006b90 	.word	0x24006b90

08016ae8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8016ae8:	b580      	push	{r7, lr}
 8016aea:	b082      	sub	sp, #8
 8016aec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016aee:	e019      	b.n	8016b24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8016af0:	f7fe f918 	bl	8014d24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016af4:	4b10      	ldr	r3, [pc, #64]	; (8016b38 <prvCheckTasksWaitingTermination+0x50>)
 8016af6:	68db      	ldr	r3, [r3, #12]
 8016af8:	68db      	ldr	r3, [r3, #12]
 8016afa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	3304      	adds	r3, #4
 8016b00:	4618      	mov	r0, r3
 8016b02:	f7fd ffb7 	bl	8014a74 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8016b06:	4b0d      	ldr	r3, [pc, #52]	; (8016b3c <prvCheckTasksWaitingTermination+0x54>)
 8016b08:	681b      	ldr	r3, [r3, #0]
 8016b0a:	3b01      	subs	r3, #1
 8016b0c:	4a0b      	ldr	r2, [pc, #44]	; (8016b3c <prvCheckTasksWaitingTermination+0x54>)
 8016b0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8016b10:	4b0b      	ldr	r3, [pc, #44]	; (8016b40 <prvCheckTasksWaitingTermination+0x58>)
 8016b12:	681b      	ldr	r3, [r3, #0]
 8016b14:	3b01      	subs	r3, #1
 8016b16:	4a0a      	ldr	r2, [pc, #40]	; (8016b40 <prvCheckTasksWaitingTermination+0x58>)
 8016b18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8016b1a:	f7fe f933 	bl	8014d84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8016b1e:	6878      	ldr	r0, [r7, #4]
 8016b20:	f000 f810 	bl	8016b44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016b24:	4b06      	ldr	r3, [pc, #24]	; (8016b40 <prvCheckTasksWaitingTermination+0x58>)
 8016b26:	681b      	ldr	r3, [r3, #0]
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	d1e1      	bne.n	8016af0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8016b2c:	bf00      	nop
 8016b2e:	bf00      	nop
 8016b30:	3708      	adds	r7, #8
 8016b32:	46bd      	mov	sp, r7
 8016b34:	bd80      	pop	{r7, pc}
 8016b36:	bf00      	nop
 8016b38:	24006ba8 	.word	0x24006ba8
 8016b3c:	24006bd4 	.word	0x24006bd4
 8016b40:	24006bbc 	.word	0x24006bbc

08016b44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8016b44:	b580      	push	{r7, lr}
 8016b46:	b084      	sub	sp, #16
 8016b48:	af00      	add	r7, sp, #0
 8016b4a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8016b4c:	687b      	ldr	r3, [r7, #4]
 8016b4e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	d108      	bne.n	8016b68 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016b5a:	4618      	mov	r0, r3
 8016b5c:	f7fd fde2 	bl	8014724 <vPortFree>
				vPortFree( pxTCB );
 8016b60:	6878      	ldr	r0, [r7, #4]
 8016b62:	f7fd fddf 	bl	8014724 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8016b66:	e018      	b.n	8016b9a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8016b6e:	2b01      	cmp	r3, #1
 8016b70:	d103      	bne.n	8016b7a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8016b72:	6878      	ldr	r0, [r7, #4]
 8016b74:	f7fd fdd6 	bl	8014724 <vPortFree>
	}
 8016b78:	e00f      	b.n	8016b9a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8016b7a:	687b      	ldr	r3, [r7, #4]
 8016b7c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8016b80:	2b02      	cmp	r3, #2
 8016b82:	d00a      	beq.n	8016b9a <prvDeleteTCB+0x56>
	__asm volatile
 8016b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b88:	f383 8811 	msr	BASEPRI, r3
 8016b8c:	f3bf 8f6f 	isb	sy
 8016b90:	f3bf 8f4f 	dsb	sy
 8016b94:	60fb      	str	r3, [r7, #12]
}
 8016b96:	bf00      	nop
 8016b98:	e7fe      	b.n	8016b98 <prvDeleteTCB+0x54>
	}
 8016b9a:	bf00      	nop
 8016b9c:	3710      	adds	r7, #16
 8016b9e:	46bd      	mov	sp, r7
 8016ba0:	bd80      	pop	{r7, pc}
	...

08016ba4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8016ba4:	b480      	push	{r7}
 8016ba6:	b083      	sub	sp, #12
 8016ba8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016baa:	4b0c      	ldr	r3, [pc, #48]	; (8016bdc <prvResetNextTaskUnblockTime+0x38>)
 8016bac:	681b      	ldr	r3, [r3, #0]
 8016bae:	681b      	ldr	r3, [r3, #0]
 8016bb0:	2b00      	cmp	r3, #0
 8016bb2:	d104      	bne.n	8016bbe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8016bb4:	4b0a      	ldr	r3, [pc, #40]	; (8016be0 <prvResetNextTaskUnblockTime+0x3c>)
 8016bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8016bba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8016bbc:	e008      	b.n	8016bd0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016bbe:	4b07      	ldr	r3, [pc, #28]	; (8016bdc <prvResetNextTaskUnblockTime+0x38>)
 8016bc0:	681b      	ldr	r3, [r3, #0]
 8016bc2:	68db      	ldr	r3, [r3, #12]
 8016bc4:	68db      	ldr	r3, [r3, #12]
 8016bc6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	685b      	ldr	r3, [r3, #4]
 8016bcc:	4a04      	ldr	r2, [pc, #16]	; (8016be0 <prvResetNextTaskUnblockTime+0x3c>)
 8016bce:	6013      	str	r3, [r2, #0]
}
 8016bd0:	bf00      	nop
 8016bd2:	370c      	adds	r7, #12
 8016bd4:	46bd      	mov	sp, r7
 8016bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bda:	4770      	bx	lr
 8016bdc:	24006b8c 	.word	0x24006b8c
 8016be0:	24006bf4 	.word	0x24006bf4

08016be4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8016be4:	b480      	push	{r7}
 8016be6:	b083      	sub	sp, #12
 8016be8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8016bea:	4b0b      	ldr	r3, [pc, #44]	; (8016c18 <xTaskGetSchedulerState+0x34>)
 8016bec:	681b      	ldr	r3, [r3, #0]
 8016bee:	2b00      	cmp	r3, #0
 8016bf0:	d102      	bne.n	8016bf8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8016bf2:	2301      	movs	r3, #1
 8016bf4:	607b      	str	r3, [r7, #4]
 8016bf6:	e008      	b.n	8016c0a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016bf8:	4b08      	ldr	r3, [pc, #32]	; (8016c1c <xTaskGetSchedulerState+0x38>)
 8016bfa:	681b      	ldr	r3, [r3, #0]
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	d102      	bne.n	8016c06 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8016c00:	2302      	movs	r3, #2
 8016c02:	607b      	str	r3, [r7, #4]
 8016c04:	e001      	b.n	8016c0a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8016c06:	2300      	movs	r3, #0
 8016c08:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8016c0a:	687b      	ldr	r3, [r7, #4]
	}
 8016c0c:	4618      	mov	r0, r3
 8016c0e:	370c      	adds	r7, #12
 8016c10:	46bd      	mov	sp, r7
 8016c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c16:	4770      	bx	lr
 8016c18:	24006be0 	.word	0x24006be0
 8016c1c:	24006bfc 	.word	0x24006bfc

08016c20 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8016c20:	b580      	push	{r7, lr}
 8016c22:	b084      	sub	sp, #16
 8016c24:	af00      	add	r7, sp, #0
 8016c26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8016c2c:	2300      	movs	r3, #0
 8016c2e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8016c30:	687b      	ldr	r3, [r7, #4]
 8016c32:	2b00      	cmp	r3, #0
 8016c34:	d051      	beq.n	8016cda <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8016c36:	68bb      	ldr	r3, [r7, #8]
 8016c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016c3a:	4b2a      	ldr	r3, [pc, #168]	; (8016ce4 <xTaskPriorityInherit+0xc4>)
 8016c3c:	681b      	ldr	r3, [r3, #0]
 8016c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c40:	429a      	cmp	r2, r3
 8016c42:	d241      	bcs.n	8016cc8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016c44:	68bb      	ldr	r3, [r7, #8]
 8016c46:	699b      	ldr	r3, [r3, #24]
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	db06      	blt.n	8016c5a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016c4c:	4b25      	ldr	r3, [pc, #148]	; (8016ce4 <xTaskPriorityInherit+0xc4>)
 8016c4e:	681b      	ldr	r3, [r3, #0]
 8016c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c52:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8016c56:	68bb      	ldr	r3, [r7, #8]
 8016c58:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8016c5a:	68bb      	ldr	r3, [r7, #8]
 8016c5c:	6959      	ldr	r1, [r3, #20]
 8016c5e:	68bb      	ldr	r3, [r7, #8]
 8016c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016c62:	4613      	mov	r3, r2
 8016c64:	009b      	lsls	r3, r3, #2
 8016c66:	4413      	add	r3, r2
 8016c68:	009b      	lsls	r3, r3, #2
 8016c6a:	4a1f      	ldr	r2, [pc, #124]	; (8016ce8 <xTaskPriorityInherit+0xc8>)
 8016c6c:	4413      	add	r3, r2
 8016c6e:	4299      	cmp	r1, r3
 8016c70:	d122      	bne.n	8016cb8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016c72:	68bb      	ldr	r3, [r7, #8]
 8016c74:	3304      	adds	r3, #4
 8016c76:	4618      	mov	r0, r3
 8016c78:	f7fd fefc 	bl	8014a74 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016c7c:	4b19      	ldr	r3, [pc, #100]	; (8016ce4 <xTaskPriorityInherit+0xc4>)
 8016c7e:	681b      	ldr	r3, [r3, #0]
 8016c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016c82:	68bb      	ldr	r3, [r7, #8]
 8016c84:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8016c86:	68bb      	ldr	r3, [r7, #8]
 8016c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016c8a:	4b18      	ldr	r3, [pc, #96]	; (8016cec <xTaskPriorityInherit+0xcc>)
 8016c8c:	681b      	ldr	r3, [r3, #0]
 8016c8e:	429a      	cmp	r2, r3
 8016c90:	d903      	bls.n	8016c9a <xTaskPriorityInherit+0x7a>
 8016c92:	68bb      	ldr	r3, [r7, #8]
 8016c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c96:	4a15      	ldr	r2, [pc, #84]	; (8016cec <xTaskPriorityInherit+0xcc>)
 8016c98:	6013      	str	r3, [r2, #0]
 8016c9a:	68bb      	ldr	r3, [r7, #8]
 8016c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016c9e:	4613      	mov	r3, r2
 8016ca0:	009b      	lsls	r3, r3, #2
 8016ca2:	4413      	add	r3, r2
 8016ca4:	009b      	lsls	r3, r3, #2
 8016ca6:	4a10      	ldr	r2, [pc, #64]	; (8016ce8 <xTaskPriorityInherit+0xc8>)
 8016ca8:	441a      	add	r2, r3
 8016caa:	68bb      	ldr	r3, [r7, #8]
 8016cac:	3304      	adds	r3, #4
 8016cae:	4619      	mov	r1, r3
 8016cb0:	4610      	mov	r0, r2
 8016cb2:	f7fd fe82 	bl	80149ba <vListInsertEnd>
 8016cb6:	e004      	b.n	8016cc2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016cb8:	4b0a      	ldr	r3, [pc, #40]	; (8016ce4 <xTaskPriorityInherit+0xc4>)
 8016cba:	681b      	ldr	r3, [r3, #0]
 8016cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016cbe:	68bb      	ldr	r3, [r7, #8]
 8016cc0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8016cc2:	2301      	movs	r3, #1
 8016cc4:	60fb      	str	r3, [r7, #12]
 8016cc6:	e008      	b.n	8016cda <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8016cc8:	68bb      	ldr	r3, [r7, #8]
 8016cca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016ccc:	4b05      	ldr	r3, [pc, #20]	; (8016ce4 <xTaskPriorityInherit+0xc4>)
 8016cce:	681b      	ldr	r3, [r3, #0]
 8016cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016cd2:	429a      	cmp	r2, r3
 8016cd4:	d201      	bcs.n	8016cda <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8016cd6:	2301      	movs	r3, #1
 8016cd8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016cda:	68fb      	ldr	r3, [r7, #12]
	}
 8016cdc:	4618      	mov	r0, r3
 8016cde:	3710      	adds	r7, #16
 8016ce0:	46bd      	mov	sp, r7
 8016ce2:	bd80      	pop	{r7, pc}
 8016ce4:	24006700 	.word	0x24006700
 8016ce8:	24006704 	.word	0x24006704
 8016cec:	24006bdc 	.word	0x24006bdc

08016cf0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8016cf0:	b580      	push	{r7, lr}
 8016cf2:	b086      	sub	sp, #24
 8016cf4:	af00      	add	r7, sp, #0
 8016cf6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8016cfc:	2300      	movs	r3, #0
 8016cfe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	d056      	beq.n	8016db4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8016d06:	4b2e      	ldr	r3, [pc, #184]	; (8016dc0 <xTaskPriorityDisinherit+0xd0>)
 8016d08:	681b      	ldr	r3, [r3, #0]
 8016d0a:	693a      	ldr	r2, [r7, #16]
 8016d0c:	429a      	cmp	r2, r3
 8016d0e:	d00a      	beq.n	8016d26 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8016d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d14:	f383 8811 	msr	BASEPRI, r3
 8016d18:	f3bf 8f6f 	isb	sy
 8016d1c:	f3bf 8f4f 	dsb	sy
 8016d20:	60fb      	str	r3, [r7, #12]
}
 8016d22:	bf00      	nop
 8016d24:	e7fe      	b.n	8016d24 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8016d26:	693b      	ldr	r3, [r7, #16]
 8016d28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016d2a:	2b00      	cmp	r3, #0
 8016d2c:	d10a      	bne.n	8016d44 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8016d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d32:	f383 8811 	msr	BASEPRI, r3
 8016d36:	f3bf 8f6f 	isb	sy
 8016d3a:	f3bf 8f4f 	dsb	sy
 8016d3e:	60bb      	str	r3, [r7, #8]
}
 8016d40:	bf00      	nop
 8016d42:	e7fe      	b.n	8016d42 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8016d44:	693b      	ldr	r3, [r7, #16]
 8016d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016d48:	1e5a      	subs	r2, r3, #1
 8016d4a:	693b      	ldr	r3, [r7, #16]
 8016d4c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8016d4e:	693b      	ldr	r3, [r7, #16]
 8016d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d52:	693b      	ldr	r3, [r7, #16]
 8016d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016d56:	429a      	cmp	r2, r3
 8016d58:	d02c      	beq.n	8016db4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8016d5a:	693b      	ldr	r3, [r7, #16]
 8016d5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	d128      	bne.n	8016db4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016d62:	693b      	ldr	r3, [r7, #16]
 8016d64:	3304      	adds	r3, #4
 8016d66:	4618      	mov	r0, r3
 8016d68:	f7fd fe84 	bl	8014a74 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8016d6c:	693b      	ldr	r3, [r7, #16]
 8016d6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016d70:	693b      	ldr	r3, [r7, #16]
 8016d72:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016d74:	693b      	ldr	r3, [r7, #16]
 8016d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d78:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8016d7c:	693b      	ldr	r3, [r7, #16]
 8016d7e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8016d80:	693b      	ldr	r3, [r7, #16]
 8016d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d84:	4b0f      	ldr	r3, [pc, #60]	; (8016dc4 <xTaskPriorityDisinherit+0xd4>)
 8016d86:	681b      	ldr	r3, [r3, #0]
 8016d88:	429a      	cmp	r2, r3
 8016d8a:	d903      	bls.n	8016d94 <xTaskPriorityDisinherit+0xa4>
 8016d8c:	693b      	ldr	r3, [r7, #16]
 8016d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d90:	4a0c      	ldr	r2, [pc, #48]	; (8016dc4 <xTaskPriorityDisinherit+0xd4>)
 8016d92:	6013      	str	r3, [r2, #0]
 8016d94:	693b      	ldr	r3, [r7, #16]
 8016d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d98:	4613      	mov	r3, r2
 8016d9a:	009b      	lsls	r3, r3, #2
 8016d9c:	4413      	add	r3, r2
 8016d9e:	009b      	lsls	r3, r3, #2
 8016da0:	4a09      	ldr	r2, [pc, #36]	; (8016dc8 <xTaskPriorityDisinherit+0xd8>)
 8016da2:	441a      	add	r2, r3
 8016da4:	693b      	ldr	r3, [r7, #16]
 8016da6:	3304      	adds	r3, #4
 8016da8:	4619      	mov	r1, r3
 8016daa:	4610      	mov	r0, r2
 8016dac:	f7fd fe05 	bl	80149ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8016db0:	2301      	movs	r3, #1
 8016db2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016db4:	697b      	ldr	r3, [r7, #20]
	}
 8016db6:	4618      	mov	r0, r3
 8016db8:	3718      	adds	r7, #24
 8016dba:	46bd      	mov	sp, r7
 8016dbc:	bd80      	pop	{r7, pc}
 8016dbe:	bf00      	nop
 8016dc0:	24006700 	.word	0x24006700
 8016dc4:	24006bdc 	.word	0x24006bdc
 8016dc8:	24006704 	.word	0x24006704

08016dcc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8016dcc:	b580      	push	{r7, lr}
 8016dce:	b088      	sub	sp, #32
 8016dd0:	af00      	add	r7, sp, #0
 8016dd2:	6078      	str	r0, [r7, #4]
 8016dd4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8016dda:	2301      	movs	r3, #1
 8016ddc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	d06a      	beq.n	8016eba <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8016de4:	69bb      	ldr	r3, [r7, #24]
 8016de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016de8:	2b00      	cmp	r3, #0
 8016dea:	d10a      	bne.n	8016e02 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8016dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016df0:	f383 8811 	msr	BASEPRI, r3
 8016df4:	f3bf 8f6f 	isb	sy
 8016df8:	f3bf 8f4f 	dsb	sy
 8016dfc:	60fb      	str	r3, [r7, #12]
}
 8016dfe:	bf00      	nop
 8016e00:	e7fe      	b.n	8016e00 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8016e02:	69bb      	ldr	r3, [r7, #24]
 8016e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016e06:	683a      	ldr	r2, [r7, #0]
 8016e08:	429a      	cmp	r2, r3
 8016e0a:	d902      	bls.n	8016e12 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8016e0c:	683b      	ldr	r3, [r7, #0]
 8016e0e:	61fb      	str	r3, [r7, #28]
 8016e10:	e002      	b.n	8016e18 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8016e12:	69bb      	ldr	r3, [r7, #24]
 8016e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016e16:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8016e18:	69bb      	ldr	r3, [r7, #24]
 8016e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016e1c:	69fa      	ldr	r2, [r7, #28]
 8016e1e:	429a      	cmp	r2, r3
 8016e20:	d04b      	beq.n	8016eba <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8016e22:	69bb      	ldr	r3, [r7, #24]
 8016e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016e26:	697a      	ldr	r2, [r7, #20]
 8016e28:	429a      	cmp	r2, r3
 8016e2a:	d146      	bne.n	8016eba <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8016e2c:	4b25      	ldr	r3, [pc, #148]	; (8016ec4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8016e2e:	681b      	ldr	r3, [r3, #0]
 8016e30:	69ba      	ldr	r2, [r7, #24]
 8016e32:	429a      	cmp	r2, r3
 8016e34:	d10a      	bne.n	8016e4c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8016e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e3a:	f383 8811 	msr	BASEPRI, r3
 8016e3e:	f3bf 8f6f 	isb	sy
 8016e42:	f3bf 8f4f 	dsb	sy
 8016e46:	60bb      	str	r3, [r7, #8]
}
 8016e48:	bf00      	nop
 8016e4a:	e7fe      	b.n	8016e4a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8016e4c:	69bb      	ldr	r3, [r7, #24]
 8016e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016e50:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8016e52:	69bb      	ldr	r3, [r7, #24]
 8016e54:	69fa      	ldr	r2, [r7, #28]
 8016e56:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016e58:	69bb      	ldr	r3, [r7, #24]
 8016e5a:	699b      	ldr	r3, [r3, #24]
 8016e5c:	2b00      	cmp	r3, #0
 8016e5e:	db04      	blt.n	8016e6a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016e60:	69fb      	ldr	r3, [r7, #28]
 8016e62:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8016e66:	69bb      	ldr	r3, [r7, #24]
 8016e68:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8016e6a:	69bb      	ldr	r3, [r7, #24]
 8016e6c:	6959      	ldr	r1, [r3, #20]
 8016e6e:	693a      	ldr	r2, [r7, #16]
 8016e70:	4613      	mov	r3, r2
 8016e72:	009b      	lsls	r3, r3, #2
 8016e74:	4413      	add	r3, r2
 8016e76:	009b      	lsls	r3, r3, #2
 8016e78:	4a13      	ldr	r2, [pc, #76]	; (8016ec8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8016e7a:	4413      	add	r3, r2
 8016e7c:	4299      	cmp	r1, r3
 8016e7e:	d11c      	bne.n	8016eba <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016e80:	69bb      	ldr	r3, [r7, #24]
 8016e82:	3304      	adds	r3, #4
 8016e84:	4618      	mov	r0, r3
 8016e86:	f7fd fdf5 	bl	8014a74 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8016e8a:	69bb      	ldr	r3, [r7, #24]
 8016e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016e8e:	4b0f      	ldr	r3, [pc, #60]	; (8016ecc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8016e90:	681b      	ldr	r3, [r3, #0]
 8016e92:	429a      	cmp	r2, r3
 8016e94:	d903      	bls.n	8016e9e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8016e96:	69bb      	ldr	r3, [r7, #24]
 8016e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016e9a:	4a0c      	ldr	r2, [pc, #48]	; (8016ecc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8016e9c:	6013      	str	r3, [r2, #0]
 8016e9e:	69bb      	ldr	r3, [r7, #24]
 8016ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016ea2:	4613      	mov	r3, r2
 8016ea4:	009b      	lsls	r3, r3, #2
 8016ea6:	4413      	add	r3, r2
 8016ea8:	009b      	lsls	r3, r3, #2
 8016eaa:	4a07      	ldr	r2, [pc, #28]	; (8016ec8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8016eac:	441a      	add	r2, r3
 8016eae:	69bb      	ldr	r3, [r7, #24]
 8016eb0:	3304      	adds	r3, #4
 8016eb2:	4619      	mov	r1, r3
 8016eb4:	4610      	mov	r0, r2
 8016eb6:	f7fd fd80 	bl	80149ba <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016eba:	bf00      	nop
 8016ebc:	3720      	adds	r7, #32
 8016ebe:	46bd      	mov	sp, r7
 8016ec0:	bd80      	pop	{r7, pc}
 8016ec2:	bf00      	nop
 8016ec4:	24006700 	.word	0x24006700
 8016ec8:	24006704 	.word	0x24006704
 8016ecc:	24006bdc 	.word	0x24006bdc

08016ed0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8016ed0:	b480      	push	{r7}
 8016ed2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8016ed4:	4b07      	ldr	r3, [pc, #28]	; (8016ef4 <pvTaskIncrementMutexHeldCount+0x24>)
 8016ed6:	681b      	ldr	r3, [r3, #0]
 8016ed8:	2b00      	cmp	r3, #0
 8016eda:	d004      	beq.n	8016ee6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8016edc:	4b05      	ldr	r3, [pc, #20]	; (8016ef4 <pvTaskIncrementMutexHeldCount+0x24>)
 8016ede:	681b      	ldr	r3, [r3, #0]
 8016ee0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016ee2:	3201      	adds	r2, #1
 8016ee4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8016ee6:	4b03      	ldr	r3, [pc, #12]	; (8016ef4 <pvTaskIncrementMutexHeldCount+0x24>)
 8016ee8:	681b      	ldr	r3, [r3, #0]
	}
 8016eea:	4618      	mov	r0, r3
 8016eec:	46bd      	mov	sp, r7
 8016eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ef2:	4770      	bx	lr
 8016ef4:	24006700 	.word	0x24006700

08016ef8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8016ef8:	b580      	push	{r7, lr}
 8016efa:	b084      	sub	sp, #16
 8016efc:	af00      	add	r7, sp, #0
 8016efe:	6078      	str	r0, [r7, #4]
 8016f00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8016f02:	4b21      	ldr	r3, [pc, #132]	; (8016f88 <prvAddCurrentTaskToDelayedList+0x90>)
 8016f04:	681b      	ldr	r3, [r3, #0]
 8016f06:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016f08:	4b20      	ldr	r3, [pc, #128]	; (8016f8c <prvAddCurrentTaskToDelayedList+0x94>)
 8016f0a:	681b      	ldr	r3, [r3, #0]
 8016f0c:	3304      	adds	r3, #4
 8016f0e:	4618      	mov	r0, r3
 8016f10:	f7fd fdb0 	bl	8014a74 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016f1a:	d10a      	bne.n	8016f32 <prvAddCurrentTaskToDelayedList+0x3a>
 8016f1c:	683b      	ldr	r3, [r7, #0]
 8016f1e:	2b00      	cmp	r3, #0
 8016f20:	d007      	beq.n	8016f32 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016f22:	4b1a      	ldr	r3, [pc, #104]	; (8016f8c <prvAddCurrentTaskToDelayedList+0x94>)
 8016f24:	681b      	ldr	r3, [r3, #0]
 8016f26:	3304      	adds	r3, #4
 8016f28:	4619      	mov	r1, r3
 8016f2a:	4819      	ldr	r0, [pc, #100]	; (8016f90 <prvAddCurrentTaskToDelayedList+0x98>)
 8016f2c:	f7fd fd45 	bl	80149ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8016f30:	e026      	b.n	8016f80 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8016f32:	68fa      	ldr	r2, [r7, #12]
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	4413      	add	r3, r2
 8016f38:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8016f3a:	4b14      	ldr	r3, [pc, #80]	; (8016f8c <prvAddCurrentTaskToDelayedList+0x94>)
 8016f3c:	681b      	ldr	r3, [r3, #0]
 8016f3e:	68ba      	ldr	r2, [r7, #8]
 8016f40:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8016f42:	68ba      	ldr	r2, [r7, #8]
 8016f44:	68fb      	ldr	r3, [r7, #12]
 8016f46:	429a      	cmp	r2, r3
 8016f48:	d209      	bcs.n	8016f5e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016f4a:	4b12      	ldr	r3, [pc, #72]	; (8016f94 <prvAddCurrentTaskToDelayedList+0x9c>)
 8016f4c:	681a      	ldr	r2, [r3, #0]
 8016f4e:	4b0f      	ldr	r3, [pc, #60]	; (8016f8c <prvAddCurrentTaskToDelayedList+0x94>)
 8016f50:	681b      	ldr	r3, [r3, #0]
 8016f52:	3304      	adds	r3, #4
 8016f54:	4619      	mov	r1, r3
 8016f56:	4610      	mov	r0, r2
 8016f58:	f7fd fd53 	bl	8014a02 <vListInsert>
}
 8016f5c:	e010      	b.n	8016f80 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016f5e:	4b0e      	ldr	r3, [pc, #56]	; (8016f98 <prvAddCurrentTaskToDelayedList+0xa0>)
 8016f60:	681a      	ldr	r2, [r3, #0]
 8016f62:	4b0a      	ldr	r3, [pc, #40]	; (8016f8c <prvAddCurrentTaskToDelayedList+0x94>)
 8016f64:	681b      	ldr	r3, [r3, #0]
 8016f66:	3304      	adds	r3, #4
 8016f68:	4619      	mov	r1, r3
 8016f6a:	4610      	mov	r0, r2
 8016f6c:	f7fd fd49 	bl	8014a02 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8016f70:	4b0a      	ldr	r3, [pc, #40]	; (8016f9c <prvAddCurrentTaskToDelayedList+0xa4>)
 8016f72:	681b      	ldr	r3, [r3, #0]
 8016f74:	68ba      	ldr	r2, [r7, #8]
 8016f76:	429a      	cmp	r2, r3
 8016f78:	d202      	bcs.n	8016f80 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8016f7a:	4a08      	ldr	r2, [pc, #32]	; (8016f9c <prvAddCurrentTaskToDelayedList+0xa4>)
 8016f7c:	68bb      	ldr	r3, [r7, #8]
 8016f7e:	6013      	str	r3, [r2, #0]
}
 8016f80:	bf00      	nop
 8016f82:	3710      	adds	r7, #16
 8016f84:	46bd      	mov	sp, r7
 8016f86:	bd80      	pop	{r7, pc}
 8016f88:	24006bd8 	.word	0x24006bd8
 8016f8c:	24006700 	.word	0x24006700
 8016f90:	24006bc0 	.word	0x24006bc0
 8016f94:	24006b90 	.word	0x24006b90
 8016f98:	24006b8c 	.word	0x24006b8c
 8016f9c:	24006bf4 	.word	0x24006bf4

08016fa0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8016fa0:	b580      	push	{r7, lr}
 8016fa2:	b08a      	sub	sp, #40	; 0x28
 8016fa4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8016fa6:	2300      	movs	r3, #0
 8016fa8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8016faa:	f000 fb07 	bl	80175bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8016fae:	4b1c      	ldr	r3, [pc, #112]	; (8017020 <xTimerCreateTimerTask+0x80>)
 8016fb0:	681b      	ldr	r3, [r3, #0]
 8016fb2:	2b00      	cmp	r3, #0
 8016fb4:	d021      	beq.n	8016ffa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8016fb6:	2300      	movs	r3, #0
 8016fb8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8016fba:	2300      	movs	r3, #0
 8016fbc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8016fbe:	1d3a      	adds	r2, r7, #4
 8016fc0:	f107 0108 	add.w	r1, r7, #8
 8016fc4:	f107 030c 	add.w	r3, r7, #12
 8016fc8:	4618      	mov	r0, r3
 8016fca:	f7fd fac5 	bl	8014558 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8016fce:	6879      	ldr	r1, [r7, #4]
 8016fd0:	68bb      	ldr	r3, [r7, #8]
 8016fd2:	68fa      	ldr	r2, [r7, #12]
 8016fd4:	9202      	str	r2, [sp, #8]
 8016fd6:	9301      	str	r3, [sp, #4]
 8016fd8:	2302      	movs	r3, #2
 8016fda:	9300      	str	r3, [sp, #0]
 8016fdc:	2300      	movs	r3, #0
 8016fde:	460a      	mov	r2, r1
 8016fe0:	4910      	ldr	r1, [pc, #64]	; (8017024 <xTimerCreateTimerTask+0x84>)
 8016fe2:	4811      	ldr	r0, [pc, #68]	; (8017028 <xTimerCreateTimerTask+0x88>)
 8016fe4:	f7fe ffce 	bl	8015f84 <xTaskCreateStatic>
 8016fe8:	4603      	mov	r3, r0
 8016fea:	4a10      	ldr	r2, [pc, #64]	; (801702c <xTimerCreateTimerTask+0x8c>)
 8016fec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8016fee:	4b0f      	ldr	r3, [pc, #60]	; (801702c <xTimerCreateTimerTask+0x8c>)
 8016ff0:	681b      	ldr	r3, [r3, #0]
 8016ff2:	2b00      	cmp	r3, #0
 8016ff4:	d001      	beq.n	8016ffa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8016ff6:	2301      	movs	r3, #1
 8016ff8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8016ffa:	697b      	ldr	r3, [r7, #20]
 8016ffc:	2b00      	cmp	r3, #0
 8016ffe:	d10a      	bne.n	8017016 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8017000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017004:	f383 8811 	msr	BASEPRI, r3
 8017008:	f3bf 8f6f 	isb	sy
 801700c:	f3bf 8f4f 	dsb	sy
 8017010:	613b      	str	r3, [r7, #16]
}
 8017012:	bf00      	nop
 8017014:	e7fe      	b.n	8017014 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8017016:	697b      	ldr	r3, [r7, #20]
}
 8017018:	4618      	mov	r0, r3
 801701a:	3718      	adds	r7, #24
 801701c:	46bd      	mov	sp, r7
 801701e:	bd80      	pop	{r7, pc}
 8017020:	24006c30 	.word	0x24006c30
 8017024:	08028680 	.word	0x08028680
 8017028:	08017165 	.word	0x08017165
 801702c:	24006c34 	.word	0x24006c34

08017030 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8017030:	b580      	push	{r7, lr}
 8017032:	b08a      	sub	sp, #40	; 0x28
 8017034:	af00      	add	r7, sp, #0
 8017036:	60f8      	str	r0, [r7, #12]
 8017038:	60b9      	str	r1, [r7, #8]
 801703a:	607a      	str	r2, [r7, #4]
 801703c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801703e:	2300      	movs	r3, #0
 8017040:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8017042:	68fb      	ldr	r3, [r7, #12]
 8017044:	2b00      	cmp	r3, #0
 8017046:	d10a      	bne.n	801705e <xTimerGenericCommand+0x2e>
	__asm volatile
 8017048:	f04f 0350 	mov.w	r3, #80	; 0x50
 801704c:	f383 8811 	msr	BASEPRI, r3
 8017050:	f3bf 8f6f 	isb	sy
 8017054:	f3bf 8f4f 	dsb	sy
 8017058:	623b      	str	r3, [r7, #32]
}
 801705a:	bf00      	nop
 801705c:	e7fe      	b.n	801705c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801705e:	4b1a      	ldr	r3, [pc, #104]	; (80170c8 <xTimerGenericCommand+0x98>)
 8017060:	681b      	ldr	r3, [r3, #0]
 8017062:	2b00      	cmp	r3, #0
 8017064:	d02a      	beq.n	80170bc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8017066:	68bb      	ldr	r3, [r7, #8]
 8017068:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801706e:	68fb      	ldr	r3, [r7, #12]
 8017070:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8017072:	68bb      	ldr	r3, [r7, #8]
 8017074:	2b05      	cmp	r3, #5
 8017076:	dc18      	bgt.n	80170aa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8017078:	f7ff fdb4 	bl	8016be4 <xTaskGetSchedulerState>
 801707c:	4603      	mov	r3, r0
 801707e:	2b02      	cmp	r3, #2
 8017080:	d109      	bne.n	8017096 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8017082:	4b11      	ldr	r3, [pc, #68]	; (80170c8 <xTimerGenericCommand+0x98>)
 8017084:	6818      	ldr	r0, [r3, #0]
 8017086:	f107 0110 	add.w	r1, r7, #16
 801708a:	2300      	movs	r3, #0
 801708c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801708e:	f7fe f913 	bl	80152b8 <xQueueGenericSend>
 8017092:	6278      	str	r0, [r7, #36]	; 0x24
 8017094:	e012      	b.n	80170bc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8017096:	4b0c      	ldr	r3, [pc, #48]	; (80170c8 <xTimerGenericCommand+0x98>)
 8017098:	6818      	ldr	r0, [r3, #0]
 801709a:	f107 0110 	add.w	r1, r7, #16
 801709e:	2300      	movs	r3, #0
 80170a0:	2200      	movs	r2, #0
 80170a2:	f7fe f909 	bl	80152b8 <xQueueGenericSend>
 80170a6:	6278      	str	r0, [r7, #36]	; 0x24
 80170a8:	e008      	b.n	80170bc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80170aa:	4b07      	ldr	r3, [pc, #28]	; (80170c8 <xTimerGenericCommand+0x98>)
 80170ac:	6818      	ldr	r0, [r3, #0]
 80170ae:	f107 0110 	add.w	r1, r7, #16
 80170b2:	2300      	movs	r3, #0
 80170b4:	683a      	ldr	r2, [r7, #0]
 80170b6:	f7fe f9fd 	bl	80154b4 <xQueueGenericSendFromISR>
 80170ba:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80170bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80170be:	4618      	mov	r0, r3
 80170c0:	3728      	adds	r7, #40	; 0x28
 80170c2:	46bd      	mov	sp, r7
 80170c4:	bd80      	pop	{r7, pc}
 80170c6:	bf00      	nop
 80170c8:	24006c30 	.word	0x24006c30

080170cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80170cc:	b580      	push	{r7, lr}
 80170ce:	b088      	sub	sp, #32
 80170d0:	af02      	add	r7, sp, #8
 80170d2:	6078      	str	r0, [r7, #4]
 80170d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80170d6:	4b22      	ldr	r3, [pc, #136]	; (8017160 <prvProcessExpiredTimer+0x94>)
 80170d8:	681b      	ldr	r3, [r3, #0]
 80170da:	68db      	ldr	r3, [r3, #12]
 80170dc:	68db      	ldr	r3, [r3, #12]
 80170de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80170e0:	697b      	ldr	r3, [r7, #20]
 80170e2:	3304      	adds	r3, #4
 80170e4:	4618      	mov	r0, r3
 80170e6:	f7fd fcc5 	bl	8014a74 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80170ea:	697b      	ldr	r3, [r7, #20]
 80170ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80170f0:	f003 0304 	and.w	r3, r3, #4
 80170f4:	2b00      	cmp	r3, #0
 80170f6:	d022      	beq.n	801713e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80170f8:	697b      	ldr	r3, [r7, #20]
 80170fa:	699a      	ldr	r2, [r3, #24]
 80170fc:	687b      	ldr	r3, [r7, #4]
 80170fe:	18d1      	adds	r1, r2, r3
 8017100:	687b      	ldr	r3, [r7, #4]
 8017102:	683a      	ldr	r2, [r7, #0]
 8017104:	6978      	ldr	r0, [r7, #20]
 8017106:	f000 f8d1 	bl	80172ac <prvInsertTimerInActiveList>
 801710a:	4603      	mov	r3, r0
 801710c:	2b00      	cmp	r3, #0
 801710e:	d01f      	beq.n	8017150 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017110:	2300      	movs	r3, #0
 8017112:	9300      	str	r3, [sp, #0]
 8017114:	2300      	movs	r3, #0
 8017116:	687a      	ldr	r2, [r7, #4]
 8017118:	2100      	movs	r1, #0
 801711a:	6978      	ldr	r0, [r7, #20]
 801711c:	f7ff ff88 	bl	8017030 <xTimerGenericCommand>
 8017120:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8017122:	693b      	ldr	r3, [r7, #16]
 8017124:	2b00      	cmp	r3, #0
 8017126:	d113      	bne.n	8017150 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8017128:	f04f 0350 	mov.w	r3, #80	; 0x50
 801712c:	f383 8811 	msr	BASEPRI, r3
 8017130:	f3bf 8f6f 	isb	sy
 8017134:	f3bf 8f4f 	dsb	sy
 8017138:	60fb      	str	r3, [r7, #12]
}
 801713a:	bf00      	nop
 801713c:	e7fe      	b.n	801713c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801713e:	697b      	ldr	r3, [r7, #20]
 8017140:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017144:	f023 0301 	bic.w	r3, r3, #1
 8017148:	b2da      	uxtb	r2, r3
 801714a:	697b      	ldr	r3, [r7, #20]
 801714c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017150:	697b      	ldr	r3, [r7, #20]
 8017152:	6a1b      	ldr	r3, [r3, #32]
 8017154:	6978      	ldr	r0, [r7, #20]
 8017156:	4798      	blx	r3
}
 8017158:	bf00      	nop
 801715a:	3718      	adds	r7, #24
 801715c:	46bd      	mov	sp, r7
 801715e:	bd80      	pop	{r7, pc}
 8017160:	24006c28 	.word	0x24006c28

08017164 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8017164:	b580      	push	{r7, lr}
 8017166:	b084      	sub	sp, #16
 8017168:	af00      	add	r7, sp, #0
 801716a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801716c:	f107 0308 	add.w	r3, r7, #8
 8017170:	4618      	mov	r0, r3
 8017172:	f000 f857 	bl	8017224 <prvGetNextExpireTime>
 8017176:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8017178:	68bb      	ldr	r3, [r7, #8]
 801717a:	4619      	mov	r1, r3
 801717c:	68f8      	ldr	r0, [r7, #12]
 801717e:	f000 f803 	bl	8017188 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8017182:	f000 f8d5 	bl	8017330 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8017186:	e7f1      	b.n	801716c <prvTimerTask+0x8>

08017188 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8017188:	b580      	push	{r7, lr}
 801718a:	b084      	sub	sp, #16
 801718c:	af00      	add	r7, sp, #0
 801718e:	6078      	str	r0, [r7, #4]
 8017190:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8017192:	f7ff f933 	bl	80163fc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8017196:	f107 0308 	add.w	r3, r7, #8
 801719a:	4618      	mov	r0, r3
 801719c:	f000 f866 	bl	801726c <prvSampleTimeNow>
 80171a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80171a2:	68bb      	ldr	r3, [r7, #8]
 80171a4:	2b00      	cmp	r3, #0
 80171a6:	d130      	bne.n	801720a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80171a8:	683b      	ldr	r3, [r7, #0]
 80171aa:	2b00      	cmp	r3, #0
 80171ac:	d10a      	bne.n	80171c4 <prvProcessTimerOrBlockTask+0x3c>
 80171ae:	687a      	ldr	r2, [r7, #4]
 80171b0:	68fb      	ldr	r3, [r7, #12]
 80171b2:	429a      	cmp	r2, r3
 80171b4:	d806      	bhi.n	80171c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80171b6:	f7ff f92f 	bl	8016418 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80171ba:	68f9      	ldr	r1, [r7, #12]
 80171bc:	6878      	ldr	r0, [r7, #4]
 80171be:	f7ff ff85 	bl	80170cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80171c2:	e024      	b.n	801720e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80171c4:	683b      	ldr	r3, [r7, #0]
 80171c6:	2b00      	cmp	r3, #0
 80171c8:	d008      	beq.n	80171dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80171ca:	4b13      	ldr	r3, [pc, #76]	; (8017218 <prvProcessTimerOrBlockTask+0x90>)
 80171cc:	681b      	ldr	r3, [r3, #0]
 80171ce:	681b      	ldr	r3, [r3, #0]
 80171d0:	2b00      	cmp	r3, #0
 80171d2:	d101      	bne.n	80171d8 <prvProcessTimerOrBlockTask+0x50>
 80171d4:	2301      	movs	r3, #1
 80171d6:	e000      	b.n	80171da <prvProcessTimerOrBlockTask+0x52>
 80171d8:	2300      	movs	r3, #0
 80171da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80171dc:	4b0f      	ldr	r3, [pc, #60]	; (801721c <prvProcessTimerOrBlockTask+0x94>)
 80171de:	6818      	ldr	r0, [r3, #0]
 80171e0:	687a      	ldr	r2, [r7, #4]
 80171e2:	68fb      	ldr	r3, [r7, #12]
 80171e4:	1ad3      	subs	r3, r2, r3
 80171e6:	683a      	ldr	r2, [r7, #0]
 80171e8:	4619      	mov	r1, r3
 80171ea:	f7fe fe97 	bl	8015f1c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80171ee:	f7ff f913 	bl	8016418 <xTaskResumeAll>
 80171f2:	4603      	mov	r3, r0
 80171f4:	2b00      	cmp	r3, #0
 80171f6:	d10a      	bne.n	801720e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80171f8:	4b09      	ldr	r3, [pc, #36]	; (8017220 <prvProcessTimerOrBlockTask+0x98>)
 80171fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80171fe:	601a      	str	r2, [r3, #0]
 8017200:	f3bf 8f4f 	dsb	sy
 8017204:	f3bf 8f6f 	isb	sy
}
 8017208:	e001      	b.n	801720e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801720a:	f7ff f905 	bl	8016418 <xTaskResumeAll>
}
 801720e:	bf00      	nop
 8017210:	3710      	adds	r7, #16
 8017212:	46bd      	mov	sp, r7
 8017214:	bd80      	pop	{r7, pc}
 8017216:	bf00      	nop
 8017218:	24006c2c 	.word	0x24006c2c
 801721c:	24006c30 	.word	0x24006c30
 8017220:	e000ed04 	.word	0xe000ed04

08017224 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8017224:	b480      	push	{r7}
 8017226:	b085      	sub	sp, #20
 8017228:	af00      	add	r7, sp, #0
 801722a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801722c:	4b0e      	ldr	r3, [pc, #56]	; (8017268 <prvGetNextExpireTime+0x44>)
 801722e:	681b      	ldr	r3, [r3, #0]
 8017230:	681b      	ldr	r3, [r3, #0]
 8017232:	2b00      	cmp	r3, #0
 8017234:	d101      	bne.n	801723a <prvGetNextExpireTime+0x16>
 8017236:	2201      	movs	r2, #1
 8017238:	e000      	b.n	801723c <prvGetNextExpireTime+0x18>
 801723a:	2200      	movs	r2, #0
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	681b      	ldr	r3, [r3, #0]
 8017244:	2b00      	cmp	r3, #0
 8017246:	d105      	bne.n	8017254 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017248:	4b07      	ldr	r3, [pc, #28]	; (8017268 <prvGetNextExpireTime+0x44>)
 801724a:	681b      	ldr	r3, [r3, #0]
 801724c:	68db      	ldr	r3, [r3, #12]
 801724e:	681b      	ldr	r3, [r3, #0]
 8017250:	60fb      	str	r3, [r7, #12]
 8017252:	e001      	b.n	8017258 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8017254:	2300      	movs	r3, #0
 8017256:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8017258:	68fb      	ldr	r3, [r7, #12]
}
 801725a:	4618      	mov	r0, r3
 801725c:	3714      	adds	r7, #20
 801725e:	46bd      	mov	sp, r7
 8017260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017264:	4770      	bx	lr
 8017266:	bf00      	nop
 8017268:	24006c28 	.word	0x24006c28

0801726c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801726c:	b580      	push	{r7, lr}
 801726e:	b084      	sub	sp, #16
 8017270:	af00      	add	r7, sp, #0
 8017272:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8017274:	f7ff f96e 	bl	8016554 <xTaskGetTickCount>
 8017278:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801727a:	4b0b      	ldr	r3, [pc, #44]	; (80172a8 <prvSampleTimeNow+0x3c>)
 801727c:	681b      	ldr	r3, [r3, #0]
 801727e:	68fa      	ldr	r2, [r7, #12]
 8017280:	429a      	cmp	r2, r3
 8017282:	d205      	bcs.n	8017290 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8017284:	f000 f936 	bl	80174f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	2201      	movs	r2, #1
 801728c:	601a      	str	r2, [r3, #0]
 801728e:	e002      	b.n	8017296 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	2200      	movs	r2, #0
 8017294:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8017296:	4a04      	ldr	r2, [pc, #16]	; (80172a8 <prvSampleTimeNow+0x3c>)
 8017298:	68fb      	ldr	r3, [r7, #12]
 801729a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801729c:	68fb      	ldr	r3, [r7, #12]
}
 801729e:	4618      	mov	r0, r3
 80172a0:	3710      	adds	r7, #16
 80172a2:	46bd      	mov	sp, r7
 80172a4:	bd80      	pop	{r7, pc}
 80172a6:	bf00      	nop
 80172a8:	24006c38 	.word	0x24006c38

080172ac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80172ac:	b580      	push	{r7, lr}
 80172ae:	b086      	sub	sp, #24
 80172b0:	af00      	add	r7, sp, #0
 80172b2:	60f8      	str	r0, [r7, #12]
 80172b4:	60b9      	str	r1, [r7, #8]
 80172b6:	607a      	str	r2, [r7, #4]
 80172b8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80172ba:	2300      	movs	r3, #0
 80172bc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80172be:	68fb      	ldr	r3, [r7, #12]
 80172c0:	68ba      	ldr	r2, [r7, #8]
 80172c2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80172c4:	68fb      	ldr	r3, [r7, #12]
 80172c6:	68fa      	ldr	r2, [r7, #12]
 80172c8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80172ca:	68ba      	ldr	r2, [r7, #8]
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	429a      	cmp	r2, r3
 80172d0:	d812      	bhi.n	80172f8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80172d2:	687a      	ldr	r2, [r7, #4]
 80172d4:	683b      	ldr	r3, [r7, #0]
 80172d6:	1ad2      	subs	r2, r2, r3
 80172d8:	68fb      	ldr	r3, [r7, #12]
 80172da:	699b      	ldr	r3, [r3, #24]
 80172dc:	429a      	cmp	r2, r3
 80172de:	d302      	bcc.n	80172e6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80172e0:	2301      	movs	r3, #1
 80172e2:	617b      	str	r3, [r7, #20]
 80172e4:	e01b      	b.n	801731e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80172e6:	4b10      	ldr	r3, [pc, #64]	; (8017328 <prvInsertTimerInActiveList+0x7c>)
 80172e8:	681a      	ldr	r2, [r3, #0]
 80172ea:	68fb      	ldr	r3, [r7, #12]
 80172ec:	3304      	adds	r3, #4
 80172ee:	4619      	mov	r1, r3
 80172f0:	4610      	mov	r0, r2
 80172f2:	f7fd fb86 	bl	8014a02 <vListInsert>
 80172f6:	e012      	b.n	801731e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80172f8:	687a      	ldr	r2, [r7, #4]
 80172fa:	683b      	ldr	r3, [r7, #0]
 80172fc:	429a      	cmp	r2, r3
 80172fe:	d206      	bcs.n	801730e <prvInsertTimerInActiveList+0x62>
 8017300:	68ba      	ldr	r2, [r7, #8]
 8017302:	683b      	ldr	r3, [r7, #0]
 8017304:	429a      	cmp	r2, r3
 8017306:	d302      	bcc.n	801730e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8017308:	2301      	movs	r3, #1
 801730a:	617b      	str	r3, [r7, #20]
 801730c:	e007      	b.n	801731e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801730e:	4b07      	ldr	r3, [pc, #28]	; (801732c <prvInsertTimerInActiveList+0x80>)
 8017310:	681a      	ldr	r2, [r3, #0]
 8017312:	68fb      	ldr	r3, [r7, #12]
 8017314:	3304      	adds	r3, #4
 8017316:	4619      	mov	r1, r3
 8017318:	4610      	mov	r0, r2
 801731a:	f7fd fb72 	bl	8014a02 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801731e:	697b      	ldr	r3, [r7, #20]
}
 8017320:	4618      	mov	r0, r3
 8017322:	3718      	adds	r7, #24
 8017324:	46bd      	mov	sp, r7
 8017326:	bd80      	pop	{r7, pc}
 8017328:	24006c2c 	.word	0x24006c2c
 801732c:	24006c28 	.word	0x24006c28

08017330 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8017330:	b580      	push	{r7, lr}
 8017332:	b08e      	sub	sp, #56	; 0x38
 8017334:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8017336:	e0ca      	b.n	80174ce <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8017338:	687b      	ldr	r3, [r7, #4]
 801733a:	2b00      	cmp	r3, #0
 801733c:	da18      	bge.n	8017370 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801733e:	1d3b      	adds	r3, r7, #4
 8017340:	3304      	adds	r3, #4
 8017342:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8017344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017346:	2b00      	cmp	r3, #0
 8017348:	d10a      	bne.n	8017360 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801734a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801734e:	f383 8811 	msr	BASEPRI, r3
 8017352:	f3bf 8f6f 	isb	sy
 8017356:	f3bf 8f4f 	dsb	sy
 801735a:	61fb      	str	r3, [r7, #28]
}
 801735c:	bf00      	nop
 801735e:	e7fe      	b.n	801735e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8017360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017362:	681b      	ldr	r3, [r3, #0]
 8017364:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017366:	6850      	ldr	r0, [r2, #4]
 8017368:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801736a:	6892      	ldr	r2, [r2, #8]
 801736c:	4611      	mov	r1, r2
 801736e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	2b00      	cmp	r3, #0
 8017374:	f2c0 80ab 	blt.w	80174ce <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8017378:	68fb      	ldr	r3, [r7, #12]
 801737a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801737c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801737e:	695b      	ldr	r3, [r3, #20]
 8017380:	2b00      	cmp	r3, #0
 8017382:	d004      	beq.n	801738e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017386:	3304      	adds	r3, #4
 8017388:	4618      	mov	r0, r3
 801738a:	f7fd fb73 	bl	8014a74 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801738e:	463b      	mov	r3, r7
 8017390:	4618      	mov	r0, r3
 8017392:	f7ff ff6b 	bl	801726c <prvSampleTimeNow>
 8017396:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8017398:	687b      	ldr	r3, [r7, #4]
 801739a:	2b09      	cmp	r3, #9
 801739c:	f200 8096 	bhi.w	80174cc <prvProcessReceivedCommands+0x19c>
 80173a0:	a201      	add	r2, pc, #4	; (adr r2, 80173a8 <prvProcessReceivedCommands+0x78>)
 80173a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80173a6:	bf00      	nop
 80173a8:	080173d1 	.word	0x080173d1
 80173ac:	080173d1 	.word	0x080173d1
 80173b0:	080173d1 	.word	0x080173d1
 80173b4:	08017445 	.word	0x08017445
 80173b8:	08017459 	.word	0x08017459
 80173bc:	080174a3 	.word	0x080174a3
 80173c0:	080173d1 	.word	0x080173d1
 80173c4:	080173d1 	.word	0x080173d1
 80173c8:	08017445 	.word	0x08017445
 80173cc:	08017459 	.word	0x08017459
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80173d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80173d6:	f043 0301 	orr.w	r3, r3, #1
 80173da:	b2da      	uxtb	r2, r3
 80173dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80173e2:	68ba      	ldr	r2, [r7, #8]
 80173e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173e6:	699b      	ldr	r3, [r3, #24]
 80173e8:	18d1      	adds	r1, r2, r3
 80173ea:	68bb      	ldr	r3, [r7, #8]
 80173ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80173ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80173f0:	f7ff ff5c 	bl	80172ac <prvInsertTimerInActiveList>
 80173f4:	4603      	mov	r3, r0
 80173f6:	2b00      	cmp	r3, #0
 80173f8:	d069      	beq.n	80174ce <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80173fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173fc:	6a1b      	ldr	r3, [r3, #32]
 80173fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017400:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017404:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017408:	f003 0304 	and.w	r3, r3, #4
 801740c:	2b00      	cmp	r3, #0
 801740e:	d05e      	beq.n	80174ce <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8017410:	68ba      	ldr	r2, [r7, #8]
 8017412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017414:	699b      	ldr	r3, [r3, #24]
 8017416:	441a      	add	r2, r3
 8017418:	2300      	movs	r3, #0
 801741a:	9300      	str	r3, [sp, #0]
 801741c:	2300      	movs	r3, #0
 801741e:	2100      	movs	r1, #0
 8017420:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017422:	f7ff fe05 	bl	8017030 <xTimerGenericCommand>
 8017426:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8017428:	6a3b      	ldr	r3, [r7, #32]
 801742a:	2b00      	cmp	r3, #0
 801742c:	d14f      	bne.n	80174ce <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801742e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017432:	f383 8811 	msr	BASEPRI, r3
 8017436:	f3bf 8f6f 	isb	sy
 801743a:	f3bf 8f4f 	dsb	sy
 801743e:	61bb      	str	r3, [r7, #24]
}
 8017440:	bf00      	nop
 8017442:	e7fe      	b.n	8017442 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017446:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801744a:	f023 0301 	bic.w	r3, r3, #1
 801744e:	b2da      	uxtb	r2, r3
 8017450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017452:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8017456:	e03a      	b.n	80174ce <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801745a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801745e:	f043 0301 	orr.w	r3, r3, #1
 8017462:	b2da      	uxtb	r2, r3
 8017464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017466:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801746a:	68ba      	ldr	r2, [r7, #8]
 801746c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801746e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8017470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017472:	699b      	ldr	r3, [r3, #24]
 8017474:	2b00      	cmp	r3, #0
 8017476:	d10a      	bne.n	801748e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8017478:	f04f 0350 	mov.w	r3, #80	; 0x50
 801747c:	f383 8811 	msr	BASEPRI, r3
 8017480:	f3bf 8f6f 	isb	sy
 8017484:	f3bf 8f4f 	dsb	sy
 8017488:	617b      	str	r3, [r7, #20]
}
 801748a:	bf00      	nop
 801748c:	e7fe      	b.n	801748c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801748e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017490:	699a      	ldr	r2, [r3, #24]
 8017492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017494:	18d1      	adds	r1, r2, r3
 8017496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801749a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801749c:	f7ff ff06 	bl	80172ac <prvInsertTimerInActiveList>
					break;
 80174a0:	e015      	b.n	80174ce <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80174a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80174a8:	f003 0302 	and.w	r3, r3, #2
 80174ac:	2b00      	cmp	r3, #0
 80174ae:	d103      	bne.n	80174b8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80174b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80174b2:	f7fd f937 	bl	8014724 <vPortFree>
 80174b6:	e00a      	b.n	80174ce <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80174b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80174be:	f023 0301 	bic.w	r3, r3, #1
 80174c2:	b2da      	uxtb	r2, r3
 80174c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80174ca:	e000      	b.n	80174ce <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80174cc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80174ce:	4b08      	ldr	r3, [pc, #32]	; (80174f0 <prvProcessReceivedCommands+0x1c0>)
 80174d0:	681b      	ldr	r3, [r3, #0]
 80174d2:	1d39      	adds	r1, r7, #4
 80174d4:	2200      	movs	r2, #0
 80174d6:	4618      	mov	r0, r3
 80174d8:	f7fe f914 	bl	8015704 <xQueueReceive>
 80174dc:	4603      	mov	r3, r0
 80174de:	2b00      	cmp	r3, #0
 80174e0:	f47f af2a 	bne.w	8017338 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80174e4:	bf00      	nop
 80174e6:	bf00      	nop
 80174e8:	3730      	adds	r7, #48	; 0x30
 80174ea:	46bd      	mov	sp, r7
 80174ec:	bd80      	pop	{r7, pc}
 80174ee:	bf00      	nop
 80174f0:	24006c30 	.word	0x24006c30

080174f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80174f4:	b580      	push	{r7, lr}
 80174f6:	b088      	sub	sp, #32
 80174f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80174fa:	e048      	b.n	801758e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80174fc:	4b2d      	ldr	r3, [pc, #180]	; (80175b4 <prvSwitchTimerLists+0xc0>)
 80174fe:	681b      	ldr	r3, [r3, #0]
 8017500:	68db      	ldr	r3, [r3, #12]
 8017502:	681b      	ldr	r3, [r3, #0]
 8017504:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017506:	4b2b      	ldr	r3, [pc, #172]	; (80175b4 <prvSwitchTimerLists+0xc0>)
 8017508:	681b      	ldr	r3, [r3, #0]
 801750a:	68db      	ldr	r3, [r3, #12]
 801750c:	68db      	ldr	r3, [r3, #12]
 801750e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017510:	68fb      	ldr	r3, [r7, #12]
 8017512:	3304      	adds	r3, #4
 8017514:	4618      	mov	r0, r3
 8017516:	f7fd faad 	bl	8014a74 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801751a:	68fb      	ldr	r3, [r7, #12]
 801751c:	6a1b      	ldr	r3, [r3, #32]
 801751e:	68f8      	ldr	r0, [r7, #12]
 8017520:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017522:	68fb      	ldr	r3, [r7, #12]
 8017524:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017528:	f003 0304 	and.w	r3, r3, #4
 801752c:	2b00      	cmp	r3, #0
 801752e:	d02e      	beq.n	801758e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8017530:	68fb      	ldr	r3, [r7, #12]
 8017532:	699b      	ldr	r3, [r3, #24]
 8017534:	693a      	ldr	r2, [r7, #16]
 8017536:	4413      	add	r3, r2
 8017538:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801753a:	68ba      	ldr	r2, [r7, #8]
 801753c:	693b      	ldr	r3, [r7, #16]
 801753e:	429a      	cmp	r2, r3
 8017540:	d90e      	bls.n	8017560 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8017542:	68fb      	ldr	r3, [r7, #12]
 8017544:	68ba      	ldr	r2, [r7, #8]
 8017546:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8017548:	68fb      	ldr	r3, [r7, #12]
 801754a:	68fa      	ldr	r2, [r7, #12]
 801754c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801754e:	4b19      	ldr	r3, [pc, #100]	; (80175b4 <prvSwitchTimerLists+0xc0>)
 8017550:	681a      	ldr	r2, [r3, #0]
 8017552:	68fb      	ldr	r3, [r7, #12]
 8017554:	3304      	adds	r3, #4
 8017556:	4619      	mov	r1, r3
 8017558:	4610      	mov	r0, r2
 801755a:	f7fd fa52 	bl	8014a02 <vListInsert>
 801755e:	e016      	b.n	801758e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017560:	2300      	movs	r3, #0
 8017562:	9300      	str	r3, [sp, #0]
 8017564:	2300      	movs	r3, #0
 8017566:	693a      	ldr	r2, [r7, #16]
 8017568:	2100      	movs	r1, #0
 801756a:	68f8      	ldr	r0, [r7, #12]
 801756c:	f7ff fd60 	bl	8017030 <xTimerGenericCommand>
 8017570:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	2b00      	cmp	r3, #0
 8017576:	d10a      	bne.n	801758e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8017578:	f04f 0350 	mov.w	r3, #80	; 0x50
 801757c:	f383 8811 	msr	BASEPRI, r3
 8017580:	f3bf 8f6f 	isb	sy
 8017584:	f3bf 8f4f 	dsb	sy
 8017588:	603b      	str	r3, [r7, #0]
}
 801758a:	bf00      	nop
 801758c:	e7fe      	b.n	801758c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801758e:	4b09      	ldr	r3, [pc, #36]	; (80175b4 <prvSwitchTimerLists+0xc0>)
 8017590:	681b      	ldr	r3, [r3, #0]
 8017592:	681b      	ldr	r3, [r3, #0]
 8017594:	2b00      	cmp	r3, #0
 8017596:	d1b1      	bne.n	80174fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8017598:	4b06      	ldr	r3, [pc, #24]	; (80175b4 <prvSwitchTimerLists+0xc0>)
 801759a:	681b      	ldr	r3, [r3, #0]
 801759c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801759e:	4b06      	ldr	r3, [pc, #24]	; (80175b8 <prvSwitchTimerLists+0xc4>)
 80175a0:	681b      	ldr	r3, [r3, #0]
 80175a2:	4a04      	ldr	r2, [pc, #16]	; (80175b4 <prvSwitchTimerLists+0xc0>)
 80175a4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80175a6:	4a04      	ldr	r2, [pc, #16]	; (80175b8 <prvSwitchTimerLists+0xc4>)
 80175a8:	697b      	ldr	r3, [r7, #20]
 80175aa:	6013      	str	r3, [r2, #0]
}
 80175ac:	bf00      	nop
 80175ae:	3718      	adds	r7, #24
 80175b0:	46bd      	mov	sp, r7
 80175b2:	bd80      	pop	{r7, pc}
 80175b4:	24006c28 	.word	0x24006c28
 80175b8:	24006c2c 	.word	0x24006c2c

080175bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80175bc:	b580      	push	{r7, lr}
 80175be:	b082      	sub	sp, #8
 80175c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80175c2:	f7fd fbaf 	bl	8014d24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80175c6:	4b15      	ldr	r3, [pc, #84]	; (801761c <prvCheckForValidListAndQueue+0x60>)
 80175c8:	681b      	ldr	r3, [r3, #0]
 80175ca:	2b00      	cmp	r3, #0
 80175cc:	d120      	bne.n	8017610 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80175ce:	4814      	ldr	r0, [pc, #80]	; (8017620 <prvCheckForValidListAndQueue+0x64>)
 80175d0:	f7fd f9c6 	bl	8014960 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80175d4:	4813      	ldr	r0, [pc, #76]	; (8017624 <prvCheckForValidListAndQueue+0x68>)
 80175d6:	f7fd f9c3 	bl	8014960 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80175da:	4b13      	ldr	r3, [pc, #76]	; (8017628 <prvCheckForValidListAndQueue+0x6c>)
 80175dc:	4a10      	ldr	r2, [pc, #64]	; (8017620 <prvCheckForValidListAndQueue+0x64>)
 80175de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80175e0:	4b12      	ldr	r3, [pc, #72]	; (801762c <prvCheckForValidListAndQueue+0x70>)
 80175e2:	4a10      	ldr	r2, [pc, #64]	; (8017624 <prvCheckForValidListAndQueue+0x68>)
 80175e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80175e6:	2300      	movs	r3, #0
 80175e8:	9300      	str	r3, [sp, #0]
 80175ea:	4b11      	ldr	r3, [pc, #68]	; (8017630 <prvCheckForValidListAndQueue+0x74>)
 80175ec:	4a11      	ldr	r2, [pc, #68]	; (8017634 <prvCheckForValidListAndQueue+0x78>)
 80175ee:	2110      	movs	r1, #16
 80175f0:	200a      	movs	r0, #10
 80175f2:	f7fd fd21 	bl	8015038 <xQueueGenericCreateStatic>
 80175f6:	4603      	mov	r3, r0
 80175f8:	4a08      	ldr	r2, [pc, #32]	; (801761c <prvCheckForValidListAndQueue+0x60>)
 80175fa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80175fc:	4b07      	ldr	r3, [pc, #28]	; (801761c <prvCheckForValidListAndQueue+0x60>)
 80175fe:	681b      	ldr	r3, [r3, #0]
 8017600:	2b00      	cmp	r3, #0
 8017602:	d005      	beq.n	8017610 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8017604:	4b05      	ldr	r3, [pc, #20]	; (801761c <prvCheckForValidListAndQueue+0x60>)
 8017606:	681b      	ldr	r3, [r3, #0]
 8017608:	490b      	ldr	r1, [pc, #44]	; (8017638 <prvCheckForValidListAndQueue+0x7c>)
 801760a:	4618      	mov	r0, r3
 801760c:	f7fe fc32 	bl	8015e74 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017610:	f7fd fbb8 	bl	8014d84 <vPortExitCritical>
}
 8017614:	bf00      	nop
 8017616:	46bd      	mov	sp, r7
 8017618:	bd80      	pop	{r7, pc}
 801761a:	bf00      	nop
 801761c:	24006c30 	.word	0x24006c30
 8017620:	24006c00 	.word	0x24006c00
 8017624:	24006c14 	.word	0x24006c14
 8017628:	24006c28 	.word	0x24006c28
 801762c:	24006c2c 	.word	0x24006c2c
 8017630:	24006cdc 	.word	0x24006cdc
 8017634:	24006c3c 	.word	0x24006c3c
 8017638:	08028688 	.word	0x08028688

0801763c <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 801763c:	8880      	ldrh	r0, [r0, #4]
 801763e:	4770      	bx	lr

08017640 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8017640:	b570      	push	{r4, r5, r6, lr}
 8017642:	6803      	ldr	r3, [r0, #0]
 8017644:	460c      	mov	r4, r1
 8017646:	2100      	movs	r1, #0
 8017648:	4605      	mov	r5, r0
 801764a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801764c:	4798      	blx	r3
 801764e:	4606      	mov	r6, r0
 8017650:	682b      	ldr	r3, [r5, #0]
 8017652:	4628      	mov	r0, r5
 8017654:	1ba4      	subs	r4, r4, r6
 8017656:	6a1b      	ldr	r3, [r3, #32]
 8017658:	b2a4      	uxth	r4, r4
 801765a:	4798      	blx	r3
 801765c:	fbb4 f0f0 	udiv	r0, r4, r0
 8017660:	bd70      	pop	{r4, r5, r6, pc}

08017662 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8017662:	2300      	movs	r3, #0
 8017664:	8083      	strh	r3, [r0, #4]
 8017666:	4770      	bx	lr

08017668 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8017668:	b510      	push	{r4, lr}
 801766a:	6803      	ldr	r3, [r0, #0]
 801766c:	4604      	mov	r4, r0
 801766e:	8881      	ldrh	r1, [r0, #4]
 8017670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017672:	4798      	blx	r3
 8017674:	88a3      	ldrh	r3, [r4, #4]
 8017676:	3301      	adds	r3, #1
 8017678:	80a3      	strh	r3, [r4, #4]
 801767a:	bd10      	pop	{r4, pc}

0801767c <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 801767c:	6803      	ldr	r3, [r0, #0]
 801767e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017680:	4718      	bx	r3

08017682 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8017682:	4770      	bx	lr

08017684 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8017684:	4a02      	ldr	r2, [pc, #8]	; (8017690 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8017686:	6002      	str	r2, [r0, #0]
 8017688:	2200      	movs	r2, #0
 801768a:	8082      	strh	r2, [r0, #4]
 801768c:	4770      	bx	lr
 801768e:	bf00      	nop
 8017690:	08028f34 	.word	0x08028f34

08017694 <_ZN8touchgfx9Container13getFirstChildEv>:
 8017694:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8017696:	4770      	bx	lr

08017698 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8017698:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801769a:	2000      	movs	r0, #0
 801769c:	b12b      	cbz	r3, 80176aa <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 801769e:	b920      	cbnz	r0, 80176aa <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80176a0:	1a5a      	subs	r2, r3, r1
 80176a2:	699b      	ldr	r3, [r3, #24]
 80176a4:	4250      	negs	r0, r2
 80176a6:	4150      	adcs	r0, r2
 80176a8:	e7f8      	b.n	801769c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80176aa:	4770      	bx	lr

080176ac <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80176ac:	2300      	movs	r3, #0
 80176ae:	6148      	str	r0, [r1, #20]
 80176b0:	618b      	str	r3, [r1, #24]
 80176b2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80176b4:	b913      	cbnz	r3, 80176bc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 80176b6:	6281      	str	r1, [r0, #40]	; 0x28
 80176b8:	4770      	bx	lr
 80176ba:	4613      	mov	r3, r2
 80176bc:	699a      	ldr	r2, [r3, #24]
 80176be:	2a00      	cmp	r2, #0
 80176c0:	d1fb      	bne.n	80176ba <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 80176c2:	6199      	str	r1, [r3, #24]
 80176c4:	4770      	bx	lr

080176c6 <_ZN8touchgfx9Container9removeAllEv>:
 80176c6:	2200      	movs	r2, #0
 80176c8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80176ca:	b123      	cbz	r3, 80176d6 <_ZN8touchgfx9Container9removeAllEv+0x10>
 80176cc:	6999      	ldr	r1, [r3, #24]
 80176ce:	6281      	str	r1, [r0, #40]	; 0x28
 80176d0:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80176d4:	e7f8      	b.n	80176c8 <_ZN8touchgfx9Container9removeAllEv+0x2>
 80176d6:	4770      	bx	lr

080176d8 <_ZN8touchgfx9Container6unlinkEv>:
 80176d8:	2300      	movs	r3, #0
 80176da:	6283      	str	r3, [r0, #40]	; 0x28
 80176dc:	4770      	bx	lr

080176de <_ZNK8touchgfx9Container12getSolidRectEv>:
 80176de:	2200      	movs	r2, #0
 80176e0:	8002      	strh	r2, [r0, #0]
 80176e2:	8042      	strh	r2, [r0, #2]
 80176e4:	8082      	strh	r2, [r0, #4]
 80176e6:	80c2      	strh	r2, [r0, #6]
 80176e8:	4770      	bx	lr

080176ea <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 80176ea:	b570      	push	{r4, r5, r6, lr}
 80176ec:	460d      	mov	r5, r1
 80176ee:	4616      	mov	r6, r2
 80176f0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80176f2:	b13c      	cbz	r4, 8017704 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 80176f4:	6823      	ldr	r3, [r4, #0]
 80176f6:	4620      	mov	r0, r4
 80176f8:	4632      	mov	r2, r6
 80176fa:	4629      	mov	r1, r5
 80176fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80176fe:	4798      	blx	r3
 8017700:	69a4      	ldr	r4, [r4, #24]
 8017702:	e7f6      	b.n	80176f2 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8017704:	bd70      	pop	{r4, r5, r6, pc}

08017706 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8017706:	b538      	push	{r3, r4, r5, lr}
 8017708:	460d      	mov	r5, r1
 801770a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801770c:	b134      	cbz	r4, 801771c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 801770e:	682b      	ldr	r3, [r5, #0]
 8017710:	4621      	mov	r1, r4
 8017712:	4628      	mov	r0, r5
 8017714:	689b      	ldr	r3, [r3, #8]
 8017716:	4798      	blx	r3
 8017718:	69a4      	ldr	r4, [r4, #24]
 801771a:	e7f7      	b.n	801770c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 801771c:	bd38      	pop	{r3, r4, r5, pc}

0801771e <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 801771e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017720:	b19b      	cbz	r3, 801774a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8017722:	428b      	cmp	r3, r1
 8017724:	d109      	bne.n	801773a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8017726:	699a      	ldr	r2, [r3, #24]
 8017728:	2100      	movs	r1, #0
 801772a:	6159      	str	r1, [r3, #20]
 801772c:	6282      	str	r2, [r0, #40]	; 0x28
 801772e:	b902      	cbnz	r2, 8017732 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8017730:	4770      	bx	lr
 8017732:	6199      	str	r1, [r3, #24]
 8017734:	4770      	bx	lr
 8017736:	4613      	mov	r3, r2
 8017738:	b13a      	cbz	r2, 801774a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801773a:	699a      	ldr	r2, [r3, #24]
 801773c:	428a      	cmp	r2, r1
 801773e:	d1fa      	bne.n	8017736 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8017740:	698a      	ldr	r2, [r1, #24]
 8017742:	619a      	str	r2, [r3, #24]
 8017744:	2300      	movs	r3, #0
 8017746:	e9c1 3305 	strd	r3, r3, [r1, #20]
 801774a:	4770      	bx	lr

0801774c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 801774c:	b410      	push	{r4}
 801774e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017750:	4604      	mov	r4, r0
 8017752:	b92b      	cbnz	r3, 8017760 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8017754:	6803      	ldr	r3, [r0, #0]
 8017756:	4611      	mov	r1, r2
 8017758:	f85d 4b04 	ldr.w	r4, [sp], #4
 801775c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801775e:	4718      	bx	r3
 8017760:	b941      	cbnz	r1, 8017774 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8017762:	6193      	str	r3, [r2, #24]
 8017764:	6282      	str	r2, [r0, #40]	; 0x28
 8017766:	6154      	str	r4, [r2, #20]
 8017768:	f85d 4b04 	ldr.w	r4, [sp], #4
 801776c:	4770      	bx	lr
 801776e:	4603      	mov	r3, r0
 8017770:	2800      	cmp	r0, #0
 8017772:	d0f9      	beq.n	8017768 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8017774:	4299      	cmp	r1, r3
 8017776:	6998      	ldr	r0, [r3, #24]
 8017778:	d1f9      	bne.n	801776e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 801777a:	6190      	str	r0, [r2, #24]
 801777c:	618a      	str	r2, [r1, #24]
 801777e:	e7f2      	b.n	8017766 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08017780 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8017780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017784:	461f      	mov	r7, r3
 8017786:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 801778a:	460d      	mov	r5, r1
 801778c:	4616      	mov	r6, r2
 801778e:	b103      	cbz	r3, 8017792 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8017790:	6038      	str	r0, [r7, #0]
 8017792:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017794:	b314      	cbz	r4, 80177dc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8017796:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801779a:	b1eb      	cbz	r3, 80177d8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801779c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80177a0:	428d      	cmp	r5, r1
 80177a2:	db19      	blt.n	80177d8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80177a4:	b289      	uxth	r1, r1
 80177a6:	8923      	ldrh	r3, [r4, #8]
 80177a8:	440b      	add	r3, r1
 80177aa:	b21b      	sxth	r3, r3
 80177ac:	429d      	cmp	r5, r3
 80177ae:	da13      	bge.n	80177d8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80177b0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80177b4:	4296      	cmp	r6, r2
 80177b6:	db0f      	blt.n	80177d8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80177b8:	b292      	uxth	r2, r2
 80177ba:	8963      	ldrh	r3, [r4, #10]
 80177bc:	4413      	add	r3, r2
 80177be:	b21b      	sxth	r3, r3
 80177c0:	429e      	cmp	r6, r3
 80177c2:	da09      	bge.n	80177d8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80177c4:	6823      	ldr	r3, [r4, #0]
 80177c6:	1ab2      	subs	r2, r6, r2
 80177c8:	1a69      	subs	r1, r5, r1
 80177ca:	4620      	mov	r0, r4
 80177cc:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 80177d0:	b212      	sxth	r2, r2
 80177d2:	463b      	mov	r3, r7
 80177d4:	b209      	sxth	r1, r1
 80177d6:	47c0      	blx	r8
 80177d8:	69a4      	ldr	r4, [r4, #24]
 80177da:	e7db      	b.n	8017794 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 80177dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080177e0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 80177e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177e4:	4c6d      	ldr	r4, [pc, #436]	; (801799c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 80177e6:	b0a1      	sub	sp, #132	; 0x84
 80177e8:	4606      	mov	r6, r0
 80177ea:	6824      	ldr	r4, [r4, #0]
 80177ec:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 80177ee:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 80177f2:	2400      	movs	r4, #0
 80177f4:	9303      	str	r3, [sp, #12]
 80177f6:	802c      	strh	r4, [r5, #0]
 80177f8:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 80177fa:	802c      	strh	r4, [r5, #0]
 80177fc:	601c      	str	r4, [r3, #0]
 80177fe:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8017802:	f7ff ffbd 	bl	8017780 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8017806:	f1b9 0f03 	cmp.w	r9, #3
 801780a:	f340 80c1 	ble.w	8017990 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 801780e:	4631      	mov	r1, r6
 8017810:	a80c      	add	r0, sp, #48	; 0x30
 8017812:	f004 fabd 	bl	801bd90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017816:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801781a:	9306      	str	r3, [sp, #24]
 801781c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8017820:	9307      	str	r3, [sp, #28]
 8017822:	9b03      	ldr	r3, [sp, #12]
 8017824:	f8d3 a000 	ldr.w	sl, [r3]
 8017828:	f1ba 0f00 	cmp.w	sl, #0
 801782c:	f000 80b3 	beq.w	8017996 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8017830:	4651      	mov	r1, sl
 8017832:	a810      	add	r0, sp, #64	; 0x40
 8017834:	f004 faac 	bl	801bd90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017838:	2002      	movs	r0, #2
 801783a:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 801783e:	9b01      	ldr	r3, [sp, #4]
 8017840:	9a06      	ldr	r2, [sp, #24]
 8017842:	fb91 f1f0 	sdiv	r1, r1, r0
 8017846:	189d      	adds	r5, r3, r2
 8017848:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 801784c:	9a07      	ldr	r2, [sp, #28]
 801784e:	4419      	add	r1, r3
 8017850:	9b02      	ldr	r3, [sp, #8]
 8017852:	4413      	add	r3, r2
 8017854:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8017858:	1a6d      	subs	r5, r5, r1
 801785a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801785e:	fb92 f2f0 	sdiv	r2, r2, r0
 8017862:	440a      	add	r2, r1
 8017864:	1a9b      	subs	r3, r3, r2
 8017866:	435b      	muls	r3, r3
 8017868:	fb05 3505 	mla	r5, r5, r5, r3
 801786c:	4f4c      	ldr	r7, [pc, #304]	; (80179a0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 801786e:	ac10      	add	r4, sp, #64	; 0x40
 8017870:	f1b9 0f0c 	cmp.w	r9, #12
 8017874:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8017876:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017878:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801787a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801787c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801787e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017880:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8017884:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8017888:	f04f 0303 	mov.w	r3, #3
 801788c:	bfd8      	it	le
 801788e:	f109 32ff 	addle.w	r2, r9, #4294967295
 8017892:	f04f 0400 	mov.w	r4, #0
 8017896:	f8cd 9000 	str.w	r9, [sp]
 801789a:	bfcc      	ite	gt
 801789c:	4698      	movgt	r8, r3
 801789e:	fb92 f8f3 	sdivle	r8, r2, r3
 80178a2:	1c63      	adds	r3, r4, #1
 80178a4:	aa10      	add	r2, sp, #64	; 0x40
 80178a6:	f004 0401 	and.w	r4, r4, #1
 80178aa:	f04f 0b00 	mov.w	fp, #0
 80178ae:	9308      	str	r3, [sp, #32]
 80178b0:	9b00      	ldr	r3, [sp, #0]
 80178b2:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 80178b6:	fb93 f3f8 	sdiv	r3, r3, r8
 80178ba:	3404      	adds	r4, #4
 80178bc:	b29b      	uxth	r3, r3
 80178be:	9304      	str	r3, [sp, #16]
 80178c0:	9a04      	ldr	r2, [sp, #16]
 80178c2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80178c6:	fb13 f302 	smulbb	r3, r3, r2
 80178ca:	9a01      	ldr	r2, [sp, #4]
 80178cc:	b29b      	uxth	r3, r3
 80178ce:	1899      	adds	r1, r3, r2
 80178d0:	9305      	str	r3, [sp, #20]
 80178d2:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80178d6:	b209      	sxth	r1, r1
 80178d8:	4299      	cmp	r1, r3
 80178da:	db4d      	blt.n	8017978 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80178dc:	8932      	ldrh	r2, [r6, #8]
 80178de:	4413      	add	r3, r2
 80178e0:	b21b      	sxth	r3, r3
 80178e2:	4299      	cmp	r1, r3
 80178e4:	da48      	bge.n	8017978 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80178e6:	9b04      	ldr	r3, [sp, #16]
 80178e8:	6827      	ldr	r7, [r4, #0]
 80178ea:	fb17 f703 	smulbb	r7, r7, r3
 80178ee:	9b02      	ldr	r3, [sp, #8]
 80178f0:	b2bf      	uxth	r7, r7
 80178f2:	18fa      	adds	r2, r7, r3
 80178f4:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80178f8:	b212      	sxth	r2, r2
 80178fa:	429a      	cmp	r2, r3
 80178fc:	db3c      	blt.n	8017978 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80178fe:	8970      	ldrh	r0, [r6, #10]
 8017900:	4403      	add	r3, r0
 8017902:	b21b      	sxth	r3, r3
 8017904:	429a      	cmp	r2, r3
 8017906:	da37      	bge.n	8017978 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017908:	2300      	movs	r3, #0
 801790a:	4630      	mov	r0, r6
 801790c:	930b      	str	r3, [sp, #44]	; 0x2c
 801790e:	ab0b      	add	r3, sp, #44	; 0x2c
 8017910:	f7ff ff36 	bl	8017780 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8017914:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017916:	b37a      	cbz	r2, 8017978 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017918:	4552      	cmp	r2, sl
 801791a:	d02d      	beq.n	8017978 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801791c:	4611      	mov	r1, r2
 801791e:	a80e      	add	r0, sp, #56	; 0x38
 8017920:	9209      	str	r2, [sp, #36]	; 0x24
 8017922:	f004 fa35 	bl	801bd90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017926:	f04f 0e02 	mov.w	lr, #2
 801792a:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 801792e:	9a06      	ldr	r2, [sp, #24]
 8017930:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8017934:	9b01      	ldr	r3, [sp, #4]
 8017936:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 801793a:	4413      	add	r3, r2
 801793c:	9a07      	ldr	r2, [sp, #28]
 801793e:	fb91 f1fe 	sdiv	r1, r1, lr
 8017942:	fb9c fcfe 	sdiv	ip, ip, lr
 8017946:	4401      	add	r1, r0
 8017948:	1a58      	subs	r0, r3, r1
 801794a:	9b02      	ldr	r3, [sp, #8]
 801794c:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8017950:	4413      	add	r3, r2
 8017952:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017954:	448c      	add	ip, r1
 8017956:	eba3 030c 	sub.w	r3, r3, ip
 801795a:	435b      	muls	r3, r3
 801795c:	fb00 3300 	mla	r3, r0, r0, r3
 8017960:	42ab      	cmp	r3, r5
 8017962:	d208      	bcs.n	8017976 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8017964:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017966:	461d      	mov	r5, r3
 8017968:	9803      	ldr	r0, [sp, #12]
 801796a:	6001      	str	r1, [r0, #0]
 801796c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801796e:	9805      	ldr	r0, [sp, #20]
 8017970:	8008      	strh	r0, [r1, #0]
 8017972:	992b      	ldr	r1, [sp, #172]	; 0xac
 8017974:	800f      	strh	r7, [r1, #0]
 8017976:	4692      	mov	sl, r2
 8017978:	f10b 0b01 	add.w	fp, fp, #1
 801797c:	3408      	adds	r4, #8
 801797e:	f1bb 0f04 	cmp.w	fp, #4
 8017982:	d19d      	bne.n	80178c0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8017984:	9b00      	ldr	r3, [sp, #0]
 8017986:	9c08      	ldr	r4, [sp, #32]
 8017988:	444b      	add	r3, r9
 801798a:	4544      	cmp	r4, r8
 801798c:	9300      	str	r3, [sp, #0]
 801798e:	d188      	bne.n	80178a2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8017990:	b021      	add	sp, #132	; 0x84
 8017992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017996:	f04f 35ff 	mov.w	r5, #4294967295
 801799a:	e767      	b.n	801786c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 801799c:	24006d38 	.word	0x24006d38
 80179a0:	08028690 	.word	0x08028690

080179a4 <_ZN8touchgfx4RectaNERKS0_>:
 80179a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80179a8:	f9b1 7000 	ldrsh.w	r7, [r1]
 80179ac:	888c      	ldrh	r4, [r1, #4]
 80179ae:	f9b0 9000 	ldrsh.w	r9, [r0]
 80179b2:	443c      	add	r4, r7
 80179b4:	b2a4      	uxth	r4, r4
 80179b6:	fa0f f884 	sxth.w	r8, r4
 80179ba:	45c1      	cmp	r9, r8
 80179bc:	da2f      	bge.n	8017a1e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80179be:	8882      	ldrh	r2, [r0, #4]
 80179c0:	444a      	add	r2, r9
 80179c2:	b292      	uxth	r2, r2
 80179c4:	fa0f fe82 	sxth.w	lr, r2
 80179c8:	4577      	cmp	r7, lr
 80179ca:	da28      	bge.n	8017a1e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80179cc:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80179d0:	88cb      	ldrh	r3, [r1, #6]
 80179d2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80179d6:	442b      	add	r3, r5
 80179d8:	b21b      	sxth	r3, r3
 80179da:	429e      	cmp	r6, r3
 80179dc:	da1f      	bge.n	8017a1e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80179de:	88c3      	ldrh	r3, [r0, #6]
 80179e0:	4433      	add	r3, r6
 80179e2:	b29b      	uxth	r3, r3
 80179e4:	fa0f fc83 	sxth.w	ip, r3
 80179e8:	4565      	cmp	r5, ip
 80179ea:	da18      	bge.n	8017a1e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80179ec:	454f      	cmp	r7, r9
 80179ee:	bfb8      	it	lt
 80179f0:	464f      	movlt	r7, r9
 80179f2:	42b5      	cmp	r5, r6
 80179f4:	bfb8      	it	lt
 80179f6:	4635      	movlt	r5, r6
 80179f8:	45f0      	cmp	r8, lr
 80179fa:	bfd8      	it	le
 80179fc:	4622      	movle	r2, r4
 80179fe:	1bd2      	subs	r2, r2, r7
 8017a00:	8082      	strh	r2, [r0, #4]
 8017a02:	884a      	ldrh	r2, [r1, #2]
 8017a04:	88c9      	ldrh	r1, [r1, #6]
 8017a06:	8007      	strh	r7, [r0, #0]
 8017a08:	440a      	add	r2, r1
 8017a0a:	8045      	strh	r5, [r0, #2]
 8017a0c:	b292      	uxth	r2, r2
 8017a0e:	b211      	sxth	r1, r2
 8017a10:	458c      	cmp	ip, r1
 8017a12:	bfa8      	it	ge
 8017a14:	4613      	movge	r3, r2
 8017a16:	1b5b      	subs	r3, r3, r5
 8017a18:	80c3      	strh	r3, [r0, #6]
 8017a1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017a1e:	2300      	movs	r3, #0
 8017a20:	8003      	strh	r3, [r0, #0]
 8017a22:	8043      	strh	r3, [r0, #2]
 8017a24:	8083      	strh	r3, [r0, #4]
 8017a26:	80c3      	strh	r3, [r0, #6]
 8017a28:	e7f7      	b.n	8017a1a <_ZN8touchgfx4RectaNERKS0_+0x76>

08017a2a <_ZNK8touchgfx4Rect7isEmptyEv>:
 8017a2a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017a2e:	2b00      	cmp	r3, #0
 8017a30:	dd06      	ble.n	8017a40 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8017a32:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8017a36:	2800      	cmp	r0, #0
 8017a38:	bfcc      	ite	gt
 8017a3a:	2000      	movgt	r0, #0
 8017a3c:	2001      	movle	r0, #1
 8017a3e:	4770      	bx	lr
 8017a40:	2001      	movs	r0, #1
 8017a42:	4770      	bx	lr

08017a44 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8017a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a48:	2300      	movs	r3, #0
 8017a4a:	4604      	mov	r4, r0
 8017a4c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8017a4e:	8003      	strh	r3, [r0, #0]
 8017a50:	8043      	strh	r3, [r0, #2]
 8017a52:	8083      	strh	r3, [r0, #4]
 8017a54:	80c3      	strh	r3, [r0, #6]
 8017a56:	2d00      	cmp	r5, #0
 8017a58:	d040      	beq.n	8017adc <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8017a5a:	1d28      	adds	r0, r5, #4
 8017a5c:	f7ff ffe5 	bl	8017a2a <_ZNK8touchgfx4Rect7isEmptyEv>
 8017a60:	b988      	cbnz	r0, 8017a86 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8017a62:	4620      	mov	r0, r4
 8017a64:	f7ff ffe1 	bl	8017a2a <_ZNK8touchgfx4Rect7isEmptyEv>
 8017a68:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8017a6c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8017a70:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8017a74:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8017a78:	b138      	cbz	r0, 8017a8a <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8017a7a:	8022      	strh	r2, [r4, #0]
 8017a7c:	8063      	strh	r3, [r4, #2]
 8017a7e:	f8a4 e004 	strh.w	lr, [r4, #4]
 8017a82:	f8a4 c006 	strh.w	ip, [r4, #6]
 8017a86:	69ad      	ldr	r5, [r5, #24]
 8017a88:	e7e5      	b.n	8017a56 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8017a8a:	f9b4 0000 	ldrsh.w	r0, [r4]
 8017a8e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8017a92:	4290      	cmp	r0, r2
 8017a94:	4607      	mov	r7, r0
 8017a96:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8017a9a:	460e      	mov	r6, r1
 8017a9c:	bfa8      	it	ge
 8017a9e:	4617      	movge	r7, r2
 8017aa0:	4299      	cmp	r1, r3
 8017aa2:	4472      	add	r2, lr
 8017aa4:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8017aa8:	bfa8      	it	ge
 8017aaa:	461e      	movge	r6, r3
 8017aac:	4440      	add	r0, r8
 8017aae:	4471      	add	r1, lr
 8017ab0:	4463      	add	r3, ip
 8017ab2:	b200      	sxth	r0, r0
 8017ab4:	8027      	strh	r7, [r4, #0]
 8017ab6:	b212      	sxth	r2, r2
 8017ab8:	8066      	strh	r6, [r4, #2]
 8017aba:	b209      	sxth	r1, r1
 8017abc:	b21b      	sxth	r3, r3
 8017abe:	4290      	cmp	r0, r2
 8017ac0:	bfac      	ite	ge
 8017ac2:	ebc7 0200 	rsbge	r2, r7, r0
 8017ac6:	ebc7 0202 	rsblt	r2, r7, r2
 8017aca:	4299      	cmp	r1, r3
 8017acc:	bfac      	ite	ge
 8017ace:	ebc6 0301 	rsbge	r3, r6, r1
 8017ad2:	ebc6 0303 	rsblt	r3, r6, r3
 8017ad6:	80a2      	strh	r2, [r4, #4]
 8017ad8:	80e3      	strh	r3, [r4, #6]
 8017ada:	e7d4      	b.n	8017a86 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8017adc:	4620      	mov	r0, r4
 8017ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017ae2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8017ae2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8017ae6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8017aea:	b383      	cbz	r3, 8017b4e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8017aec:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017aee:	b374      	cbz	r4, 8017b4e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8017af0:	f9b1 5000 	ldrsh.w	r5, [r1]
 8017af4:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8017af8:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8017afc:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8017b00:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8017b04:	b303      	cbz	r3, 8017b48 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8017b06:	4668      	mov	r0, sp
 8017b08:	1d21      	adds	r1, r4, #4
 8017b0a:	f8ad 5000 	strh.w	r5, [sp]
 8017b0e:	f8ad 6002 	strh.w	r6, [sp, #2]
 8017b12:	f8ad 7004 	strh.w	r7, [sp, #4]
 8017b16:	f8ad 8006 	strh.w	r8, [sp, #6]
 8017b1a:	f7ff ff43 	bl	80179a4 <_ZN8touchgfx4RectaNERKS0_>
 8017b1e:	4668      	mov	r0, sp
 8017b20:	f7ff ff83 	bl	8017a2a <_ZNK8touchgfx4Rect7isEmptyEv>
 8017b24:	b980      	cbnz	r0, 8017b48 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8017b26:	f8bd 3000 	ldrh.w	r3, [sp]
 8017b2a:	4669      	mov	r1, sp
 8017b2c:	88a2      	ldrh	r2, [r4, #4]
 8017b2e:	4620      	mov	r0, r4
 8017b30:	1a9b      	subs	r3, r3, r2
 8017b32:	88e2      	ldrh	r2, [r4, #6]
 8017b34:	f8ad 3000 	strh.w	r3, [sp]
 8017b38:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017b3c:	1a9b      	subs	r3, r3, r2
 8017b3e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8017b42:	6823      	ldr	r3, [r4, #0]
 8017b44:	689b      	ldr	r3, [r3, #8]
 8017b46:	4798      	blx	r3
 8017b48:	69a4      	ldr	r4, [r4, #24]
 8017b4a:	2c00      	cmp	r4, #0
 8017b4c:	d1d8      	bne.n	8017b00 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8017b4e:	b002      	add	sp, #8
 8017b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017b54 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8017b54:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017b56:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8017b5a:	460d      	mov	r5, r1
 8017b5c:	4616      	mov	r6, r2
 8017b5e:	b323      	cbz	r3, 8017baa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8017b60:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017b62:	b314      	cbz	r4, 8017baa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8017b64:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8017b68:	b1eb      	cbz	r3, 8017ba6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8017b6a:	6828      	ldr	r0, [r5, #0]
 8017b6c:	466b      	mov	r3, sp
 8017b6e:	6869      	ldr	r1, [r5, #4]
 8017b70:	c303      	stmia	r3!, {r0, r1}
 8017b72:	4668      	mov	r0, sp
 8017b74:	1d21      	adds	r1, r4, #4
 8017b76:	f7ff ff15 	bl	80179a4 <_ZN8touchgfx4RectaNERKS0_>
 8017b7a:	4668      	mov	r0, sp
 8017b7c:	f7ff ff55 	bl	8017a2a <_ZNK8touchgfx4Rect7isEmptyEv>
 8017b80:	b988      	cbnz	r0, 8017ba6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8017b82:	f8bd 3000 	ldrh.w	r3, [sp]
 8017b86:	4669      	mov	r1, sp
 8017b88:	88a2      	ldrh	r2, [r4, #4]
 8017b8a:	4620      	mov	r0, r4
 8017b8c:	1a9b      	subs	r3, r3, r2
 8017b8e:	88e2      	ldrh	r2, [r4, #6]
 8017b90:	f8ad 3000 	strh.w	r3, [sp]
 8017b94:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017b98:	1a9b      	subs	r3, r3, r2
 8017b9a:	4632      	mov	r2, r6
 8017b9c:	f8ad 3002 	strh.w	r3, [sp, #2]
 8017ba0:	6823      	ldr	r3, [r4, #0]
 8017ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017ba4:	4798      	blx	r3
 8017ba6:	69a4      	ldr	r4, [r4, #24]
 8017ba8:	e7db      	b.n	8017b62 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8017baa:	b002      	add	sp, #8
 8017bac:	bd70      	pop	{r4, r5, r6, pc}

08017bae <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 8017bae:	4770      	bx	lr

08017bb0 <_ZN8touchgfx3HAL10FlushCacheEv>:
 8017bb0:	4770      	bx	lr

08017bb2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8017bb2:	6803      	ldr	r3, [r0, #0]
 8017bb4:	b513      	push	{r0, r1, r4, lr}
 8017bb6:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 8017bba:	2300      	movs	r3, #0
 8017bbc:	e9cd 3300 	strd	r3, r3, [sp]
 8017bc0:	466b      	mov	r3, sp
 8017bc2:	47a0      	blx	r4
 8017bc4:	b002      	add	sp, #8
 8017bc6:	bd10      	pop	{r4, pc}

08017bc8 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8017bc8:	2301      	movs	r3, #1
 8017bca:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8017bce:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
 8017bd2:	4770      	bx	lr

08017bd4 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8017bd4:	2301      	movs	r3, #1
 8017bd6:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8017bda:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
 8017bde:	4770      	bx	lr

08017be0 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8017be0:	6843      	ldr	r3, [r0, #4]
 8017be2:	2201      	movs	r2, #1
 8017be4:	725a      	strb	r2, [r3, #9]
 8017be6:	6840      	ldr	r0, [r0, #4]
 8017be8:	6803      	ldr	r3, [r0, #0]
 8017bea:	691b      	ldr	r3, [r3, #16]
 8017bec:	4718      	bx	r3

08017bee <_ZN8touchgfx3HAL8flushDMAEv>:
 8017bee:	6840      	ldr	r0, [r0, #4]
 8017bf0:	6803      	ldr	r3, [r0, #0]
 8017bf2:	689b      	ldr	r3, [r3, #8]
 8017bf4:	4718      	bx	r3

08017bf6 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8017bf6:	b530      	push	{r4, r5, lr}
 8017bf8:	b08b      	sub	sp, #44	; 0x2c
 8017bfa:	6804      	ldr	r4, [r0, #0]
 8017bfc:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8017c00:	9509      	str	r5, [sp, #36]	; 0x24
 8017c02:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8017c06:	9508      	str	r5, [sp, #32]
 8017c08:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8017c0c:	9507      	str	r5, [sp, #28]
 8017c0e:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8017c12:	9506      	str	r5, [sp, #24]
 8017c14:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8017c18:	9505      	str	r5, [sp, #20]
 8017c1a:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8017c1e:	9504      	str	r5, [sp, #16]
 8017c20:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8017c24:	9503      	str	r5, [sp, #12]
 8017c26:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8017c2a:	9502      	str	r5, [sp, #8]
 8017c2c:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8017c30:	e9cd 3500 	strd	r3, r5, [sp]
 8017c34:	4613      	mov	r3, r2
 8017c36:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8017c38:	2200      	movs	r2, #0
 8017c3a:	47a0      	blx	r4
 8017c3c:	b00b      	add	sp, #44	; 0x2c
 8017c3e:	bd30      	pop	{r4, r5, pc}

08017c40 <_ZN8touchgfx3HAL10beginFrameEv>:
 8017c40:	4b04      	ldr	r3, [pc, #16]	; (8017c54 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8017c42:	781b      	ldrb	r3, [r3, #0]
 8017c44:	b123      	cbz	r3, 8017c50 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8017c46:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
 8017c4a:	f080 0001 	eor.w	r0, r0, #1
 8017c4e:	4770      	bx	lr
 8017c50:	2001      	movs	r0, #1
 8017c52:	4770      	bx	lr
 8017c54:	24006d36 	.word	0x24006d36

08017c58 <_ZN8touchgfx3HAL8endFrameEv>:
 8017c58:	b510      	push	{r4, lr}
 8017c5a:	4604      	mov	r4, r0
 8017c5c:	6840      	ldr	r0, [r0, #4]
 8017c5e:	6803      	ldr	r3, [r0, #0]
 8017c60:	689b      	ldr	r3, [r3, #8]
 8017c62:	4798      	blx	r3
 8017c64:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
 8017c68:	b113      	cbz	r3, 8017c70 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8017c6a:	2301      	movs	r3, #1
 8017c6c:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
 8017c70:	bd10      	pop	{r4, pc}

08017c72 <_ZN8touchgfx3HAL10initializeEv>:
 8017c72:	b510      	push	{r4, lr}
 8017c74:	4604      	mov	r4, r0
 8017c76:	f7ea fd9f 	bl	80027b8 <_ZN8touchgfx10OSWrappers10initializeEv>
 8017c7a:	f7ea fa59 	bl	8002130 <_ZN8touchgfx4GPIO4initEv>
 8017c7e:	6860      	ldr	r0, [r4, #4]
 8017c80:	6803      	ldr	r3, [r0, #0]
 8017c82:	68db      	ldr	r3, [r3, #12]
 8017c84:	4798      	blx	r3
 8017c86:	68e0      	ldr	r0, [r4, #12]
 8017c88:	6803      	ldr	r3, [r0, #0]
 8017c8a:	689b      	ldr	r3, [r3, #8]
 8017c8c:	4798      	blx	r3
 8017c8e:	6823      	ldr	r3, [r4, #0]
 8017c90:	4620      	mov	r0, r4
 8017c92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017c94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017c98:	4718      	bx	r3

08017c9a <_ZN8touchgfx3HAL9taskEntryEv>:
 8017c9a:	b508      	push	{r3, lr}
 8017c9c:	6803      	ldr	r3, [r0, #0]
 8017c9e:	4604      	mov	r4, r0
 8017ca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017ca4:	4798      	blx	r3
 8017ca6:	6823      	ldr	r3, [r4, #0]
 8017ca8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017caa:	4620      	mov	r0, r4
 8017cac:	4798      	blx	r3
 8017cae:	f7ea fdf9 	bl	80028a4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8017cb2:	6823      	ldr	r3, [r4, #0]
 8017cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017cb6:	e7f8      	b.n	8017caa <_ZN8touchgfx3HAL9taskEntryEv+0x10>

08017cb8 <_ZN8touchgfx3HAL4tickEv>:
 8017cb8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8017cba:	6803      	ldr	r3, [r0, #0]
 8017cbc:	4604      	mov	r4, r0
 8017cbe:	4d5b      	ldr	r5, [pc, #364]	; (8017e2c <_ZN8touchgfx3HAL4tickEv+0x174>)
 8017cc0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8017cc4:	4798      	blx	r3
 8017cc6:	2800      	cmp	r0, #0
 8017cc8:	f000 8095 	beq.w	8017df6 <_ZN8touchgfx3HAL4tickEv+0x13e>
 8017ccc:	2001      	movs	r0, #1
 8017cce:	2600      	movs	r6, #0
 8017cd0:	f7ea fa36 	bl	8002140 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8017cd4:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
 8017cd8:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8017cdc:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8017ce0:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
 8017ce4:	f884 606a 	strb.w	r6, [r4, #106]	; 0x6a
 8017ce8:	b133      	cbz	r3, 8017cf8 <_ZN8touchgfx3HAL4tickEv+0x40>
 8017cea:	6823      	ldr	r3, [r4, #0]
 8017cec:	4620      	mov	r0, r4
 8017cee:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8017cf2:	4798      	blx	r3
 8017cf4:	f884 6079 	strb.w	r6, [r4, #121]	; 0x79
 8017cf8:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8017cfc:	2601      	movs	r6, #1
 8017cfe:	6862      	ldr	r2, [r4, #4]
 8017d00:	f083 0301 	eor.w	r3, r3, #1
 8017d04:	702e      	strb	r6, [r5, #0]
 8017d06:	7253      	strb	r3, [r2, #9]
 8017d08:	f002 ff2e 	bl	801ab68 <_ZN8touchgfx11Application11getInstanceEv>
 8017d0c:	6803      	ldr	r3, [r0, #0]
 8017d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017d10:	4798      	blx	r3
 8017d12:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 8017d16:	b90b      	cbnz	r3, 8017d1c <_ZN8touchgfx3HAL4tickEv+0x64>
 8017d18:	f884 606b 	strb.w	r6, [r4, #107]	; 0x6b
 8017d1c:	f002 ff24 	bl	801ab68 <_ZN8touchgfx11Application11getInstanceEv>
 8017d20:	6803      	ldr	r3, [r0, #0]
 8017d22:	695b      	ldr	r3, [r3, #20]
 8017d24:	4798      	blx	r3
 8017d26:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8017d28:	6803      	ldr	r3, [r0, #0]
 8017d2a:	691b      	ldr	r3, [r3, #16]
 8017d2c:	4798      	blx	r3
 8017d2e:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 8017d32:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
 8017d36:	3b01      	subs	r3, #1
 8017d38:	b2db      	uxtb	r3, r3
 8017d3a:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8017d3e:	b10a      	cbz	r2, 8017d44 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8017d40:	2b00      	cmp	r3, #0
 8017d42:	d1eb      	bne.n	8017d1c <_ZN8touchgfx3HAL4tickEv+0x64>
 8017d44:	4a3a      	ldr	r2, [pc, #232]	; (8017e30 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8017d46:	f994 1068 	ldrsb.w	r1, [r4, #104]	; 0x68
 8017d4a:	7813      	ldrb	r3, [r2, #0]
 8017d4c:	3301      	adds	r3, #1
 8017d4e:	b25b      	sxtb	r3, r3
 8017d50:	4299      	cmp	r1, r3
 8017d52:	7013      	strb	r3, [r2, #0]
 8017d54:	dc10      	bgt.n	8017d78 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8017d56:	2300      	movs	r3, #0
 8017d58:	68e0      	ldr	r0, [r4, #12]
 8017d5a:	a902      	add	r1, sp, #8
 8017d5c:	7013      	strb	r3, [r2, #0]
 8017d5e:	aa03      	add	r2, sp, #12
 8017d60:	6803      	ldr	r3, [r0, #0]
 8017d62:	68db      	ldr	r3, [r3, #12]
 8017d64:	4798      	blx	r3
 8017d66:	6823      	ldr	r3, [r4, #0]
 8017d68:	2800      	cmp	r0, #0
 8017d6a:	d050      	beq.n	8017e0e <_ZN8touchgfx3HAL4tickEv+0x156>
 8017d6c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8017d70:	4620      	mov	r0, r4
 8017d72:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8017d76:	4798      	blx	r3
 8017d78:	2300      	movs	r3, #0
 8017d7a:	6960      	ldr	r0, [r4, #20]
 8017d7c:	f88d 3007 	strb.w	r3, [sp, #7]
 8017d80:	b158      	cbz	r0, 8017d9a <_ZN8touchgfx3HAL4tickEv+0xe2>
 8017d82:	6803      	ldr	r3, [r0, #0]
 8017d84:	f10d 0107 	add.w	r1, sp, #7
 8017d88:	68db      	ldr	r3, [r3, #12]
 8017d8a:	4798      	blx	r3
 8017d8c:	b128      	cbz	r0, 8017d9a <_ZN8touchgfx3HAL4tickEv+0xe2>
 8017d8e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8017d90:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8017d94:	6803      	ldr	r3, [r0, #0]
 8017d96:	68db      	ldr	r3, [r3, #12]
 8017d98:	4798      	blx	r3
 8017d9a:	f104 001c 	add.w	r0, r4, #28
 8017d9e:	f00e fdc5 	bl	802692c <_ZN8touchgfx8Gestures4tickEv>
 8017da2:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8017da6:	b30b      	cbz	r3, 8017dec <_ZN8touchgfx3HAL4tickEv+0x134>
 8017da8:	6920      	ldr	r0, [r4, #16]
 8017daa:	6803      	ldr	r3, [r0, #0]
 8017dac:	691b      	ldr	r3, [r3, #16]
 8017dae:	4798      	blx	r3
 8017db0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8017db2:	4606      	mov	r6, r0
 8017db4:	b903      	cbnz	r3, 8017db8 <_ZN8touchgfx3HAL4tickEv+0x100>
 8017db6:	6760      	str	r0, [r4, #116]	; 0x74
 8017db8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8017dba:	4a1e      	ldr	r2, [pc, #120]	; (8017e34 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8017dbc:	1af3      	subs	r3, r6, r3
 8017dbe:	4293      	cmp	r3, r2
 8017dc0:	d914      	bls.n	8017dec <_ZN8touchgfx3HAL4tickEv+0x134>
 8017dc2:	6920      	ldr	r0, [r4, #16]
 8017dc4:	6803      	ldr	r3, [r0, #0]
 8017dc6:	699b      	ldr	r3, [r3, #24]
 8017dc8:	4798      	blx	r3
 8017dca:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8017dcc:	2264      	movs	r2, #100	; 0x64
 8017dce:	1af3      	subs	r3, r6, r3
 8017dd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8017dd4:	fbb0 f0f3 	udiv	r0, r0, r3
 8017dd8:	2800      	cmp	r0, #0
 8017dda:	dc1d      	bgt.n	8017e18 <_ZN8touchgfx3HAL4tickEv+0x160>
 8017ddc:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
 8017de0:	6920      	ldr	r0, [r4, #16]
 8017de2:	2100      	movs	r1, #0
 8017de4:	6803      	ldr	r3, [r0, #0]
 8017de6:	69db      	ldr	r3, [r3, #28]
 8017de8:	4798      	blx	r3
 8017dea:	6766      	str	r6, [r4, #116]	; 0x74
 8017dec:	f002 febc 	bl	801ab68 <_ZN8touchgfx11Application11getInstanceEv>
 8017df0:	6803      	ldr	r3, [r0, #0]
 8017df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017df4:	4798      	blx	r3
 8017df6:	6823      	ldr	r3, [r4, #0]
 8017df8:	4620      	mov	r0, r4
 8017dfa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8017dfe:	4798      	blx	r3
 8017e00:	2001      	movs	r0, #1
 8017e02:	f7ea f9d7 	bl	80021b4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8017e06:	2300      	movs	r3, #0
 8017e08:	702b      	strb	r3, [r5, #0]
 8017e0a:	b004      	add	sp, #16
 8017e0c:	bd70      	pop	{r4, r5, r6, pc}
 8017e0e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8017e12:	4620      	mov	r0, r4
 8017e14:	4798      	blx	r3
 8017e16:	e7af      	b.n	8017d78 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8017e18:	2863      	cmp	r0, #99	; 0x63
 8017e1a:	bfcb      	itete	gt
 8017e1c:	2300      	movgt	r3, #0
 8017e1e:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8017e22:	f884 3069 	strbgt.w	r3, [r4, #105]	; 0x69
 8017e26:	f884 0069 	strble.w	r0, [r4, #105]	; 0x69
 8017e2a:	e7d9      	b.n	8017de0 <_ZN8touchgfx3HAL4tickEv+0x128>
 8017e2c:	24006d3c 	.word	0x24006d3c
 8017e30:	24006d3d 	.word	0x24006d3d
 8017e34:	05f5e100 	.word	0x05f5e100

08017e38 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8017e38:	b510      	push	{r4, lr}
 8017e3a:	4604      	mov	r4, r0
 8017e3c:	f7ea fcfe 	bl	800283c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 8017e40:	2200      	movs	r2, #0
 8017e42:	6863      	ldr	r3, [r4, #4]
 8017e44:	729a      	strb	r2, [r3, #10]
 8017e46:	bd10      	pop	{r4, pc}

08017e48 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8017e48:	65c1      	str	r1, [r0, #92]	; 0x5c
 8017e4a:	301c      	adds	r0, #28
 8017e4c:	f00e bd6c 	b.w	8026928 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08017e50 <_ZN8touchgfx3HAL5touchEll>:
 8017e50:	b530      	push	{r4, r5, lr}
 8017e52:	b087      	sub	sp, #28
 8017e54:	4604      	mov	r4, r0
 8017e56:	a804      	add	r0, sp, #16
 8017e58:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8017e5c:	f002 fc76 	bl	801a74c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8017e60:	9b04      	ldr	r3, [sp, #16]
 8017e62:	a906      	add	r1, sp, #24
 8017e64:	a803      	add	r0, sp, #12
 8017e66:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017e6a:	9b05      	ldr	r3, [sp, #20]
 8017e6c:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8017e70:	f002 fcbe 	bl	801a7f0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8017e74:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
 8017e78:	f104 001c 	add.w	r0, r4, #28
 8017e7c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8017e80:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8017e84:	b189      	cbz	r1, 8017eaa <_ZN8touchgfx3HAL5touchEll+0x5a>
 8017e86:	f8b4 5064 	ldrh.w	r5, [r4, #100]	; 0x64
 8017e8a:	9300      	str	r3, [sp, #0]
 8017e8c:	4613      	mov	r3, r2
 8017e8e:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 8017e92:	462a      	mov	r2, r5
 8017e94:	f00e fd58 	bl	8026948 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8017e98:	b128      	cbz	r0, 8017ea6 <_ZN8touchgfx3HAL5touchEll+0x56>
 8017e9a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8017e9e:	6623      	str	r3, [r4, #96]	; 0x60
 8017ea0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8017ea4:	6663      	str	r3, [r4, #100]	; 0x64
 8017ea6:	b007      	add	sp, #28
 8017ea8:	bd30      	pop	{r4, r5, pc}
 8017eaa:	f00e fd8d 	bl	80269c8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8017eae:	2301      	movs	r3, #1
 8017eb0:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
 8017eb4:	e7f1      	b.n	8017e9a <_ZN8touchgfx3HAL5touchEll+0x4a>

08017eb6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8017eb6:	b510      	push	{r4, lr}
 8017eb8:	2b00      	cmp	r3, #0
 8017eba:	d046      	beq.n	8017f4a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8017ebc:	ea81 0002 	eor.w	r0, r1, r2
 8017ec0:	07c4      	lsls	r4, r0, #31
 8017ec2:	d508      	bpl.n	8017ed6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8017ec4:	440b      	add	r3, r1
 8017ec6:	3a01      	subs	r2, #1
 8017ec8:	428b      	cmp	r3, r1
 8017eca:	d93e      	bls.n	8017f4a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8017ecc:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8017ed0:	f801 0b01 	strb.w	r0, [r1], #1
 8017ed4:	e7f8      	b.n	8017ec8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8017ed6:	07d0      	lsls	r0, r2, #31
 8017ed8:	bf42      	ittt	mi
 8017eda:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8017ede:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8017ee2:	f801 0b01 	strbmi.w	r0, [r1], #1
 8017ee6:	2b01      	cmp	r3, #1
 8017ee8:	d911      	bls.n	8017f0e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8017eea:	ea81 0402 	eor.w	r4, r1, r2
 8017eee:	4610      	mov	r0, r2
 8017ef0:	07a4      	lsls	r4, r4, #30
 8017ef2:	d022      	beq.n	8017f3a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8017ef4:	f023 0401 	bic.w	r4, r3, #1
 8017ef8:	440c      	add	r4, r1
 8017efa:	428c      	cmp	r4, r1
 8017efc:	4602      	mov	r2, r0
 8017efe:	d904      	bls.n	8017f0a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8017f00:	8812      	ldrh	r2, [r2, #0]
 8017f02:	3002      	adds	r0, #2
 8017f04:	f821 2b02 	strh.w	r2, [r1], #2
 8017f08:	e7f7      	b.n	8017efa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8017f0a:	f003 0301 	and.w	r3, r3, #1
 8017f0e:	f023 0003 	bic.w	r0, r3, #3
 8017f12:	4408      	add	r0, r1
 8017f14:	4288      	cmp	r0, r1
 8017f16:	4614      	mov	r4, r2
 8017f18:	d904      	bls.n	8017f24 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8017f1a:	6824      	ldr	r4, [r4, #0]
 8017f1c:	3204      	adds	r2, #4
 8017f1e:	f841 4b04 	str.w	r4, [r1], #4
 8017f22:	e7f7      	b.n	8017f14 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8017f24:	f003 0303 	and.w	r3, r3, #3
 8017f28:	3a01      	subs	r2, #1
 8017f2a:	440b      	add	r3, r1
 8017f2c:	428b      	cmp	r3, r1
 8017f2e:	d90c      	bls.n	8017f4a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8017f30:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8017f34:	f801 0b01 	strb.w	r0, [r1], #1
 8017f38:	e7f8      	b.n	8017f2c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8017f3a:	0790      	lsls	r0, r2, #30
 8017f3c:	d0e7      	beq.n	8017f0e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8017f3e:	f832 0b02 	ldrh.w	r0, [r2], #2
 8017f42:	3b02      	subs	r3, #2
 8017f44:	f821 0b02 	strh.w	r0, [r1], #2
 8017f48:	e7e1      	b.n	8017f0e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8017f4a:	2001      	movs	r0, #1
 8017f4c:	bd10      	pop	{r4, pc}

08017f4e <_ZN8touchgfx3HAL7noTouchEv>:
 8017f4e:	b510      	push	{r4, lr}
 8017f50:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
 8017f54:	4604      	mov	r4, r0
 8017f56:	b153      	cbz	r3, 8017f6e <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8017f58:	f8b0 3064 	ldrh.w	r3, [r0, #100]	; 0x64
 8017f5c:	2101      	movs	r1, #1
 8017f5e:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
 8017f62:	301c      	adds	r0, #28
 8017f64:	f00e fd30 	bl	80269c8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8017f68:	2300      	movs	r3, #0
 8017f6a:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
 8017f6e:	bd10      	pop	{r4, pc}

08017f70 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8017f70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017f74:	b085      	sub	sp, #20
 8017f76:	4604      	mov	r4, r0
 8017f78:	2000      	movs	r0, #0
 8017f7a:	4699      	mov	r9, r3
 8017f7c:	ad04      	add	r5, sp, #16
 8017f7e:	460f      	mov	r7, r1
 8017f80:	4690      	mov	r8, r2
 8017f82:	f845 0d04 	str.w	r0, [r5, #-4]!
 8017f86:	69a0      	ldr	r0, [r4, #24]
 8017f88:	6806      	ldr	r6, [r0, #0]
 8017f8a:	9501      	str	r5, [sp, #4]
 8017f8c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8017f90:	9500      	str	r5, [sp, #0]
 8017f92:	6835      	ldr	r5, [r6, #0]
 8017f94:	47a8      	blx	r5
 8017f96:	4d10      	ldr	r5, [pc, #64]	; (8017fd8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8017f98:	4606      	mov	r6, r0
 8017f9a:	f8a5 9000 	strh.w	r9, [r5]
 8017f9e:	f7ec fb73 	bl	8004688 <_ZN8touchgfx3HAL3lcdEv>
 8017fa2:	6803      	ldr	r3, [r0, #0]
 8017fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017fa6:	4798      	blx	r3
 8017fa8:	b128      	cbz	r0, 8017fb6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8017faa:	2801      	cmp	r0, #1
 8017fac:	d00b      	beq.n	8017fc6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8017fae:	4630      	mov	r0, r6
 8017fb0:	b005      	add	sp, #20
 8017fb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017fb6:	882b      	ldrh	r3, [r5, #0]
 8017fb8:	fb08 7203 	mla	r2, r8, r3, r7
 8017fbc:	9b03      	ldr	r3, [sp, #12]
 8017fbe:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8017fc2:	63e3      	str	r3, [r4, #60]	; 0x3c
 8017fc4:	e7f3      	b.n	8017fae <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8017fc6:	882a      	ldrh	r2, [r5, #0]
 8017fc8:	9b03      	ldr	r3, [sp, #12]
 8017fca:	fb08 7202 	mla	r2, r8, r2, r7
 8017fce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017fd2:	1a9a      	subs	r2, r3, r2
 8017fd4:	63e2      	str	r2, [r4, #60]	; 0x3c
 8017fd6:	e7ea      	b.n	8017fae <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8017fd8:	24006d32 	.word	0x24006d32

08017fdc <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8017fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017fde:	b08b      	sub	sp, #44	; 0x2c
 8017fe0:	4617      	mov	r7, r2
 8017fe2:	4604      	mov	r4, r0
 8017fe4:	460e      	mov	r6, r1
 8017fe6:	461d      	mov	r5, r3
 8017fe8:	f7ec fb4e 	bl	8004688 <_ZN8touchgfx3HAL3lcdEv>
 8017fec:	6803      	ldr	r3, [r0, #0]
 8017fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017ff0:	4798      	blx	r3
 8017ff2:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8017ff6:	9007      	str	r0, [sp, #28]
 8017ff8:	4631      	mov	r1, r6
 8017ffa:	6822      	ldr	r2, [r4, #0]
 8017ffc:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8018000:	4b0c      	ldr	r3, [pc, #48]	; (8018034 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8018002:	4620      	mov	r0, r4
 8018004:	881b      	ldrh	r3, [r3, #0]
 8018006:	9306      	str	r3, [sp, #24]
 8018008:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801800c:	9305      	str	r3, [sp, #20]
 801800e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8018012:	9304      	str	r3, [sp, #16]
 8018014:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8018018:	9303      	str	r3, [sp, #12]
 801801a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801801e:	9302      	str	r3, [sp, #8]
 8018020:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8018024:	e9cd 5300 	strd	r5, r3, [sp]
 8018028:	463b      	mov	r3, r7
 801802a:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 801802c:	2200      	movs	r2, #0
 801802e:	47a8      	blx	r5
 8018030:	b00b      	add	sp, #44	; 0x2c
 8018032:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018034:	24006d32 	.word	0x24006d32

08018038 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8018038:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801803c:	4698      	mov	r8, r3
 801803e:	6803      	ldr	r3, [r0, #0]
 8018040:	b08b      	sub	sp, #44	; 0x2c
 8018042:	4617      	mov	r7, r2
 8018044:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8018046:	460e      	mov	r6, r1
 8018048:	4b13      	ldr	r3, [pc, #76]	; (8018098 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 801804a:	4604      	mov	r4, r0
 801804c:	f8b3 9000 	ldrh.w	r9, [r3]
 8018050:	f7ec fb1a 	bl	8004688 <_ZN8touchgfx3HAL3lcdEv>
 8018054:	6803      	ldr	r3, [r0, #0]
 8018056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018058:	4798      	blx	r3
 801805a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801805e:	2200      	movs	r2, #0
 8018060:	4631      	mov	r1, r6
 8018062:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8018066:	2302      	movs	r3, #2
 8018068:	4620      	mov	r0, r4
 801806a:	e9cd 9306 	strd	r9, r3, [sp, #24]
 801806e:	2301      	movs	r3, #1
 8018070:	9305      	str	r3, [sp, #20]
 8018072:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8018076:	9304      	str	r3, [sp, #16]
 8018078:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801807c:	9303      	str	r3, [sp, #12]
 801807e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8018082:	9302      	str	r3, [sp, #8]
 8018084:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8018088:	e9cd 8300 	strd	r8, r3, [sp]
 801808c:	463b      	mov	r3, r7
 801808e:	47a8      	blx	r5
 8018090:	b00b      	add	sp, #44	; 0x2c
 8018092:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018096:	bf00      	nop
 8018098:	24006d32 	.word	0x24006d32

0801809c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 801809c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80180a0:	4698      	mov	r8, r3
 80180a2:	6803      	ldr	r3, [r0, #0]
 80180a4:	b087      	sub	sp, #28
 80180a6:	460e      	mov	r6, r1
 80180a8:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 80180aa:	4617      	mov	r7, r2
 80180ac:	4b0f      	ldr	r3, [pc, #60]	; (80180ec <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 80180ae:	4604      	mov	r4, r0
 80180b0:	f8b3 9000 	ldrh.w	r9, [r3]
 80180b4:	f7ec fae8 	bl	8004688 <_ZN8touchgfx3HAL3lcdEv>
 80180b8:	6803      	ldr	r3, [r0, #0]
 80180ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80180bc:	4798      	blx	r3
 80180be:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 80180c2:	463a      	mov	r2, r7
 80180c4:	4631      	mov	r1, r6
 80180c6:	f8cd 900c 	str.w	r9, [sp, #12]
 80180ca:	e9cd 0304 	strd	r0, r3, [sp, #16]
 80180ce:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80180d2:	4620      	mov	r0, r4
 80180d4:	9302      	str	r3, [sp, #8]
 80180d6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80180da:	9301      	str	r3, [sp, #4]
 80180dc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80180e0:	9300      	str	r3, [sp, #0]
 80180e2:	4643      	mov	r3, r8
 80180e4:	47a8      	blx	r5
 80180e6:	b007      	add	sp, #28
 80180e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80180ec:	24006d32 	.word	0x24006d32

080180f0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 80180f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180f4:	4604      	mov	r4, r0
 80180f6:	b08f      	sub	sp, #60	; 0x3c
 80180f8:	4610      	mov	r0, r2
 80180fa:	460d      	mov	r5, r1
 80180fc:	4691      	mov	r9, r2
 80180fe:	461e      	mov	r6, r3
 8018100:	f005 f97a 	bl	801d3f8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8018104:	2800      	cmp	r0, #0
 8018106:	f000 809d 	beq.w	8018244 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 801810a:	6823      	ldr	r3, [r4, #0]
 801810c:	4620      	mov	r0, r4
 801810e:	f8df b198 	ldr.w	fp, [pc, #408]	; 80182a8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8018112:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8018116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018118:	4798      	blx	r3
 801811a:	6823      	ldr	r3, [r4, #0]
 801811c:	4620      	mov	r0, r4
 801811e:	f8df a18c 	ldr.w	sl, [pc, #396]	; 80182ac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8018122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018124:	4798      	blx	r3
 8018126:	f8bb 3000 	ldrh.w	r3, [fp]
 801812a:	4f5c      	ldr	r7, [pc, #368]	; (801829c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801812c:	9301      	str	r3, [sp, #4]
 801812e:	f8ba 3000 	ldrh.w	r3, [sl]
 8018132:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8018136:	4640      	mov	r0, r8
 8018138:	9302      	str	r3, [sp, #8]
 801813a:	883b      	ldrh	r3, [r7, #0]
 801813c:	9303      	str	r3, [sp, #12]
 801813e:	4b58      	ldr	r3, [pc, #352]	; (80182a0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8018140:	881a      	ldrh	r2, [r3, #0]
 8018142:	9305      	str	r3, [sp, #20]
 8018144:	9204      	str	r2, [sp, #16]
 8018146:	f005 fa9b 	bl	801d680 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801814a:	8038      	strh	r0, [r7, #0]
 801814c:	4640      	mov	r0, r8
 801814e:	f005 facb 	bl	801d6e8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018152:	9b05      	ldr	r3, [sp, #20]
 8018154:	b280      	uxth	r0, r0
 8018156:	8018      	strh	r0, [r3, #0]
 8018158:	4b52      	ldr	r3, [pc, #328]	; (80182a4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 801815a:	781b      	ldrb	r3, [r3, #0]
 801815c:	2b00      	cmp	r3, #0
 801815e:	d174      	bne.n	801824a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8018160:	883b      	ldrh	r3, [r7, #0]
 8018162:	f8aa 0000 	strh.w	r0, [sl]
 8018166:	f8ab 3000 	strh.w	r3, [fp]
 801816a:	4648      	mov	r0, r9
 801816c:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8018170:	f005 f942 	bl	801d3f8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8018174:	2200      	movs	r2, #0
 8018176:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 801817a:	4611      	mov	r1, r2
 801817c:	4628      	mov	r0, r5
 801817e:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8018182:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8018186:	f7ec ff74 	bl	8005072 <_ZN8touchgfx8Drawable5setXYEss>
 801818a:	2301      	movs	r3, #1
 801818c:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8018190:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8018194:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8018198:	2b00      	cmp	r3, #0
 801819a:	dd5c      	ble.n	8018256 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 801819c:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80181a0:	2b00      	cmp	r3, #0
 80181a2:	dd58      	ble.n	8018256 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80181a4:	462a      	mov	r2, r5
 80181a6:	ab0a      	add	r3, sp, #40	; 0x28
 80181a8:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80181ac:	6851      	ldr	r1, [r2, #4]
 80181ae:	c303      	stmia	r3!, {r0, r1}
 80181b0:	4631      	mov	r1, r6
 80181b2:	a80a      	add	r0, sp, #40	; 0x28
 80181b4:	f7ff fbf6 	bl	80179a4 <_ZN8touchgfx4RectaNERKS0_>
 80181b8:	4b38      	ldr	r3, [pc, #224]	; (801829c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80181ba:	2100      	movs	r1, #0
 80181bc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80181c0:	4b37      	ldr	r3, [pc, #220]	; (80182a0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80181c2:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 80181c6:	aa0a      	add	r2, sp, #40	; 0x28
 80181c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80181cc:	910c      	str	r1, [sp, #48]	; 0x30
 80181ce:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80181d2:	ab08      	add	r3, sp, #32
 80181d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80181d8:	e883 0003 	stmia.w	r3, {r0, r1}
 80181dc:	4618      	mov	r0, r3
 80181de:	a90c      	add	r1, sp, #48	; 0x30
 80181e0:	f7ff fbe0 	bl	80179a4 <_ZN8touchgfx4RectaNERKS0_>
 80181e4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80181e6:	2b00      	cmp	r3, #0
 80181e8:	d13c      	bne.n	8018264 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 80181ea:	2000      	movs	r0, #0
 80181ec:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
 80181f0:	2600      	movs	r6, #0
 80181f2:	696b      	ldr	r3, [r5, #20]
 80181f4:	a908      	add	r1, sp, #32
 80181f6:	682a      	ldr	r2, [r5, #0]
 80181f8:	4628      	mov	r0, r5
 80181fa:	9305      	str	r3, [sp, #20]
 80181fc:	616e      	str	r6, [r5, #20]
 80181fe:	6892      	ldr	r2, [r2, #8]
 8018200:	4790      	blx	r2
 8018202:	9b05      	ldr	r3, [sp, #20]
 8018204:	4652      	mov	r2, sl
 8018206:	4649      	mov	r1, r9
 8018208:	616b      	str	r3, [r5, #20]
 801820a:	4628      	mov	r0, r5
 801820c:	f884 6058 	strb.w	r6, [r4, #88]	; 0x58
 8018210:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8018214:	f7ec ff2d 	bl	8005072 <_ZN8touchgfx8Drawable5setXYEss>
 8018218:	9a01      	ldr	r2, [sp, #4]
 801821a:	4b23      	ldr	r3, [pc, #140]	; (80182a8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 801821c:	4620      	mov	r0, r4
 801821e:	801a      	strh	r2, [r3, #0]
 8018220:	9a02      	ldr	r2, [sp, #8]
 8018222:	4b22      	ldr	r3, [pc, #136]	; (80182ac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8018224:	801a      	strh	r2, [r3, #0]
 8018226:	9a03      	ldr	r2, [sp, #12]
 8018228:	4b1c      	ldr	r3, [pc, #112]	; (801829c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801822a:	801a      	strh	r2, [r3, #0]
 801822c:	4b1c      	ldr	r3, [pc, #112]	; (80182a0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801822e:	9a04      	ldr	r2, [sp, #16]
 8018230:	801a      	strh	r2, [r3, #0]
 8018232:	6823      	ldr	r3, [r4, #0]
 8018234:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8018238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801823a:	4798      	blx	r3
 801823c:	6823      	ldr	r3, [r4, #0]
 801823e:	4620      	mov	r0, r4
 8018240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018242:	4798      	blx	r3
 8018244:	b00f      	add	sp, #60	; 0x3c
 8018246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801824a:	883b      	ldrh	r3, [r7, #0]
 801824c:	f8ab 0000 	strh.w	r0, [fp]
 8018250:	f8aa 3000 	strh.w	r3, [sl]
 8018254:	e789      	b.n	801816a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8018256:	462a      	mov	r2, r5
 8018258:	ab0a      	add	r3, sp, #40	; 0x28
 801825a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801825e:	6851      	ldr	r1, [r2, #4]
 8018260:	c303      	stmia	r3!, {r0, r1}
 8018262:	e7a9      	b.n	80181b8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8018264:	a807      	add	r0, sp, #28
 8018266:	f005 faf7 	bl	801d858 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801826a:	4606      	mov	r6, r0
 801826c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801826e:	6803      	ldr	r3, [r0, #0]
 8018270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018272:	4798      	blx	r3
 8018274:	4286      	cmp	r6, r0
 8018276:	d1b8      	bne.n	80181ea <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8018278:	f7ec fa06 	bl	8004688 <_ZN8touchgfx3HAL3lcdEv>
 801827c:	6803      	ldr	r3, [r0, #0]
 801827e:	4606      	mov	r6, r0
 8018280:	a807      	add	r0, sp, #28
 8018282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018284:	9305      	str	r3, [sp, #20]
 8018286:	f005 fae7 	bl	801d858 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801828a:	9b05      	ldr	r3, [sp, #20]
 801828c:	4601      	mov	r1, r0
 801828e:	4630      	mov	r0, r6
 8018290:	4798      	blx	r3
 8018292:	f080 0001 	eor.w	r0, r0, #1
 8018296:	b2c0      	uxtb	r0, r0
 8018298:	e7a8      	b.n	80181ec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 801829a:	bf00      	nop
 801829c:	24006d2c 	.word	0x24006d2c
 80182a0:	24006d2e 	.word	0x24006d2e
 80182a4:	24006d30 	.word	0x24006d30
 80182a8:	24006d32 	.word	0x24006d32
 80182ac:	24006d34 	.word	0x24006d34

080182b0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 80182b0:	4b07      	ldr	r3, [pc, #28]	; (80182d0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 80182b2:	b510      	push	{r4, lr}
 80182b4:	781b      	ldrb	r3, [r3, #0]
 80182b6:	4604      	mov	r4, r0
 80182b8:	b13b      	cbz	r3, 80182ca <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80182ba:	6803      	ldr	r3, [r0, #0]
 80182bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80182be:	4798      	blx	r3
 80182c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80182c2:	4283      	cmp	r3, r0
 80182c4:	d101      	bne.n	80182ca <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80182c6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80182c8:	bd10      	pop	{r4, pc}
 80182ca:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80182cc:	e7fc      	b.n	80182c8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 80182ce:	bf00      	nop
 80182d0:	24006d36 	.word	0x24006d36

080182d4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 80182d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80182d8:	461d      	mov	r5, r3
 80182da:	b08a      	sub	sp, #40	; 0x28
 80182dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80182e0:	4690      	mov	r8, r2
 80182e2:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 80182e6:	2400      	movs	r4, #0
 80182e8:	4607      	mov	r7, r0
 80182ea:	fb06 8505 	mla	r5, r6, r5, r8
 80182ee:	9404      	str	r4, [sp, #16]
 80182f0:	f88d 4020 	strb.w	r4, [sp, #32]
 80182f4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80182f8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80182fc:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018300:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8018304:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018308:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801830c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018310:	f7ff ffce 	bl	80182b0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018314:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8018318:	6878      	ldr	r0, [r7, #4]
 801831a:	f8ad 601e 	strh.w	r6, [sp, #30]
 801831e:	a901      	add	r1, sp, #4
 8018320:	9505      	str	r5, [sp, #20]
 8018322:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8018326:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 801832a:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 801832e:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8018332:	6803      	ldr	r3, [r0, #0]
 8018334:	685b      	ldr	r3, [r3, #4]
 8018336:	4798      	blx	r3
 8018338:	b00a      	add	sp, #40	; 0x28
 801833a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801833e <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 801833e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018342:	b08b      	sub	sp, #44	; 0x2c
 8018344:	2400      	movs	r4, #0
 8018346:	4691      	mov	r9, r2
 8018348:	461d      	mov	r5, r3
 801834a:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 801834e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018352:	4688      	mov	r8, r1
 8018354:	4607      	mov	r7, r0
 8018356:	9404      	str	r4, [sp, #16]
 8018358:	fb06 9505 	mla	r5, r6, r5, r9
 801835c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018360:	f7ff ffa6 	bl	80182b0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018364:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8018368:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801836c:	6878      	ldr	r0, [r7, #4]
 801836e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018372:	a901      	add	r1, sp, #4
 8018374:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8018378:	9505      	str	r5, [sp, #20]
 801837a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801837e:	f8ad 401c 	strh.w	r4, [sp, #28]
 8018382:	f8ad 601e 	strh.w	r6, [sp, #30]
 8018386:	f8cd 8010 	str.w	r8, [sp, #16]
 801838a:	f8ad 4020 	strh.w	r4, [sp, #32]
 801838e:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8018392:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8018396:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 801839a:	6803      	ldr	r3, [r0, #0]
 801839c:	685b      	ldr	r3, [r3, #4]
 801839e:	4798      	blx	r3
 80183a0:	b00b      	add	sp, #44	; 0x2c
 80183a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080183a8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 80183a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80183ac:	b08a      	sub	sp, #40	; 0x28
 80183ae:	4698      	mov	r8, r3
 80183b0:	2300      	movs	r3, #0
 80183b2:	4606      	mov	r6, r0
 80183b4:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 80183b8:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 80183bc:	2d0b      	cmp	r5, #11
 80183be:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 80183c2:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 80183c6:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 80183ca:	9304      	str	r3, [sp, #16]
 80183cc:	d137      	bne.n	801843e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 80183ce:	2380      	movs	r3, #128	; 0x80
 80183d0:	f88d 0020 	strb.w	r0, [sp, #32]
 80183d4:	4630      	mov	r0, r6
 80183d6:	9203      	str	r2, [sp, #12]
 80183d8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80183dc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80183e0:	f8ad 3018 	strh.w	r3, [sp, #24]
 80183e4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80183e8:	f8ad 301a 	strh.w	r3, [sp, #26]
 80183ec:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80183f0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80183f4:	f7ff ff5c 	bl	80182b0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80183f8:	2c0b      	cmp	r4, #11
 80183fa:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 80183fe:	f8ad 701e 	strh.w	r7, [sp, #30]
 8018402:	bf94      	ite	ls
 8018404:	4b19      	ldrls	r3, [pc, #100]	; (801846c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8018406:	2100      	movhi	r1, #0
 8018408:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 801840c:	bf98      	it	ls
 801840e:	5d19      	ldrbls	r1, [r3, r4]
 8018410:	fb02 8307 	mla	r3, r2, r7, r8
 8018414:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8018418:	10c9      	asrs	r1, r1, #3
 801841a:	fb01 0003 	mla	r0, r1, r3, r0
 801841e:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8018422:	a901      	add	r1, sp, #4
 8018424:	9005      	str	r0, [sp, #20]
 8018426:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 801842a:	2300      	movs	r3, #0
 801842c:	6870      	ldr	r0, [r6, #4]
 801842e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8018432:	6803      	ldr	r3, [r0, #0]
 8018434:	685b      	ldr	r3, [r3, #4]
 8018436:	4798      	blx	r3
 8018438:	b00a      	add	sp, #40	; 0x28
 801843a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801843e:	2d02      	cmp	r5, #2
 8018440:	d109      	bne.n	8018456 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8018442:	28ff      	cmp	r0, #255	; 0xff
 8018444:	d105      	bne.n	8018452 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8018446:	f1bc 0f00 	cmp.w	ip, #0
 801844a:	bf14      	ite	ne
 801844c:	2340      	movne	r3, #64	; 0x40
 801844e:	2320      	moveq	r3, #32
 8018450:	e7be      	b.n	80183d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8018452:	2340      	movs	r3, #64	; 0x40
 8018454:	e7bc      	b.n	80183d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8018456:	28ff      	cmp	r0, #255	; 0xff
 8018458:	d105      	bne.n	8018466 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 801845a:	f1bc 0f00 	cmp.w	ip, #0
 801845e:	bf14      	ite	ne
 8018460:	2304      	movne	r3, #4
 8018462:	2301      	moveq	r3, #1
 8018464:	e7b4      	b.n	80183d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8018466:	2304      	movs	r3, #4
 8018468:	e7b2      	b.n	80183d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801846a:	bf00      	nop
 801846c:	08028ff0 	.word	0x08028ff0

08018470 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8018470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018474:	b08b      	sub	sp, #44	; 0x2c
 8018476:	461d      	mov	r5, r3
 8018478:	2400      	movs	r4, #0
 801847a:	4688      	mov	r8, r1
 801847c:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 8018480:	4693      	mov	fp, r2
 8018482:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 8018486:	4607      	mov	r7, r0
 8018488:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801848c:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 8018490:	9404      	str	r4, [sp, #16]
 8018492:	bf14      	ite	ne
 8018494:	2308      	movne	r3, #8
 8018496:	2302      	moveq	r3, #2
 8018498:	fb05 b50a 	mla	r5, r5, sl, fp
 801849c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80184a0:	f7ff ff06 	bl	80182b0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80184a4:	2e0b      	cmp	r6, #11
 80184a6:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80184aa:	a901      	add	r1, sp, #4
 80184ac:	bf98      	it	ls
 80184ae:	4b13      	ldrls	r3, [pc, #76]	; (80184fc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 80184b0:	f8ad a01e 	strh.w	sl, [sp, #30]
 80184b4:	bf98      	it	ls
 80184b6:	5d9c      	ldrbls	r4, [r3, r6]
 80184b8:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80184bc:	10e4      	asrs	r4, r4, #3
 80184be:	f8cd 8010 	str.w	r8, [sp, #16]
 80184c2:	f8ad 3018 	strh.w	r3, [sp, #24]
 80184c6:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80184ca:	fb04 0405 	mla	r4, r4, r5, r0
 80184ce:	6878      	ldr	r0, [r7, #4]
 80184d0:	f8ad 301a 	strh.w	r3, [sp, #26]
 80184d4:	2300      	movs	r3, #0
 80184d6:	9405      	str	r4, [sp, #20]
 80184d8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80184dc:	f88d 9020 	strb.w	r9, [sp, #32]
 80184e0:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 80184e4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80184e8:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 80184ec:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 80184f0:	6803      	ldr	r3, [r0, #0]
 80184f2:	685b      	ldr	r3, [r3, #4]
 80184f4:	4798      	blx	r3
 80184f6:	b00b      	add	sp, #44	; 0x2c
 80184f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80184fc:	08028ff0 	.word	0x08028ff0

08018500 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8018500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018504:	461e      	mov	r6, r3
 8018506:	4b0a      	ldr	r3, [pc, #40]	; (8018530 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8018508:	460f      	mov	r7, r1
 801850a:	4690      	mov	r8, r2
 801850c:	881d      	ldrh	r5, [r3, #0]
 801850e:	f7ec f8bb 	bl	8004688 <_ZN8touchgfx3HAL3lcdEv>
 8018512:	6803      	ldr	r3, [r0, #0]
 8018514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018516:	4798      	blx	r3
 8018518:	280b      	cmp	r0, #11
 801851a:	bf96      	itet	ls
 801851c:	4b05      	ldrls	r3, [pc, #20]	; (8018534 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801851e:	2400      	movhi	r4, #0
 8018520:	5c1c      	ldrbls	r4, [r3, r0]
 8018522:	fb08 7005 	mla	r0, r8, r5, r7
 8018526:	10e4      	asrs	r4, r4, #3
 8018528:	fb04 6000 	mla	r0, r4, r0, r6
 801852c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018530:	24006d32 	.word	0x24006d32
 8018534:	08028ff0 	.word	0x08028ff0

08018538 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8018538:	b5f0      	push	{r4, r5, r6, r7, lr}
 801853a:	b08b      	sub	sp, #44	; 0x2c
 801853c:	461f      	mov	r7, r3
 801853e:	4604      	mov	r4, r0
 8018540:	4616      	mov	r6, r2
 8018542:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8018546:	2500      	movs	r5, #0
 8018548:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801854c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8018550:	9504      	str	r5, [sp, #16]
 8018552:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018556:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801855a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801855e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8018562:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018566:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801856a:	f88d 3020 	strb.w	r3, [sp, #32]
 801856e:	f7ff fe9f 	bl	80182b0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018572:	463a      	mov	r2, r7
 8018574:	4631      	mov	r1, r6
 8018576:	4603      	mov	r3, r0
 8018578:	4620      	mov	r0, r4
 801857a:	f7ff ffc1 	bl	8018500 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801857e:	4b0e      	ldr	r3, [pc, #56]	; (80185b8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8018580:	9005      	str	r0, [sp, #20]
 8018582:	881b      	ldrh	r3, [r3, #0]
 8018584:	f8ad 301e 	strh.w	r3, [sp, #30]
 8018588:	f7ec f87e 	bl	8004688 <_ZN8touchgfx3HAL3lcdEv>
 801858c:	6803      	ldr	r3, [r0, #0]
 801858e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018590:	4798      	blx	r3
 8018592:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018594:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8018598:	a901      	add	r1, sp, #4
 801859a:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 801859e:	9304      	str	r3, [sp, #16]
 80185a0:	6860      	ldr	r0, [r4, #4]
 80185a2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80185a6:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 80185aa:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 80185ae:	6803      	ldr	r3, [r0, #0]
 80185b0:	685b      	ldr	r3, [r3, #4]
 80185b2:	4798      	blx	r3
 80185b4:	b00b      	add	sp, #44	; 0x2c
 80185b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80185b8:	24006d32 	.word	0x24006d32

080185bc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 80185bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80185be:	b08d      	sub	sp, #52	; 0x34
 80185c0:	2501      	movs	r5, #1
 80185c2:	4604      	mov	r4, r0
 80185c4:	466b      	mov	r3, sp
 80185c6:	9503      	str	r5, [sp, #12]
 80185c8:	e883 0006 	stmia.w	r3, {r1, r2}
 80185cc:	2300      	movs	r3, #0
 80185ce:	f8bd 6000 	ldrh.w	r6, [sp]
 80185d2:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80185d6:	9306      	str	r3, [sp, #24]
 80185d8:	6803      	ldr	r3, [r0, #0]
 80185da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80185dc:	4798      	blx	r3
 80185de:	463a      	mov	r2, r7
 80185e0:	4631      	mov	r1, r6
 80185e2:	4603      	mov	r3, r0
 80185e4:	4620      	mov	r0, r4
 80185e6:	f7ff ff8b 	bl	8018500 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80185ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80185ec:	9004      	str	r0, [sp, #16]
 80185ee:	9307      	str	r3, [sp, #28]
 80185f0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80185f4:	f8ad 3020 	strh.w	r3, [sp, #32]
 80185f8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80185fc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8018600:	4b0e      	ldr	r3, [pc, #56]	; (801863c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8018602:	881b      	ldrh	r3, [r3, #0]
 8018604:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8018608:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801860c:	f7ec f83c 	bl	8004688 <_ZN8touchgfx3HAL3lcdEv>
 8018610:	6803      	ldr	r3, [r0, #0]
 8018612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018614:	4798      	blx	r3
 8018616:	23ff      	movs	r3, #255	; 0xff
 8018618:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 801861c:	a903      	add	r1, sp, #12
 801861e:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8018622:	6860      	ldr	r0, [r4, #4]
 8018624:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8018628:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801862c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8018630:	6803      	ldr	r3, [r0, #0]
 8018632:	685b      	ldr	r3, [r3, #4]
 8018634:	4798      	blx	r3
 8018636:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8018638:	b00d      	add	sp, #52	; 0x34
 801863a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801863c:	24006d32 	.word	0x24006d32

08018640 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8018640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018644:	b08c      	sub	sp, #48	; 0x30
 8018646:	461e      	mov	r6, r3
 8018648:	2300      	movs	r3, #0
 801864a:	4604      	mov	r4, r0
 801864c:	466d      	mov	r5, sp
 801864e:	9306      	str	r3, [sp, #24]
 8018650:	6803      	ldr	r3, [r0, #0]
 8018652:	e885 0006 	stmia.w	r5, {r1, r2}
 8018656:	2501      	movs	r5, #1
 8018658:	f8bd 7000 	ldrh.w	r7, [sp]
 801865c:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8018660:	9503      	str	r5, [sp, #12]
 8018662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018664:	4798      	blx	r3
 8018666:	4642      	mov	r2, r8
 8018668:	4639      	mov	r1, r7
 801866a:	4603      	mov	r3, r0
 801866c:	4620      	mov	r0, r4
 801866e:	f7ff ff47 	bl	8018500 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8018672:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8018676:	9004      	str	r0, [sp, #16]
 8018678:	f8ad 3020 	strh.w	r3, [sp, #32]
 801867c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8018680:	9607      	str	r6, [sp, #28]
 8018682:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8018686:	4b10      	ldr	r3, [pc, #64]	; (80186c8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8018688:	881b      	ldrh	r3, [r3, #0]
 801868a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801868e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018690:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8018694:	f7eb fff8 	bl	8004688 <_ZN8touchgfx3HAL3lcdEv>
 8018698:	6803      	ldr	r3, [r0, #0]
 801869a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801869c:	4798      	blx	r3
 801869e:	23ff      	movs	r3, #255	; 0xff
 80186a0:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 80186a4:	a903      	add	r1, sp, #12
 80186a6:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 80186aa:	6860      	ldr	r0, [r4, #4]
 80186ac:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80186b0:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 80186b4:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 80186b8:	6803      	ldr	r3, [r0, #0]
 80186ba:	685b      	ldr	r3, [r3, #4]
 80186bc:	4798      	blx	r3
 80186be:	4630      	mov	r0, r6
 80186c0:	b00c      	add	sp, #48	; 0x30
 80186c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80186c6:	bf00      	nop
 80186c8:	24006d32 	.word	0x24006d32

080186cc <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 80186cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80186ce:	b085      	sub	sp, #20
 80186d0:	4605      	mov	r5, r0
 80186d2:	ac02      	add	r4, sp, #8
 80186d4:	e884 0006 	stmia.w	r4, {r1, r2}
 80186d8:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 80186dc:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 80186e0:	f7ff fde6 	bl	80182b0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80186e4:	4631      	mov	r1, r6
 80186e6:	4603      	mov	r3, r0
 80186e8:	463a      	mov	r2, r7
 80186ea:	4628      	mov	r0, r5
 80186ec:	f7ff ff08 	bl	8018500 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80186f0:	4a05      	ldr	r2, [pc, #20]	; (8018708 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 80186f2:	682b      	ldr	r3, [r5, #0]
 80186f4:	8812      	ldrh	r2, [r2, #0]
 80186f6:	9200      	str	r2, [sp, #0]
 80186f8:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 80186fa:	4603      	mov	r3, r0
 80186fc:	4628      	mov	r0, r5
 80186fe:	e894 0006 	ldmia.w	r4, {r1, r2}
 8018702:	47b0      	blx	r6
 8018704:	b005      	add	sp, #20
 8018706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018708:	24006d32 	.word	0x24006d32

0801870c <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 801870c:	b570      	push	{r4, r5, r6, lr}
 801870e:	f890 306e 	ldrb.w	r3, [r0, #110]	; 0x6e
 8018712:	4604      	mov	r4, r0
 8018714:	b19b      	cbz	r3, 801873e <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8018716:	2002      	movs	r0, #2
 8018718:	f7e9 fd86 	bl	8002228 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 801871c:	2300      	movs	r3, #0
 801871e:	4620      	mov	r0, r4
 8018720:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
 8018724:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
 8018728:	6823      	ldr	r3, [r4, #0]
 801872a:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 801872e:	f7ff fdbf 	bl	80182b0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018732:	4601      	mov	r1, r0
 8018734:	4620      	mov	r0, r4
 8018736:	462b      	mov	r3, r5
 8018738:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801873c:	4718      	bx	r3
 801873e:	bd70      	pop	{r4, r5, r6, pc}

08018740 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8018740:	b538      	push	{r3, r4, r5, lr}
 8018742:	f890 307b 	ldrb.w	r3, [r0, #123]	; 0x7b
 8018746:	4604      	mov	r4, r0
 8018748:	460d      	mov	r5, r1
 801874a:	428b      	cmp	r3, r1
 801874c:	d006      	beq.n	801875c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 801874e:	6803      	ldr	r3, [r0, #0]
 8018750:	b929      	cbnz	r1, 801875e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8018752:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8018756:	4798      	blx	r3
 8018758:	f884 507b 	strb.w	r5, [r4, #123]	; 0x7b
 801875c:	bd38      	pop	{r3, r4, r5, pc}
 801875e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8018762:	e7f8      	b.n	8018756 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08018764 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8018764:	4b0d      	ldr	r3, [pc, #52]	; (801879c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8018766:	b510      	push	{r4, lr}
 8018768:	781b      	ldrb	r3, [r3, #0]
 801876a:	4604      	mov	r4, r0
 801876c:	b95b      	cbnz	r3, 8018786 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801876e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8018772:	2b02      	cmp	r3, #2
 8018774:	d007      	beq.n	8018786 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8018776:	6840      	ldr	r0, [r0, #4]
 8018778:	f000 f90e 	bl	8018998 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801877c:	b118      	cbz	r0, 8018786 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801877e:	6862      	ldr	r2, [r4, #4]
 8018780:	7a53      	ldrb	r3, [r2, #9]
 8018782:	2b00      	cmp	r3, #0
 8018784:	d0fc      	beq.n	8018780 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8018786:	f7ea f84b 	bl	8002820 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801878a:	4620      	mov	r0, r4
 801878c:	2100      	movs	r1, #0
 801878e:	f7ff ffd7 	bl	8018740 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8018792:	4620      	mov	r0, r4
 8018794:	f7ff fd8c 	bl	80182b0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018798:	bd10      	pop	{r4, pc}
 801879a:	bf00      	nop
 801879c:	24006d36 	.word	0x24006d36

080187a0 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 80187a0:	4770      	bx	lr

080187a2 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 80187a2:	2000      	movs	r0, #0
 80187a4:	4770      	bx	lr

080187a6 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 80187a6:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 80187aa:	1a13      	subs	r3, r2, r0
 80187ac:	4258      	negs	r0, r3
 80187ae:	4158      	adcs	r0, r3
 80187b0:	4770      	bx	lr

080187b2 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 80187b2:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80187b6:	1a9b      	subs	r3, r3, r2
 80187b8:	2b00      	cmp	r3, #0
 80187ba:	bfdc      	itt	le
 80187bc:	6882      	ldrle	r2, [r0, #8]
 80187be:	189b      	addle	r3, r3, r2
 80187c0:	2b01      	cmp	r3, #1
 80187c2:	bfcc      	ite	gt
 80187c4:	2000      	movgt	r0, #0
 80187c6:	2001      	movle	r0, #1
 80187c8:	4770      	bx	lr

080187ca <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 80187ca:	6902      	ldr	r2, [r0, #16]
 80187cc:	6843      	ldr	r3, [r0, #4]
 80187ce:	2024      	movs	r0, #36	; 0x24
 80187d0:	fb00 3002 	mla	r0, r0, r2, r3
 80187d4:	4770      	bx	lr

080187d6 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 80187d6:	6803      	ldr	r3, [r0, #0]
 80187d8:	691b      	ldr	r3, [r3, #16]
 80187da:	4718      	bx	r3

080187dc <_ZN8touchgfx13DMA_Interface7executeEv>:
 80187dc:	2301      	movs	r3, #1
 80187de:	b570      	push	{r4, r5, r6, lr}
 80187e0:	7203      	strb	r3, [r0, #8]
 80187e2:	4604      	mov	r4, r0
 80187e4:	6840      	ldr	r0, [r0, #4]
 80187e6:	6803      	ldr	r3, [r0, #0]
 80187e8:	699b      	ldr	r3, [r3, #24]
 80187ea:	4798      	blx	r3
 80187ec:	6803      	ldr	r3, [r0, #0]
 80187ee:	4605      	mov	r5, r0
 80187f0:	2b40      	cmp	r3, #64	; 0x40
 80187f2:	d00c      	beq.n	801880e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80187f4:	d810      	bhi.n	8018818 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 80187f6:	2b04      	cmp	r3, #4
 80187f8:	d01d      	beq.n	8018836 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 80187fa:	d804      	bhi.n	8018806 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 80187fc:	2b01      	cmp	r3, #1
 80187fe:	d006      	beq.n	801880e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8018800:	2b02      	cmp	r3, #2
 8018802:	d02c      	beq.n	801885e <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8018804:	bd70      	pop	{r4, r5, r6, pc}
 8018806:	2b08      	cmp	r3, #8
 8018808:	d01d      	beq.n	8018846 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 801880a:	2b20      	cmp	r3, #32
 801880c:	d1fa      	bne.n	8018804 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 801880e:	6823      	ldr	r3, [r4, #0]
 8018810:	4620      	mov	r0, r4
 8018812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018814:	4798      	blx	r3
 8018816:	e013      	b.n	8018840 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8018818:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801881c:	d0f7      	beq.n	801880e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801881e:	d804      	bhi.n	801882a <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8018820:	2b80      	cmp	r3, #128	; 0x80
 8018822:	d0f4      	beq.n	801880e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8018824:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018828:	e7f0      	b.n	801880c <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 801882a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801882e:	d0ee      	beq.n	801880e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8018830:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018834:	e7e5      	b.n	8018802 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8018836:	6823      	ldr	r3, [r4, #0]
 8018838:	7f01      	ldrb	r1, [r0, #28]
 801883a:	4620      	mov	r0, r4
 801883c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801883e:	4798      	blx	r3
 8018840:	6823      	ldr	r3, [r4, #0]
 8018842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018844:	e006      	b.n	8018854 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8018846:	6823      	ldr	r3, [r4, #0]
 8018848:	7f01      	ldrb	r1, [r0, #28]
 801884a:	4620      	mov	r0, r4
 801884c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801884e:	4798      	blx	r3
 8018850:	6823      	ldr	r3, [r4, #0]
 8018852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018854:	4629      	mov	r1, r5
 8018856:	4620      	mov	r0, r4
 8018858:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801885c:	4718      	bx	r3
 801885e:	6823      	ldr	r3, [r4, #0]
 8018860:	4620      	mov	r0, r4
 8018862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018864:	4798      	blx	r3
 8018866:	e7f3      	b.n	8018850 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08018868 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8018868:	4770      	bx	lr

0801886a <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 801886a:	4770      	bx	lr

0801886c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 801886c:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8018870:	b510      	push	{r4, lr}
 8018872:	1ad2      	subs	r2, r2, r3
 8018874:	2a00      	cmp	r2, #0
 8018876:	bfdc      	itt	le
 8018878:	6884      	ldrle	r4, [r0, #8]
 801887a:	1912      	addle	r2, r2, r4
 801887c:	2a01      	cmp	r2, #1
 801887e:	dd16      	ble.n	80188ae <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8018880:	6842      	ldr	r2, [r0, #4]
 8018882:	2424      	movs	r4, #36	; 0x24
 8018884:	fb04 2303 	mla	r3, r4, r3, r2
 8018888:	f101 0220 	add.w	r2, r1, #32
 801888c:	f851 4b04 	ldr.w	r4, [r1], #4
 8018890:	4291      	cmp	r1, r2
 8018892:	f843 4b04 	str.w	r4, [r3], #4
 8018896:	d1f9      	bne.n	801888c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8018898:	780a      	ldrb	r2, [r1, #0]
 801889a:	701a      	strb	r2, [r3, #0]
 801889c:	68c3      	ldr	r3, [r0, #12]
 801889e:	6882      	ldr	r2, [r0, #8]
 80188a0:	f3bf 8f5b 	dmb	ish
 80188a4:	3301      	adds	r3, #1
 80188a6:	429a      	cmp	r2, r3
 80188a8:	bfd8      	it	le
 80188aa:	1a9b      	suble	r3, r3, r2
 80188ac:	60c3      	str	r3, [r0, #12]
 80188ae:	bd10      	pop	{r4, pc}

080188b0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80188b0:	6903      	ldr	r3, [r0, #16]
 80188b2:	6882      	ldr	r2, [r0, #8]
 80188b4:	f3bf 8f5b 	dmb	ish
 80188b8:	3301      	adds	r3, #1
 80188ba:	429a      	cmp	r2, r3
 80188bc:	bfd8      	it	le
 80188be:	1a9b      	suble	r3, r3, r2
 80188c0:	6103      	str	r3, [r0, #16]
 80188c2:	4770      	bx	lr

080188c4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80188c4:	b570      	push	{r4, r5, r6, lr}
 80188c6:	4604      	mov	r4, r0
 80188c8:	460e      	mov	r6, r1
 80188ca:	6860      	ldr	r0, [r4, #4]
 80188cc:	6803      	ldr	r3, [r0, #0]
 80188ce:	685b      	ldr	r3, [r3, #4]
 80188d0:	4798      	blx	r3
 80188d2:	2800      	cmp	r0, #0
 80188d4:	d1f9      	bne.n	80188ca <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 80188d6:	4d0d      	ldr	r5, [pc, #52]	; (801890c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 80188d8:	6828      	ldr	r0, [r5, #0]
 80188da:	6803      	ldr	r3, [r0, #0]
 80188dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80188de:	4798      	blx	r3
 80188e0:	f7e9 ffb8 	bl	8002854 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 80188e4:	6828      	ldr	r0, [r5, #0]
 80188e6:	2101      	movs	r1, #1
 80188e8:	f7ff ff2a 	bl	8018740 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80188ec:	6860      	ldr	r0, [r4, #4]
 80188ee:	4631      	mov	r1, r6
 80188f0:	6803      	ldr	r3, [r0, #0]
 80188f2:	689b      	ldr	r3, [r3, #8]
 80188f4:	4798      	blx	r3
 80188f6:	6823      	ldr	r3, [r4, #0]
 80188f8:	4620      	mov	r0, r4
 80188fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80188fc:	4798      	blx	r3
 80188fe:	6828      	ldr	r0, [r5, #0]
 8018900:	6803      	ldr	r3, [r0, #0]
 8018902:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018906:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018908:	4718      	bx	r3
 801890a:	bf00      	nop
 801890c:	24006d38 	.word	0x24006d38

08018910 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8018910:	b508      	push	{r3, lr}
 8018912:	f7e9 ff85 	bl	8002820 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8018916:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801891a:	f7e9 bf8f 	b.w	800283c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801891e <_ZN8touchgfx13DMA_Interface5startEv>:
 801891e:	b510      	push	{r4, lr}
 8018920:	4604      	mov	r4, r0
 8018922:	6840      	ldr	r0, [r0, #4]
 8018924:	6803      	ldr	r3, [r0, #0]
 8018926:	681b      	ldr	r3, [r3, #0]
 8018928:	4798      	blx	r3
 801892a:	b948      	cbnz	r0, 8018940 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801892c:	7a63      	ldrb	r3, [r4, #9]
 801892e:	b13b      	cbz	r3, 8018940 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8018930:	7a23      	ldrb	r3, [r4, #8]
 8018932:	b92b      	cbnz	r3, 8018940 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8018934:	6823      	ldr	r3, [r4, #0]
 8018936:	4620      	mov	r0, r4
 8018938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801893a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801893e:	4718      	bx	r3
 8018940:	bd10      	pop	{r4, pc}

08018942 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8018942:	b570      	push	{r4, r5, r6, lr}
 8018944:	4604      	mov	r4, r0
 8018946:	6840      	ldr	r0, [r0, #4]
 8018948:	6803      	ldr	r3, [r0, #0]
 801894a:	681b      	ldr	r3, [r3, #0]
 801894c:	4798      	blx	r3
 801894e:	4605      	mov	r5, r0
 8018950:	b930      	cbnz	r0, 8018960 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8018952:	7a23      	ldrb	r3, [r4, #8]
 8018954:	b123      	cbz	r3, 8018960 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8018956:	6860      	ldr	r0, [r4, #4]
 8018958:	6803      	ldr	r3, [r0, #0]
 801895a:	695b      	ldr	r3, [r3, #20]
 801895c:	4798      	blx	r3
 801895e:	7225      	strb	r5, [r4, #8]
 8018960:	6860      	ldr	r0, [r4, #4]
 8018962:	6803      	ldr	r3, [r0, #0]
 8018964:	681b      	ldr	r3, [r3, #0]
 8018966:	4798      	blx	r3
 8018968:	b928      	cbnz	r0, 8018976 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 801896a:	6823      	ldr	r3, [r4, #0]
 801896c:	4620      	mov	r0, r4
 801896e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018970:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018974:	4718      	bx	r3
 8018976:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801897a:	f7e9 bf77 	b.w	800286c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

08018980 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8018980:	b510      	push	{r4, lr}
 8018982:	6082      	str	r2, [r0, #8]
 8018984:	2200      	movs	r2, #0
 8018986:	4c03      	ldr	r4, [pc, #12]	; (8018994 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8018988:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801898c:	e9c0 4100 	strd	r4, r1, [r0]
 8018990:	bd10      	pop	{r4, pc}
 8018992:	bf00      	nop
 8018994:	0802912c 	.word	0x0802912c

08018998 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8018998:	6840      	ldr	r0, [r0, #4]
 801899a:	6803      	ldr	r3, [r0, #0]
 801899c:	681b      	ldr	r3, [r3, #0]
 801899e:	4718      	bx	r3

080189a0 <_ZN8touchgfx8TextArea8setWidthEs>:
 80189a0:	b530      	push	{r4, r5, lr}
 80189a2:	b085      	sub	sp, #20
 80189a4:	6803      	ldr	r3, [r0, #0]
 80189a6:	4604      	mov	r4, r0
 80189a8:	8101      	strh	r1, [r0, #8]
 80189aa:	466d      	mov	r5, sp
 80189ac:	4601      	mov	r1, r0
 80189ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80189b2:	343c      	adds	r4, #60	; 0x3c
 80189b4:	4628      	mov	r0, r5
 80189b6:	4798      	blx	r3
 80189b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80189bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80189c0:	b005      	add	sp, #20
 80189c2:	bd30      	pop	{r4, r5, pc}

080189c4 <_ZN8touchgfx8TextArea9setHeightEs>:
 80189c4:	b530      	push	{r4, r5, lr}
 80189c6:	b085      	sub	sp, #20
 80189c8:	6803      	ldr	r3, [r0, #0]
 80189ca:	4604      	mov	r4, r0
 80189cc:	8141      	strh	r1, [r0, #10]
 80189ce:	466d      	mov	r5, sp
 80189d0:	4601      	mov	r1, r0
 80189d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80189d6:	343c      	adds	r4, #60	; 0x3c
 80189d8:	4628      	mov	r0, r5
 80189da:	4798      	blx	r3
 80189dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80189e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80189e4:	b005      	add	sp, #20
 80189e6:	bd30      	pop	{r4, r5, pc}

080189e8 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 80189e8:	2200      	movs	r2, #0
 80189ea:	8002      	strh	r2, [r0, #0]
 80189ec:	8042      	strh	r2, [r0, #2]
 80189ee:	8082      	strh	r2, [r0, #4]
 80189f0:	80c2      	strh	r2, [r0, #6]
 80189f2:	4770      	bx	lr

080189f4 <_ZN8touchgfx8TextArea8setAlphaEh>:
 80189f4:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
 80189f8:	4770      	bx	lr
	...

080189fc <_ZN8touchgfx8TextArea12setBaselineYEs>:
 80189fc:	b570      	push	{r4, r5, r6, lr}
 80189fe:	6803      	ldr	r3, [r0, #0]
 8018a00:	4604      	mov	r4, r0
 8018a02:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8018a04:	460d      	mov	r5, r1
 8018a06:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8018a08:	4b08      	ldr	r3, [pc, #32]	; (8018a2c <_ZN8touchgfx8TextArea12setBaselineYEs+0x30>)
 8018a0a:	681b      	ldr	r3, [r3, #0]
 8018a0c:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8018a10:	4b07      	ldr	r3, [pc, #28]	; (8018a30 <_ZN8touchgfx8TextArea12setBaselineYEs+0x34>)
 8018a12:	681b      	ldr	r3, [r3, #0]
 8018a14:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8018a18:	6803      	ldr	r3, [r0, #0]
 8018a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018a1c:	4798      	blx	r3
 8018a1e:	1a29      	subs	r1, r5, r0
 8018a20:	4633      	mov	r3, r6
 8018a22:	4620      	mov	r0, r4
 8018a24:	b209      	sxth	r1, r1
 8018a26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018a2a:	4718      	bx	r3
 8018a2c:	24006d88 	.word	0x24006d88
 8018a30:	24006d90 	.word	0x24006d90

08018a34 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 8018a34:	b570      	push	{r4, r5, r6, lr}
 8018a36:	6803      	ldr	r3, [r0, #0]
 8018a38:	4604      	mov	r4, r0
 8018a3a:	4615      	mov	r5, r2
 8018a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018a3e:	4798      	blx	r3
 8018a40:	6823      	ldr	r3, [r4, #0]
 8018a42:	4629      	mov	r1, r5
 8018a44:	4620      	mov	r0, r4
 8018a46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018a48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018a4c:	4718      	bx	r3

08018a4e <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 8018a4e:	2000      	movs	r0, #0
 8018a50:	4770      	bx	lr

08018a52 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
 8018a52:	2000      	movs	r0, #0
 8018a54:	4770      	bx	lr
	...

08018a58 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 8018a58:	4b07      	ldr	r3, [pc, #28]	; (8018a78 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 8018a5a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8018a5c:	881b      	ldrh	r3, [r3, #0]
 8018a5e:	4293      	cmp	r3, r2
 8018a60:	bf81      	itttt	hi
 8018a62:	4b06      	ldrhi	r3, [pc, #24]	; (8018a7c <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 8018a64:	681b      	ldrhi	r3, [r3, #0]
 8018a66:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 8018a6a:	7858      	ldrbhi	r0, [r3, #1]
 8018a6c:	bf8c      	ite	hi
 8018a6e:	f000 0003 	andhi.w	r0, r0, #3
 8018a72:	2000      	movls	r0, #0
 8018a74:	4770      	bx	lr
 8018a76:	bf00      	nop
 8018a78:	24006d8c 	.word	0x24006d8c
 8018a7c:	24006d88 	.word	0x24006d88

08018a80 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 8018a80:	4b11      	ldr	r3, [pc, #68]	; (8018ac8 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 8018a82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018a86:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8018a88:	4604      	mov	r4, r0
 8018a8a:	881b      	ldrh	r3, [r3, #0]
 8018a8c:	428b      	cmp	r3, r1
 8018a8e:	d918      	bls.n	8018ac2 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 8018a90:	6803      	ldr	r3, [r0, #0]
 8018a92:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 8018a94:	4b0d      	ldr	r3, [pc, #52]	; (8018acc <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 8018a96:	6818      	ldr	r0, [r3, #0]
 8018a98:	f7ed f9ae 	bl	8005df8 <_ZNK8touchgfx5Texts7getTextEt>
 8018a9c:	6823      	ldr	r3, [r4, #0]
 8018a9e:	4606      	mov	r6, r0
 8018aa0:	4620      	mov	r0, r4
 8018aa2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018aa4:	4798      	blx	r3
 8018aa6:	6823      	ldr	r3, [r4, #0]
 8018aa8:	4607      	mov	r7, r0
 8018aaa:	4620      	mov	r0, r4
 8018aac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018ab0:	4798      	blx	r3
 8018ab2:	463a      	mov	r2, r7
 8018ab4:	4603      	mov	r3, r0
 8018ab6:	4631      	mov	r1, r6
 8018ab8:	4620      	mov	r0, r4
 8018aba:	46ac      	mov	ip, r5
 8018abc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018ac0:	4760      	bx	ip
 8018ac2:	2000      	movs	r0, #0
 8018ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018ac8:	24006d8c 	.word	0x24006d8c
 8018acc:	24006d94 	.word	0x24006d94

08018ad0 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8018ad0:	4b18      	ldr	r3, [pc, #96]	; (8018b34 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8018ad2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018ad6:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8018ad8:	4604      	mov	r4, r0
 8018ada:	881b      	ldrh	r3, [r3, #0]
 8018adc:	428b      	cmp	r3, r1
 8018ade:	d926      	bls.n	8018b2e <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 8018ae0:	4b15      	ldr	r3, [pc, #84]	; (8018b38 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8018ae2:	681b      	ldr	r3, [r3, #0]
 8018ae4:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8018ae8:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8018aec:	4b13      	ldr	r3, [pc, #76]	; (8018b3c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8018aee:	7855      	ldrb	r5, [r2, #1]
 8018af0:	681b      	ldr	r3, [r3, #0]
 8018af2:	f3c5 0581 	ubfx	r5, r5, #2, #2
 8018af6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8018afa:	6833      	ldr	r3, [r6, #0]
 8018afc:	69df      	ldr	r7, [r3, #28]
 8018afe:	4b10      	ldr	r3, [pc, #64]	; (8018b40 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8018b00:	6818      	ldr	r0, [r3, #0]
 8018b02:	f7ed f979 	bl	8005df8 <_ZNK8touchgfx5Texts7getTextEt>
 8018b06:	6823      	ldr	r3, [r4, #0]
 8018b08:	4680      	mov	r8, r0
 8018b0a:	4620      	mov	r0, r4
 8018b0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018b0e:	4798      	blx	r3
 8018b10:	6823      	ldr	r3, [r4, #0]
 8018b12:	4681      	mov	r9, r0
 8018b14:	4620      	mov	r0, r4
 8018b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018b1a:	4798      	blx	r3
 8018b1c:	464b      	mov	r3, r9
 8018b1e:	9000      	str	r0, [sp, #0]
 8018b20:	4642      	mov	r2, r8
 8018b22:	4629      	mov	r1, r5
 8018b24:	4630      	mov	r0, r6
 8018b26:	47b8      	blx	r7
 8018b28:	b003      	add	sp, #12
 8018b2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018b2e:	2000      	movs	r0, #0
 8018b30:	e7fa      	b.n	8018b28 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 8018b32:	bf00      	nop
 8018b34:	24006d8c 	.word	0x24006d8c
 8018b38:	24006d88 	.word	0x24006d88
 8018b3c:	24006d90 	.word	0x24006d90
 8018b40:	24006d94 	.word	0x24006d94

08018b44 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8018b44:	b40e      	push	{r1, r2, r3}
 8018b46:	4b30      	ldr	r3, [pc, #192]	; (8018c08 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 8018b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018b4c:	881a      	ldrh	r2, [r3, #0]
 8018b4e:	b09d      	sub	sp, #116	; 0x74
 8018b50:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8018b52:	4604      	mov	r4, r0
 8018b54:	429a      	cmp	r2, r3
 8018b56:	d954      	bls.n	8018c02 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 8018b58:	aa26      	add	r2, sp, #152	; 0x98
 8018b5a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8018c0c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8018b5e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8018c10 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 8018b62:	9202      	str	r2, [sp, #8]
 8018b64:	f8d9 2000 	ldr.w	r2, [r9]
 8018b68:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8018b6c:	f8d8 3000 	ldr.w	r3, [r8]
 8018b70:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8018b74:	682b      	ldr	r3, [r5, #0]
 8018b76:	4628      	mov	r0, r5
 8018b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018b7a:	4798      	blx	r3
 8018b7c:	4606      	mov	r6, r0
 8018b7e:	b207      	sxth	r7, r0
 8018b80:	a803      	add	r0, sp, #12
 8018b82:	f003 fcbb 	bl	801c4fc <_ZN8touchgfx12TextProviderC1Ev>
 8018b86:	682b      	ldr	r3, [r5, #0]
 8018b88:	4628      	mov	r0, r5
 8018b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018b8c:	4798      	blx	r3
 8018b8e:	682b      	ldr	r3, [r5, #0]
 8018b90:	4682      	mov	sl, r0
 8018b92:	4628      	mov	r0, r5
 8018b94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018b96:	4798      	blx	r3
 8018b98:	4653      	mov	r3, sl
 8018b9a:	9000      	str	r0, [sp, #0]
 8018b9c:	a803      	add	r0, sp, #12
 8018b9e:	9a02      	ldr	r2, [sp, #8]
 8018ba0:	9925      	ldr	r1, [sp, #148]	; 0x94
 8018ba2:	f003 fd06 	bl	801c5b2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018ba6:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8018ba8:	f8d9 3000 	ldr.w	r3, [r9]
 8018bac:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 8018bb0:	8925      	ldrh	r5, [r4, #8]
 8018bb2:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 8018bb6:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8018bba:	eba5 050c 	sub.w	r5, r5, ip
 8018bbe:	784a      	ldrb	r2, [r1, #1]
 8018bc0:	f8d8 3000 	ldr.w	r3, [r8]
 8018bc4:	b22d      	sxth	r5, r5
 8018bc6:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 8018bca:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8018bce:	9500      	str	r5, [sp, #0]
 8018bd0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8018bd4:	a803      	add	r0, sp, #12
 8018bd6:	f001 fb3f 	bl	801a258 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8018bda:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8018bde:	b203      	sxth	r3, r0
 8018be0:	18b9      	adds	r1, r7, r2
 8018be2:	2900      	cmp	r1, #0
 8018be4:	dd0b      	ble.n	8018bfe <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 8018be6:	3b01      	subs	r3, #1
 8018be8:	fb13 f302 	smulbb	r3, r3, r2
 8018bec:	fb16 3300 	smlabb	r3, r6, r0, r3
 8018bf0:	b21f      	sxth	r7, r3
 8018bf2:	4638      	mov	r0, r7
 8018bf4:	b01d      	add	sp, #116	; 0x74
 8018bf6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018bfa:	b003      	add	sp, #12
 8018bfc:	4770      	bx	lr
 8018bfe:	2b00      	cmp	r3, #0
 8018c00:	dcf7      	bgt.n	8018bf2 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8018c02:	2700      	movs	r7, #0
 8018c04:	e7f5      	b.n	8018bf2 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8018c06:	bf00      	nop
 8018c08:	24006d8c 	.word	0x24006d8c
 8018c0c:	24006d88 	.word	0x24006d88
 8018c10:	24006d90 	.word	0x24006d90

08018c14 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 8018c14:	4bbd      	ldr	r3, [pc, #756]	; (8018f0c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 8018c16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c1a:	460c      	mov	r4, r1
 8018c1c:	881b      	ldrh	r3, [r3, #0]
 8018c1e:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 8018c20:	b0a9      	sub	sp, #164	; 0xa4
 8018c22:	4680      	mov	r8, r0
 8018c24:	428b      	cmp	r3, r1
 8018c26:	d809      	bhi.n	8018c3c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 8018c28:	2300      	movs	r3, #0
 8018c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8018c2e:	6083      	str	r3, [r0, #8]
 8018c30:	e9c0 3200 	strd	r3, r2, [r0]
 8018c34:	4640      	mov	r0, r8
 8018c36:	b029      	add	sp, #164	; 0xa4
 8018c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c3c:	4eb4      	ldr	r6, [pc, #720]	; (8018f10 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 8018c3e:	6833      	ldr	r3, [r6, #0]
 8018c40:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8018c44:	4bb3      	ldr	r3, [pc, #716]	; (8018f14 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 8018c46:	681b      	ldr	r3, [r3, #0]
 8018c48:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8018c4c:	4bb2      	ldr	r3, [pc, #712]	; (8018f18 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8018c4e:	6818      	ldr	r0, [r3, #0]
 8018c50:	f7ed f8d2 	bl	8005df8 <_ZNK8touchgfx5Texts7getTextEt>
 8018c54:	682b      	ldr	r3, [r5, #0]
 8018c56:	4681      	mov	r9, r0
 8018c58:	4628      	mov	r0, r5
 8018c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018c5c:	4798      	blx	r3
 8018c5e:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
 8018c60:	b203      	sxth	r3, r0
 8018c62:	4682      	mov	sl, r0
 8018c64:	4407      	add	r7, r0
 8018c66:	a80f      	add	r0, sp, #60	; 0x3c
 8018c68:	9304      	str	r3, [sp, #16]
 8018c6a:	b2bb      	uxth	r3, r7
 8018c6c:	9303      	str	r3, [sp, #12]
 8018c6e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8018c72:	2b00      	cmp	r3, #0
 8018c74:	f040 80a5 	bne.w	8018dc2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1ae>
 8018c78:	f003 fc40 	bl	801c4fc <_ZN8touchgfx12TextProviderC1Ev>
 8018c7c:	682b      	ldr	r3, [r5, #0]
 8018c7e:	4628      	mov	r0, r5
 8018c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018c82:	4798      	blx	r3
 8018c84:	682b      	ldr	r3, [r5, #0]
 8018c86:	4606      	mov	r6, r0
 8018c88:	4628      	mov	r0, r5
 8018c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018c8c:	4798      	blx	r3
 8018c8e:	6823      	ldr	r3, [r4, #0]
 8018c90:	4607      	mov	r7, r0
 8018c92:	4620      	mov	r0, r4
 8018c94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018c96:	4798      	blx	r3
 8018c98:	6823      	ldr	r3, [r4, #0]
 8018c9a:	4683      	mov	fp, r0
 8018c9c:	4620      	mov	r0, r4
 8018c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018ca2:	4798      	blx	r3
 8018ca4:	463b      	mov	r3, r7
 8018ca6:	4649      	mov	r1, r9
 8018ca8:	4632      	mov	r2, r6
 8018caa:	2600      	movs	r6, #0
 8018cac:	e9cd b000 	strd	fp, r0, [sp]
 8018cb0:	a80f      	add	r0, sp, #60	; 0x3c
 8018cb2:	4637      	mov	r7, r6
 8018cb4:	f003 fc92 	bl	801c5dc <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8018cb8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8018cbc:	f8df b250 	ldr.w	fp, [pc, #592]	; 8018f10 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 8018cc0:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8018cc4:	bf0c      	ite	eq
 8018cc6:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 8018cca:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 8018cce:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8018cd0:	4629      	mov	r1, r5
 8018cd2:	f8db 3000 	ldr.w	r3, [fp]
 8018cd6:	a80f      	add	r0, sp, #60	; 0x3c
 8018cd8:	3701      	adds	r7, #1
 8018cda:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8018cde:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8018ce2:	b2bf      	uxth	r7, r7
 8018ce4:	785b      	ldrb	r3, [r3, #1]
 8018ce6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8018cea:	f000 ffd0 	bl	8019c8e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8018cee:	9b03      	ldr	r3, [sp, #12]
 8018cf0:	4286      	cmp	r6, r0
 8018cf2:	eba9 0903 	sub.w	r9, r9, r3
 8018cf6:	bfb8      	it	lt
 8018cf8:	4606      	movlt	r6, r0
 8018cfa:	a80f      	add	r0, sp, #60	; 0x3c
 8018cfc:	fa0f f989 	sxth.w	r9, r9
 8018d00:	b236      	sxth	r6, r6
 8018d02:	f003 fc22 	bl	801c54a <_ZN8touchgfx12TextProvider11endOfStringEv>
 8018d06:	b918      	cbnz	r0, 8018d10 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8018d08:	7a2b      	ldrb	r3, [r5, #8]
 8018d0a:	444b      	add	r3, r9
 8018d0c:	2b00      	cmp	r3, #0
 8018d0e:	dcde      	bgt.n	8018cce <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xba>
 8018d10:	9b03      	ldr	r3, [sp, #12]
 8018d12:	4620      	mov	r0, r4
 8018d14:	9a04      	ldr	r2, [sp, #16]
 8018d16:	fb13 f707 	smulbb	r7, r3, r7
 8018d1a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8018d1c:	f895 9009 	ldrb.w	r9, [r5, #9]
 8018d20:	1aff      	subs	r7, r7, r3
 8018d22:	b2bf      	uxth	r7, r7
 8018d24:	b23b      	sxth	r3, r7
 8018d26:	429a      	cmp	r2, r3
 8018d28:	bfa8      	it	ge
 8018d2a:	4657      	movge	r7, sl
 8018d2c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8018d30:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8018d34:	6823      	ldr	r3, [r4, #0]
 8018d36:	444f      	add	r7, r9
 8018d38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018d3a:	bf08      	it	eq
 8018d3c:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 8018d40:	fa1f f987 	uxth.w	r9, r7
 8018d44:	bf18      	it	ne
 8018d46:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 8018d4a:	4798      	blx	r3
 8018d4c:	2801      	cmp	r0, #1
 8018d4e:	fa0f f789 	sxth.w	r7, r9
 8018d52:	b2b3      	uxth	r3, r6
 8018d54:	f000 80e2 	beq.w	8018f1c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 8018d58:	2802      	cmp	r0, #2
 8018d5a:	f894 6037 	ldrb.w	r6, [r4, #55]	; 0x37
 8018d5e:	f000 80e3 	beq.w	8018f28 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 8018d62:	7aea      	ldrb	r2, [r5, #11]
 8018d64:	b236      	sxth	r6, r6
 8018d66:	7b2d      	ldrb	r5, [r5, #12]
 8018d68:	1ab6      	subs	r6, r6, r2
 8018d6a:	442a      	add	r2, r5
 8018d6c:	fa1f fa86 	uxth.w	sl, r6
 8018d70:	4413      	add	r3, r2
 8018d72:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8018d76:	fa0f fb8a 	sxth.w	fp, sl
 8018d7a:	b29b      	uxth	r3, r3
 8018d7c:	2a02      	cmp	r2, #2
 8018d7e:	b21e      	sxth	r6, r3
 8018d80:	f000 80d6 	beq.w	8018f30 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 8018d84:	2a03      	cmp	r2, #3
 8018d86:	f000 80de 	beq.w	8018f46 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 8018d8a:	2a01      	cmp	r2, #1
 8018d8c:	f040 80e6 	bne.w	8018f5c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 8018d90:	8925      	ldrh	r5, [r4, #8]
 8018d92:	4633      	mov	r3, r6
 8018d94:	463e      	mov	r6, r7
 8018d96:	eba5 0909 	sub.w	r9, r5, r9
 8018d9a:	461f      	mov	r7, r3
 8018d9c:	465d      	mov	r5, fp
 8018d9e:	fa0f fb89 	sxth.w	fp, r9
 8018da2:	4b5d      	ldr	r3, [pc, #372]	; (8018f18 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8018da4:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8018da6:	6818      	ldr	r0, [r3, #0]
 8018da8:	f7ed f826 	bl	8005df8 <_ZNK8touchgfx5Texts7getTextEt>
 8018dac:	f8a8 b000 	strh.w	fp, [r8]
 8018db0:	f8a8 5002 	strh.w	r5, [r8, #2]
 8018db4:	f8a8 6004 	strh.w	r6, [r8, #4]
 8018db8:	f8a8 7006 	strh.w	r7, [r8, #6]
 8018dbc:	f8c8 0008 	str.w	r0, [r8, #8]
 8018dc0:	e738      	b.n	8018c34 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 8018dc2:	f003 fb9b 	bl	801c4fc <_ZN8touchgfx12TextProviderC1Ev>
 8018dc6:	682b      	ldr	r3, [r5, #0]
 8018dc8:	4628      	mov	r0, r5
 8018dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018dcc:	4798      	blx	r3
 8018dce:	682b      	ldr	r3, [r5, #0]
 8018dd0:	4607      	mov	r7, r0
 8018dd2:	4628      	mov	r0, r5
 8018dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018dd6:	4798      	blx	r3
 8018dd8:	6823      	ldr	r3, [r4, #0]
 8018dda:	4683      	mov	fp, r0
 8018ddc:	4620      	mov	r0, r4
 8018dde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018de0:	4798      	blx	r3
 8018de2:	6822      	ldr	r2, [r4, #0]
 8018de4:	9005      	str	r0, [sp, #20]
 8018de6:	4620      	mov	r0, r4
 8018de8:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8018dec:	4790      	blx	r2
 8018dee:	9b05      	ldr	r3, [sp, #20]
 8018df0:	463a      	mov	r2, r7
 8018df2:	4649      	mov	r1, r9
 8018df4:	9001      	str	r0, [sp, #4]
 8018df6:	a80f      	add	r0, sp, #60	; 0x3c
 8018df8:	9300      	str	r3, [sp, #0]
 8018dfa:	465b      	mov	r3, fp
 8018dfc:	f003 fbee 	bl	801c5dc <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8018e00:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8018e04:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 8018e08:	af0f      	add	r7, sp, #60	; 0x3c
 8018e0a:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8018e0e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8018e12:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8018e14:	bf0a      	itet	eq
 8018e16:	464a      	moveq	r2, r9
 8018e18:	461a      	movne	r2, r3
 8018e1a:	4699      	moveq	r9, r3
 8018e1c:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8018e20:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 8018e24:	1ad2      	subs	r2, r2, r3
 8018e26:	6833      	ldr	r3, [r6, #0]
 8018e28:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	; 0x34
 8018e2c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8018e30:	7859      	ldrb	r1, [r3, #1]
 8018e32:	2300      	movs	r3, #0
 8018e34:	9707      	str	r7, [sp, #28]
 8018e36:	f3c1 0181 	ubfx	r1, r1, #2, #2
 8018e3a:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018e3e:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8018e42:	f88d 1020 	strb.w	r1, [sp, #32]
 8018e46:	9509      	str	r5, [sp, #36]	; 0x24
 8018e48:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8018e4c:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 8018e50:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 8018e54:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8018e58:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8018e5c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8018e60:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8018e64:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8018e68:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8018e6c:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8018e70:	b350      	cbz	r0, 8018ec8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8018e72:	682b      	ldr	r3, [r5, #0]
 8018e74:	4628      	mov	r0, r5
 8018e76:	695b      	ldr	r3, [r3, #20]
 8018e78:	4798      	blx	r3
 8018e7a:	4607      	mov	r7, r0
 8018e7c:	b320      	cbz	r0, 8018ec8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8018e7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018e80:	4639      	mov	r1, r7
 8018e82:	6803      	ldr	r3, [r0, #0]
 8018e84:	68db      	ldr	r3, [r3, #12]
 8018e86:	4798      	blx	r3
 8018e88:	4606      	mov	r6, r0
 8018e8a:	b1e8      	cbz	r0, 8018ec8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8018e8c:	7b43      	ldrb	r3, [r0, #13]
 8018e8e:	7a82      	ldrb	r2, [r0, #10]
 8018e90:	005b      	lsls	r3, r3, #1
 8018e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018e96:	4313      	orrs	r3, r2
 8018e98:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8018e9c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 8018ea0:	2b06      	cmp	r3, #6
 8018ea2:	d111      	bne.n	8018ec8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8018ea4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018ea6:	4632      	mov	r2, r6
 8018ea8:	4639      	mov	r1, r7
 8018eaa:	6803      	ldr	r3, [r0, #0]
 8018eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018eae:	4798      	blx	r3
 8018eb0:	7b73      	ldrb	r3, [r6, #13]
 8018eb2:	005b      	lsls	r3, r3, #1
 8018eb4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018eb8:	7ab3      	ldrb	r3, [r6, #10]
 8018eba:	4313      	orrs	r3, r2
 8018ebc:	4418      	add	r0, r3
 8018ebe:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8018ec2:	4418      	add	r0, r3
 8018ec4:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 8018ec8:	2600      	movs	r6, #0
 8018eca:	4637      	mov	r7, r6
 8018ecc:	a806      	add	r0, sp, #24
 8018ece:	3701      	adds	r7, #1
 8018ed0:	f001 f8bf 	bl	801a052 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8018ed4:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 8018ed8:	9b03      	ldr	r3, [sp, #12]
 8018eda:	b2bf      	uxth	r7, r7
 8018edc:	4286      	cmp	r6, r0
 8018ede:	eba9 0903 	sub.w	r9, r9, r3
 8018ee2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8018ee6:	bfb8      	it	lt
 8018ee8:	4606      	movlt	r6, r0
 8018eea:	fa0f f989 	sxth.w	r9, r9
 8018eee:	b236      	sxth	r6, r6
 8018ef0:	2b00      	cmp	r3, #0
 8018ef2:	f43f af0d 	beq.w	8018d10 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8018ef6:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8018efa:	2b00      	cmp	r3, #0
 8018efc:	f47f af08 	bne.w	8018d10 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8018f00:	7a2b      	ldrb	r3, [r5, #8]
 8018f02:	444b      	add	r3, r9
 8018f04:	2b00      	cmp	r3, #0
 8018f06:	dce1      	bgt.n	8018ecc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b8>
 8018f08:	e702      	b.n	8018d10 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8018f0a:	bf00      	nop
 8018f0c:	24006d8c 	.word	0x24006d8c
 8018f10:	24006d88 	.word	0x24006d88
 8018f14:	24006d90 	.word	0x24006d90
 8018f18:	24006d94 	.word	0x24006d94
 8018f1c:	ebaa 0606 	sub.w	r6, sl, r6
 8018f20:	2002      	movs	r0, #2
 8018f22:	fb96 f6f0 	sdiv	r6, r6, r0
 8018f26:	e71c      	b.n	8018d62 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8018f28:	441e      	add	r6, r3
 8018f2a:	ebaa 0606 	sub.w	r6, sl, r6
 8018f2e:	e718      	b.n	8018d62 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8018f30:	8925      	ldrh	r5, [r4, #8]
 8018f32:	1aed      	subs	r5, r5, r3
 8018f34:	eba5 050a 	sub.w	r5, r5, sl
 8018f38:	fa0f fb85 	sxth.w	fp, r5
 8018f3c:	8965      	ldrh	r5, [r4, #10]
 8018f3e:	eba5 0509 	sub.w	r5, r5, r9
 8018f42:	b22d      	sxth	r5, r5
 8018f44:	e72d      	b.n	8018da2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8018f46:	8965      	ldrh	r5, [r4, #10]
 8018f48:	f04f 0b00 	mov.w	fp, #0
 8018f4c:	1aed      	subs	r5, r5, r3
 8018f4e:	4633      	mov	r3, r6
 8018f50:	463e      	mov	r6, r7
 8018f52:	eba5 050a 	sub.w	r5, r5, sl
 8018f56:	461f      	mov	r7, r3
 8018f58:	b22d      	sxth	r5, r5
 8018f5a:	e722      	b.n	8018da2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8018f5c:	2500      	movs	r5, #0
 8018f5e:	e720      	b.n	8018da2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>

08018f60 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 8018f60:	b513      	push	{r0, r1, r4, lr}
 8018f62:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 8018f66:	4604      	mov	r4, r0
 8018f68:	b1fb      	cbz	r3, 8018faa <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8018f6a:	4b16      	ldr	r3, [pc, #88]	; (8018fc4 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 8018f6c:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8018f6e:	881b      	ldrh	r3, [r3, #0]
 8018f70:	428b      	cmp	r3, r1
 8018f72:	d91a      	bls.n	8018faa <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8018f74:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8018f78:	2b00      	cmp	r3, #0
 8018f7a:	dd16      	ble.n	8018faa <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8018f7c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8018f80:	2b00      	cmp	r3, #0
 8018f82:	dd12      	ble.n	8018faa <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8018f84:	4b10      	ldr	r3, [pc, #64]	; (8018fc8 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 8018f86:	6818      	ldr	r0, [r3, #0]
 8018f88:	f7ec ff36 	bl	8005df8 <_ZNK8touchgfx5Texts7getTextEt>
 8018f8c:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 8018f90:	6822      	ldr	r2, [r4, #0]
 8018f92:	2b00      	cmp	r3, #0
 8018f94:	db06      	blt.n	8018fa4 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8018f96:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8018f9a:	2b00      	cmp	r3, #0
 8018f9c:	db02      	blt.n	8018fa4 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8018f9e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018fa0:	4298      	cmp	r0, r3
 8018fa2:	d004      	beq.n	8018fae <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 8018fa4:	6953      	ldr	r3, [r2, #20]
 8018fa6:	4620      	mov	r0, r4
 8018fa8:	4798      	blx	r3
 8018faa:	b002      	add	sp, #8
 8018fac:	bd10      	pop	{r4, pc}
 8018fae:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8018fb2:	466b      	mov	r3, sp
 8018fb4:	6912      	ldr	r2, [r2, #16]
 8018fb6:	c903      	ldmia	r1, {r0, r1}
 8018fb8:	e883 0003 	stmia.w	r3, {r0, r1}
 8018fbc:	4619      	mov	r1, r3
 8018fbe:	4620      	mov	r0, r4
 8018fc0:	4790      	blx	r2
 8018fc2:	e7f2      	b.n	8018faa <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8018fc4:	24006d8c 	.word	0x24006d8c
 8018fc8:	24006d94 	.word	0x24006d94

08018fcc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8018fcc:	4b45      	ldr	r3, [pc, #276]	; (80190e4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 8018fce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018fd2:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8018fd4:	b08e      	sub	sp, #56	; 0x38
 8018fd6:	881b      	ldrh	r3, [r3, #0]
 8018fd8:	4604      	mov	r4, r0
 8018fda:	4293      	cmp	r3, r2
 8018fdc:	d97e      	bls.n	80190dc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8018fde:	6808      	ldr	r0, [r1, #0]
 8018fe0:	ab05      	add	r3, sp, #20
 8018fe2:	6849      	ldr	r1, [r1, #4]
 8018fe4:	4d40      	ldr	r5, [pc, #256]	; (80190e8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 8018fe6:	c303      	stmia	r3!, {r0, r1}
 8018fe8:	4611      	mov	r1, r2
 8018fea:	6828      	ldr	r0, [r5, #0]
 8018fec:	f7ec ff04 	bl	8005df8 <_ZNK8touchgfx5Texts7getTextEt>
 8018ff0:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 8018ff4:	2b00      	cmp	r3, #0
 8018ff6:	db11      	blt.n	801901c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8018ff8:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8018ffc:	2b00      	cmp	r3, #0
 8018ffe:	db0d      	blt.n	801901c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8019000:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8019002:	4298      	cmp	r0, r3
 8019004:	d10a      	bne.n	801901c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8019006:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 801900a:	ab09      	add	r3, sp, #36	; 0x24
 801900c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019010:	e883 0003 	stmia.w	r3, {r0, r1}
 8019014:	4619      	mov	r1, r3
 8019016:	a805      	add	r0, sp, #20
 8019018:	f7fe fcc4 	bl	80179a4 <_ZN8touchgfx4RectaNERKS0_>
 801901c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8019020:	2b00      	cmp	r3, #0
 8019022:	dd5b      	ble.n	80190dc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8019024:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8019028:	2b00      	cmp	r3, #0
 801902a:	dd57      	ble.n	80190dc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801902c:	4f2f      	ldr	r7, [pc, #188]	; (80190ec <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 801902e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8019030:	683b      	ldr	r3, [r7, #0]
 8019032:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8019036:	4b2e      	ldr	r3, [pc, #184]	; (80190f0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 8019038:	681b      	ldr	r3, [r3, #0]
 801903a:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801903e:	2e00      	cmp	r6, #0
 8019040:	d04c      	beq.n	80190dc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8019042:	6823      	ldr	r3, [r4, #0]
 8019044:	4620      	mov	r0, r4
 8019046:	f894 8036 	ldrb.w	r8, [r4, #54]	; 0x36
 801904a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801904c:	4798      	blx	r3
 801904e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8019050:	683b      	ldr	r3, [r7, #0]
 8019052:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	; 0x34
 8019056:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801905a:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
 801905e:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8019062:	785b      	ldrb	r3, [r3, #1]
 8019064:	f894 7037 	ldrb.w	r7, [r4, #55]	; 0x37
 8019068:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801906c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801906e:	9609      	str	r6, [sp, #36]	; 0x24
 8019070:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019074:	4b1f      	ldr	r3, [pc, #124]	; (80190f4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 8019076:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 801907a:	681b      	ldr	r3, [r3, #0]
 801907c:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
 8019080:	910b      	str	r1, [sp, #44]	; 0x2c
 8019082:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
 8019086:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
 801908a:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
 801908e:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 8019092:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8019096:	b10a      	cbz	r2, 801909c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 8019098:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 801909a:	b906      	cbnz	r6, 801909e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 801909c:	689e      	ldr	r6, [r3, #8]
 801909e:	af07      	add	r7, sp, #28
 80190a0:	4621      	mov	r1, r4
 80190a2:	4638      	mov	r0, r7
 80190a4:	f002 fe74 	bl	801bd90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80190a8:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80190aa:	6828      	ldr	r0, [r5, #0]
 80190ac:	f7ec fea4 	bl	8005df8 <_ZNK8touchgfx5Texts7getTextEt>
 80190b0:	6823      	ldr	r3, [r4, #0]
 80190b2:	4605      	mov	r5, r0
 80190b4:	4620      	mov	r0, r4
 80190b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80190b8:	4798      	blx	r3
 80190ba:	6823      	ldr	r3, [r4, #0]
 80190bc:	4680      	mov	r8, r0
 80190be:	4620      	mov	r0, r4
 80190c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80190c4:	4798      	blx	r3
 80190c6:	ab09      	add	r3, sp, #36	; 0x24
 80190c8:	9501      	str	r5, [sp, #4]
 80190ca:	9300      	str	r3, [sp, #0]
 80190cc:	ab05      	add	r3, sp, #20
 80190ce:	e9cd 8002 	strd	r8, r0, [sp, #8]
 80190d2:	4630      	mov	r0, r6
 80190d4:	e897 0006 	ldmia.w	r7, {r1, r2}
 80190d8:	f7ec fe1f 	bl	8005d1a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80190dc:	b00e      	add	sp, #56	; 0x38
 80190de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80190e2:	bf00      	nop
 80190e4:	24006d8c 	.word	0x24006d8c
 80190e8:	24006d94 	.word	0x24006d94
 80190ec:	24006d88 	.word	0x24006d88
 80190f0:	24006d90 	.word	0x24006d90
 80190f4:	24006d38 	.word	0x24006d38

080190f8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 80190f8:	b538      	push	{r3, r4, r5, lr}
 80190fa:	4b0e      	ldr	r3, [pc, #56]	; (8019134 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 80190fc:	4604      	mov	r4, r0
 80190fe:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8019100:	881b      	ldrh	r3, [r3, #0]
 8019102:	429a      	cmp	r2, r3
 8019104:	d214      	bcs.n	8019130 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8019106:	6803      	ldr	r3, [r0, #0]
 8019108:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801910a:	4798      	blx	r3
 801910c:	6823      	ldr	r3, [r4, #0]
 801910e:	4605      	mov	r5, r0
 8019110:	4620      	mov	r0, r4
 8019112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019114:	4798      	blx	r3
 8019116:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801911a:	b22d      	sxth	r5, r5
 801911c:	4601      	mov	r1, r0
 801911e:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8019122:	bf06      	itte	eq
 8019124:	4602      	moveq	r2, r0
 8019126:	4629      	moveq	r1, r5
 8019128:	462a      	movne	r2, r5
 801912a:	4620      	mov	r0, r4
 801912c:	f7eb fffd 	bl	800512a <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8019130:	bd38      	pop	{r3, r4, r5, pc}
 8019132:	bf00      	nop
 8019134:	24006d8c 	.word	0x24006d8c

08019138 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8019138:	b530      	push	{r4, r5, lr}
 801913a:	888b      	ldrh	r3, [r1, #4]
 801913c:	b085      	sub	sp, #20
 801913e:	4604      	mov	r4, r0
 8019140:	8583      	strh	r3, [r0, #44]	; 0x2c
 8019142:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8019146:	b923      	cbnz	r3, 8019152 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8019148:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801914c:	b90b      	cbnz	r3, 8019152 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 801914e:	f7ff ffd3 	bl	80190f8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8019152:	6823      	ldr	r3, [r4, #0]
 8019154:	466d      	mov	r5, sp
 8019156:	4621      	mov	r1, r4
 8019158:	343c      	adds	r4, #60	; 0x3c
 801915a:	4628      	mov	r0, r5
 801915c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019160:	4798      	blx	r3
 8019162:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019166:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801916a:	b005      	add	sp, #20
 801916c:	bd30      	pop	{r4, r5, pc}

0801916e <_ZNK8touchgfx3Box12getSolidRectEv>:
 801916e:	2300      	movs	r3, #0
 8019170:	8083      	strh	r3, [r0, #4]
 8019172:	80c3      	strh	r3, [r0, #6]
 8019174:	8003      	strh	r3, [r0, #0]
 8019176:	8043      	strh	r3, [r0, #2]
 8019178:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801917c:	2bff      	cmp	r3, #255	; 0xff
 801917e:	bf01      	itttt	eq
 8019180:	890b      	ldrheq	r3, [r1, #8]
 8019182:	8083      	strheq	r3, [r0, #4]
 8019184:	894b      	ldrheq	r3, [r1, #10]
 8019186:	80c3      	strheq	r3, [r0, #6]
 8019188:	4770      	bx	lr
	...

0801918c <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801918c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801918e:	4604      	mov	r4, r0
 8019190:	466b      	mov	r3, sp
 8019192:	6808      	ldr	r0, [r1, #0]
 8019194:	6849      	ldr	r1, [r1, #4]
 8019196:	c303      	stmia	r3!, {r0, r1}
 8019198:	6823      	ldr	r3, [r4, #0]
 801919a:	4669      	mov	r1, sp
 801919c:	4620      	mov	r0, r4
 801919e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80191a0:	4798      	blx	r3
 80191a2:	4b08      	ldr	r3, [pc, #32]	; (80191c4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 80191a4:	681b      	ldr	r3, [r3, #0]
 80191a6:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80191aa:	b10a      	cbz	r2, 80191b0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 80191ac:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80191ae:	b900      	cbnz	r0, 80191b2 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 80191b0:	6898      	ldr	r0, [r3, #8]
 80191b2:	6803      	ldr	r3, [r0, #0]
 80191b4:	4669      	mov	r1, sp
 80191b6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80191b8:	6a1d      	ldr	r5, [r3, #32]
 80191ba:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80191be:	47a8      	blx	r5
 80191c0:	b003      	add	sp, #12
 80191c2:	bd30      	pop	{r4, r5, pc}
 80191c4:	24006d38 	.word	0x24006d38

080191c8 <_ZNK8touchgfx3Box17invalidateContentEv>:
 80191c8:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 80191cc:	b12a      	cbz	r2, 80191da <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80191ce:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80191d2:	b112      	cbz	r2, 80191da <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80191d4:	6803      	ldr	r3, [r0, #0]
 80191d6:	695b      	ldr	r3, [r3, #20]
 80191d8:	4718      	bx	r3
 80191da:	4770      	bx	lr

080191dc <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 80191dc:	b510      	push	{r4, lr}
 80191de:	6803      	ldr	r3, [r0, #0]
 80191e0:	460c      	mov	r4, r1
 80191e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80191e4:	4798      	blx	r3
 80191e6:	1b03      	subs	r3, r0, r4
 80191e8:	4258      	negs	r0, r3
 80191ea:	4158      	adcs	r0, r3
 80191ec:	bd10      	pop	{r4, pc}
	...

080191f0 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 80191f0:	4b01      	ldr	r3, [pc, #4]	; (80191f8 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 80191f2:	6019      	str	r1, [r3, #0]
 80191f4:	4770      	bx	lr
 80191f6:	bf00      	nop
 80191f8:	24006d40 	.word	0x24006d40

080191fc <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80191fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019200:	4696      	mov	lr, r2
 8019202:	b097      	sub	sp, #92	; 0x5c
 8019204:	4605      	mov	r5, r0
 8019206:	4614      	mov	r4, r2
 8019208:	460e      	mov	r6, r1
 801920a:	461f      	mov	r7, r3
 801920c:	f10d 0c1c 	add.w	ip, sp, #28
 8019210:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8019214:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8019218:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 801921c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019220:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019224:	f8de 3000 	ldr.w	r3, [lr]
 8019228:	f104 0e14 	add.w	lr, r4, #20
 801922c:	f8cc 3000 	str.w	r3, [ip]
 8019230:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8019234:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019238:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801923c:	f8de 3000 	ldr.w	r3, [lr]
 8019240:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8019244:	f8cc 3000 	str.w	r3, [ip]
 8019248:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801924c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019250:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019254:	f8de 3000 	ldr.w	r3, [lr]
 8019258:	4631      	mov	r1, r6
 801925a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801925c:	4628      	mov	r0, r5
 801925e:	f8cc 3000 	str.w	r3, [ip]
 8019262:	682b      	ldr	r3, [r5, #0]
 8019264:	9201      	str	r2, [sp, #4]
 8019266:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8019268:	f8cd 8008 	str.w	r8, [sp, #8]
 801926c:	9200      	str	r2, [sp, #0]
 801926e:	aa07      	add	r2, sp, #28
 8019270:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8019274:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 8019278:	463b      	mov	r3, r7
 801927a:	47d8      	blx	fp
 801927c:	46a6      	mov	lr, r4
 801927e:	f10d 0c1c 	add.w	ip, sp, #28
 8019282:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019286:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801928a:	f8de 3000 	ldr.w	r3, [lr]
 801928e:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8019292:	343c      	adds	r4, #60	; 0x3c
 8019294:	f8cc 3000 	str.w	r3, [ip]
 8019298:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801929c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80192a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80192a4:	f8de 3000 	ldr.w	r3, [lr]
 80192a8:	f8cc 3000 	str.w	r3, [ip]
 80192ac:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80192b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80192b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80192b6:	6823      	ldr	r3, [r4, #0]
 80192b8:	4631      	mov	r1, r6
 80192ba:	4628      	mov	r0, r5
 80192bc:	f8cc 3000 	str.w	r3, [ip]
 80192c0:	682b      	ldr	r3, [r5, #0]
 80192c2:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80192c6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80192c8:	f8cd 8008 	str.w	r8, [sp, #8]
 80192cc:	9201      	str	r2, [sp, #4]
 80192ce:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80192d0:	9200      	str	r2, [sp, #0]
 80192d2:	aa07      	add	r2, sp, #28
 80192d4:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80192d6:	463b      	mov	r3, r7
 80192d8:	47a0      	blx	r4
 80192da:	b017      	add	sp, #92	; 0x5c
 80192dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080192e0 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80192e0:	2000      	movs	r0, #0
 80192e2:	4770      	bx	lr

080192e4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 80192e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192e8:	b08d      	sub	sp, #52	; 0x34
 80192ea:	4688      	mov	r8, r1
 80192ec:	f8d3 c000 	ldr.w	ip, [r3]
 80192f0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80192f2:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 80192f6:	680f      	ldr	r7, [r1, #0]
 80192f8:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 80192fc:	eba7 070c 	sub.w	r7, r7, ip
 8019300:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8019304:	edd3 6a07 	vldr	s13, [r3, #28]
 8019308:	42bc      	cmp	r4, r7
 801930a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801930c:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8019310:	bfa8      	it	ge
 8019312:	463c      	movge	r4, r7
 8019314:	f9b1 9000 	ldrsh.w	r9, [r1]
 8019318:	f9ba 1000 	ldrsh.w	r1, [sl]
 801931c:	ee07 4a90 	vmov	s15, r4
 8019320:	eb09 0e0c 	add.w	lr, r9, ip
 8019324:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8019328:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801932c:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8019330:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8019334:	4571      	cmp	r1, lr
 8019336:	ee25 4a04 	vmul.f32	s8, s10, s8
 801933a:	ee65 4a24 	vmul.f32	s9, s10, s9
 801933e:	ee25 5a27 	vmul.f32	s10, s10, s15
 8019342:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019346:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801934a:	ee32 1a05 	vadd.f32	s2, s4, s10
 801934e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8019352:	ee36 0a84 	vadd.f32	s0, s13, s8
 8019356:	ee61 1a87 	vmul.f32	s3, s3, s14
 801935a:	ee22 2a07 	vmul.f32	s4, s4, s14
 801935e:	f340 808c 	ble.w	801947a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8019362:	eba1 060e 	sub.w	r6, r1, lr
 8019366:	fb96 f5f4 	sdiv	r5, r6, r4
 801936a:	ee07 5a10 	vmov	s14, r5
 801936e:	2d00      	cmp	r5, #0
 8019370:	fb04 6615 	mls	r6, r4, r5, r6
 8019374:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019378:	eea7 0a04 	vfma.f32	s0, s14, s8
 801937c:	eee7 0a24 	vfma.f32	s1, s14, s9
 8019380:	eea7 1a05 	vfma.f32	s2, s14, s10
 8019384:	dd12      	ble.n	80193ac <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8019386:	ee70 6a44 	vsub.f32	s13, s0, s8
 801938a:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801938e:	ee31 2a45 	vsub.f32	s4, s2, s10
 8019392:	eef5 6a40 	vcmp.f32	s13, #0.0
 8019396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801939a:	bf14      	ite	ne
 801939c:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 80193a0:	eeb0 7a67 	vmoveq.f32	s14, s15
 80193a4:	ee61 1a87 	vmul.f32	s3, s3, s14
 80193a8:	ee22 2a07 	vmul.f32	s4, s4, s14
 80193ac:	fb05 f204 	mul.w	r2, r5, r4
 80193b0:	1abf      	subs	r7, r7, r2
 80193b2:	4494      	add	ip, r2
 80193b4:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80193b8:	4411      	add	r1, r2
 80193ba:	eb09 020c 	add.w	r2, r9, ip
 80193be:	b209      	sxth	r1, r1
 80193c0:	443a      	add	r2, r7
 80193c2:	428a      	cmp	r2, r1
 80193c4:	bfc4      	itt	gt
 80193c6:	eba1 0209 	subgt.w	r2, r1, r9
 80193ca:	eba2 070c 	subgt.w	r7, r2, ip
 80193ce:	2f00      	cmp	r7, #0
 80193d0:	dd50      	ble.n	8019474 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 80193d2:	fb97 f1f4 	sdiv	r1, r7, r4
 80193d6:	fb04 7211 	mls	r2, r4, r1, r7
 80193da:	b90a      	cbnz	r2, 80193e0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 80193dc:	3901      	subs	r1, #1
 80193de:	4622      	mov	r2, r4
 80193e0:	eec7 3a80 	vdiv.f32	s7, s15, s0
 80193e4:	6840      	ldr	r0, [r0, #4]
 80193e6:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 80193ea:	44b6      	add	lr, r6
 80193ec:	f8d0 a000 	ldr.w	sl, [r0]
 80193f0:	2900      	cmp	r1, #0
 80193f2:	bfcc      	ite	gt
 80193f4:	46a1      	movgt	r9, r4
 80193f6:	4691      	movle	r9, r2
 80193f8:	900b      	str	r0, [sp, #44]	; 0x2c
 80193fa:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80193fc:	fb04 e505 	mla	r5, r4, r5, lr
 8019400:	eef0 6a42 	vmov.f32	s13, s4
 8019404:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8019408:	9008      	str	r0, [sp, #32]
 801940a:	eeb0 7a61 	vmov.f32	s14, s3
 801940e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8019410:	695b      	ldr	r3, [r3, #20]
 8019412:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019416:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801941a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801941e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8019420:	445b      	add	r3, fp
 8019422:	9307      	str	r3, [sp, #28]
 8019424:	ee16 3a90 	vmov	r3, s13
 8019428:	e9cd 8505 	strd	r8, r5, [sp, #20]
 801942c:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8019430:	ee21 3a23 	vmul.f32	s6, s2, s7
 8019434:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8019438:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801943c:	ee17 7a90 	vmov	r7, s15
 8019440:	ee73 7a42 	vsub.f32	s15, s6, s4
 8019444:	fb97 f7f4 	sdiv	r7, r7, r4
 8019448:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801944c:	ee17 ca90 	vmov	ip, s15
 8019450:	fb9c fcf4 	sdiv	ip, ip, r4
 8019454:	fb0c 3306 	mla	r3, ip, r6, r3
 8019458:	9302      	str	r3, [sp, #8]
 801945a:	ee17 3a10 	vmov	r3, s14
 801945e:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8019462:	fb07 3706 	mla	r7, r7, r6, r3
 8019466:	eba9 0306 	sub.w	r3, r9, r6
 801946a:	e9cd 4700 	strd	r4, r7, [sp]
 801946e:	f8da 4008 	ldr.w	r4, [sl, #8]
 8019472:	47a0      	blx	r4
 8019474:	b00d      	add	sp, #52	; 0x34
 8019476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801947a:	2500      	movs	r5, #0
 801947c:	462e      	mov	r6, r5
 801947e:	e799      	b.n	80193b4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08019480 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8019480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019484:	b0db      	sub	sp, #364	; 0x16c
 8019486:	461d      	mov	r5, r3
 8019488:	4614      	mov	r4, r2
 801948a:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 801948e:	910f      	str	r1, [sp, #60]	; 0x3c
 8019490:	4629      	mov	r1, r5
 8019492:	930a      	str	r3, [sp, #40]	; 0x28
 8019494:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8019498:	9009      	str	r0, [sp, #36]	; 0x24
 801949a:	930b      	str	r3, [sp, #44]	; 0x2c
 801949c:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 80194a0:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 80194a4:	9310      	str	r3, [sp, #64]	; 0x40
 80194a6:	6803      	ldr	r3, [r0, #0]
 80194a8:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 80194aa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80194ae:	47b8      	blx	r7
 80194b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80194b2:	6058      	str	r0, [r3, #4]
 80194b4:	2800      	cmp	r0, #0
 80194b6:	f000 83a1 	beq.w	8019bfc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80194ba:	682b      	ldr	r3, [r5, #0]
 80194bc:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80194c0:	ed94 7a02 	vldr	s14, [r4, #8]
 80194c4:	9314      	str	r3, [sp, #80]	; 0x50
 80194c6:	686b      	ldr	r3, [r5, #4]
 80194c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80194cc:	9315      	str	r3, [sp, #84]	; 0x54
 80194ce:	4bc1      	ldr	r3, [pc, #772]	; (80197d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 80194d0:	7819      	ldrb	r1, [r3, #0]
 80194d2:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80194d6:	2900      	cmp	r1, #0
 80194d8:	bf16      	itet	ne
 80194da:	4619      	movne	r1, r3
 80194dc:	4611      	moveq	r1, r2
 80194de:	4613      	movne	r3, r2
 80194e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194e4:	9116      	str	r1, [sp, #88]	; 0x58
 80194e6:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 80194ea:	f240 8387 	bls.w	8019bfc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80194ee:	ed94 7a07 	vldr	s14, [r4, #28]
 80194f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80194f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194fa:	f240 837f 	bls.w	8019bfc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80194fe:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8019502:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801950a:	f240 8377 	bls.w	8019bfc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801950e:	6822      	ldr	r2, [r4, #0]
 8019510:	4bb1      	ldr	r3, [pc, #708]	; (80197d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8019512:	429a      	cmp	r2, r3
 8019514:	f2c0 8372 	blt.w	8019bfc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019518:	49b0      	ldr	r1, [pc, #704]	; (80197dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801951a:	6963      	ldr	r3, [r4, #20]
 801951c:	428a      	cmp	r2, r1
 801951e:	f300 836d 	bgt.w	8019bfc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019522:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8019526:	48ae      	ldr	r0, [pc, #696]	; (80197e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8019528:	33ff      	adds	r3, #255	; 0xff
 801952a:	4283      	cmp	r3, r0
 801952c:	f200 8366 	bhi.w	8019bfc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019530:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8019532:	4dac      	ldr	r5, [pc, #688]	; (80197e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8019534:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8019538:	33ff      	adds	r3, #255	; 0xff
 801953a:	42ab      	cmp	r3, r5
 801953c:	f200 835e 	bhi.w	8019bfc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019540:	6862      	ldr	r2, [r4, #4]
 8019542:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8019546:	33ff      	adds	r3, #255	; 0xff
 8019548:	4283      	cmp	r3, r0
 801954a:	f200 8357 	bhi.w	8019bfc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801954e:	69a1      	ldr	r1, [r4, #24]
 8019550:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8019554:	33ff      	adds	r3, #255	; 0xff
 8019556:	4283      	cmp	r3, r0
 8019558:	f200 8350 	bhi.w	8019bfc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801955c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801955e:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8019562:	30ff      	adds	r0, #255	; 0xff
 8019564:	42a8      	cmp	r0, r5
 8019566:	f200 8349 	bhi.w	8019bfc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801956a:	428a      	cmp	r2, r1
 801956c:	f280 8110 	bge.w	8019790 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8019570:	429a      	cmp	r2, r3
 8019572:	f300 8119 	bgt.w	80197a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8019576:	4299      	cmp	r1, r3
 8019578:	f280 811d 	bge.w	80197b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 801957c:	2502      	movs	r5, #2
 801957e:	2701      	movs	r7, #1
 8019580:	46a9      	mov	r9, r5
 8019582:	46b8      	mov	r8, r7
 8019584:	f04f 0a00 	mov.w	sl, #0
 8019588:	4621      	mov	r1, r4
 801958a:	a849      	add	r0, sp, #292	; 0x124
 801958c:	f003 fd00 	bl	801cf90 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8019590:	4622      	mov	r2, r4
 8019592:	4653      	mov	r3, sl
 8019594:	a949      	add	r1, sp, #292	; 0x124
 8019596:	f8cd 9000 	str.w	r9, [sp]
 801959a:	a819      	add	r0, sp, #100	; 0x64
 801959c:	f003 fe28 	bl	801d1f0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80195a0:	4622      	mov	r2, r4
 80195a2:	4653      	mov	r3, sl
 80195a4:	a949      	add	r1, sp, #292	; 0x124
 80195a6:	f8cd 8000 	str.w	r8, [sp]
 80195aa:	a829      	add	r0, sp, #164	; 0xa4
 80195ac:	f003 fe20 	bl	801d1f0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80195b0:	4643      	mov	r3, r8
 80195b2:	4622      	mov	r2, r4
 80195b4:	a949      	add	r1, sp, #292	; 0x124
 80195b6:	f8cd 9000 	str.w	r9, [sp]
 80195ba:	a839      	add	r0, sp, #228	; 0xe4
 80195bc:	f003 fe18 	bl	801d1f0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80195c0:	42af      	cmp	r7, r5
 80195c2:	af12      	add	r7, sp, #72	; 0x48
 80195c4:	bfb7      	itett	lt
 80195c6:	2300      	movlt	r3, #0
 80195c8:	2301      	movge	r3, #1
 80195ca:	ad29      	addlt	r5, sp, #164	; 0xa4
 80195cc:	ac19      	addlt	r4, sp, #100	; 0x64
 80195ce:	bfb1      	iteee	lt
 80195d0:	930e      	strlt	r3, [sp, #56]	; 0x38
 80195d2:	ad19      	addge	r5, sp, #100	; 0x64
 80195d4:	930e      	strge	r3, [sp, #56]	; 0x38
 80195d6:	ac29      	addge	r4, sp, #164	; 0xa4
 80195d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80195da:	e893 0003 	ldmia.w	r3, {r0, r1}
 80195de:	e887 0003 	stmia.w	r7, {r0, r1}
 80195e2:	b928      	cbnz	r0, 80195f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 80195e4:	4b80      	ldr	r3, [pc, #512]	; (80197e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 80195e6:	6818      	ldr	r0, [r3, #0]
 80195e8:	6803      	ldr	r3, [r0, #0]
 80195ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80195ec:	4798      	blx	r3
 80195ee:	6038      	str	r0, [r7, #0]
 80195f0:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80195f2:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80195f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80195fa:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80195fc:	930c      	str	r3, [sp, #48]	; 0x30
 80195fe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019600:	6963      	ldr	r3, [r4, #20]
 8019602:	440b      	add	r3, r1
 8019604:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8019608:	4408      	add	r0, r1
 801960a:	b200      	sxth	r0, r0
 801960c:	4283      	cmp	r3, r0
 801960e:	900d      	str	r0, [sp, #52]	; 0x34
 8019610:	f280 80dd 	bge.w	80197ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8019614:	428b      	cmp	r3, r1
 8019616:	da08      	bge.n	801962a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8019618:	2a00      	cmp	r2, #0
 801961a:	dd06      	ble.n	801962a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801961c:	1acb      	subs	r3, r1, r3
 801961e:	429a      	cmp	r2, r3
 8019620:	f2c0 80e4 	blt.w	80197ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8019624:	2b00      	cmp	r3, #0
 8019626:	f300 80e2 	bgt.w	80197ee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801962a:	6967      	ldr	r7, [r4, #20]
 801962c:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8019630:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019632:	443b      	add	r3, r7
 8019634:	461f      	mov	r7, r3
 8019636:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019638:	1bdf      	subs	r7, r3, r7
 801963a:	4297      	cmp	r7, r2
 801963c:	bfa8      	it	ge
 801963e:	4617      	movge	r7, r2
 8019640:	2f00      	cmp	r7, #0
 8019642:	f340 8166 	ble.w	8019912 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8019646:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8019648:	6829      	ldr	r1, [r5, #0]
 801964a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801964e:	f9bb 3000 	ldrsh.w	r3, [fp]
 8019652:	4411      	add	r1, r2
 8019654:	6820      	ldr	r0, [r4, #0]
 8019656:	4299      	cmp	r1, r3
 8019658:	dd1a      	ble.n	8019690 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801965a:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801965e:	4402      	add	r2, r0
 8019660:	440b      	add	r3, r1
 8019662:	b21b      	sxth	r3, r3
 8019664:	429a      	cmp	r2, r3
 8019666:	dc13      	bgt.n	8019690 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8019668:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801966a:	a912      	add	r1, sp, #72	; 0x48
 801966c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801966e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019670:	681b      	ldr	r3, [r3, #0]
 8019672:	9206      	str	r2, [sp, #24]
 8019674:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019676:	9500      	str	r5, [sp, #0]
 8019678:	9205      	str	r2, [sp, #20]
 801967a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801967c:	e9cd b203 	strd	fp, r2, [sp, #12]
 8019680:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8019682:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8019686:	aa49      	add	r2, sp, #292	; 0x124
 8019688:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801968c:	4623      	mov	r3, r4
 801968e:	47c8      	blx	r9
 8019690:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8019694:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8019698:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801969c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80196a0:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80196a4:	68a1      	ldr	r1, [r4, #8]
 80196a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80196aa:	ed94 6a08 	vldr	s12, [r4, #32]
 80196ae:	edd4 6a07 	vldr	s13, [r4, #28]
 80196b2:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80196b6:	ee76 6a86 	vadd.f32	s13, s13, s12
 80196ba:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80196be:	e9d4 2300 	ldrd	r2, r3, [r4]
 80196c2:	edc4 6a07 	vstr	s13, [r4, #28]
 80196c6:	441a      	add	r2, r3
 80196c8:	6963      	ldr	r3, [r4, #20]
 80196ca:	3301      	adds	r3, #1
 80196cc:	6022      	str	r2, [r4, #0]
 80196ce:	6163      	str	r3, [r4, #20]
 80196d0:	69a3      	ldr	r3, [r4, #24]
 80196d2:	3b01      	subs	r3, #1
 80196d4:	61a3      	str	r3, [r4, #24]
 80196d6:	6923      	ldr	r3, [r4, #16]
 80196d8:	440b      	add	r3, r1
 80196da:	68e1      	ldr	r1, [r4, #12]
 80196dc:	428b      	cmp	r3, r1
 80196de:	6123      	str	r3, [r4, #16]
 80196e0:	db15      	blt.n	801970e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 80196e2:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 80196e6:	3201      	adds	r2, #1
 80196e8:	1a5b      	subs	r3, r3, r1
 80196ea:	ee76 6a26 	vadd.f32	s13, s12, s13
 80196ee:	6022      	str	r2, [r4, #0]
 80196f0:	6123      	str	r3, [r4, #16]
 80196f2:	edc4 6a07 	vstr	s13, [r4, #28]
 80196f6:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80196fa:	ee36 7a87 	vadd.f32	s14, s13, s14
 80196fe:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8019702:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8019706:	ee77 7a27 	vadd.f32	s15, s14, s15
 801970a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801970e:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8019712:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8019716:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801971a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801971e:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8019722:	68a9      	ldr	r1, [r5, #8]
 8019724:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019728:	ed95 6a08 	vldr	s12, [r5, #32]
 801972c:	edd5 6a07 	vldr	s13, [r5, #28]
 8019730:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8019734:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019738:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801973c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8019740:	edc5 6a07 	vstr	s13, [r5, #28]
 8019744:	441a      	add	r2, r3
 8019746:	696b      	ldr	r3, [r5, #20]
 8019748:	3301      	adds	r3, #1
 801974a:	602a      	str	r2, [r5, #0]
 801974c:	616b      	str	r3, [r5, #20]
 801974e:	69ab      	ldr	r3, [r5, #24]
 8019750:	3b01      	subs	r3, #1
 8019752:	61ab      	str	r3, [r5, #24]
 8019754:	692b      	ldr	r3, [r5, #16]
 8019756:	440b      	add	r3, r1
 8019758:	68e9      	ldr	r1, [r5, #12]
 801975a:	428b      	cmp	r3, r1
 801975c:	612b      	str	r3, [r5, #16]
 801975e:	db15      	blt.n	801978c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8019760:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8019764:	3201      	adds	r2, #1
 8019766:	1a5b      	subs	r3, r3, r1
 8019768:	ee76 6a26 	vadd.f32	s13, s12, s13
 801976c:	602a      	str	r2, [r5, #0]
 801976e:	612b      	str	r3, [r5, #16]
 8019770:	edc5 6a07 	vstr	s13, [r5, #28]
 8019774:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8019778:	ee36 7a87 	vadd.f32	s14, s13, s14
 801977c:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8019780:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8019784:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019788:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801978c:	3f01      	subs	r7, #1
 801978e:	e757      	b.n	8019640 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8019790:	4299      	cmp	r1, r3
 8019792:	dc13      	bgt.n	80197bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8019794:	429a      	cmp	r2, r3
 8019796:	da14      	bge.n	80197c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8019798:	2502      	movs	r5, #2
 801979a:	2703      	movs	r7, #3
 801979c:	f04f 0800 	mov.w	r8, #0
 80197a0:	46a9      	mov	r9, r5
 80197a2:	f04f 0a01 	mov.w	sl, #1
 80197a6:	e6ef      	b.n	8019588 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80197a8:	2501      	movs	r5, #1
 80197aa:	2700      	movs	r7, #0
 80197ac:	46a9      	mov	r9, r5
 80197ae:	46b8      	mov	r8, r7
 80197b0:	f04f 0a02 	mov.w	sl, #2
 80197b4:	e6e8      	b.n	8019588 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80197b6:	2501      	movs	r5, #1
 80197b8:	2702      	movs	r7, #2
 80197ba:	e6e1      	b.n	8019580 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 80197bc:	2500      	movs	r5, #0
 80197be:	2701      	movs	r7, #1
 80197c0:	e7f4      	b.n	80197ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 80197c2:	2702      	movs	r7, #2
 80197c4:	2503      	movs	r5, #3
 80197c6:	f04f 0900 	mov.w	r9, #0
 80197ca:	46b8      	mov	r8, r7
 80197cc:	e7e9      	b.n	80197a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 80197ce:	4613      	mov	r3, r2
 80197d0:	e728      	b.n	8019624 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 80197d2:	bf00      	nop
 80197d4:	24006d30 	.word	0x24006d30
 80197d8:	fffd8f01 	.word	0xfffd8f01
 80197dc:	00027100 	.word	0x00027100
 80197e0:	0004e1ff 	.word	0x0004e1ff
 80197e4:	0004e1fe 	.word	0x0004e1fe
 80197e8:	24006d38 	.word	0x24006d38
 80197ec:	4613      	mov	r3, r2
 80197ee:	992b      	ldr	r1, [sp, #172]	; 0xac
 80197f0:	469e      	mov	lr, r3
 80197f2:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 80197f4:	469c      	mov	ip, r3
 80197f6:	9111      	str	r1, [sp, #68]	; 0x44
 80197f8:	f04f 0900 	mov.w	r9, #0
 80197fc:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8019800:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8019804:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8019808:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 801980c:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8019810:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8019814:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8019818:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 801981c:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8019820:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8019824:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8019828:	f1bc 0f00 	cmp.w	ip, #0
 801982c:	d147      	bne.n	80198be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801982e:	eb03 0c07 	add.w	ip, r3, r7
 8019832:	1ad7      	subs	r7, r2, r3
 8019834:	f1b9 0f00 	cmp.w	r9, #0
 8019838:	d009      	beq.n	801984e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801983a:	9029      	str	r0, [sp, #164]	; 0xa4
 801983c:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8019840:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8019844:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8019848:	912d      	str	r1, [sp, #180]	; 0xb4
 801984a:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 801984e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8019850:	f04f 0800 	mov.w	r8, #0
 8019854:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8019858:	9111      	str	r1, [sp, #68]	; 0x44
 801985a:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801985e:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8019862:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8019866:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801986a:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801986e:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8019872:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8019876:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801987a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801987e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8019882:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8019886:	f1be 0f00 	cmp.w	lr, #0
 801988a:	d031      	beq.n	80198f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 801988c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801988e:	4450      	add	r0, sl
 8019890:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8019894:	4431      	add	r1, r6
 8019896:	ee37 7a04 	vadd.f32	s14, s14, s8
 801989a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801989e:	4549      	cmp	r1, r9
 80198a0:	db08      	blt.n	80198b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 80198a2:	ee77 7a85 	vadd.f32	s15, s15, s10
 80198a6:	3001      	adds	r0, #1
 80198a8:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80198ac:	eba1 0109 	sub.w	r1, r1, r9
 80198b0:	ee37 7a06 	vadd.f32	s14, s14, s12
 80198b4:	f10e 3eff 	add.w	lr, lr, #4294967295
 80198b8:	f04f 0801 	mov.w	r8, #1
 80198bc:	e7e3      	b.n	8019886 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 80198be:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80198c0:	4450      	add	r0, sl
 80198c2:	ee37 7a24 	vadd.f32	s14, s14, s9
 80198c6:	4431      	add	r1, r6
 80198c8:	ee77 7a84 	vadd.f32	s15, s15, s8
 80198cc:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80198d0:	4541      	cmp	r1, r8
 80198d2:	db08      	blt.n	80198e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 80198d4:	ee76 6a85 	vadd.f32	s13, s13, s10
 80198d8:	3001      	adds	r0, #1
 80198da:	ee37 7a25 	vadd.f32	s14, s14, s11
 80198de:	eba1 0108 	sub.w	r1, r1, r8
 80198e2:	ee77 7a86 	vadd.f32	s15, s15, s12
 80198e6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80198ea:	f04f 0901 	mov.w	r9, #1
 80198ee:	e79b      	b.n	8019828 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 80198f0:	449c      	add	ip, r3
 80198f2:	1aff      	subs	r7, r7, r3
 80198f4:	f1b8 0f00 	cmp.w	r8, #0
 80198f8:	d009      	beq.n	801990e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 80198fa:	9019      	str	r0, [sp, #100]	; 0x64
 80198fc:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8019900:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8019904:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8019908:	911d      	str	r1, [sp, #116]	; 0x74
 801990a:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801990e:	1ad2      	subs	r2, r2, r3
 8019910:	e68b      	b.n	801962a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8019912:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019914:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8019916:	2b00      	cmp	r3, #0
 8019918:	f000 80d1 	beq.w	8019abe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 801991c:	ad19      	add	r5, sp, #100	; 0x64
 801991e:	ac39      	add	r4, sp, #228	; 0xe4
 8019920:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8019922:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8019926:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801992a:	930c      	str	r3, [sp, #48]	; 0x30
 801992c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801992e:	6963      	ldr	r3, [r4, #20]
 8019930:	440b      	add	r3, r1
 8019932:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8019936:	4408      	add	r0, r1
 8019938:	b200      	sxth	r0, r0
 801993a:	4283      	cmp	r3, r0
 801993c:	900d      	str	r0, [sp, #52]	; 0x34
 801993e:	f280 80c1 	bge.w	8019ac4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8019942:	428b      	cmp	r3, r1
 8019944:	da08      	bge.n	8019958 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8019946:	2a00      	cmp	r2, #0
 8019948:	dd06      	ble.n	8019958 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801994a:	1acb      	subs	r3, r1, r3
 801994c:	429a      	cmp	r2, r3
 801994e:	f2c0 80bb 	blt.w	8019ac8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8019952:	2b00      	cmp	r3, #0
 8019954:	f300 80b9 	bgt.w	8019aca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8019958:	6967      	ldr	r7, [r4, #20]
 801995a:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801995e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019960:	443b      	add	r3, r7
 8019962:	461f      	mov	r7, r3
 8019964:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019966:	1bdf      	subs	r7, r3, r7
 8019968:	4297      	cmp	r7, r2
 801996a:	bfa8      	it	ge
 801996c:	4617      	movge	r7, r2
 801996e:	2f00      	cmp	r7, #0
 8019970:	f340 813c 	ble.w	8019bec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8019974:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8019976:	6829      	ldr	r1, [r5, #0]
 8019978:	f9b3 2000 	ldrsh.w	r2, [r3]
 801997c:	f9bb 3000 	ldrsh.w	r3, [fp]
 8019980:	4411      	add	r1, r2
 8019982:	6820      	ldr	r0, [r4, #0]
 8019984:	4299      	cmp	r1, r3
 8019986:	dd1a      	ble.n	80199be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8019988:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801998c:	4402      	add	r2, r0
 801998e:	440b      	add	r3, r1
 8019990:	b21b      	sxth	r3, r3
 8019992:	429a      	cmp	r2, r3
 8019994:	dc13      	bgt.n	80199be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8019996:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019998:	a912      	add	r1, sp, #72	; 0x48
 801999a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801999c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801999e:	681b      	ldr	r3, [r3, #0]
 80199a0:	9206      	str	r2, [sp, #24]
 80199a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80199a4:	9500      	str	r5, [sp, #0]
 80199a6:	9205      	str	r2, [sp, #20]
 80199a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80199aa:	e9cd b203 	strd	fp, r2, [sp, #12]
 80199ae:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80199b0:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80199b4:	aa49      	add	r2, sp, #292	; 0x124
 80199b6:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 80199ba:	4623      	mov	r3, r4
 80199bc:	47c8      	blx	r9
 80199be:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80199c2:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80199c6:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80199ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80199ce:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80199d2:	68a1      	ldr	r1, [r4, #8]
 80199d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80199d8:	ed94 6a08 	vldr	s12, [r4, #32]
 80199dc:	edd4 6a07 	vldr	s13, [r4, #28]
 80199e0:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80199e4:	ee76 6a86 	vadd.f32	s13, s13, s12
 80199e8:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80199ec:	e9d4 2300 	ldrd	r2, r3, [r4]
 80199f0:	edc4 6a07 	vstr	s13, [r4, #28]
 80199f4:	441a      	add	r2, r3
 80199f6:	6963      	ldr	r3, [r4, #20]
 80199f8:	3301      	adds	r3, #1
 80199fa:	6022      	str	r2, [r4, #0]
 80199fc:	6163      	str	r3, [r4, #20]
 80199fe:	69a3      	ldr	r3, [r4, #24]
 8019a00:	3b01      	subs	r3, #1
 8019a02:	61a3      	str	r3, [r4, #24]
 8019a04:	6923      	ldr	r3, [r4, #16]
 8019a06:	440b      	add	r3, r1
 8019a08:	68e1      	ldr	r1, [r4, #12]
 8019a0a:	428b      	cmp	r3, r1
 8019a0c:	6123      	str	r3, [r4, #16]
 8019a0e:	db15      	blt.n	8019a3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8019a10:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8019a14:	3201      	adds	r2, #1
 8019a16:	1a5b      	subs	r3, r3, r1
 8019a18:	ee76 6a26 	vadd.f32	s13, s12, s13
 8019a1c:	6022      	str	r2, [r4, #0]
 8019a1e:	6123      	str	r3, [r4, #16]
 8019a20:	edc4 6a07 	vstr	s13, [r4, #28]
 8019a24:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8019a28:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019a2c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8019a30:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8019a34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019a38:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8019a3c:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8019a40:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8019a44:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8019a48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019a4c:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8019a50:	68a9      	ldr	r1, [r5, #8]
 8019a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019a56:	ed95 6a08 	vldr	s12, [r5, #32]
 8019a5a:	edd5 6a07 	vldr	s13, [r5, #28]
 8019a5e:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8019a62:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019a66:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8019a6a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8019a6e:	edc5 6a07 	vstr	s13, [r5, #28]
 8019a72:	441a      	add	r2, r3
 8019a74:	696b      	ldr	r3, [r5, #20]
 8019a76:	3301      	adds	r3, #1
 8019a78:	602a      	str	r2, [r5, #0]
 8019a7a:	616b      	str	r3, [r5, #20]
 8019a7c:	69ab      	ldr	r3, [r5, #24]
 8019a7e:	3b01      	subs	r3, #1
 8019a80:	61ab      	str	r3, [r5, #24]
 8019a82:	692b      	ldr	r3, [r5, #16]
 8019a84:	440b      	add	r3, r1
 8019a86:	68e9      	ldr	r1, [r5, #12]
 8019a88:	428b      	cmp	r3, r1
 8019a8a:	612b      	str	r3, [r5, #16]
 8019a8c:	db15      	blt.n	8019aba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8019a8e:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8019a92:	3201      	adds	r2, #1
 8019a94:	1a5b      	subs	r3, r3, r1
 8019a96:	ee76 6a26 	vadd.f32	s13, s12, s13
 8019a9a:	602a      	str	r2, [r5, #0]
 8019a9c:	612b      	str	r3, [r5, #16]
 8019a9e:	edc5 6a07 	vstr	s13, [r5, #28]
 8019aa2:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8019aa6:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019aaa:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8019aae:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8019ab2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019ab6:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8019aba:	3f01      	subs	r7, #1
 8019abc:	e757      	b.n	801996e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8019abe:	ad39      	add	r5, sp, #228	; 0xe4
 8019ac0:	ac19      	add	r4, sp, #100	; 0x64
 8019ac2:	e72d      	b.n	8019920 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8019ac4:	4613      	mov	r3, r2
 8019ac6:	e744      	b.n	8019952 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8019ac8:	4613      	mov	r3, r2
 8019aca:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8019acc:	469e      	mov	lr, r3
 8019ace:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8019ad2:	461f      	mov	r7, r3
 8019ad4:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8019ad8:	f04f 0900 	mov.w	r9, #0
 8019adc:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8019ae0:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8019ae4:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8019ae8:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8019aec:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8019af0:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8019af2:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8019af6:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8019afa:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8019afe:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8019b02:	960e      	str	r6, [sp, #56]	; 0x38
 8019b04:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8019b08:	2f00      	cmp	r7, #0
 8019b0a:	d146      	bne.n	8019b9a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8019b0c:	449c      	add	ip, r3
 8019b0e:	1ad7      	subs	r7, r2, r3
 8019b10:	f1b9 0f00 	cmp.w	r9, #0
 8019b14:	d009      	beq.n	8019b2a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8019b16:	9039      	str	r0, [sp, #228]	; 0xe4
 8019b18:	913d      	str	r1, [sp, #244]	; 0xf4
 8019b1a:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8019b1e:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8019b22:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8019b26:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8019b2a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8019b2c:	f04f 0800 	mov.w	r8, #0
 8019b30:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8019b34:	910e      	str	r1, [sp, #56]	; 0x38
 8019b36:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8019b3a:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8019b3e:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8019b42:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8019b46:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8019b4a:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8019b4e:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8019b52:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8019b56:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8019b5a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8019b5e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8019b62:	f1be 0f00 	cmp.w	lr, #0
 8019b66:	d030      	beq.n	8019bca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8019b68:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8019b6a:	4450      	add	r0, sl
 8019b6c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8019b70:	4431      	add	r1, r6
 8019b72:	ee37 7a04 	vadd.f32	s14, s14, s8
 8019b76:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8019b7a:	4549      	cmp	r1, r9
 8019b7c:	db08      	blt.n	8019b90 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8019b7e:	ee77 7a85 	vadd.f32	s15, s15, s10
 8019b82:	3001      	adds	r0, #1
 8019b84:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8019b88:	eba1 0109 	sub.w	r1, r1, r9
 8019b8c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8019b90:	f10e 3eff 	add.w	lr, lr, #4294967295
 8019b94:	f04f 0801 	mov.w	r8, #1
 8019b98:	e7e3      	b.n	8019b62 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8019b9a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8019b9c:	4450      	add	r0, sl
 8019b9e:	ee37 7a24 	vadd.f32	s14, s14, s9
 8019ba2:	4431      	add	r1, r6
 8019ba4:	ee77 7a84 	vadd.f32	s15, s15, s8
 8019ba8:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8019bac:	4541      	cmp	r1, r8
 8019bae:	db08      	blt.n	8019bc2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8019bb0:	ee76 6a85 	vadd.f32	s13, s13, s10
 8019bb4:	3001      	adds	r0, #1
 8019bb6:	ee37 7a25 	vadd.f32	s14, s14, s11
 8019bba:	eba1 0108 	sub.w	r1, r1, r8
 8019bbe:	ee77 7a86 	vadd.f32	s15, s15, s12
 8019bc2:	3f01      	subs	r7, #1
 8019bc4:	f04f 0901 	mov.w	r9, #1
 8019bc8:	e79e      	b.n	8019b08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8019bca:	449c      	add	ip, r3
 8019bcc:	1aff      	subs	r7, r7, r3
 8019bce:	f1b8 0f00 	cmp.w	r8, #0
 8019bd2:	d009      	beq.n	8019be8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8019bd4:	9019      	str	r0, [sp, #100]	; 0x64
 8019bd6:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8019bda:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8019bde:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8019be2:	911d      	str	r1, [sp, #116]	; 0x74
 8019be4:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8019be8:	1ad2      	subs	r2, r2, r3
 8019bea:	e6b5      	b.n	8019958 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8019bec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019bee:	681b      	ldr	r3, [r3, #0]
 8019bf0:	b923      	cbnz	r3, 8019bfc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019bf2:	4b04      	ldr	r3, [pc, #16]	; (8019c04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8019bf4:	6818      	ldr	r0, [r3, #0]
 8019bf6:	6803      	ldr	r3, [r0, #0]
 8019bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019bfa:	4798      	blx	r3
 8019bfc:	b05b      	add	sp, #364	; 0x16c
 8019bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c02:	bf00      	nop
 8019c04:	24006d38 	.word	0x24006d38

08019c08 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 8019c08:	b570      	push	{r4, r5, r6, lr}
 8019c0a:	4604      	mov	r4, r0
 8019c0c:	2500      	movs	r5, #0
 8019c0e:	9805      	ldr	r0, [sp, #20]
 8019c10:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8019c14:	6061      	str	r1, [r4, #4]
 8019c16:	8263      	strh	r3, [r4, #18]
 8019c18:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8019c1c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8019c20:	8025      	strh	r5, [r4, #0]
 8019c22:	7221      	strb	r1, [r4, #8]
 8019c24:	7266      	strb	r6, [r4, #9]
 8019c26:	60e0      	str	r0, [r4, #12]
 8019c28:	8222      	strh	r2, [r4, #16]
 8019c2a:	82a3      	strh	r3, [r4, #20]
 8019c2c:	82e5      	strh	r5, [r4, #22]
 8019c2e:	8325      	strh	r5, [r4, #24]
 8019c30:	8365      	strh	r5, [r4, #26]
 8019c32:	83a5      	strh	r5, [r4, #28]
 8019c34:	83e5      	strh	r5, [r4, #30]
 8019c36:	8425      	strh	r5, [r4, #32]
 8019c38:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 8019c3c:	b32e      	cbz	r6, 8019c8a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8019c3e:	6803      	ldr	r3, [r0, #0]
 8019c40:	695b      	ldr	r3, [r3, #20]
 8019c42:	4798      	blx	r3
 8019c44:	4606      	mov	r6, r0
 8019c46:	b300      	cbz	r0, 8019c8a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8019c48:	68e0      	ldr	r0, [r4, #12]
 8019c4a:	4631      	mov	r1, r6
 8019c4c:	6803      	ldr	r3, [r0, #0]
 8019c4e:	68db      	ldr	r3, [r3, #12]
 8019c50:	4798      	blx	r3
 8019c52:	4605      	mov	r5, r0
 8019c54:	b1c8      	cbz	r0, 8019c8a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8019c56:	7b43      	ldrb	r3, [r0, #13]
 8019c58:	7a82      	ldrb	r2, [r0, #10]
 8019c5a:	005b      	lsls	r3, r3, #1
 8019c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019c60:	4313      	orrs	r3, r2
 8019c62:	8423      	strh	r3, [r4, #32]
 8019c64:	7a63      	ldrb	r3, [r4, #9]
 8019c66:	2b06      	cmp	r3, #6
 8019c68:	d10f      	bne.n	8019c8a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8019c6a:	68e0      	ldr	r0, [r4, #12]
 8019c6c:	462a      	mov	r2, r5
 8019c6e:	4631      	mov	r1, r6
 8019c70:	6803      	ldr	r3, [r0, #0]
 8019c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019c74:	4798      	blx	r3
 8019c76:	7b6b      	ldrb	r3, [r5, #13]
 8019c78:	005b      	lsls	r3, r3, #1
 8019c7a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019c7e:	7aab      	ldrb	r3, [r5, #10]
 8019c80:	4313      	orrs	r3, r2
 8019c82:	4418      	add	r0, r3
 8019c84:	8c23      	ldrh	r3, [r4, #32]
 8019c86:	4418      	add	r0, r3
 8019c88:	8420      	strh	r0, [r4, #32]
 8019c8a:	4620      	mov	r0, r4
 8019c8c:	bd70      	pop	{r4, r5, r6, pc}

08019c8e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8019c8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c92:	2400      	movs	r4, #0
 8019c94:	b085      	sub	sp, #20
 8019c96:	4681      	mov	r9, r0
 8019c98:	4688      	mov	r8, r1
 8019c9a:	4692      	mov	sl, r2
 8019c9c:	469b      	mov	fp, r3
 8019c9e:	4627      	mov	r7, r4
 8019ca0:	4625      	mov	r5, r4
 8019ca2:	4626      	mov	r6, r4
 8019ca4:	4554      	cmp	r4, sl
 8019ca6:	da2a      	bge.n	8019cfe <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8019ca8:	2300      	movs	r3, #0
 8019caa:	9303      	str	r3, [sp, #12]
 8019cac:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019cb0:	429d      	cmp	r5, r3
 8019cb2:	d004      	beq.n	8019cbe <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8019cb4:	f242 030b 	movw	r3, #8203	; 0x200b
 8019cb8:	429d      	cmp	r5, r3
 8019cba:	bf18      	it	ne
 8019cbc:	462f      	movne	r7, r5
 8019cbe:	ab03      	add	r3, sp, #12
 8019cc0:	4642      	mov	r2, r8
 8019cc2:	4659      	mov	r1, fp
 8019cc4:	4648      	mov	r0, r9
 8019cc6:	f002 ff79 	bl	801cbbc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019cca:	4605      	mov	r5, r0
 8019ccc:	b1b8      	cbz	r0, 8019cfe <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8019cce:	280a      	cmp	r0, #10
 8019cd0:	d015      	beq.n	8019cfe <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8019cd2:	9a03      	ldr	r2, [sp, #12]
 8019cd4:	b18a      	cbz	r2, 8019cfa <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8019cd6:	7b50      	ldrb	r0, [r2, #13]
 8019cd8:	4639      	mov	r1, r7
 8019cda:	7a93      	ldrb	r3, [r2, #10]
 8019cdc:	0040      	lsls	r0, r0, #1
 8019cde:	8895      	ldrh	r5, [r2, #4]
 8019ce0:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8019ce4:	4303      	orrs	r3, r0
 8019ce6:	4640      	mov	r0, r8
 8019ce8:	9301      	str	r3, [sp, #4]
 8019cea:	f8d8 3000 	ldr.w	r3, [r8]
 8019cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019cf0:	4798      	blx	r3
 8019cf2:	9b01      	ldr	r3, [sp, #4]
 8019cf4:	4418      	add	r0, r3
 8019cf6:	4406      	add	r6, r0
 8019cf8:	b2b6      	uxth	r6, r6
 8019cfa:	3401      	adds	r4, #1
 8019cfc:	e7d2      	b.n	8019ca4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8019cfe:	4630      	mov	r0, r6
 8019d00:	b005      	add	sp, #20
 8019d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019d06 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8019d06:	2a02      	cmp	r2, #2
 8019d08:	b530      	push	{r4, r5, lr}
 8019d0a:	d011      	beq.n	8019d30 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8019d0c:	2a03      	cmp	r2, #3
 8019d0e:	d01c      	beq.n	8019d4a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8019d10:	2a01      	cmp	r2, #1
 8019d12:	d10c      	bne.n	8019d2e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8019d14:	888b      	ldrh	r3, [r1, #4]
 8019d16:	8801      	ldrh	r1, [r0, #0]
 8019d18:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8019d1c:	1a5b      	subs	r3, r3, r1
 8019d1e:	8844      	ldrh	r4, [r0, #2]
 8019d20:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8019d24:	1a9b      	subs	r3, r3, r2
 8019d26:	8004      	strh	r4, [r0, #0]
 8019d28:	8081      	strh	r1, [r0, #4]
 8019d2a:	8043      	strh	r3, [r0, #2]
 8019d2c:	80c2      	strh	r2, [r0, #6]
 8019d2e:	bd30      	pop	{r4, r5, pc}
 8019d30:	88cb      	ldrh	r3, [r1, #6]
 8019d32:	8842      	ldrh	r2, [r0, #2]
 8019d34:	1a9b      	subs	r3, r3, r2
 8019d36:	88c2      	ldrh	r2, [r0, #6]
 8019d38:	1a9b      	subs	r3, r3, r2
 8019d3a:	888a      	ldrh	r2, [r1, #4]
 8019d3c:	8801      	ldrh	r1, [r0, #0]
 8019d3e:	8043      	strh	r3, [r0, #2]
 8019d40:	1a52      	subs	r2, r2, r1
 8019d42:	8881      	ldrh	r1, [r0, #4]
 8019d44:	1a52      	subs	r2, r2, r1
 8019d46:	8002      	strh	r2, [r0, #0]
 8019d48:	e7f1      	b.n	8019d2e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8019d4a:	88cb      	ldrh	r3, [r1, #6]
 8019d4c:	8841      	ldrh	r1, [r0, #2]
 8019d4e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8019d52:	1a5b      	subs	r3, r3, r1
 8019d54:	f9b0 5000 	ldrsh.w	r5, [r0]
 8019d58:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8019d5c:	1a9b      	subs	r3, r3, r2
 8019d5e:	8045      	strh	r5, [r0, #2]
 8019d60:	8082      	strh	r2, [r0, #4]
 8019d62:	8003      	strh	r3, [r0, #0]
 8019d64:	80c4      	strh	r4, [r0, #6]
 8019d66:	e7e2      	b.n	8019d2e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08019d68 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8019d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d6c:	b09f      	sub	sp, #124	; 0x7c
 8019d6e:	9116      	str	r1, [sp, #88]	; 0x58
 8019d70:	9317      	str	r3, [sp, #92]	; 0x5c
 8019d72:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8019d74:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019d76:	8809      	ldrh	r1, [r1, #0]
 8019d78:	889b      	ldrh	r3, [r3, #4]
 8019d7a:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8019d7e:	440b      	add	r3, r1
 8019d80:	9212      	str	r2, [sp, #72]	; 0x48
 8019d82:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8019d86:	b21b      	sxth	r3, r3
 8019d88:	9011      	str	r0, [sp, #68]	; 0x44
 8019d8a:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8019d8e:	9310      	str	r3, [sp, #64]	; 0x40
 8019d90:	f8d8 3000 	ldr.w	r3, [r8]
 8019d94:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	; 0xa0
 8019d98:	7b19      	ldrb	r1, [r3, #12]
 8019d9a:	7adb      	ldrb	r3, [r3, #11]
 8019d9c:	9114      	str	r1, [sp, #80]	; 0x50
 8019d9e:	9315      	str	r3, [sp, #84]	; 0x54
 8019da0:	2a00      	cmp	r2, #0
 8019da2:	d06a      	beq.n	8019e7a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8019da4:	f898 3010 	ldrb.w	r3, [r8, #16]
 8019da8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8019daa:	2b06      	cmp	r3, #6
 8019dac:	bf14      	ite	ne
 8019dae:	2301      	movne	r3, #1
 8019db0:	2302      	moveq	r3, #2
 8019db2:	4413      	add	r3, r2
 8019db4:	f04f 0900 	mov.w	r9, #0
 8019db8:	930f      	str	r3, [sp, #60]	; 0x3c
 8019dba:	464c      	mov	r4, r9
 8019dbc:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8019dc0:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8019dc4:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8019dc8:	4293      	cmp	r3, r2
 8019dca:	f280 808f 	bge.w	8019eec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 8019dce:	2300      	movs	r3, #0
 8019dd0:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 8019dd4:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8019dd8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019ddc:	429c      	cmp	r4, r3
 8019dde:	d006      	beq.n	8019dee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 8019de0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019de2:	f242 020b 	movw	r2, #8203	; 0x200b
 8019de6:	4294      	cmp	r4, r2
 8019de8:	bf18      	it	ne
 8019dea:	4623      	movne	r3, r4
 8019dec:	930d      	str	r3, [sp, #52]	; 0x34
 8019dee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019df0:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8019df2:	f8d8 2000 	ldr.w	r2, [r8]
 8019df6:	428b      	cmp	r3, r1
 8019df8:	db41      	blt.n	8019e7e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 8019dfa:	6813      	ldr	r3, [r2, #0]
 8019dfc:	4610      	mov	r0, r2
 8019dfe:	695b      	ldr	r3, [r3, #20]
 8019e00:	4798      	blx	r3
 8019e02:	4604      	mov	r4, r0
 8019e04:	f8d8 0000 	ldr.w	r0, [r8]
 8019e08:	aa1d      	add	r2, sp, #116	; 0x74
 8019e0a:	4621      	mov	r1, r4
 8019e0c:	6803      	ldr	r3, [r0, #0]
 8019e0e:	689d      	ldr	r5, [r3, #8]
 8019e10:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8019e14:	47a8      	blx	r5
 8019e16:	901c      	str	r0, [sp, #112]	; 0x70
 8019e18:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019e1c:	429c      	cmp	r4, r3
 8019e1e:	f000 80ec 	beq.w	8019ffa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8019e22:	f242 030b 	movw	r3, #8203	; 0x200b
 8019e26:	429c      	cmp	r4, r3
 8019e28:	f000 80e7 	beq.w	8019ffa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8019e2c:	2c00      	cmp	r4, #0
 8019e2e:	f000 80f9 	beq.w	801a024 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 8019e32:	2c0a      	cmp	r4, #10
 8019e34:	d060      	beq.n	8019ef8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 8019e36:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8019e38:	b36a      	cbz	r2, 8019e96 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 8019e3a:	8894      	ldrh	r4, [r2, #4]
 8019e3c:	f1bb 0f00 	cmp.w	fp, #0
 8019e40:	d03b      	beq.n	8019eba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 8019e42:	f892 900d 	ldrb.w	r9, [r2, #13]
 8019e46:	f1bb 0f01 	cmp.w	fp, #1
 8019e4a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8019e4e:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8019e52:	f892 900a 	ldrb.w	r9, [r2, #10]
 8019e56:	ea49 0903 	orr.w	r9, r9, r3
 8019e5a:	d134      	bne.n	8019ec6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 8019e5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019e5e:	eba6 0609 	sub.w	r6, r6, r9
 8019e62:	2b00      	cmp	r3, #0
 8019e64:	d14f      	bne.n	8019f06 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 8019e66:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019e68:	eb09 0306 	add.w	r3, r9, r6
 8019e6c:	4413      	add	r3, r2
 8019e6e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8019e70:	f9b2 2000 	ldrsh.w	r2, [r2]
 8019e74:	4293      	cmp	r3, r2
 8019e76:	da51      	bge.n	8019f1c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8019e78:	e038      	b.n	8019eec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 8019e7a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8019e7c:	e79a      	b.n	8019db4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 8019e7e:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8019e82:	4659      	mov	r1, fp
 8019e84:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8019e86:	9301      	str	r3, [sp, #4]
 8019e88:	ab1d      	add	r3, sp, #116	; 0x74
 8019e8a:	9300      	str	r3, [sp, #0]
 8019e8c:	ab1c      	add	r3, sp, #112	; 0x70
 8019e8e:	f002 fede 	bl	801cc4e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8019e92:	4604      	mov	r4, r0
 8019e94:	e7c0      	b.n	8019e18 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 8019e96:	f8d8 0000 	ldr.w	r0, [r8]
 8019e9a:	6803      	ldr	r3, [r0, #0]
 8019e9c:	691b      	ldr	r3, [r3, #16]
 8019e9e:	4798      	blx	r3
 8019ea0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019ea4:	4298      	cmp	r0, r3
 8019ea6:	f000 80a8 	beq.w	8019ffa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8019eaa:	f242 030b 	movw	r3, #8203	; 0x200b
 8019eae:	4298      	cmp	r0, r3
 8019eb0:	f000 80a3 	beq.w	8019ffa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8019eb4:	f1bb 0f00 	cmp.w	fp, #0
 8019eb8:	d100      	bne.n	8019ebc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8019eba:	444e      	add	r6, r9
 8019ebc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8019ebe:	2a00      	cmp	r2, #0
 8019ec0:	d1bf      	bne.n	8019e42 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8019ec2:	4691      	mov	r9, r2
 8019ec4:	e099      	b.n	8019ffa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8019ec6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019ec8:	2b00      	cmp	r3, #0
 8019eca:	f000 80ad 	beq.w	801a028 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c0>
 8019ece:	f1bb 0f00 	cmp.w	fp, #0
 8019ed2:	d118      	bne.n	8019f06 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 8019ed4:	f8d8 0000 	ldr.w	r0, [r8]
 8019ed8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8019eda:	6803      	ldr	r3, [r0, #0]
 8019edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019ede:	4798      	blx	r3
 8019ee0:	4406      	add	r6, r0
 8019ee2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019ee4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019ee6:	1af3      	subs	r3, r6, r3
 8019ee8:	4293      	cmp	r3, r2
 8019eea:	dd17      	ble.n	8019f1c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8019eec:	2c00      	cmp	r4, #0
 8019eee:	f000 8099 	beq.w	801a024 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 8019ef2:	2c0a      	cmp	r4, #10
 8019ef4:	f040 8087 	bne.w	801a006 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29e>
 8019ef8:	240a      	movs	r4, #10
 8019efa:	fab4 f084 	clz	r0, r4
 8019efe:	0940      	lsrs	r0, r0, #5
 8019f00:	b01f      	add	sp, #124	; 0x7c
 8019f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f06:	f8d8 0000 	ldr.w	r0, [r8]
 8019f0a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8019f0c:	6803      	ldr	r3, [r0, #0]
 8019f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019f10:	4798      	blx	r3
 8019f12:	f1bb 0f01 	cmp.w	fp, #1
 8019f16:	eba6 0600 	sub.w	r6, r6, r0
 8019f1a:	d0a4      	beq.n	8019e66 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 8019f1c:	981c      	ldr	r0, [sp, #112]	; 0x70
 8019f1e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019f20:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8019f24:	f9b3 7000 	ldrsh.w	r7, [r3]
 8019f28:	7b43      	ldrb	r3, [r0, #13]
 8019f2a:	4431      	add	r1, r6
 8019f2c:	015b      	lsls	r3, r3, #5
 8019f2e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019f32:	7983      	ldrb	r3, [r0, #6]
 8019f34:	4313      	orrs	r3, r2
 8019f36:	440b      	add	r3, r1
 8019f38:	42bb      	cmp	r3, r7
 8019f3a:	db5e      	blt.n	8019ffa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8019f3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019f3e:	4299      	cmp	r1, r3
 8019f40:	da5b      	bge.n	8019ffa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8019f42:	f8d8 0000 	ldr.w	r0, [r8]
 8019f46:	42b7      	cmp	r7, r6
 8019f48:	6803      	ldr	r3, [r0, #0]
 8019f4a:	bfcc      	ite	gt
 8019f4c:	1bbf      	subgt	r7, r7, r6
 8019f4e:	2700      	movle	r7, #0
 8019f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019f52:	bfc8      	it	gt
 8019f54:	b2bf      	uxthgt	r7, r7
 8019f56:	4798      	blx	r3
 8019f58:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8019f5a:	7b5a      	ldrb	r2, [r3, #13]
 8019f5c:	00d1      	lsls	r1, r2, #3
 8019f5e:	f401 7580 	and.w	r5, r1, #256	; 0x100
 8019f62:	7a19      	ldrb	r1, [r3, #8]
 8019f64:	4329      	orrs	r1, r5
 8019f66:	0655      	lsls	r5, r2, #25
 8019f68:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8019f6a:	bf48      	it	mi
 8019f6c:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 8019f70:	4405      	add	r5, r0
 8019f72:	bf48      	it	mi
 8019f74:	b209      	sxthmi	r1, r1
 8019f76:	1a6d      	subs	r5, r5, r1
 8019f78:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8019f7a:	b2ad      	uxth	r5, r5
 8019f7c:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8019f80:	fa0f fa85 	sxth.w	sl, r5
 8019f84:	4551      	cmp	r1, sl
 8019f86:	dd3c      	ble.n	801a002 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 8019f88:	0112      	lsls	r2, r2, #4
 8019f8a:	79d8      	ldrb	r0, [r3, #7]
 8019f8c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8019f90:	4302      	orrs	r2, r0
 8019f92:	4492      	add	sl, r2
 8019f94:	4551      	cmp	r1, sl
 8019f96:	dc30      	bgt.n	8019ffa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8019f98:	1b4d      	subs	r5, r1, r5
 8019f9a:	468a      	mov	sl, r1
 8019f9c:	b22d      	sxth	r5, r5
 8019f9e:	9319      	str	r3, [sp, #100]	; 0x64
 8019fa0:	b2ad      	uxth	r5, r5
 8019fa2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019fa4:	f8d8 0000 	ldr.w	r0, [r8]
 8019fa8:	681a      	ldr	r2, [r3, #0]
 8019faa:	6801      	ldr	r1, [r0, #0]
 8019fac:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8019fae:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8019fb0:	9313      	str	r3, [sp, #76]	; 0x4c
 8019fb2:	9218      	str	r2, [sp, #96]	; 0x60
 8019fb4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8019fb6:	4788      	blx	r1
 8019fb8:	f898 1006 	ldrb.w	r1, [r8, #6]
 8019fbc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019fbe:	910b      	str	r1, [sp, #44]	; 0x2c
 8019fc0:	f898 100e 	ldrb.w	r1, [r8, #14]
 8019fc4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8019fc6:	910a      	str	r1, [sp, #40]	; 0x28
 8019fc8:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 8019fcc:	9109      	str	r1, [sp, #36]	; 0x24
 8019fce:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8019fd2:	9305      	str	r3, [sp, #20]
 8019fd4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019fd6:	9206      	str	r2, [sp, #24]
 8019fd8:	9304      	str	r3, [sp, #16]
 8019fda:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019fdc:	f8cd a004 	str.w	sl, [sp, #4]
 8019fe0:	e9cd 7502 	strd	r7, r5, [sp, #8]
 8019fe4:	4437      	add	r7, r6
 8019fe6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8019fe8:	b23f      	sxth	r7, r7
 8019fea:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8019fee:	9700      	str	r7, [sp, #0]
 8019ff0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8019ff2:	681a      	ldr	r2, [r3, #0]
 8019ff4:	9811      	ldr	r0, [sp, #68]	; 0x44
 8019ff6:	685b      	ldr	r3, [r3, #4]
 8019ff8:	47a8      	blx	r5
 8019ffa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019ffc:	3301      	adds	r3, #1
 8019ffe:	930e      	str	r3, [sp, #56]	; 0x38
 801a000:	e6e0      	b.n	8019dc4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 801a002:	2500      	movs	r5, #0
 801a004:	e7cb      	b.n	8019f9e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
 801a006:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801a008:	3501      	adds	r5, #1
 801a00a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801a00c:	429d      	cmp	r5, r3
 801a00e:	f6bf af74 	bge.w	8019efa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 801a012:	4659      	mov	r1, fp
 801a014:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801a016:	f7eb fdcf 	bl	8005bb8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a01a:	4604      	mov	r4, r0
 801a01c:	b110      	cbz	r0, 801a024 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 801a01e:	280a      	cmp	r0, #10
 801a020:	d1f2      	bne.n	801a008 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2a0>
 801a022:	e769      	b.n	8019ef8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 801a024:	2400      	movs	r4, #0
 801a026:	e768      	b.n	8019efa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 801a028:	f1bb 0f00 	cmp.w	fp, #0
 801a02c:	f43f af59 	beq.w	8019ee2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 801a030:	e774      	b.n	8019f1c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

0801a032 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801a032:	b530      	push	{r4, r5, lr}
 801a034:	8ac4      	ldrh	r4, [r0, #22]
 801a036:	8b45      	ldrh	r5, [r0, #26]
 801a038:	8343      	strh	r3, [r0, #26]
 801a03a:	442c      	add	r4, r5
 801a03c:	1ae4      	subs	r4, r4, r3
 801a03e:	8b83      	ldrh	r3, [r0, #28]
 801a040:	82c4      	strh	r4, [r0, #22]
 801a042:	8b04      	ldrh	r4, [r0, #24]
 801a044:	4422      	add	r2, r4
 801a046:	440c      	add	r4, r1
 801a048:	1a59      	subs	r1, r3, r1
 801a04a:	83c2      	strh	r2, [r0, #30]
 801a04c:	8304      	strh	r4, [r0, #24]
 801a04e:	8381      	strh	r1, [r0, #28]
 801a050:	bd30      	pop	{r4, r5, pc}

0801a052 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 801a052:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a056:	4604      	mov	r4, r0
 801a058:	8a47      	ldrh	r7, [r0, #18]
 801a05a:	68c0      	ldr	r0, [r0, #12]
 801a05c:	b085      	sub	sp, #20
 801a05e:	6803      	ldr	r3, [r0, #0]
 801a060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a062:	4798      	blx	r3
 801a064:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 801a068:	7a63      	ldrb	r3, [r4, #9]
 801a06a:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 801a06e:	3b01      	subs	r3, #1
 801a070:	42b7      	cmp	r7, r6
 801a072:	bfac      	ite	ge
 801a074:	f04f 0900 	movge.w	r9, #0
 801a078:	f04f 0901 	movlt.w	r9, #1
 801a07c:	2b05      	cmp	r3, #5
 801a07e:	d804      	bhi.n	801a08a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 801a080:	e8df f003 	tbb	[pc, r3]
 801a084:	470f0854 	.word	0x470f0854
 801a088:	4c4c      	.short	0x4c4c
 801a08a:	2500      	movs	r5, #0
 801a08c:	46a9      	mov	r9, r5
 801a08e:	462e      	mov	r6, r5
 801a090:	462f      	mov	r7, r5
 801a092:	e00e      	b.n	801a0b2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 801a094:	42b7      	cmp	r7, r6
 801a096:	f04f 0500 	mov.w	r5, #0
 801a09a:	bfb4      	ite	lt
 801a09c:	2600      	movlt	r6, #0
 801a09e:	2601      	movge	r6, #1
 801a0a0:	e7f6      	b.n	801a090 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 801a0a2:	42b7      	cmp	r7, r6
 801a0a4:	464d      	mov	r5, r9
 801a0a6:	f04f 0900 	mov.w	r9, #0
 801a0aa:	bfb4      	ite	lt
 801a0ac:	2600      	movlt	r6, #0
 801a0ae:	2601      	movge	r6, #1
 801a0b0:	464f      	mov	r7, r9
 801a0b2:	f04f 0800 	mov.w	r8, #0
 801a0b6:	f8a4 8016 	strh.w	r8, [r4, #22]
 801a0ba:	f8a4 8018 	strh.w	r8, [r4, #24]
 801a0be:	f8cd 8004 	str.w	r8, [sp, #4]
 801a0c2:	2300      	movs	r3, #0
 801a0c4:	9303      	str	r3, [sp, #12]
 801a0c6:	8823      	ldrh	r3, [r4, #0]
 801a0c8:	2b20      	cmp	r3, #32
 801a0ca:	d033      	beq.n	801a134 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 801a0cc:	f242 010b 	movw	r1, #8203	; 0x200b
 801a0d0:	1a5a      	subs	r2, r3, r1
 801a0d2:	f1d2 0a00 	rsbs	sl, r2, #0
 801a0d6:	eb4a 0a02 	adc.w	sl, sl, r2
 801a0da:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801a0de:	4293      	cmp	r3, r2
 801a0e0:	d008      	beq.n	801a0f4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 801a0e2:	428b      	cmp	r3, r1
 801a0e4:	9a01      	ldr	r2, [sp, #4]
 801a0e6:	bf0e      	itee	eq
 801a0e8:	f04f 0a01 	moveq.w	sl, #1
 801a0ec:	461a      	movne	r2, r3
 801a0ee:	f04f 0a00 	movne.w	sl, #0
 801a0f2:	9201      	str	r2, [sp, #4]
 801a0f4:	ab03      	add	r3, sp, #12
 801a0f6:	68e2      	ldr	r2, [r4, #12]
 801a0f8:	7a21      	ldrb	r1, [r4, #8]
 801a0fa:	6860      	ldr	r0, [r4, #4]
 801a0fc:	f002 fd5e 	bl	801cbbc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a100:	8020      	strh	r0, [r4, #0]
 801a102:	b9d8      	cbnz	r0, 801a13c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 801a104:	8ba2      	ldrh	r2, [r4, #28]
 801a106:	2300      	movs	r3, #0
 801a108:	4611      	mov	r1, r2
 801a10a:	4620      	mov	r0, r4
 801a10c:	f7ff ff91 	bl	801a032 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801a110:	e06e      	b.n	801a1f0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 801a112:	2500      	movs	r5, #0
 801a114:	2701      	movs	r7, #1
 801a116:	46a9      	mov	r9, r5
 801a118:	462e      	mov	r6, r5
 801a11a:	e7ca      	b.n	801a0b2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 801a11c:	42b7      	cmp	r7, r6
 801a11e:	f04f 0500 	mov.w	r5, #0
 801a122:	bfb4      	ite	lt
 801a124:	2700      	movlt	r7, #0
 801a126:	2701      	movge	r7, #1
 801a128:	462e      	mov	r6, r5
 801a12a:	e7c2      	b.n	801a0b2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 801a12c:	2500      	movs	r5, #0
 801a12e:	2601      	movs	r6, #1
 801a130:	46a9      	mov	r9, r5
 801a132:	e7ad      	b.n	801a090 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 801a134:	9301      	str	r3, [sp, #4]
 801a136:	f04f 0a01 	mov.w	sl, #1
 801a13a:	e7db      	b.n	801a0f4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 801a13c:	8b63      	ldrh	r3, [r4, #26]
 801a13e:	280a      	cmp	r0, #10
 801a140:	f103 0301 	add.w	r3, r3, #1
 801a144:	8363      	strh	r3, [r4, #26]
 801a146:	d0dd      	beq.n	801a104 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 801a148:	9a03      	ldr	r2, [sp, #12]
 801a14a:	bb62      	cbnz	r2, 801a1a6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 801a14c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801a150:	4298      	cmp	r0, r3
 801a152:	d003      	beq.n	801a15c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 801a154:	f242 030b 	movw	r3, #8203	; 0x200b
 801a158:	4298      	cmp	r0, r3
 801a15a:	d1b2      	bne.n	801a0c2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a15c:	8823      	ldrh	r3, [r4, #0]
 801a15e:	8ba1      	ldrh	r1, [r4, #28]
 801a160:	2b20      	cmp	r3, #32
 801a162:	d003      	beq.n	801a16c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 801a164:	f242 000b 	movw	r0, #8203	; 0x200b
 801a168:	4283      	cmp	r3, r0
 801a16a:	d131      	bne.n	801a1d0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 801a16c:	f1ba 0f00 	cmp.w	sl, #0
 801a170:	bf0a      	itet	eq
 801a172:	4688      	moveq	r8, r1
 801a174:	4650      	movne	r0, sl
 801a176:	2001      	moveq	r0, #1
 801a178:	440a      	add	r2, r1
 801a17a:	8b23      	ldrh	r3, [r4, #24]
 801a17c:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801a180:	b292      	uxth	r2, r2
 801a182:	83a2      	strh	r2, [r4, #28]
 801a184:	4413      	add	r3, r2
 801a186:	f1b9 0f00 	cmp.w	r9, #0
 801a18a:	d102      	bne.n	801a192 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 801a18c:	2d00      	cmp	r5, #0
 801a18e:	d042      	beq.n	801a216 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 801a190:	b300      	cbz	r0, 801a1d4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 801a192:	8c21      	ldrh	r1, [r4, #32]
 801a194:	4419      	add	r1, r3
 801a196:	458c      	cmp	ip, r1
 801a198:	da37      	bge.n	801a20a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 801a19a:	8ae1      	ldrh	r1, [r4, #22]
 801a19c:	2900      	cmp	r1, #0
 801a19e:	d034      	beq.n	801a20a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 801a1a0:	4563      	cmp	r3, ip
 801a1a2:	dd8e      	ble.n	801a0c2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a1a4:	e01d      	b.n	801a1e2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 801a1a6:	8893      	ldrh	r3, [r2, #4]
 801a1a8:	9901      	ldr	r1, [sp, #4]
 801a1aa:	8023      	strh	r3, [r4, #0]
 801a1ac:	f892 b00d 	ldrb.w	fp, [r2, #13]
 801a1b0:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 801a1b4:	f40b 7080 	and.w	r0, fp, #256	; 0x100
 801a1b8:	f892 b00a 	ldrb.w	fp, [r2, #10]
 801a1bc:	ea4b 0b00 	orr.w	fp, fp, r0
 801a1c0:	68e0      	ldr	r0, [r4, #12]
 801a1c2:	6803      	ldr	r3, [r0, #0]
 801a1c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a1c6:	4798      	blx	r3
 801a1c8:	eb0b 0200 	add.w	r2, fp, r0
 801a1cc:	b292      	uxth	r2, r2
 801a1ce:	e7c5      	b.n	801a15c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 801a1d0:	2000      	movs	r0, #0
 801a1d2:	e7d1      	b.n	801a178 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 801a1d4:	4563      	cmp	r3, ip
 801a1d6:	f77f af74 	ble.w	801a0c2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a1da:	8ae3      	ldrh	r3, [r4, #22]
 801a1dc:	2b00      	cmp	r3, #0
 801a1de:	f43f af70 	beq.w	801a0c2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a1e2:	2301      	movs	r3, #1
 801a1e4:	8c22      	ldrh	r2, [r4, #32]
 801a1e6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 801a1ea:	8be3      	ldrh	r3, [r4, #30]
 801a1ec:	4413      	add	r3, r2
 801a1ee:	83e3      	strh	r3, [r4, #30]
 801a1f0:	68e0      	ldr	r0, [r4, #12]
 801a1f2:	6803      	ldr	r3, [r0, #0]
 801a1f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a1f6:	4798      	blx	r3
 801a1f8:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 801a1fc:	4418      	add	r0, r3
 801a1fe:	8a63      	ldrh	r3, [r4, #18]
 801a200:	1a18      	subs	r0, r3, r0
 801a202:	8260      	strh	r0, [r4, #18]
 801a204:	b005      	add	sp, #20
 801a206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a20a:	2300      	movs	r3, #0
 801a20c:	4611      	mov	r1, r2
 801a20e:	4620      	mov	r0, r4
 801a210:	f7ff ff0f 	bl	801a032 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801a214:	e755      	b.n	801a0c2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a216:	4563      	cmp	r3, ip
 801a218:	dd14      	ble.n	801a244 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 801a21a:	b117      	cbz	r7, 801a222 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 801a21c:	2301      	movs	r3, #1
 801a21e:	460a      	mov	r2, r1
 801a220:	e772      	b.n	801a108 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 801a222:	2e00      	cmp	r6, #0
 801a224:	f43f af4d 	beq.w	801a0c2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a228:	2800      	cmp	r0, #0
 801a22a:	f47f af4a 	bne.w	801a0c2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a22e:	f1ba 0f00 	cmp.w	sl, #0
 801a232:	d002      	beq.n	801a23a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 801a234:	2301      	movs	r3, #1
 801a236:	4642      	mov	r2, r8
 801a238:	e767      	b.n	801a10a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 801a23a:	8ae3      	ldrh	r3, [r4, #22]
 801a23c:	2b00      	cmp	r3, #0
 801a23e:	f43f af40 	beq.w	801a0c2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a242:	e7d5      	b.n	801a1f0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 801a244:	2800      	cmp	r0, #0
 801a246:	f47f af3c 	bne.w	801a0c2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a24a:	f1ba 0f00 	cmp.w	sl, #0
 801a24e:	f43f af38 	beq.w	801a0c2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a252:	2301      	movs	r3, #1
 801a254:	4642      	mov	r2, r8
 801a256:	e7da      	b.n	801a20e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

0801a258 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801a258:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a25a:	4605      	mov	r5, r0
 801a25c:	b08f      	sub	sp, #60	; 0x3c
 801a25e:	4617      	mov	r7, r2
 801a260:	461c      	mov	r4, r3
 801a262:	460e      	mov	r6, r1
 801a264:	b1d1      	cbz	r1, 801a29c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 801a266:	681b      	ldr	r3, [r3, #0]
 801a268:	4620      	mov	r0, r4
 801a26a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a26c:	4798      	blx	r3
 801a26e:	4240      	negs	r0, r0
 801a270:	9603      	str	r6, [sp, #12]
 801a272:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a276:	b200      	sxth	r0, r0
 801a278:	9700      	str	r7, [sp, #0]
 801a27a:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801a27e:	4629      	mov	r1, r5
 801a280:	e9cd 4001 	strd	r4, r0, [sp, #4]
 801a284:	2401      	movs	r4, #1
 801a286:	a805      	add	r0, sp, #20
 801a288:	f7ff fcbe 	bl	8019c08 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 801a28c:	a805      	add	r0, sp, #20
 801a28e:	f7ff fee0 	bl	801a052 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801a292:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801a296:	b163      	cbz	r3, 801a2b2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 801a298:	3401      	adds	r4, #1
 801a29a:	e7f7      	b.n	801a28c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801a29c:	2401      	movs	r4, #1
 801a29e:	f002 fd59 	bl	801cd54 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a2a2:	280a      	cmp	r0, #10
 801a2a4:	4628      	mov	r0, r5
 801a2a6:	bf08      	it	eq
 801a2a8:	3401      	addeq	r4, #1
 801a2aa:	f002 fd53 	bl	801cd54 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a2ae:	2800      	cmp	r0, #0
 801a2b0:	d1f7      	bne.n	801a2a2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 801a2b2:	b2a0      	uxth	r0, r4
 801a2b4:	b00f      	add	sp, #60	; 0x3c
 801a2b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a2b8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801a2b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2bc:	b0e3      	sub	sp, #396	; 0x18c
 801a2be:	461c      	mov	r4, r3
 801a2c0:	4683      	mov	fp, r0
 801a2c2:	4688      	mov	r8, r1
 801a2c4:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
 801a2c6:	2b00      	cmp	r3, #0
 801a2c8:	f000 8112 	beq.w	801a4f0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801a2cc:	6823      	ldr	r3, [r4, #0]
 801a2ce:	2b00      	cmp	r3, #0
 801a2d0:	f000 810e 	beq.w	801a4f0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801a2d4:	7ba3      	ldrb	r3, [r4, #14]
 801a2d6:	2b00      	cmp	r3, #0
 801a2d8:	f000 810a 	beq.w	801a4f0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801a2dc:	ad0a      	add	r5, sp, #40	; 0x28
 801a2de:	6810      	ldr	r0, [r2, #0]
 801a2e0:	6851      	ldr	r1, [r2, #4]
 801a2e2:	462b      	mov	r3, r5
 801a2e4:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 801a2e8:	c303      	stmia	r3!, {r0, r1}
 801a2ea:	2100      	movs	r1, #0
 801a2ec:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801a2f0:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801a2f4:	4628      	mov	r0, r5
 801a2f6:	910c      	str	r1, [sp, #48]	; 0x30
 801a2f8:	a90c      	add	r1, sp, #48	; 0x30
 801a2fa:	79a2      	ldrb	r2, [r4, #6]
 801a2fc:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801a300:	f7ff fd01 	bl	8019d06 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801a304:	a90c      	add	r1, sp, #48	; 0x30
 801a306:	79a2      	ldrb	r2, [r4, #6]
 801a308:	4608      	mov	r0, r1
 801a30a:	f7ff fcfc 	bl	8019d06 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801a30e:	a817      	add	r0, sp, #92	; 0x5c
 801a310:	f002 f8f4 	bl	801c4fc <_ZN8touchgfx12TextProviderC1Ev>
 801a314:	6820      	ldr	r0, [r4, #0]
 801a316:	6803      	ldr	r3, [r0, #0]
 801a318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a31a:	4798      	blx	r3
 801a31c:	4606      	mov	r6, r0
 801a31e:	6820      	ldr	r0, [r4, #0]
 801a320:	6803      	ldr	r3, [r0, #0]
 801a322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a324:	4798      	blx	r3
 801a326:	4633      	mov	r3, r6
 801a328:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 801a32a:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 801a32c:	9000      	str	r0, [sp, #0]
 801a32e:	a817      	add	r0, sp, #92	; 0x5c
 801a330:	f002 f93f 	bl	801c5b2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a334:	6820      	ldr	r0, [r4, #0]
 801a336:	f894 a004 	ldrb.w	sl, [r4, #4]
 801a33a:	6803      	ldr	r3, [r0, #0]
 801a33c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a33e:	4798      	blx	r3
 801a340:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 801a344:	6823      	ldr	r3, [r4, #0]
 801a346:	4607      	mov	r7, r0
 801a348:	4406      	add	r6, r0
 801a34a:	a830      	add	r0, sp, #192	; 0xc0
 801a34c:	f893 9009 	ldrb.w	r9, [r3, #9]
 801a350:	f002 f8d4 	bl	801c4fc <_ZN8touchgfx12TextProviderC1Ev>
 801a354:	7c23      	ldrb	r3, [r4, #16]
 801a356:	b17b      	cbz	r3, 801a378 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 801a358:	6820      	ldr	r0, [r4, #0]
 801a35a:	6803      	ldr	r3, [r0, #0]
 801a35c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a35e:	4798      	blx	r3
 801a360:	9009      	str	r0, [sp, #36]	; 0x24
 801a362:	6820      	ldr	r0, [r4, #0]
 801a364:	6802      	ldr	r2, [r0, #0]
 801a366:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801a368:	4790      	blx	r2
 801a36a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a36c:	9000      	str	r0, [sp, #0]
 801a36e:	a830      	add	r0, sp, #192	; 0xc0
 801a370:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 801a372:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 801a374:	f002 f91d 	bl	801c5b2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a378:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801a37c:	a80e      	add	r0, sp, #56	; 0x38
 801a37e:	7be2      	ldrb	r2, [r4, #15]
 801a380:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 801a384:	1a8a      	subs	r2, r1, r2
 801a386:	7c21      	ldrb	r1, [r4, #16]
 801a388:	9103      	str	r1, [sp, #12]
 801a38a:	b292      	uxth	r2, r2
 801a38c:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 801a390:	9102      	str	r1, [sp, #8]
 801a392:	6821      	ldr	r1, [r4, #0]
 801a394:	9101      	str	r1, [sp, #4]
 801a396:	7961      	ldrb	r1, [r4, #5]
 801a398:	9100      	str	r1, [sp, #0]
 801a39a:	a930      	add	r1, sp, #192	; 0xc0
 801a39c:	f7ff fc34 	bl	8019c08 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 801a3a0:	2e00      	cmp	r6, #0
 801a3a2:	dc5b      	bgt.n	801a45c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 801a3a4:	af17      	add	r7, sp, #92	; 0x5c
 801a3a6:	f04f 0900 	mov.w	r9, #0
 801a3aa:	7c23      	ldrb	r3, [r4, #16]
 801a3ac:	2b00      	cmp	r3, #0
 801a3ae:	f000 80b1 	beq.w	801a514 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801a3b2:	a80e      	add	r0, sp, #56	; 0x38
 801a3b4:	f7ff fe4d 	bl	801a052 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801a3b8:	f1ba 0f00 	cmp.w	sl, #0
 801a3bc:	f000 80a5 	beq.w	801a50a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801a3c0:	7c23      	ldrb	r3, [r4, #16]
 801a3c2:	2264      	movs	r2, #100	; 0x64
 801a3c4:	4639      	mov	r1, r7
 801a3c6:	a849      	add	r0, sp, #292	; 0x124
 801a3c8:	9309      	str	r3, [sp, #36]	; 0x24
 801a3ca:	f00c fe68 	bl	802709e <memcpy>
 801a3ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a3d0:	2b00      	cmp	r3, #0
 801a3d2:	f000 80a7 	beq.w	801a524 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 801a3d6:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 801a3da:	7922      	ldrb	r2, [r4, #4]
 801a3dc:	2a01      	cmp	r2, #1
 801a3de:	f040 808a 	bne.w	801a4f6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 801a3e2:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
 801a3e6:	1ac0      	subs	r0, r0, r3
 801a3e8:	2302      	movs	r3, #2
 801a3ea:	fb90 f0f3 	sdiv	r0, r0, r3
 801a3ee:	b200      	sxth	r0, r0
 801a3f0:	7c23      	ldrb	r3, [r4, #16]
 801a3f2:	2b00      	cmp	r3, #0
 801a3f4:	f000 808b 	beq.w	801a50e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801a3f8:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 801a3fc:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
 801a400:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801a404:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801a408:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801a40c:	2100      	movs	r1, #0
 801a40e:	4410      	add	r0, r2
 801a410:	4642      	mov	r2, r8
 801a412:	b200      	sxth	r0, r0
 801a414:	e9cd 9703 	strd	r9, r7, [sp, #12]
 801a418:	9000      	str	r0, [sp, #0]
 801a41a:	4658      	mov	r0, fp
 801a41c:	e9cd 5401 	strd	r5, r4, [sp, #4]
 801a420:	f7ff fca2 	bl	8019d68 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801a424:	2800      	cmp	r0, #0
 801a426:	d163      	bne.n	801a4f0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801a428:	b2b2      	uxth	r2, r6
 801a42a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801a42e:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 801a432:	4413      	add	r3, r2
 801a434:	1a8a      	subs	r2, r1, r2
 801a436:	b21b      	sxth	r3, r3
 801a438:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 801a43c:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
 801a440:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801a444:	2a00      	cmp	r2, #0
 801a446:	d153      	bne.n	801a4f0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801a448:	6822      	ldr	r2, [r4, #0]
 801a44a:	8869      	ldrh	r1, [r5, #2]
 801a44c:	7a12      	ldrb	r2, [r2, #8]
 801a44e:	1a9b      	subs	r3, r3, r2
 801a450:	88ea      	ldrh	r2, [r5, #6]
 801a452:	440a      	add	r2, r1
 801a454:	b212      	sxth	r2, r2
 801a456:	4293      	cmp	r3, r2
 801a458:	dda7      	ble.n	801a3aa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 801a45a:	e049      	b.n	801a4f0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801a45c:	7c23      	ldrb	r3, [r4, #16]
 801a45e:	444f      	add	r7, r9
 801a460:	b1c3      	cbz	r3, 801a494 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 801a462:	f64f 79ff 	movw	r9, #65535	; 0xffff
 801a466:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801a46a:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801a46e:	443b      	add	r3, r7
 801a470:	4293      	cmp	r3, r2
 801a472:	da97      	bge.n	801a3a4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 801a474:	a80e      	add	r0, sp, #56	; 0x38
 801a476:	f7ff fdec 	bl	801a052 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801a47a:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 801a47e:	3b01      	subs	r3, #1
 801a480:	b29b      	uxth	r3, r3
 801a482:	454b      	cmp	r3, r9
 801a484:	9309      	str	r3, [sp, #36]	; 0x24
 801a486:	d021      	beq.n	801a4cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 801a488:	7961      	ldrb	r1, [r4, #5]
 801a48a:	a817      	add	r0, sp, #92	; 0x5c
 801a48c:	f7eb fb94 	bl	8005bb8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a490:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a492:	e7f4      	b.n	801a47e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 801a494:	fa1f f986 	uxth.w	r9, r6
 801a498:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801a49c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801a4a0:	443b      	add	r3, r7
 801a4a2:	4293      	cmp	r3, r2
 801a4a4:	f6bf af7e 	bge.w	801a3a4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 801a4a8:	a817      	add	r0, sp, #92	; 0x5c
 801a4aa:	f002 fc53 	bl	801cd54 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a4ae:	b1f8      	cbz	r0, 801a4f0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801a4b0:	280a      	cmp	r0, #10
 801a4b2:	d1f1      	bne.n	801a498 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 801a4b4:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801a4b8:	444b      	add	r3, r9
 801a4ba:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801a4be:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 801a4c2:	eba3 0309 	sub.w	r3, r3, r9
 801a4c6:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801a4ca:	e7e5      	b.n	801a498 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 801a4cc:	b2b3      	uxth	r3, r6
 801a4ce:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801a4d2:	441a      	add	r2, r3
 801a4d4:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 801a4d8:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 801a4dc:	1ad3      	subs	r3, r2, r3
 801a4de:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801a4e2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801a4e6:	b11b      	cbz	r3, 801a4f0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801a4e8:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
 801a4ec:	2b00      	cmp	r3, #0
 801a4ee:	d0ba      	beq.n	801a466 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 801a4f0:	b063      	add	sp, #396	; 0x18c
 801a4f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4f6:	2a02      	cmp	r2, #2
 801a4f8:	d105      	bne.n	801a506 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 801a4fa:	7be2      	ldrb	r2, [r4, #15]
 801a4fc:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801a500:	1a80      	subs	r0, r0, r2
 801a502:	1ac0      	subs	r0, r0, r3
 801a504:	e773      	b.n	801a3ee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 801a506:	2000      	movs	r0, #0
 801a508:	e772      	b.n	801a3f0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801a50a:	7be0      	ldrb	r0, [r4, #15]
 801a50c:	e770      	b.n	801a3f0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801a50e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a512:	e773      	b.n	801a3fc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 801a514:	f1ba 0f00 	cmp.w	sl, #0
 801a518:	d0f7      	beq.n	801a50a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801a51a:	2264      	movs	r2, #100	; 0x64
 801a51c:	4639      	mov	r1, r7
 801a51e:	a849      	add	r0, sp, #292	; 0x124
 801a520:	f00c fdbd 	bl	802709e <memcpy>
 801a524:	2300      	movs	r3, #0
 801a526:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a52a:	6821      	ldr	r1, [r4, #0]
 801a52c:	a849      	add	r0, sp, #292	; 0x124
 801a52e:	f7ff fbae 	bl	8019c8e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801a532:	b203      	sxth	r3, r0
 801a534:	e751      	b.n	801a3da <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

0801a536 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801a536:	2b03      	cmp	r3, #3
 801a538:	d818      	bhi.n	801a56c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 801a53a:	e8df f003 	tbb	[pc, r3]
 801a53e:	0602      	.short	0x0602
 801a540:	130d      	.short	0x130d
 801a542:	f9b0 2000 	ldrsh.w	r2, [r0]
 801a546:	1850      	adds	r0, r2, r1
 801a548:	4770      	bx	lr
 801a54a:	8803      	ldrh	r3, [r0, #0]
 801a54c:	8880      	ldrh	r0, [r0, #4]
 801a54e:	4418      	add	r0, r3
 801a550:	b200      	sxth	r0, r0
 801a552:	1a80      	subs	r0, r0, r2
 801a554:	3801      	subs	r0, #1
 801a556:	4770      	bx	lr
 801a558:	8803      	ldrh	r3, [r0, #0]
 801a55a:	8880      	ldrh	r0, [r0, #4]
 801a55c:	4418      	add	r0, r3
 801a55e:	b200      	sxth	r0, r0
 801a560:	1a40      	subs	r0, r0, r1
 801a562:	e7f7      	b.n	801a554 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801a564:	f9b0 0000 	ldrsh.w	r0, [r0]
 801a568:	4410      	add	r0, r2
 801a56a:	4770      	bx	lr
 801a56c:	2000      	movs	r0, #0
 801a56e:	4770      	bx	lr

0801a570 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801a570:	2b03      	cmp	r3, #3
 801a572:	d817      	bhi.n	801a5a4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 801a574:	e8df f003 	tbb	[pc, r3]
 801a578:	10090602 	.word	0x10090602
 801a57c:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801a580:	1850      	adds	r0, r2, r1
 801a582:	4770      	bx	lr
 801a584:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801a588:	e7fa      	b.n	801a580 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 801a58a:	8843      	ldrh	r3, [r0, #2]
 801a58c:	88c0      	ldrh	r0, [r0, #6]
 801a58e:	4418      	add	r0, r3
 801a590:	b200      	sxth	r0, r0
 801a592:	1a80      	subs	r0, r0, r2
 801a594:	3801      	subs	r0, #1
 801a596:	4770      	bx	lr
 801a598:	8843      	ldrh	r3, [r0, #2]
 801a59a:	88c0      	ldrh	r0, [r0, #6]
 801a59c:	4418      	add	r0, r3
 801a59e:	b200      	sxth	r0, r0
 801a5a0:	1a40      	subs	r0, r0, r1
 801a5a2:	e7f7      	b.n	801a594 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801a5a4:	2000      	movs	r0, #0
 801a5a6:	4770      	bx	lr

0801a5a8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801a5a8:	4b01      	ldr	r3, [pc, #4]	; (801a5b0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801a5aa:	2200      	movs	r2, #0
 801a5ac:	601a      	str	r2, [r3, #0]
 801a5ae:	4770      	bx	lr
 801a5b0:	24006d40 	.word	0x24006d40

0801a5b4 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801a5b4:	4603      	mov	r3, r0
 801a5b6:	b1c8      	cbz	r0, 801a5ec <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801a5b8:	0c02      	lsrs	r2, r0, #16
 801a5ba:	0412      	lsls	r2, r2, #16
 801a5bc:	b9a2      	cbnz	r2, 801a5e8 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801a5be:	0403      	lsls	r3, r0, #16
 801a5c0:	2010      	movs	r0, #16
 801a5c2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801a5c6:	bf04      	itt	eq
 801a5c8:	021b      	lsleq	r3, r3, #8
 801a5ca:	3008      	addeq	r0, #8
 801a5cc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801a5d0:	bf04      	itt	eq
 801a5d2:	011b      	lsleq	r3, r3, #4
 801a5d4:	3004      	addeq	r0, #4
 801a5d6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801a5da:	bf04      	itt	eq
 801a5dc:	009b      	lsleq	r3, r3, #2
 801a5de:	3002      	addeq	r0, #2
 801a5e0:	2b00      	cmp	r3, #0
 801a5e2:	db04      	blt.n	801a5ee <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801a5e4:	3001      	adds	r0, #1
 801a5e6:	4770      	bx	lr
 801a5e8:	2000      	movs	r0, #0
 801a5ea:	e7ea      	b.n	801a5c2 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801a5ec:	2020      	movs	r0, #32
 801a5ee:	4770      	bx	lr

0801a5f0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801a5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5f4:	b087      	sub	sp, #28
 801a5f6:	460d      	mov	r5, r1
 801a5f8:	4616      	mov	r6, r2
 801a5fa:	4698      	mov	r8, r3
 801a5fc:	4601      	mov	r1, r0
 801a5fe:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801a602:	b120      	cbz	r0, 801a60e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801a604:	b11a      	cbz	r2, 801a60e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801a606:	2d1f      	cmp	r5, #31
 801a608:	d801      	bhi.n	801a60e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801a60a:	2b1f      	cmp	r3, #31
 801a60c:	d904      	bls.n	801a618 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 801a60e:	2000      	movs	r0, #0
 801a610:	6038      	str	r0, [r7, #0]
 801a612:	b007      	add	sp, #28
 801a614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a618:	b97d      	cbnz	r5, 801a63a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 801a61a:	b143      	cbz	r3, 801a62e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 801a61c:	4602      	mov	r2, r0
 801a61e:	462b      	mov	r3, r5
 801a620:	4641      	mov	r1, r8
 801a622:	4630      	mov	r0, r6
 801a624:	e9cd 4700 	strd	r4, r7, [sp]
 801a628:	f7ff ffe2 	bl	801a5f0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801a62c:	e7f1      	b.n	801a612 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801a62e:	f04f 33ff 	mov.w	r3, #4294967295
 801a632:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801a636:	603b      	str	r3, [r7, #0]
 801a638:	e7eb      	b.n	801a612 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801a63a:	fa32 fa05 	lsrs.w	sl, r2, r5
 801a63e:	d106      	bne.n	801a64e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 801a640:	4346      	muls	r6, r0
 801a642:	fbb6 f0f4 	udiv	r0, r6, r4
 801a646:	fb04 6610 	mls	r6, r4, r0, r6
 801a64a:	603e      	str	r6, [r7, #0]
 801a64c:	e7e1      	b.n	801a612 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801a64e:	2201      	movs	r2, #1
 801a650:	fa00 fb05 	lsl.w	fp, r0, r5
 801a654:	40aa      	lsls	r2, r5
 801a656:	fbbb f9f4 	udiv	r9, fp, r4
 801a65a:	3a01      	subs	r2, #1
 801a65c:	fb0a f309 	mul.w	r3, sl, r9
 801a660:	fb04 b919 	mls	r9, r4, r9, fp
 801a664:	4016      	ands	r6, r2
 801a666:	9303      	str	r3, [sp, #12]
 801a668:	4630      	mov	r0, r6
 801a66a:	f7ff ffa3 	bl	801a5b4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801a66e:	462b      	mov	r3, r5
 801a670:	460a      	mov	r2, r1
 801a672:	4601      	mov	r1, r0
 801a674:	4630      	mov	r0, r6
 801a676:	e9cd 4700 	strd	r4, r7, [sp]
 801a67a:	f7ff ffb9 	bl	801a5f0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801a67e:	4606      	mov	r6, r0
 801a680:	4648      	mov	r0, r9
 801a682:	eb05 0108 	add.w	r1, r5, r8
 801a686:	f7ff ff95 	bl	801a5b4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801a68a:	ab05      	add	r3, sp, #20
 801a68c:	464a      	mov	r2, r9
 801a68e:	e9cd 4300 	strd	r4, r3, [sp]
 801a692:	4603      	mov	r3, r0
 801a694:	4650      	mov	r0, sl
 801a696:	f7ff ffab 	bl	801a5f0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801a69a:	6839      	ldr	r1, [r7, #0]
 801a69c:	9a05      	ldr	r2, [sp, #20]
 801a69e:	9b03      	ldr	r3, [sp, #12]
 801a6a0:	4411      	add	r1, r2
 801a6a2:	fbb1 f2f4 	udiv	r2, r1, r4
 801a6a6:	18d3      	adds	r3, r2, r3
 801a6a8:	fb04 1412 	mls	r4, r4, r2, r1
 801a6ac:	441e      	add	r6, r3
 801a6ae:	603c      	str	r4, [r7, #0]
 801a6b0:	4430      	add	r0, r6
 801a6b2:	e7ae      	b.n	801a612 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

0801a6b4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801a6b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a6b8:	b085      	sub	sp, #20
 801a6ba:	f1b0 0900 	subs.w	r9, r0, #0
 801a6be:	461d      	mov	r5, r3
 801a6c0:	4617      	mov	r7, r2
 801a6c2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a6c4:	bfbb      	ittet	lt
 801a6c6:	f1c9 0900 	rsblt	r9, r9, #0
 801a6ca:	f04f 36ff 	movlt.w	r6, #4294967295
 801a6ce:	2601      	movge	r6, #1
 801a6d0:	6823      	ldrlt	r3, [r4, #0]
 801a6d2:	bfbc      	itt	lt
 801a6d4:	425b      	neglt	r3, r3
 801a6d6:	6023      	strlt	r3, [r4, #0]
 801a6d8:	2a00      	cmp	r2, #0
 801a6da:	da04      	bge.n	801a6e6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801a6dc:	6823      	ldr	r3, [r4, #0]
 801a6de:	4257      	negs	r7, r2
 801a6e0:	4276      	negs	r6, r6
 801a6e2:	425b      	negs	r3, r3
 801a6e4:	6023      	str	r3, [r4, #0]
 801a6e6:	2d00      	cmp	r5, #0
 801a6e8:	4638      	mov	r0, r7
 801a6ea:	bfba      	itte	lt
 801a6ec:	426d      	neglt	r5, r5
 801a6ee:	f04f 38ff 	movlt.w	r8, #4294967295
 801a6f2:	f04f 0801 	movge.w	r8, #1
 801a6f6:	f7ff ff5d 	bl	801a5b4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801a6fa:	ab03      	add	r3, sp, #12
 801a6fc:	463a      	mov	r2, r7
 801a6fe:	e9cd 5300 	strd	r5, r3, [sp]
 801a702:	4603      	mov	r3, r0
 801a704:	4648      	mov	r0, r9
 801a706:	f7ff ff73 	bl	801a5f0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801a70a:	6823      	ldr	r3, [r4, #0]
 801a70c:	9a03      	ldr	r2, [sp, #12]
 801a70e:	4546      	cmp	r6, r8
 801a710:	441a      	add	r2, r3
 801a712:	fb92 f3f5 	sdiv	r3, r2, r5
 801a716:	4418      	add	r0, r3
 801a718:	fb05 2313 	mls	r3, r5, r3, r2
 801a71c:	bf18      	it	ne
 801a71e:	4240      	negne	r0, r0
 801a720:	1c72      	adds	r2, r6, #1
 801a722:	6023      	str	r3, [r4, #0]
 801a724:	d105      	bne.n	801a732 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801a726:	2b00      	cmp	r3, #0
 801a728:	f1c3 0200 	rsb	r2, r3, #0
 801a72c:	db0b      	blt.n	801a746 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801a72e:	6022      	str	r2, [r4, #0]
 801a730:	e006      	b.n	801a740 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801a732:	2e01      	cmp	r6, #1
 801a734:	d104      	bne.n	801a740 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801a736:	2b00      	cmp	r3, #0
 801a738:	da02      	bge.n	801a740 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801a73a:	442b      	add	r3, r5
 801a73c:	3801      	subs	r0, #1
 801a73e:	6023      	str	r3, [r4, #0]
 801a740:	b005      	add	sp, #20
 801a742:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a746:	3801      	subs	r0, #1
 801a748:	1b52      	subs	r2, r2, r5
 801a74a:	e7f0      	b.n	801a72e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

0801a74c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801a74c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801a750:	4c1c      	ldr	r4, [pc, #112]	; (801a7c4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801a752:	4605      	mov	r5, r0
 801a754:	6807      	ldr	r7, [r0, #0]
 801a756:	69a3      	ldr	r3, [r4, #24]
 801a758:	b92b      	cbnz	r3, 801a766 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801a75a:	6840      	ldr	r0, [r0, #4]
 801a75c:	e9c5 7000 	strd	r7, r0, [r5]
 801a760:	b004      	add	sp, #16
 801a762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a766:	f04f 0802 	mov.w	r8, #2
 801a76a:	68a2      	ldr	r2, [r4, #8]
 801a76c:	ae04      	add	r6, sp, #16
 801a76e:	6820      	ldr	r0, [r4, #0]
 801a770:	fb93 f1f8 	sdiv	r1, r3, r8
 801a774:	440a      	add	r2, r1
 801a776:	69e1      	ldr	r1, [r4, #28]
 801a778:	f846 2d04 	str.w	r2, [r6, #-4]!
 801a77c:	463a      	mov	r2, r7
 801a77e:	9600      	str	r6, [sp, #0]
 801a780:	f7ff ff98 	bl	801a6b4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a784:	69a3      	ldr	r3, [r4, #24]
 801a786:	4607      	mov	r7, r0
 801a788:	686a      	ldr	r2, [r5, #4]
 801a78a:	6a21      	ldr	r1, [r4, #32]
 801a78c:	9600      	str	r6, [sp, #0]
 801a78e:	6860      	ldr	r0, [r4, #4]
 801a790:	f7ff ff90 	bl	801a6b4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a794:	69a3      	ldr	r3, [r4, #24]
 801a796:	6962      	ldr	r2, [r4, #20]
 801a798:	4407      	add	r7, r0
 801a79a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801a79c:	9600      	str	r6, [sp, #0]
 801a79e:	68e0      	ldr	r0, [r4, #12]
 801a7a0:	fb93 f8f8 	sdiv	r8, r3, r8
 801a7a4:	4442      	add	r2, r8
 801a7a6:	9203      	str	r2, [sp, #12]
 801a7a8:	682a      	ldr	r2, [r5, #0]
 801a7aa:	f7ff ff83 	bl	801a6b4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a7ae:	4680      	mov	r8, r0
 801a7b0:	9600      	str	r6, [sp, #0]
 801a7b2:	69a3      	ldr	r3, [r4, #24]
 801a7b4:	686a      	ldr	r2, [r5, #4]
 801a7b6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801a7b8:	6920      	ldr	r0, [r4, #16]
 801a7ba:	f7ff ff7b 	bl	801a6b4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a7be:	4440      	add	r0, r8
 801a7c0:	e7cc      	b.n	801a75c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801a7c2:	bf00      	nop
 801a7c4:	24006d44 	.word	0x24006d44

0801a7c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801a7c8:	4b07      	ldr	r3, [pc, #28]	; (801a7e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801a7ca:	781b      	ldrb	r3, [r3, #0]
 801a7cc:	2b01      	cmp	r3, #1
 801a7ce:	d109      	bne.n	801a7e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801a7d0:	f9b1 3000 	ldrsh.w	r3, [r1]
 801a7d4:	f9b0 2000 	ldrsh.w	r2, [r0]
 801a7d8:	8003      	strh	r3, [r0, #0]
 801a7da:	4b04      	ldr	r3, [pc, #16]	; (801a7ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801a7dc:	881b      	ldrh	r3, [r3, #0]
 801a7de:	3b01      	subs	r3, #1
 801a7e0:	1a9b      	subs	r3, r3, r2
 801a7e2:	800b      	strh	r3, [r1, #0]
 801a7e4:	4770      	bx	lr
 801a7e6:	bf00      	nop
 801a7e8:	24006d30 	.word	0x24006d30
 801a7ec:	24006d2c 	.word	0x24006d2c

0801a7f0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801a7f0:	4b07      	ldr	r3, [pc, #28]	; (801a810 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801a7f2:	b510      	push	{r4, lr}
 801a7f4:	781b      	ldrb	r3, [r3, #0]
 801a7f6:	2b01      	cmp	r3, #1
 801a7f8:	d108      	bne.n	801a80c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801a7fa:	4b06      	ldr	r3, [pc, #24]	; (801a814 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801a7fc:	880c      	ldrh	r4, [r1, #0]
 801a7fe:	881b      	ldrh	r3, [r3, #0]
 801a800:	f9b0 2000 	ldrsh.w	r2, [r0]
 801a804:	3b01      	subs	r3, #1
 801a806:	1b1b      	subs	r3, r3, r4
 801a808:	8003      	strh	r3, [r0, #0]
 801a80a:	800a      	strh	r2, [r1, #0]
 801a80c:	bd10      	pop	{r4, pc}
 801a80e:	bf00      	nop
 801a810:	24006d30 	.word	0x24006d30
 801a814:	24006d2c 	.word	0x24006d2c

0801a818 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801a818:	4b0a      	ldr	r3, [pc, #40]	; (801a844 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801a81a:	b510      	push	{r4, lr}
 801a81c:	781b      	ldrb	r3, [r3, #0]
 801a81e:	2b01      	cmp	r3, #1
 801a820:	d10e      	bne.n	801a840 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801a822:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801a826:	8843      	ldrh	r3, [r0, #2]
 801a828:	f9b0 4000 	ldrsh.w	r4, [r0]
 801a82c:	18ca      	adds	r2, r1, r3
 801a82e:	4b06      	ldr	r3, [pc, #24]	; (801a848 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801a830:	8044      	strh	r4, [r0, #2]
 801a832:	881b      	ldrh	r3, [r3, #0]
 801a834:	1a9b      	subs	r3, r3, r2
 801a836:	8003      	strh	r3, [r0, #0]
 801a838:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801a83c:	8081      	strh	r1, [r0, #4]
 801a83e:	80c3      	strh	r3, [r0, #6]
 801a840:	bd10      	pop	{r4, pc}
 801a842:	bf00      	nop
 801a844:	24006d30 	.word	0x24006d30
 801a848:	24006d2c 	.word	0x24006d2c

0801a84c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801a84c:	4b08      	ldr	r3, [pc, #32]	; (801a870 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801a84e:	781b      	ldrb	r3, [r3, #0]
 801a850:	2b01      	cmp	r3, #1
 801a852:	d10c      	bne.n	801a86e <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801a854:	8803      	ldrh	r3, [r0, #0]
 801a856:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801a85a:	8842      	ldrh	r2, [r0, #2]
 801a85c:	8002      	strh	r2, [r0, #0]
 801a85e:	185a      	adds	r2, r3, r1
 801a860:	4b04      	ldr	r3, [pc, #16]	; (801a874 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801a862:	881b      	ldrh	r3, [r3, #0]
 801a864:	1a9b      	subs	r3, r3, r2
 801a866:	8043      	strh	r3, [r0, #2]
 801a868:	88c3      	ldrh	r3, [r0, #6]
 801a86a:	80c1      	strh	r1, [r0, #6]
 801a86c:	8083      	strh	r3, [r0, #4]
 801a86e:	4770      	bx	lr
 801a870:	24006d30 	.word	0x24006d30
 801a874:	24006d2c 	.word	0x24006d2c

0801a878 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801a878:	4b07      	ldr	r3, [pc, #28]	; (801a898 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801a87a:	b510      	push	{r4, lr}
 801a87c:	781b      	ldrb	r3, [r3, #0]
 801a87e:	2b01      	cmp	r3, #1
 801a880:	d108      	bne.n	801a894 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801a882:	f9b1 3000 	ldrsh.w	r3, [r1]
 801a886:	f9b0 4000 	ldrsh.w	r4, [r0]
 801a88a:	8003      	strh	r3, [r0, #0]
 801a88c:	8893      	ldrh	r3, [r2, #4]
 801a88e:	3b01      	subs	r3, #1
 801a890:	1b1b      	subs	r3, r3, r4
 801a892:	800b      	strh	r3, [r1, #0]
 801a894:	bd10      	pop	{r4, pc}
 801a896:	bf00      	nop
 801a898:	24006d30 	.word	0x24006d30

0801a89c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801a89c:	4b0a      	ldr	r3, [pc, #40]	; (801a8c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801a89e:	460a      	mov	r2, r1
 801a8a0:	b510      	push	{r4, lr}
 801a8a2:	781b      	ldrb	r3, [r3, #0]
 801a8a4:	2b01      	cmp	r3, #1
 801a8a6:	d10d      	bne.n	801a8c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801a8a8:	8881      	ldrh	r1, [r0, #4]
 801a8aa:	8803      	ldrh	r3, [r0, #0]
 801a8ac:	440b      	add	r3, r1
 801a8ae:	4601      	mov	r1, r0
 801a8b0:	3b01      	subs	r3, #1
 801a8b2:	f821 3b02 	strh.w	r3, [r1], #2
 801a8b6:	f7ff ffdf 	bl	801a878 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801a8ba:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801a8be:	88c2      	ldrh	r2, [r0, #6]
 801a8c0:	80c3      	strh	r3, [r0, #6]
 801a8c2:	8082      	strh	r2, [r0, #4]
 801a8c4:	bd10      	pop	{r4, pc}
 801a8c6:	bf00      	nop
 801a8c8:	24006d30 	.word	0x24006d30

0801a8cc <_ZN8touchgfx11Application13requestRedrawEv>:
 801a8cc:	4b06      	ldr	r3, [pc, #24]	; (801a8e8 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801a8ce:	2100      	movs	r1, #0
 801a8d0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a8d4:	4b05      	ldr	r3, [pc, #20]	; (801a8ec <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801a8d6:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 801a8da:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a8de:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
 801a8e2:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
 801a8e6:	4770      	bx	lr
 801a8e8:	24006d2c 	.word	0x24006d2c
 801a8ec:	24006d2e 	.word	0x24006d2e

0801a8f0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801a8f0:	4b03      	ldr	r3, [pc, #12]	; (801a900 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801a8f2:	6818      	ldr	r0, [r3, #0]
 801a8f4:	b110      	cbz	r0, 801a8fc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801a8f6:	6803      	ldr	r3, [r0, #0]
 801a8f8:	699b      	ldr	r3, [r3, #24]
 801a8fa:	4718      	bx	r3
 801a8fc:	4770      	bx	lr
 801a8fe:	bf00      	nop
 801a900:	24006d74 	.word	0x24006d74

0801a904 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801a904:	4770      	bx	lr
	...

0801a908 <_ZN8touchgfx11Application4drawEv>:
 801a908:	4b09      	ldr	r3, [pc, #36]	; (801a930 <_ZN8touchgfx11Application4drawEv+0x28>)
 801a90a:	b507      	push	{r0, r1, r2, lr}
 801a90c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a910:	2100      	movs	r1, #0
 801a912:	4b08      	ldr	r3, [pc, #32]	; (801a934 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801a914:	9100      	str	r1, [sp, #0]
 801a916:	4669      	mov	r1, sp
 801a918:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a91c:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a920:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a924:	6803      	ldr	r3, [r0, #0]
 801a926:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a928:	4798      	blx	r3
 801a92a:	b003      	add	sp, #12
 801a92c:	f85d fb04 	ldr.w	pc, [sp], #4
 801a930:	24006d2c 	.word	0x24006d2c
 801a934:	24006d2e 	.word	0x24006d2e

0801a938 <_ZN8touchgfx11Application10invalidateEv>:
 801a938:	4b09      	ldr	r3, [pc, #36]	; (801a960 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 801a93a:	b082      	sub	sp, #8
 801a93c:	2100      	movs	r1, #0
 801a93e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a942:	4b08      	ldr	r3, [pc, #32]	; (801a964 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 801a944:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a948:	aa02      	add	r2, sp, #8
 801a94a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a94e:	9100      	str	r1, [sp, #0]
 801a950:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a954:	6803      	ldr	r3, [r0, #0]
 801a956:	e912 0006 	ldmdb	r2, {r1, r2}
 801a95a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a95c:	b002      	add	sp, #8
 801a95e:	4718      	bx	r3
 801a960:	24006d2c 	.word	0x24006d2c
 801a964:	24006d2e 	.word	0x24006d2e

0801a968 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801a968:	4b03      	ldr	r3, [pc, #12]	; (801a978 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801a96a:	6818      	ldr	r0, [r3, #0]
 801a96c:	b110      	cbz	r0, 801a974 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801a96e:	6803      	ldr	r3, [r0, #0]
 801a970:	69db      	ldr	r3, [r3, #28]
 801a972:	4718      	bx	r3
 801a974:	4770      	bx	lr
 801a976:	bf00      	nop
 801a978:	24006d74 	.word	0x24006d74

0801a97c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801a97c:	4b03      	ldr	r3, [pc, #12]	; (801a98c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801a97e:	6818      	ldr	r0, [r3, #0]
 801a980:	b110      	cbz	r0, 801a988 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801a982:	6803      	ldr	r3, [r0, #0]
 801a984:	6a1b      	ldr	r3, [r3, #32]
 801a986:	4718      	bx	r3
 801a988:	4770      	bx	lr
 801a98a:	bf00      	nop
 801a98c:	24006d74 	.word	0x24006d74

0801a990 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 801a990:	2300      	movs	r3, #0
 801a992:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
 801a996:	4770      	bx	lr

0801a998 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801a998:	4b03      	ldr	r3, [pc, #12]	; (801a9a8 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801a99a:	6818      	ldr	r0, [r3, #0]
 801a99c:	b110      	cbz	r0, 801a9a4 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801a99e:	6803      	ldr	r3, [r0, #0]
 801a9a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a9a2:	4718      	bx	r3
 801a9a4:	4770      	bx	lr
 801a9a6:	bf00      	nop
 801a9a8:	24006d74 	.word	0x24006d74

0801a9ac <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801a9ac:	b510      	push	{r4, lr}
 801a9ae:	f9b1 4000 	ldrsh.w	r4, [r1]
 801a9b2:	888a      	ldrh	r2, [r1, #4]
 801a9b4:	f9b0 3000 	ldrsh.w	r3, [r0]
 801a9b8:	4422      	add	r2, r4
 801a9ba:	b212      	sxth	r2, r2
 801a9bc:	4293      	cmp	r3, r2
 801a9be:	da15      	bge.n	801a9ec <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801a9c0:	8882      	ldrh	r2, [r0, #4]
 801a9c2:	4413      	add	r3, r2
 801a9c4:	b21b      	sxth	r3, r3
 801a9c6:	429c      	cmp	r4, r3
 801a9c8:	da10      	bge.n	801a9ec <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801a9ca:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801a9ce:	88c9      	ldrh	r1, [r1, #6]
 801a9d0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801a9d4:	4419      	add	r1, r3
 801a9d6:	b209      	sxth	r1, r1
 801a9d8:	428a      	cmp	r2, r1
 801a9da:	da07      	bge.n	801a9ec <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801a9dc:	88c0      	ldrh	r0, [r0, #6]
 801a9de:	4410      	add	r0, r2
 801a9e0:	b200      	sxth	r0, r0
 801a9e2:	4283      	cmp	r3, r0
 801a9e4:	bfac      	ite	ge
 801a9e6:	2000      	movge	r0, #0
 801a9e8:	2001      	movlt	r0, #1
 801a9ea:	bd10      	pop	{r4, pc}
 801a9ec:	2000      	movs	r0, #0
 801a9ee:	e7fc      	b.n	801a9ea <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801a9f0 <_ZN8touchgfx4Rect10restrictToEss>:
 801a9f0:	f9b0 3000 	ldrsh.w	r3, [r0]
 801a9f4:	2b00      	cmp	r3, #0
 801a9f6:	b510      	push	{r4, lr}
 801a9f8:	da04      	bge.n	801aa04 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 801a9fa:	8884      	ldrh	r4, [r0, #4]
 801a9fc:	4423      	add	r3, r4
 801a9fe:	8083      	strh	r3, [r0, #4]
 801aa00:	2300      	movs	r3, #0
 801aa02:	8003      	strh	r3, [r0, #0]
 801aa04:	f9b0 4000 	ldrsh.w	r4, [r0]
 801aa08:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801aa0c:	1b09      	subs	r1, r1, r4
 801aa0e:	428b      	cmp	r3, r1
 801aa10:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801aa14:	bfc8      	it	gt
 801aa16:	8081      	strhgt	r1, [r0, #4]
 801aa18:	2b00      	cmp	r3, #0
 801aa1a:	da04      	bge.n	801aa26 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 801aa1c:	88c1      	ldrh	r1, [r0, #6]
 801aa1e:	440b      	add	r3, r1
 801aa20:	80c3      	strh	r3, [r0, #6]
 801aa22:	2300      	movs	r3, #0
 801aa24:	8043      	strh	r3, [r0, #2]
 801aa26:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801aa2a:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801aa2e:	1a52      	subs	r2, r2, r1
 801aa30:	4293      	cmp	r3, r2
 801aa32:	bfc8      	it	gt
 801aa34:	80c2      	strhgt	r2, [r0, #6]
 801aa36:	bd10      	pop	{r4, pc}

0801aa38 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801aa38:	4b10      	ldr	r3, [pc, #64]	; (801aa7c <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801aa3a:	b510      	push	{r4, lr}
 801aa3c:	460c      	mov	r4, r1
 801aa3e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801aa42:	4b0f      	ldr	r3, [pc, #60]	; (801aa80 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 801aa44:	4620      	mov	r0, r4
 801aa46:	f9b3 1000 	ldrsh.w	r1, [r3]
 801aa4a:	f7ff ffd1 	bl	801a9f0 <_ZN8touchgfx4Rect10restrictToEss>
 801aa4e:	4b0d      	ldr	r3, [pc, #52]	; (801aa84 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 801aa50:	6818      	ldr	r0, [r3, #0]
 801aa52:	b190      	cbz	r0, 801aa7a <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 801aa54:	6803      	ldr	r3, [r0, #0]
 801aa56:	4621      	mov	r1, r4
 801aa58:	689b      	ldr	r3, [r3, #8]
 801aa5a:	4798      	blx	r3
 801aa5c:	4b0a      	ldr	r3, [pc, #40]	; (801aa88 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801aa5e:	6818      	ldr	r0, [r3, #0]
 801aa60:	b118      	cbz	r0, 801aa6a <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801aa62:	6803      	ldr	r3, [r0, #0]
 801aa64:	4621      	mov	r1, r4
 801aa66:	689b      	ldr	r3, [r3, #8]
 801aa68:	4798      	blx	r3
 801aa6a:	4b08      	ldr	r3, [pc, #32]	; (801aa8c <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 801aa6c:	4621      	mov	r1, r4
 801aa6e:	6818      	ldr	r0, [r3, #0]
 801aa70:	6803      	ldr	r3, [r0, #0]
 801aa72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aa76:	69db      	ldr	r3, [r3, #28]
 801aa78:	4718      	bx	r3
 801aa7a:	bd10      	pop	{r4, pc}
 801aa7c:	24006d2e 	.word	0x24006d2e
 801aa80:	24006d2c 	.word	0x24006d2c
 801aa84:	24006d74 	.word	0x24006d74
 801aa88:	24006d70 	.word	0x24006d70
 801aa8c:	24006d38 	.word	0x24006d38

0801aa90 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801aa90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aa92:	4606      	mov	r6, r0
 801aa94:	4608      	mov	r0, r1
 801aa96:	460f      	mov	r7, r1
 801aa98:	f7fc ffc7 	bl	8017a2a <_ZNK8touchgfx4Rect7isEmptyEv>
 801aa9c:	b9e8      	cbnz	r0, 801aada <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801aa9e:	f9b7 5000 	ldrsh.w	r5, [r7]
 801aaa2:	f9b6 4000 	ldrsh.w	r4, [r6]
 801aaa6:	42a5      	cmp	r5, r4
 801aaa8:	db17      	blt.n	801aada <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801aaaa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801aaae:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801aab2:	429a      	cmp	r2, r3
 801aab4:	db11      	blt.n	801aada <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801aab6:	88b9      	ldrh	r1, [r7, #4]
 801aab8:	440d      	add	r5, r1
 801aaba:	88b1      	ldrh	r1, [r6, #4]
 801aabc:	440c      	add	r4, r1
 801aabe:	b22d      	sxth	r5, r5
 801aac0:	b224      	sxth	r4, r4
 801aac2:	42a5      	cmp	r5, r4
 801aac4:	dc09      	bgt.n	801aada <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801aac6:	88f8      	ldrh	r0, [r7, #6]
 801aac8:	4410      	add	r0, r2
 801aaca:	88f2      	ldrh	r2, [r6, #6]
 801aacc:	4413      	add	r3, r2
 801aace:	b200      	sxth	r0, r0
 801aad0:	b21b      	sxth	r3, r3
 801aad2:	4298      	cmp	r0, r3
 801aad4:	bfcc      	ite	gt
 801aad6:	2000      	movgt	r0, #0
 801aad8:	2001      	movle	r0, #1
 801aada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801aadc <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801aadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aade:	4604      	mov	r4, r0
 801aae0:	4608      	mov	r0, r1
 801aae2:	460d      	mov	r5, r1
 801aae4:	f7fc ffa1 	bl	8017a2a <_ZNK8touchgfx4Rect7isEmptyEv>
 801aae8:	b978      	cbnz	r0, 801ab0a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801aaea:	4620      	mov	r0, r4
 801aaec:	f7fc ff9d 	bl	8017a2a <_ZNK8touchgfx4Rect7isEmptyEv>
 801aaf0:	f9b5 6000 	ldrsh.w	r6, [r5]
 801aaf4:	b150      	cbz	r0, 801ab0c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801aaf6:	8026      	strh	r6, [r4, #0]
 801aaf8:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801aafc:	8063      	strh	r3, [r4, #2]
 801aafe:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801ab02:	80a3      	strh	r3, [r4, #4]
 801ab04:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801ab08:	80e3      	strh	r3, [r4, #6]
 801ab0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ab0c:	f9b4 1000 	ldrsh.w	r1, [r4]
 801ab10:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801ab14:	42b1      	cmp	r1, r6
 801ab16:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801ab1a:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801ab1e:	460f      	mov	r7, r1
 801ab20:	88ed      	ldrh	r5, [r5, #6]
 801ab22:	bfa8      	it	ge
 801ab24:	4637      	movge	r7, r6
 801ab26:	4293      	cmp	r3, r2
 801ab28:	4618      	mov	r0, r3
 801ab2a:	4466      	add	r6, ip
 801ab2c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801ab30:	bfa8      	it	ge
 801ab32:	4610      	movge	r0, r2
 801ab34:	442a      	add	r2, r5
 801ab36:	88e5      	ldrh	r5, [r4, #6]
 801ab38:	4461      	add	r1, ip
 801ab3a:	b236      	sxth	r6, r6
 801ab3c:	8027      	strh	r7, [r4, #0]
 801ab3e:	442b      	add	r3, r5
 801ab40:	b209      	sxth	r1, r1
 801ab42:	b212      	sxth	r2, r2
 801ab44:	8060      	strh	r0, [r4, #2]
 801ab46:	b21b      	sxth	r3, r3
 801ab48:	428e      	cmp	r6, r1
 801ab4a:	bfac      	ite	ge
 801ab4c:	ebc7 0106 	rsbge	r1, r7, r6
 801ab50:	ebc7 0101 	rsblt	r1, r7, r1
 801ab54:	429a      	cmp	r2, r3
 801ab56:	bfac      	ite	ge
 801ab58:	ebc0 0202 	rsbge	r2, r0, r2
 801ab5c:	ebc0 0203 	rsblt	r2, r0, r3
 801ab60:	80a1      	strh	r1, [r4, #4]
 801ab62:	80e2      	strh	r2, [r4, #6]
 801ab64:	e7d1      	b.n	801ab0a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801ab68 <_ZN8touchgfx11Application11getInstanceEv>:
 801ab68:	4b01      	ldr	r3, [pc, #4]	; (801ab70 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801ab6a:	6818      	ldr	r0, [r3, #0]
 801ab6c:	4770      	bx	lr
 801ab6e:	bf00      	nop
 801ab70:	24006d84 	.word	0x24006d84

0801ab74 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 801ab74:	2300      	movs	r3, #0
 801ab76:	b510      	push	{r4, lr}
 801ab78:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 801ab7c:	4604      	mov	r4, r0
 801ab7e:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 801ab82:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 801ab86:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 801ab8a:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 801ab8e:	429a      	cmp	r2, r3
 801ab90:	d90e      	bls.n	801abb0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 801ab92:	18e2      	adds	r2, r4, r3
 801ab94:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 801ab98:	b122      	cbz	r2, 801aba4 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 801ab9a:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801ab9e:	6803      	ldr	r3, [r0, #0]
 801aba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801aba2:	4798      	blx	r3
 801aba4:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 801aba8:	3301      	adds	r3, #1
 801abaa:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 801abae:	e7ea      	b.n	801ab86 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 801abb0:	bd10      	pop	{r4, pc}

0801abb2 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 801abb2:	2300      	movs	r3, #0
 801abb4:	f100 0284 	add.w	r2, r0, #132	; 0x84
 801abb8:	30a4      	adds	r0, #164	; 0xa4
 801abba:	f820 3c24 	strh.w	r3, [r0, #-36]
 801abbe:	f802 3b01 	strb.w	r3, [r2], #1
 801abc2:	4282      	cmp	r2, r0
 801abc4:	d1fb      	bne.n	801abbe <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 801abc6:	4770      	bx	lr

0801abc8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801abc8:	b570      	push	{r4, r5, r6, lr}
 801abca:	4c0b      	ldr	r4, [pc, #44]	; (801abf8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 801abcc:	4605      	mov	r5, r0
 801abce:	460e      	mov	r6, r1
 801abd0:	6820      	ldr	r0, [r4, #0]
 801abd2:	b110      	cbz	r0, 801abda <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 801abd4:	6803      	ldr	r3, [r0, #0]
 801abd6:	695b      	ldr	r3, [r3, #20]
 801abd8:	4798      	blx	r3
 801abda:	1d28      	adds	r0, r5, #4
 801abdc:	f7ff ffe9 	bl	801abb2 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801abe0:	6026      	str	r6, [r4, #0]
 801abe2:	6833      	ldr	r3, [r6, #0]
 801abe4:	4630      	mov	r0, r6
 801abe6:	68db      	ldr	r3, [r3, #12]
 801abe8:	4798      	blx	r3
 801abea:	682b      	ldr	r3, [r5, #0]
 801abec:	4628      	mov	r0, r5
 801abee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801abf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801abf4:	4718      	bx	r3
 801abf6:	bf00      	nop
 801abf8:	24006d74 	.word	0x24006d74

0801abfc <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 801abfc:	2300      	movs	r3, #0
 801abfe:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
 801ac02:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
 801ac06:	461a      	mov	r2, r3
 801ac08:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ac0a:	461c      	mov	r4, r3
 801ac0c:	461d      	mov	r5, r3
 801ac0e:	459c      	cmp	ip, r3
 801ac10:	dd1a      	ble.n	801ac48 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 801ac12:	18c6      	adds	r6, r0, r3
 801ac14:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
 801ac18:	b16e      	cbz	r6, 801ac36 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 801ac1a:	429a      	cmp	r2, r3
 801ac1c:	d008      	beq.n	801ac30 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 801ac1e:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 801ac22:	fa1f fe82 	uxth.w	lr, r2
 801ac26:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 801ac2a:	1887      	adds	r7, r0, r2
 801ac2c:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
 801ac30:	3201      	adds	r2, #1
 801ac32:	3301      	adds	r3, #1
 801ac34:	e7eb      	b.n	801ac0e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 801ac36:	4299      	cmp	r1, r3
 801ac38:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
 801ac3c:	bfa8      	it	ge
 801ac3e:	3501      	addge	r5, #1
 801ac40:	429e      	cmp	r6, r3
 801ac42:	bfc8      	it	gt
 801ac44:	3401      	addgt	r4, #1
 801ac46:	e7f4      	b.n	801ac32 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 801ac48:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 801ac4c:	1b49      	subs	r1, r1, r5
 801ac4e:	1b1b      	subs	r3, r3, r4
 801ac50:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 801ac54:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 801ac58:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 801ac5c:	4293      	cmp	r3, r2
 801ac5e:	dd03      	ble.n	801ac68 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 801ac60:	3b01      	subs	r3, #1
 801ac62:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 801ac66:	e7f7      	b.n	801ac58 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 801ac68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801ac6c <_ZN8touchgfx11Application15handleTickEventEv>:
 801ac6c:	b570      	push	{r4, r5, r6, lr}
 801ac6e:	4d16      	ldr	r5, [pc, #88]	; (801acc8 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 801ac70:	4604      	mov	r4, r0
 801ac72:	6828      	ldr	r0, [r5, #0]
 801ac74:	b140      	cbz	r0, 801ac88 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801ac76:	7a03      	ldrb	r3, [r0, #8]
 801ac78:	b933      	cbnz	r3, 801ac88 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801ac7a:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 801ac7e:	6803      	ldr	r3, [r0, #0]
 801ac80:	689b      	ldr	r3, [r3, #8]
 801ac82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ac86:	4718      	bx	r3
 801ac88:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 801ac8c:	4e0f      	ldr	r6, [pc, #60]	; (801accc <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 801ac8e:	b973      	cbnz	r3, 801acae <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801ac90:	b168      	cbz	r0, 801acae <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801ac92:	7a03      	ldrb	r3, [r0, #8]
 801ac94:	b15b      	cbz	r3, 801acae <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801ac96:	6830      	ldr	r0, [r6, #0]
 801ac98:	b110      	cbz	r0, 801aca0 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801ac9a:	6803      	ldr	r3, [r0, #0]
 801ac9c:	691b      	ldr	r3, [r3, #16]
 801ac9e:	4798      	blx	r3
 801aca0:	6828      	ldr	r0, [r5, #0]
 801aca2:	6803      	ldr	r3, [r0, #0]
 801aca4:	68db      	ldr	r3, [r3, #12]
 801aca6:	4798      	blx	r3
 801aca8:	2301      	movs	r3, #1
 801acaa:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 801acae:	3404      	adds	r4, #4
 801acb0:	4620      	mov	r0, r4
 801acb2:	f7ff ff5f 	bl	801ab74 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 801acb6:	4620      	mov	r0, r4
 801acb8:	f7ff ffa0 	bl	801abfc <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 801acbc:	6830      	ldr	r0, [r6, #0]
 801acbe:	b110      	cbz	r0, 801acc6 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 801acc0:	6803      	ldr	r3, [r0, #0]
 801acc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801acc4:	e7dd      	b.n	801ac82 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801acc6:	bd70      	pop	{r4, r5, r6, pc}
 801acc8:	24006d78 	.word	0x24006d78
 801accc:	24006d74 	.word	0x24006d74

0801acd0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801acd0:	4603      	mov	r3, r0
 801acd2:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801acd6:	2200      	movs	r2, #0
 801acd8:	801a      	strh	r2, [r3, #0]
 801acda:	3308      	adds	r3, #8
 801acdc:	f823 2c06 	strh.w	r2, [r3, #-6]
 801ace0:	f823 2c04 	strh.w	r2, [r3, #-4]
 801ace4:	f823 2c02 	strh.w	r2, [r3, #-2]
 801ace8:	428b      	cmp	r3, r1
 801acea:	d1f5      	bne.n	801acd8 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801acec:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801acf0:	4770      	bx	lr
	...

0801acf4 <_ZN8touchgfx11ApplicationC1Ev>:
 801acf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801acf6:	4b1d      	ldr	r3, [pc, #116]	; (801ad6c <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801acf8:	4606      	mov	r6, r0
 801acfa:	4604      	mov	r4, r0
 801acfc:	2500      	movs	r5, #0
 801acfe:	f846 3b04 	str.w	r3, [r6], #4
 801ad02:	22a8      	movs	r2, #168	; 0xa8
 801ad04:	2100      	movs	r1, #0
 801ad06:	4630      	mov	r0, r6
 801ad08:	f00c f8f9 	bl	8026efe <memset>
 801ad0c:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
 801ad10:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 801ad14:	4f16      	ldr	r7, [pc, #88]	; (801ad70 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801ad16:	f7ff ffdb 	bl	801acd0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801ad1a:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 801ad1e:	f7ff ffd7 	bl	801acd0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801ad22:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801ad26:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801ad2a:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
 801ad2e:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
 801ad32:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 801ad36:	490f      	ldr	r1, [pc, #60]	; (801ad74 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801ad38:	480f      	ldr	r0, [pc, #60]	; (801ad78 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801ad3a:	f00b fda3 	bl	8026884 <CRC_Lock>
 801ad3e:	4b0f      	ldr	r3, [pc, #60]	; (801ad7c <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 801ad40:	b158      	cbz	r0, 801ad5a <_ZN8touchgfx11ApplicationC1Ev+0x66>
 801ad42:	801d      	strh	r5, [r3, #0]
 801ad44:	2300      	movs	r3, #0
 801ad46:	4a0e      	ldr	r2, [pc, #56]	; (801ad80 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 801ad48:	4630      	mov	r0, r6
 801ad4a:	6013      	str	r3, [r2, #0]
 801ad4c:	4a0d      	ldr	r2, [pc, #52]	; (801ad84 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 801ad4e:	603b      	str	r3, [r7, #0]
 801ad50:	6013      	str	r3, [r2, #0]
 801ad52:	f7ff ff2e 	bl	801abb2 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801ad56:	4620      	mov	r0, r4
 801ad58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ad5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801ad5e:	2002      	movs	r0, #2
 801ad60:	801a      	strh	r2, [r3, #0]
 801ad62:	6038      	str	r0, [r7, #0]
 801ad64:	f001 fa50 	bl	801c208 <_ZN8touchgfx6Screen4drawEv>
 801ad68:	e7ec      	b.n	801ad44 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 801ad6a:	bf00      	nop
 801ad6c:	080292a0 	.word	0x080292a0
 801ad70:	24006d74 	.word	0x24006d74
 801ad74:	b5e8b5cd 	.word	0xb5e8b5cd
 801ad78:	f407a5c2 	.word	0xf407a5c2
 801ad7c:	24000054 	.word	0x24000054
 801ad80:	24006d84 	.word	0x24006d84
 801ad84:	24006d78 	.word	0x24006d78

0801ad88 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801ad88:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801ad8c:	3b01      	subs	r3, #1
 801ad8e:	b29b      	uxth	r3, r3
 801ad90:	428b      	cmp	r3, r1
 801ad92:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801ad96:	b510      	push	{r4, lr}
 801ad98:	d908      	bls.n	801adac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801ad9a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801ad9e:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801ada2:	681a      	ldr	r2, [r3, #0]
 801ada4:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801ada8:	685a      	ldr	r2, [r3, #4]
 801adaa:	6062      	str	r2, [r4, #4]
 801adac:	bd10      	pop	{r4, pc}
	...

0801adb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801adb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801adb4:	b08f      	sub	sp, #60	; 0x3c
 801adb6:	4b8f      	ldr	r3, [pc, #572]	; (801aff4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 801adb8:	4683      	mov	fp, r0
 801adba:	ac0a      	add	r4, sp, #40	; 0x28
 801adbc:	e884 0006 	stmia.w	r4, {r1, r2}
 801adc0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801adc4:	4620      	mov	r0, r4
 801adc6:	4b8c      	ldr	r3, [pc, #560]	; (801aff8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 801adc8:	f9b3 1000 	ldrsh.w	r1, [r3]
 801adcc:	f7ff fe10 	bl	801a9f0 <_ZN8touchgfx4Rect10restrictToEss>
 801add0:	4620      	mov	r0, r4
 801add2:	f7fc fe2a 	bl	8017a2a <_ZNK8touchgfx4Rect7isEmptyEv>
 801add6:	2800      	cmp	r0, #0
 801add8:	d16a      	bne.n	801aeb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801adda:	9403      	str	r4, [sp, #12]
 801addc:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 801ade0:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 801ade4:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 801ade8:	9301      	str	r3, [sp, #4]
 801adea:	35a4      	adds	r5, #164	; 0xa4
 801adec:	b15c      	cbz	r4, 801ae06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801adee:	4629      	mov	r1, r5
 801adf0:	9803      	ldr	r0, [sp, #12]
 801adf2:	f7ff fe4d 	bl	801aa90 <_ZNK8touchgfx4Rect8includesERKS0_>
 801adf6:	3c01      	subs	r4, #1
 801adf8:	b118      	cbz	r0, 801ae02 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 801adfa:	b2a1      	uxth	r1, r4
 801adfc:	9801      	ldr	r0, [sp, #4]
 801adfe:	f7ff ffc3 	bl	801ad88 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801ae02:	3d08      	subs	r5, #8
 801ae04:	e7f2      	b.n	801adec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 801ae06:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	; 0xec
 801ae0a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801ae0e:	f8cd a010 	str.w	sl, [sp, #16]
 801ae12:	9302      	str	r3, [sp, #8]
 801ae14:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801ae18:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 801ae1c:	9306      	str	r3, [sp, #24]
 801ae1e:	445c      	add	r4, fp
 801ae20:	2500      	movs	r5, #0
 801ae22:	4626      	mov	r6, r4
 801ae24:	f8cd a014 	str.w	sl, [sp, #20]
 801ae28:	462f      	mov	r7, r5
 801ae2a:	9b05      	ldr	r3, [sp, #20]
 801ae2c:	2b00      	cmp	r3, #0
 801ae2e:	d073      	beq.n	801af18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801ae30:	9903      	ldr	r1, [sp, #12]
 801ae32:	4630      	mov	r0, r6
 801ae34:	f7ff fdba 	bl	801a9ac <_ZNK8touchgfx4Rect9intersectERKS0_>
 801ae38:	b350      	cbz	r0, 801ae90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801ae3a:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801ae3e:	f9b6 c000 	ldrsh.w	ip, [r6]
 801ae42:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	; 0x2a
 801ae46:	45e6      	cmp	lr, ip
 801ae48:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 801ae4c:	db33      	blt.n	801aeb6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801ae4e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801ae52:	88b3      	ldrh	r3, [r6, #4]
 801ae54:	4472      	add	r2, lr
 801ae56:	4463      	add	r3, ip
 801ae58:	b212      	sxth	r2, r2
 801ae5a:	b21b      	sxth	r3, r3
 801ae5c:	429a      	cmp	r2, r3
 801ae5e:	dc2a      	bgt.n	801aeb6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801ae60:	fa1f f289 	uxth.w	r2, r9
 801ae64:	88f3      	ldrh	r3, [r6, #6]
 801ae66:	45c8      	cmp	r8, r9
 801ae68:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801ae6c:	4413      	add	r3, r2
 801ae6e:	fa1f fc88 	uxth.w	ip, r8
 801ae72:	b29b      	uxth	r3, r3
 801ae74:	fa0f fe83 	sxth.w	lr, r3
 801ae78:	db0f      	blt.n	801ae9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801ae7a:	eba3 030c 	sub.w	r3, r3, ip
 801ae7e:	1ac9      	subs	r1, r1, r3
 801ae80:	b209      	sxth	r1, r1
 801ae82:	2900      	cmp	r1, #0
 801ae84:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801ae88:	dd12      	ble.n	801aeb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801ae8a:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 801ae8e:	4605      	mov	r5, r0
 801ae90:	9b05      	ldr	r3, [sp, #20]
 801ae92:	3e08      	subs	r6, #8
 801ae94:	3b01      	subs	r3, #1
 801ae96:	9305      	str	r3, [sp, #20]
 801ae98:	e7c7      	b.n	801ae2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801ae9a:	4461      	add	r1, ip
 801ae9c:	b209      	sxth	r1, r1
 801ae9e:	4571      	cmp	r1, lr
 801aea0:	dc38      	bgt.n	801af14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801aea2:	eba2 020c 	sub.w	r2, r2, ip
 801aea6:	b212      	sxth	r2, r2
 801aea8:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801aeac:	2a00      	cmp	r2, #0
 801aeae:	dcee      	bgt.n	801ae8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801aeb0:	b00f      	add	sp, #60	; 0x3c
 801aeb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aeb6:	45c8      	cmp	r8, r9
 801aeb8:	db2c      	blt.n	801af14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801aeba:	88f3      	ldrh	r3, [r6, #6]
 801aebc:	4499      	add	r9, r3
 801aebe:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 801aec2:	4498      	add	r8, r3
 801aec4:	fa0f f989 	sxth.w	r9, r9
 801aec8:	fa0f f888 	sxth.w	r8, r8
 801aecc:	45c1      	cmp	r9, r8
 801aece:	db21      	blt.n	801af14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801aed0:	fa1f f28c 	uxth.w	r2, ip
 801aed4:	88b3      	ldrh	r3, [r6, #4]
 801aed6:	45e6      	cmp	lr, ip
 801aed8:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801aedc:	4413      	add	r3, r2
 801aede:	fa1f f88e 	uxth.w	r8, lr
 801aee2:	b29b      	uxth	r3, r3
 801aee4:	fa0f f983 	sxth.w	r9, r3
 801aee8:	db0a      	blt.n	801af00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 801aeea:	eba3 0308 	sub.w	r3, r3, r8
 801aeee:	1ac9      	subs	r1, r1, r3
 801aef0:	b209      	sxth	r1, r1
 801aef2:	2900      	cmp	r1, #0
 801aef4:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 801aef8:	ddda      	ble.n	801aeb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801aefa:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 801aefe:	e7c6      	b.n	801ae8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801af00:	4441      	add	r1, r8
 801af02:	b209      	sxth	r1, r1
 801af04:	4549      	cmp	r1, r9
 801af06:	dc05      	bgt.n	801af14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801af08:	eba2 0208 	sub.w	r2, r2, r8
 801af0c:	b212      	sxth	r2, r2
 801af0e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801af12:	e7cb      	b.n	801aeac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 801af14:	4607      	mov	r7, r0
 801af16:	e7bb      	b.n	801ae90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801af18:	2d00      	cmp	r5, #0
 801af1a:	d181      	bne.n	801ae20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 801af1c:	2f00      	cmp	r7, #0
 801af1e:	f000 81dd 	beq.w	801b2dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801af22:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 801af26:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 801af2a:	b2b3      	uxth	r3, r6
 801af2c:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
 801af30:	9305      	str	r3, [sp, #20]
 801af32:	9a05      	ldr	r2, [sp, #20]
 801af34:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 801af38:	4413      	add	r3, r2
 801af3a:	b2ba      	uxth	r2, r7
 801af3c:	4492      	add	sl, r2
 801af3e:	b29b      	uxth	r3, r3
 801af40:	fa1f fa8a 	uxth.w	sl, sl
 801af44:	fa0f f883 	sxth.w	r8, r3
 801af48:	fa0f f98a 	sxth.w	r9, sl
 801af4c:	e9cd 2307 	strd	r2, r3, [sp, #28]
 801af50:	9b04      	ldr	r3, [sp, #16]
 801af52:	2b00      	cmp	r3, #0
 801af54:	d052      	beq.n	801affc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801af56:	9903      	ldr	r1, [sp, #12]
 801af58:	4620      	mov	r0, r4
 801af5a:	f7ff fd27 	bl	801a9ac <_ZNK8touchgfx4Rect9intersectERKS0_>
 801af5e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801af62:	b1c0      	cbz	r0, 801af96 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801af64:	f9b4 e000 	ldrsh.w	lr, [r4]
 801af68:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801af6c:	4576      	cmp	r6, lr
 801af6e:	dc22      	bgt.n	801afb6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801af70:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801af74:	44f4      	add	ip, lr
 801af76:	fa0f fc8c 	sxth.w	ip, ip
 801af7a:	45e0      	cmp	r8, ip
 801af7c:	db1b      	blt.n	801afb6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801af7e:	428f      	cmp	r7, r1
 801af80:	fa1f fc81 	uxth.w	ip, r1
 801af84:	88e1      	ldrh	r1, [r4, #6]
 801af86:	dc0d      	bgt.n	801afa4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 801af88:	ebaa 0c0c 	sub.w	ip, sl, ip
 801af8c:	f8a4 9002 	strh.w	r9, [r4, #2]
 801af90:	eba1 010c 	sub.w	r1, r1, ip
 801af94:	80e1      	strh	r1, [r4, #6]
 801af96:	4628      	mov	r0, r5
 801af98:	9904      	ldr	r1, [sp, #16]
 801af9a:	3c08      	subs	r4, #8
 801af9c:	4605      	mov	r5, r0
 801af9e:	3901      	subs	r1, #1
 801afa0:	9104      	str	r1, [sp, #16]
 801afa2:	e7d3      	b.n	801af4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 801afa4:	4461      	add	r1, ip
 801afa6:	b209      	sxth	r1, r1
 801afa8:	4549      	cmp	r1, r9
 801afaa:	dcf5      	bgt.n	801af98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801afac:	eba2 0c0c 	sub.w	ip, r2, ip
 801afb0:	f8a4 c006 	strh.w	ip, [r4, #6]
 801afb4:	e7ef      	b.n	801af96 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801afb6:	428f      	cmp	r7, r1
 801afb8:	dcee      	bgt.n	801af98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801afba:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 801afbe:	4461      	add	r1, ip
 801afc0:	b209      	sxth	r1, r1
 801afc2:	4589      	cmp	r9, r1
 801afc4:	dbe8      	blt.n	801af98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801afc6:	4576      	cmp	r6, lr
 801afc8:	fa1f fc8e 	uxth.w	ip, lr
 801afcc:	88a1      	ldrh	r1, [r4, #4]
 801afce:	dc07      	bgt.n	801afe0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 801afd0:	eba3 0c0c 	sub.w	ip, r3, ip
 801afd4:	f8a4 8000 	strh.w	r8, [r4]
 801afd8:	eba1 010c 	sub.w	r1, r1, ip
 801afdc:	80a1      	strh	r1, [r4, #4]
 801afde:	e7da      	b.n	801af96 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801afe0:	4461      	add	r1, ip
 801afe2:	b209      	sxth	r1, r1
 801afe4:	4588      	cmp	r8, r1
 801afe6:	dbd7      	blt.n	801af98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801afe8:	9905      	ldr	r1, [sp, #20]
 801afea:	eba1 0c0c 	sub.w	ip, r1, ip
 801afee:	f8a4 c004 	strh.w	ip, [r4, #4]
 801aff2:	e7d0      	b.n	801af96 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801aff4:	24006d2e 	.word	0x24006d2e
 801aff8:	24006d2c 	.word	0x24006d2c
 801affc:	2d00      	cmp	r5, #0
 801affe:	f000 816d 	beq.w	801b2dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801b002:	9b06      	ldr	r3, [sp, #24]
 801b004:	445b      	add	r3, fp
 801b006:	461c      	mov	r4, r3
 801b008:	9b02      	ldr	r3, [sp, #8]
 801b00a:	3301      	adds	r3, #1
 801b00c:	f000 8166 	beq.w	801b2dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801b010:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
 801b014:	9803      	ldr	r0, [sp, #12]
 801b016:	4629      	mov	r1, r5
 801b018:	f7ff fd3a 	bl	801aa90 <_ZNK8touchgfx4Rect8includesERKS0_>
 801b01c:	b120      	cbz	r0, 801b028 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 801b01e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801b022:	9801      	ldr	r0, [sp, #4]
 801b024:	f7ff feb0 	bl	801ad88 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b028:	9903      	ldr	r1, [sp, #12]
 801b02a:	4628      	mov	r0, r5
 801b02c:	f7ff fcbe 	bl	801a9ac <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b030:	2800      	cmp	r0, #0
 801b032:	f000 809c 	beq.w	801b16e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801b036:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
 801b03a:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 801b03e:	fa1f f189 	uxth.w	r1, r9
 801b042:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801b046:	9309      	str	r3, [sp, #36]	; 0x24
 801b048:	eb01 0c03 	add.w	ip, r1, r3
 801b04c:	b283      	uxth	r3, r0
 801b04e:	4548      	cmp	r0, r9
 801b050:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 801b054:	fa1f fa8c 	uxth.w	sl, ip
 801b058:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801b05c:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
 801b060:	eb03 050c 	add.w	r5, r3, ip
 801b064:	b2ad      	uxth	r5, r5
 801b066:	9505      	str	r5, [sp, #20]
 801b068:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 801b06c:	9504      	str	r5, [sp, #16]
 801b06e:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
 801b072:	f340 8099 	ble.w	801b1a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 801b076:	1a5b      	subs	r3, r3, r1
 801b078:	4596      	cmp	lr, r2
 801b07a:	fa0f f08a 	sxth.w	r0, sl
 801b07e:	b29b      	uxth	r3, r3
 801b080:	b21e      	sxth	r6, r3
 801b082:	dd2e      	ble.n	801b0e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 801b084:	9f02      	ldr	r7, [sp, #8]
 801b086:	fa1f fe8e 	uxth.w	lr, lr
 801b08a:	b292      	uxth	r2, r2
 801b08c:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 801b090:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 801b094:	9f04      	ldr	r7, [sp, #16]
 801b096:	ebae 0102 	sub.w	r1, lr, r2
 801b09a:	44a6      	add	lr, r4
 801b09c:	1a3f      	subs	r7, r7, r0
 801b09e:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
 801b0a2:	b289      	uxth	r1, r1
 801b0a4:	4402      	add	r2, r0
 801b0a6:	fa0f fe8e 	sxth.w	lr, lr
 801b0aa:	b20d      	sxth	r5, r1
 801b0ac:	b212      	sxth	r2, r2
 801b0ae:	436f      	muls	r7, r5
 801b0b0:	ebae 0202 	sub.w	r2, lr, r2
 801b0b4:	4372      	muls	r2, r6
 801b0b6:	4297      	cmp	r7, r2
 801b0b8:	db09      	blt.n	801b0ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 801b0ba:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
 801b0be:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
 801b0c2:	449c      	add	ip, r3
 801b0c4:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801b0c8:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801b0cc:	e686      	b.n	801addc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b0ce:	4421      	add	r1, r4
 801b0d0:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 801b0d4:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
 801b0d8:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801b0dc:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801b0e0:	e67c      	b.n	801addc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b0e2:	9f04      	ldr	r7, [sp, #16]
 801b0e4:	42b8      	cmp	r0, r7
 801b0e6:	da27      	bge.n	801b138 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 801b0e8:	9902      	ldr	r1, [sp, #8]
 801b0ea:	1a3f      	subs	r7, r7, r0
 801b0ec:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
 801b0f0:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 801b0f4:	eb05 010e 	add.w	r1, r5, lr
 801b0f8:	fa1f f881 	uxth.w	r8, r1
 801b0fc:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
 801b100:	4411      	add	r1, r2
 801b102:	fa0f f988 	sxth.w	r9, r8
 801b106:	eba2 020e 	sub.w	r2, r2, lr
 801b10a:	eba1 0108 	sub.w	r1, r1, r8
 801b10e:	4372      	muls	r2, r6
 801b110:	b289      	uxth	r1, r1
 801b112:	fa0f f881 	sxth.w	r8, r1
 801b116:	fb08 f707 	mul.w	r7, r8, r7
 801b11a:	42ba      	cmp	r2, r7
 801b11c:	dc06      	bgt.n	801b12c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 801b11e:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
 801b122:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
 801b126:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
 801b12a:	e7ca      	b.n	801b0c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 801b12c:	4429      	add	r1, r5
 801b12e:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 801b132:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801b136:	e651      	b.n	801addc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b138:	9805      	ldr	r0, [sp, #20]
 801b13a:	2d06      	cmp	r5, #6
 801b13c:	ebaa 0000 	sub.w	r0, sl, r0
 801b140:	b280      	uxth	r0, r0
 801b142:	fa0f fe80 	sxth.w	lr, r0
 801b146:	d817      	bhi.n	801b178 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 801b148:	9b04      	ldr	r3, [sp, #16]
 801b14a:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 801b14e:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 801b152:	1c6b      	adds	r3, r5, #1
 801b154:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
 801b158:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 801b15c:	9b01      	ldr	r3, [sp, #4]
 801b15e:	9801      	ldr	r0, [sp, #4]
 801b160:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801b164:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 801b168:	805a      	strh	r2, [r3, #2]
 801b16a:	809e      	strh	r6, [r3, #4]
 801b16c:	80d9      	strh	r1, [r3, #6]
 801b16e:	9b02      	ldr	r3, [sp, #8]
 801b170:	3c08      	subs	r4, #8
 801b172:	3b01      	subs	r3, #1
 801b174:	9302      	str	r3, [sp, #8]
 801b176:	e747      	b.n	801b008 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 801b178:	9a02      	ldr	r2, [sp, #8]
 801b17a:	45b6      	cmp	lr, r6
 801b17c:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801b180:	db0d      	blt.n	801b19e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801b182:	449c      	add	ip, r3
 801b184:	445a      	add	r2, fp
 801b186:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 801b18a:	fa1f fc8c 	uxth.w	ip, ip
 801b18e:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
 801b192:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801b196:	448c      	add	ip, r1
 801b198:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
 801b19c:	e61e      	b.n	801addc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b19e:	445a      	add	r2, fp
 801b1a0:	4484      	add	ip, r0
 801b1a2:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
 801b1a6:	e78f      	b.n	801b0c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801b1a8:	fa1f f18e 	uxth.w	r1, lr
 801b1ac:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 801b1b0:	b293      	uxth	r3, r2
 801b1b2:	4596      	cmp	lr, r2
 801b1b4:	eb01 0806 	add.w	r8, r1, r6
 801b1b8:	9306      	str	r3, [sp, #24]
 801b1ba:	fa1f f888 	uxth.w	r8, r8
 801b1be:	9f06      	ldr	r7, [sp, #24]
 801b1c0:	fa0f f388 	sxth.w	r3, r8
 801b1c4:	9307      	str	r3, [sp, #28]
 801b1c6:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 801b1ca:	443b      	add	r3, r7
 801b1cc:	b29b      	uxth	r3, r3
 801b1ce:	9308      	str	r3, [sp, #32]
 801b1d0:	da24      	bge.n	801b21c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 801b1d2:	9905      	ldr	r1, [sp, #20]
 801b1d4:	eba3 0308 	sub.w	r3, r3, r8
 801b1d8:	eba2 020e 	sub.w	r2, r2, lr
 801b1dc:	eba9 0000 	sub.w	r0, r9, r0
 801b1e0:	ebaa 0401 	sub.w	r4, sl, r1
 801b1e4:	b29b      	uxth	r3, r3
 801b1e6:	b2a4      	uxth	r4, r4
 801b1e8:	b219      	sxth	r1, r3
 801b1ea:	b225      	sxth	r5, r4
 801b1ec:	4348      	muls	r0, r1
 801b1ee:	436a      	muls	r2, r5
 801b1f0:	4282      	cmp	r2, r0
 801b1f2:	9a02      	ldr	r2, [sp, #8]
 801b1f4:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801b1f8:	445a      	add	r2, fp
 801b1fa:	dc06      	bgt.n	801b20a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 801b1fc:	9b07      	ldr	r3, [sp, #28]
 801b1fe:	44a4      	add	ip, r4
 801b200:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
 801b204:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 801b208:	e75e      	b.n	801b0c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801b20a:	9904      	ldr	r1, [sp, #16]
 801b20c:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
 801b210:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
 801b214:	4433      	add	r3, r6
 801b216:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801b21a:	e5df      	b.n	801addc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b21c:	9f06      	ldr	r7, [sp, #24]
 801b21e:	9b04      	ldr	r3, [sp, #16]
 801b220:	1bc9      	subs	r1, r1, r7
 801b222:	fa0f f78a 	sxth.w	r7, sl
 801b226:	b289      	uxth	r1, r1
 801b228:	429f      	cmp	r7, r3
 801b22a:	fa0f fe81 	sxth.w	lr, r1
 801b22e:	dd23      	ble.n	801b278 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 801b230:	9a05      	ldr	r2, [sp, #20]
 801b232:	eba9 0000 	sub.w	r0, r9, r0
 801b236:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801b23a:	ebaa 0202 	sub.w	r2, sl, r2
 801b23e:	9d07      	ldr	r5, [sp, #28]
 801b240:	fb0e f000 	mul.w	r0, lr, r0
 801b244:	b292      	uxth	r2, r2
 801b246:	eba5 0a03 	sub.w	sl, r5, r3
 801b24a:	9b02      	ldr	r3, [sp, #8]
 801b24c:	b214      	sxth	r4, r2
 801b24e:	00db      	lsls	r3, r3, #3
 801b250:	fb04 fa0a 	mul.w	sl, r4, sl
 801b254:	445b      	add	r3, fp
 801b256:	4550      	cmp	r0, sl
 801b258:	db03      	blt.n	801b262 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 801b25a:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
 801b25e:	4494      	add	ip, r2
 801b260:	e732      	b.n	801b0c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801b262:	9a04      	ldr	r2, [sp, #16]
 801b264:	4431      	add	r1, r6
 801b266:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
 801b26a:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 801b26e:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 801b272:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801b276:	e75c      	b.n	801b132 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 801b278:	9b08      	ldr	r3, [sp, #32]
 801b27a:	2d06      	cmp	r5, #6
 801b27c:	eba3 0308 	sub.w	r3, r3, r8
 801b280:	b29b      	uxth	r3, r3
 801b282:	b218      	sxth	r0, r3
 801b284:	d813      	bhi.n	801b2ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 801b286:	9b07      	ldr	r3, [sp, #28]
 801b288:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 801b28c:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 801b290:	1c6b      	adds	r3, r5, #1
 801b292:	9901      	ldr	r1, [sp, #4]
 801b294:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 801b298:	9b01      	ldr	r3, [sp, #4]
 801b29a:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 801b29e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801b2a2:	805a      	strh	r2, [r3, #2]
 801b2a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b2a6:	f8a3 e006 	strh.w	lr, [r3, #6]
 801b2aa:	809a      	strh	r2, [r3, #4]
 801b2ac:	e75f      	b.n	801b16e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801b2ae:	9c02      	ldr	r4, [sp, #8]
 801b2b0:	4570      	cmp	r0, lr
 801b2b2:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801b2b6:	db0d      	blt.n	801b2d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 801b2b8:	4431      	add	r1, r6
 801b2ba:	9b06      	ldr	r3, [sp, #24]
 801b2bc:	445c      	add	r4, fp
 801b2be:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801b2c2:	b289      	uxth	r1, r1
 801b2c4:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 801b2c8:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801b2cc:	4419      	add	r1, r3
 801b2ce:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
 801b2d2:	e583      	b.n	801addc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b2d4:	445c      	add	r4, fp
 801b2d6:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
 801b2da:	e79b      	b.n	801b214 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 801b2dc:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 801b2e0:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801b2e4:	1e65      	subs	r5, r4, #1
 801b2e6:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 801b2ea:	b2ad      	uxth	r5, r5
 801b2ec:	42b5      	cmp	r5, r6
 801b2ee:	d044      	beq.n	801b37a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 801b2f0:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801b2f4:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	; 0xa6
 801b2f8:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801b2fc:	4282      	cmp	r2, r0
 801b2fe:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	; 0xa4
 801b302:	d11f      	bne.n	801b344 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 801b304:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	; 0x2e
 801b308:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 801b30c:	459c      	cmp	ip, r3
 801b30e:	d119      	bne.n	801b344 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 801b310:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
 801b314:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801b318:	19d8      	adds	r0, r3, r7
 801b31a:	b200      	sxth	r0, r0
 801b31c:	4288      	cmp	r0, r1
 801b31e:	d109      	bne.n	801b334 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 801b320:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
 801b324:	4413      	add	r3, r2
 801b326:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801b32a:	4629      	mov	r1, r5
 801b32c:	9801      	ldr	r0, [sp, #4]
 801b32e:	f7ff fd2b 	bl	801ad88 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b332:	e003      	b.n	801b33c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801b334:	4411      	add	r1, r2
 801b336:	b209      	sxth	r1, r1
 801b338:	42b9      	cmp	r1, r7
 801b33a:	d0f3      	beq.n	801b324 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 801b33c:	3d01      	subs	r5, #1
 801b33e:	3c08      	subs	r4, #8
 801b340:	b2ad      	uxth	r5, r5
 801b342:	e7d3      	b.n	801b2ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 801b344:	42b9      	cmp	r1, r7
 801b346:	d1f9      	bne.n	801b33c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801b348:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
 801b34c:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 801b350:	4299      	cmp	r1, r3
 801b352:	d1f3      	bne.n	801b33c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801b354:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 801b358:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801b35c:	181f      	adds	r7, r3, r0
 801b35e:	b23f      	sxth	r7, r7
 801b360:	42ba      	cmp	r2, r7
 801b362:	d105      	bne.n	801b370 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 801b364:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
 801b368:	440b      	add	r3, r1
 801b36a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801b36e:	e7dc      	b.n	801b32a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 801b370:	440a      	add	r2, r1
 801b372:	b212      	sxth	r2, r2
 801b374:	4290      	cmp	r0, r2
 801b376:	d1e1      	bne.n	801b33c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801b378:	e7f6      	b.n	801b368 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 801b37a:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
 801b37e:	2e07      	cmp	r6, #7
 801b380:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 801b384:	d812      	bhi.n	801b3ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 801b386:	1c75      	adds	r5, r6, #1
 801b388:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801b38c:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 801b390:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
 801b394:	9d01      	ldr	r5, [sp, #4]
 801b396:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801b39a:	442c      	add	r4, r5
 801b39c:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801b3a0:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 801b3a4:	8061      	strh	r1, [r4, #2]
 801b3a6:	80a2      	strh	r2, [r4, #4]
 801b3a8:	80e3      	strh	r3, [r4, #6]
 801b3aa:	e581      	b.n	801aeb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801b3ac:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 801b3b0:	3e01      	subs	r6, #1
 801b3b2:	445c      	add	r4, fp
 801b3b4:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801b3b8:	f04f 37ff 	mov.w	r7, #4294967295
 801b3bc:	2500      	movs	r5, #0
 801b3be:	9305      	str	r3, [sp, #20]
 801b3c0:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 801b3c4:	1e72      	subs	r2, r6, #1
 801b3c6:	9302      	str	r3, [sp, #8]
 801b3c8:	4691      	mov	r9, r2
 801b3ca:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 801b3ce:	9304      	str	r3, [sp, #16]
 801b3d0:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 801b3d4:	f1b9 3fff 	cmp.w	r9, #4294967295
 801b3d8:	6818      	ldr	r0, [r3, #0]
 801b3da:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801b3de:	9207      	str	r2, [sp, #28]
 801b3e0:	bf16      	itet	ne
 801b3e2:	9905      	ldrne	r1, [sp, #20]
 801b3e4:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801b3e8:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 801b3ec:	9306      	str	r3, [sp, #24]
 801b3ee:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801b3f2:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801b3f6:	fb18 f801 	smulbb	r8, r8, r1
 801b3fa:	6859      	ldr	r1, [r3, #4]
 801b3fc:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801b400:	4671      	mov	r1, lr
 801b402:	a80c      	add	r0, sp, #48	; 0x30
 801b404:	f7ff fb6a 	bl	801aadc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801b408:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 801b40c:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801b410:	f04f 0c08 	mov.w	ip, #8
 801b414:	9b04      	ldr	r3, [sp, #16]
 801b416:	9a02      	ldr	r2, [sp, #8]
 801b418:	fb10 f001 	smulbb	r0, r0, r1
 801b41c:	fb02 8803 	mla	r8, r2, r3, r8
 801b420:	eba0 0108 	sub.w	r1, r0, r8
 801b424:	fb90 f0fc 	sdiv	r0, r0, ip
 801b428:	4288      	cmp	r0, r1
 801b42a:	dc20      	bgt.n	801b46e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 801b42c:	4551      	cmp	r1, sl
 801b42e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801b432:	da03      	bge.n	801b43c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68c>
 801b434:	b1d9      	cbz	r1, 801b46e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 801b436:	468a      	mov	sl, r1
 801b438:	464f      	mov	r7, r9
 801b43a:	4635      	mov	r5, r6
 801b43c:	f109 39ff 	add.w	r9, r9, #4294967295
 801b440:	f119 0f02 	cmn.w	r9, #2
 801b444:	d1c6      	bne.n	801b3d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 801b446:	4616      	mov	r6, r2
 801b448:	3201      	adds	r2, #1
 801b44a:	f1a4 0408 	sub.w	r4, r4, #8
 801b44e:	d1b7      	bne.n	801b3c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 801b450:	9b01      	ldr	r3, [sp, #4]
 801b452:	b2ac      	uxth	r4, r5
 801b454:	00ed      	lsls	r5, r5, #3
 801b456:	1958      	adds	r0, r3, r5
 801b458:	1c7b      	adds	r3, r7, #1
 801b45a:	d10b      	bne.n	801b474 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 801b45c:	4601      	mov	r1, r0
 801b45e:	9803      	ldr	r0, [sp, #12]
 801b460:	f7ff fb3c 	bl	801aadc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801b464:	4621      	mov	r1, r4
 801b466:	9801      	ldr	r0, [sp, #4]
 801b468:	f7ff fc8e 	bl	801ad88 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b46c:	e4b6      	b.n	801addc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b46e:	464f      	mov	r7, r9
 801b470:	4635      	mov	r5, r6
 801b472:	e7ed      	b.n	801b450 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a0>
 801b474:	9b01      	ldr	r3, [sp, #4]
 801b476:	00ff      	lsls	r7, r7, #3
 801b478:	445d      	add	r5, fp
 801b47a:	19d9      	adds	r1, r3, r7
 801b47c:	445f      	add	r7, fp
 801b47e:	f7ff fb2d 	bl	801aadc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801b482:	9b03      	ldr	r3, [sp, #12]
 801b484:	cb03      	ldmia	r3!, {r0, r1}
 801b486:	9b03      	ldr	r3, [sp, #12]
 801b488:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 801b48c:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 801b490:	f855 0fac 	ldr.w	r0, [r5, #172]!
 801b494:	6869      	ldr	r1, [r5, #4]
 801b496:	c303      	stmia	r3!, {r0, r1}
 801b498:	e7e4      	b.n	801b464 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b4>
 801b49a:	bf00      	nop

0801b49c <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801b49c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4a0:	f500 7698 	add.w	r6, r0, #304	; 0x130
 801b4a4:	b09b      	sub	sp, #108	; 0x6c
 801b4a6:	4604      	mov	r4, r0
 801b4a8:	4630      	mov	r0, r6
 801b4aa:	f7fc fabe 	bl	8017a2a <_ZNK8touchgfx4Rect7isEmptyEv>
 801b4ae:	4605      	mov	r5, r0
 801b4b0:	b948      	cbnz	r0, 801b4c6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 801b4b2:	6823      	ldr	r3, [r4, #0]
 801b4b4:	4620      	mov	r0, r4
 801b4b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b4b8:	e896 0006 	ldmia.w	r6, {r1, r2}
 801b4bc:	4798      	blx	r3
 801b4be:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801b4c2:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 801b4c6:	4bc5      	ldr	r3, [pc, #788]	; (801b7dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x340>)
 801b4c8:	681b      	ldr	r3, [r3, #0]
 801b4ca:	2b00      	cmp	r3, #0
 801b4cc:	d03f      	beq.n	801b54e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801b4ce:	4dc4      	ldr	r5, [pc, #784]	; (801b7e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 801b4d0:	4628      	mov	r0, r5
 801b4d2:	f7fc faaa 	bl	8017a2a <_ZNK8touchgfx4Rect7isEmptyEv>
 801b4d6:	4606      	mov	r6, r0
 801b4d8:	2800      	cmp	r0, #0
 801b4da:	d138      	bne.n	801b54e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801b4dc:	4628      	mov	r0, r5
 801b4de:	f7ff f99b 	bl	801a818 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801b4e2:	6823      	ldr	r3, [r4, #0]
 801b4e4:	6829      	ldr	r1, [r5, #0]
 801b4e6:	4620      	mov	r0, r4
 801b4e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b4ea:	686a      	ldr	r2, [r5, #4]
 801b4ec:	4798      	blx	r3
 801b4ee:	802e      	strh	r6, [r5, #0]
 801b4f0:	806e      	strh	r6, [r5, #2]
 801b4f2:	80ae      	strh	r6, [r5, #4]
 801b4f4:	80ee      	strh	r6, [r5, #6]
 801b4f6:	f10d 0824 	add.w	r8, sp, #36	; 0x24
 801b4fa:	4dba      	ldr	r5, [pc, #744]	; (801b7e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 801b4fc:	4640      	mov	r0, r8
 801b4fe:	f7ff fbe7 	bl	801acd0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801b502:	882e      	ldrh	r6, [r5, #0]
 801b504:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 801b508:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 801b50c:	4633      	mov	r3, r6
 801b50e:	42bb      	cmp	r3, r7
 801b510:	d224      	bcs.n	801b55c <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801b512:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 801b516:	2907      	cmp	r1, #7
 801b518:	d816      	bhi.n	801b548 <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 801b51a:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801b51e:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 801b522:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 801b526:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801b52a:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801b52e:	1c4a      	adds	r2, r1, #1
 801b530:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 801b534:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 801b538:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 801b53c:	f8a2 a002 	strh.w	sl, [r2, #2]
 801b540:	f8a2 e004 	strh.w	lr, [r2, #4]
 801b544:	f8a2 c006 	strh.w	ip, [r2, #6]
 801b548:	3301      	adds	r3, #1
 801b54a:	b29b      	uxth	r3, r3
 801b54c:	e7df      	b.n	801b50e <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 801b54e:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801b552:	2b00      	cmp	r3, #0
 801b554:	d1cf      	bne.n	801b4f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 801b556:	b01b      	add	sp, #108	; 0x6c
 801b558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b55c:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
 801b560:	42b3      	cmp	r3, r6
 801b562:	d90c      	bls.n	801b57e <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 801b564:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801b568:	6822      	ldr	r2, [r4, #0]
 801b56a:	3601      	adds	r6, #1
 801b56c:	4620      	mov	r0, r4
 801b56e:	6c17      	ldr	r7, [r2, #64]	; 0x40
 801b570:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
 801b574:	b2b6      	uxth	r6, r6
 801b576:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
 801b57a:	47b8      	blx	r7
 801b57c:	e7ee      	b.n	801b55c <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801b57e:	4a9a      	ldr	r2, [pc, #616]	; (801b7e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801b580:	6813      	ldr	r3, [r2, #0]
 801b582:	4691      	mov	r9, r2
 801b584:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801b588:	2b01      	cmp	r3, #1
 801b58a:	f040 80e0 	bne.w	801b74e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b2>
 801b58e:	8829      	ldrh	r1, [r5, #0]
 801b590:	2600      	movs	r6, #0
 801b592:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 801b596:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 801b59a:	33ae      	adds	r3, #174	; 0xae
 801b59c:	428f      	cmp	r7, r1
 801b59e:	f103 0308 	add.w	r3, r3, #8
 801b5a2:	dd0a      	ble.n	801b5ba <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 801b5a4:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 801b5a8:	3101      	adds	r1, #1
 801b5aa:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 801b5ae:	4402      	add	r2, r0
 801b5b0:	b212      	sxth	r2, r2
 801b5b2:	4296      	cmp	r6, r2
 801b5b4:	bfb8      	it	lt
 801b5b6:	4616      	movlt	r6, r2
 801b5b8:	e7f0      	b.n	801b59c <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 801b5ba:	4b8c      	ldr	r3, [pc, #560]	; (801b7ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801b5bc:	f8df 9228 	ldr.w	r9, [pc, #552]	; 801b7e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>
 801b5c0:	881b      	ldrh	r3, [r3, #0]
 801b5c2:	2b0f      	cmp	r3, #15
 801b5c4:	bf8c      	ite	hi
 801b5c6:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 801b5ca:	f04f 0b01 	movls.w	fp, #1
 801b5ce:	2300      	movs	r3, #0
 801b5d0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801b5d4:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 801b5d8:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 801b5dc:	4b82      	ldr	r3, [pc, #520]	; (801b7e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801b5de:	4438      	add	r0, r7
 801b5e0:	b207      	sxth	r7, r0
 801b5e2:	6818      	ldr	r0, [r3, #0]
 801b5e4:	42b7      	cmp	r7, r6
 801b5e6:	6803      	ldr	r3, [r0, #0]
 801b5e8:	f280 8083 	bge.w	801b6f2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 801b5ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801b5f0:	4798      	blx	r3
 801b5f2:	eb07 030b 	add.w	r3, r7, fp
 801b5f6:	4298      	cmp	r0, r3
 801b5f8:	da07      	bge.n	801b60a <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801b5fa:	42b0      	cmp	r0, r6
 801b5fc:	da05      	bge.n	801b60a <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801b5fe:	4287      	cmp	r7, r0
 801b600:	dd6c      	ble.n	801b6dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801b602:	2f00      	cmp	r7, #0
 801b604:	dd6a      	ble.n	801b6dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801b606:	4630      	mov	r0, r6
 801b608:	e004      	b.n	801b614 <_ZN8touchgfx11Application15drawCachedAreasEv+0x178>
 801b60a:	4287      	cmp	r7, r0
 801b60c:	dcfb      	bgt.n	801b606 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16a>
 801b60e:	42b0      	cmp	r0, r6
 801b610:	bfa8      	it	ge
 801b612:	4630      	movge	r0, r6
 801b614:	4b76      	ldr	r3, [pc, #472]	; (801b7f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 801b616:	1bc0      	subs	r0, r0, r7
 801b618:	2200      	movs	r2, #0
 801b61a:	f8ad 7016 	strh.w	r7, [sp, #22]
 801b61e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b622:	882f      	ldrh	r7, [r5, #0]
 801b624:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b628:	f8ad 3018 	strh.w	r3, [sp, #24]
 801b62c:	f8ad 001a 	strh.w	r0, [sp, #26]
 801b630:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801b634:	42bb      	cmp	r3, r7
 801b636:	d9cd      	bls.n	801b5d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 801b638:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 801b63c:	ab07      	add	r3, sp, #28
 801b63e:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801b642:	6851      	ldr	r1, [r2, #4]
 801b644:	c303      	stmia	r3!, {r0, r1}
 801b646:	a905      	add	r1, sp, #20
 801b648:	a807      	add	r0, sp, #28
 801b64a:	f7ff f9af 	bl	801a9ac <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b64e:	2800      	cmp	r0, #0
 801b650:	d04c      	beq.n	801b6ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 801b652:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801b656:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801b65a:	f8bd a020 	ldrh.w	sl, [sp, #32]
 801b65e:	4686      	mov	lr, r0
 801b660:	4290      	cmp	r0, r2
 801b662:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801b666:	4450      	add	r0, sl
 801b668:	f8bd a018 	ldrh.w	sl, [sp, #24]
 801b66c:	bfb8      	it	lt
 801b66e:	4696      	movlt	lr, r2
 801b670:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801b674:	4452      	add	r2, sl
 801b676:	b280      	uxth	r0, r0
 801b678:	4299      	cmp	r1, r3
 801b67a:	468c      	mov	ip, r1
 801b67c:	b292      	uxth	r2, r2
 801b67e:	9302      	str	r3, [sp, #8]
 801b680:	bfb8      	it	lt
 801b682:	469c      	movlt	ip, r3
 801b684:	b203      	sxth	r3, r0
 801b686:	fa0f fa82 	sxth.w	sl, r2
 801b68a:	f8ad e01c 	strh.w	lr, [sp, #28]
 801b68e:	f8ad c01e 	strh.w	ip, [sp, #30]
 801b692:	4553      	cmp	r3, sl
 801b694:	bfb8      	it	lt
 801b696:	4602      	movlt	r2, r0
 801b698:	9b02      	ldr	r3, [sp, #8]
 801b69a:	eba2 020e 	sub.w	r2, r2, lr
 801b69e:	f8ad 2020 	strh.w	r2, [sp, #32]
 801b6a2:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801b6a6:	4411      	add	r1, r2
 801b6a8:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801b6ac:	4413      	add	r3, r2
 801b6ae:	b289      	uxth	r1, r1
 801b6b0:	b29b      	uxth	r3, r3
 801b6b2:	b208      	sxth	r0, r1
 801b6b4:	b21a      	sxth	r2, r3
 801b6b6:	4290      	cmp	r0, r2
 801b6b8:	bfb8      	it	lt
 801b6ba:	460b      	movlt	r3, r1
 801b6bc:	eba3 030c 	sub.w	r3, r3, ip
 801b6c0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801b6c4:	a807      	add	r0, sp, #28
 801b6c6:	f7fc f9b0 	bl	8017a2a <_ZNK8touchgfx4Rect7isEmptyEv>
 801b6ca:	b920      	cbnz	r0, 801b6d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 801b6cc:	6823      	ldr	r3, [r4, #0]
 801b6ce:	a907      	add	r1, sp, #28
 801b6d0:	4620      	mov	r0, r4
 801b6d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b6d4:	4798      	blx	r3
 801b6d6:	3701      	adds	r7, #1
 801b6d8:	b2bf      	uxth	r7, r7
 801b6da:	e7a9      	b.n	801b630 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 801b6dc:	f8d9 0000 	ldr.w	r0, [r9]
 801b6e0:	2101      	movs	r1, #1
 801b6e2:	6803      	ldr	r3, [r0, #0]
 801b6e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801b6e8:	4798      	blx	r3
 801b6ea:	e773      	b.n	801b5d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 801b6ec:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801b6f0:	e7e8      	b.n	801b6c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 801b6f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b6f4:	4798      	blx	r3
 801b6f6:	4b3f      	ldr	r3, [pc, #252]	; (801b7f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801b6f8:	781b      	ldrb	r3, [r3, #0]
 801b6fa:	2b00      	cmp	r3, #0
 801b6fc:	f43f af2b 	beq.w	801b556 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 801b700:	2300      	movs	r3, #0
 801b702:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 801b706:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
 801b70a:	882b      	ldrh	r3, [r5, #0]
 801b70c:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 801b710:	42ab      	cmp	r3, r5
 801b712:	f4bf af20 	bcs.w	801b556 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 801b716:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
 801b71a:	2907      	cmp	r1, #7
 801b71c:	d814      	bhi.n	801b748 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ac>
 801b71e:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 801b722:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 801b726:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 801b72a:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 801b72e:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 801b732:	1c4a      	adds	r2, r1, #1
 801b734:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
 801b738:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 801b73c:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 801b740:	f8a2 c002 	strh.w	ip, [r2, #2]
 801b744:	8097      	strh	r7, [r2, #4]
 801b746:	80d6      	strh	r6, [r2, #6]
 801b748:	3301      	adds	r3, #1
 801b74a:	b29b      	uxth	r3, r3
 801b74c:	e7e0      	b.n	801b710 <_ZN8touchgfx11Application15drawCachedAreasEv+0x274>
 801b74e:	2b02      	cmp	r3, #2
 801b750:	f040 8133 	bne.w	801b9ba <_ZN8touchgfx11Application15drawCachedAreasEv+0x51e>
 801b754:	4b28      	ldr	r3, [pc, #160]	; (801b7f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 801b756:	f104 0aac 	add.w	sl, r4, #172	; 0xac
 801b75a:	781b      	ldrb	r3, [r3, #0]
 801b75c:	2b01      	cmp	r3, #1
 801b75e:	f000 8098 	beq.w	801b892 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801b762:	882a      	ldrh	r2, [r5, #0]
 801b764:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	; 0xec
 801b768:	3201      	adds	r2, #1
 801b76a:	b292      	uxth	r2, r2
 801b76c:	2900      	cmp	r1, #0
 801b76e:	d0c2      	beq.n	801b6f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801b770:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	; 0xae
 801b774:	4694      	mov	ip, r2
 801b776:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 801b77a:	f04f 0900 	mov.w	r9, #0
 801b77e:	441e      	add	r6, r3
 801b780:	b236      	sxth	r6, r6
 801b782:	fa1f f38c 	uxth.w	r3, ip
 801b786:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 801b78a:	4299      	cmp	r1, r3
 801b78c:	f240 80be 	bls.w	801b90c <_ZN8touchgfx11Application15drawCachedAreasEv+0x470>
 801b790:	4427      	add	r7, r4
 801b792:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 801b796:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 801b79a:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	; 0xae
 801b79e:	4283      	cmp	r3, r0
 801b7a0:	f340 80a0 	ble.w	801b8e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x448>
 801b7a4:	f8be 60b2 	ldrh.w	r6, [lr, #178]	; 0xb2
 801b7a8:	46e1      	mov	r9, ip
 801b7aa:	4406      	add	r6, r0
 801b7ac:	b236      	sxth	r6, r6
 801b7ae:	429e      	cmp	r6, r3
 801b7b0:	bfa8      	it	ge
 801b7b2:	461e      	movge	r6, r3
 801b7b4:	f10c 0c01 	add.w	ip, ip, #1
 801b7b8:	e7e3      	b.n	801b782 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e6>
 801b7ba:	d10a      	bne.n	801b7d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x336>
 801b7bc:	4562      	cmp	r2, ip
 801b7be:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	; 0xb2
 801b7c2:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	; 0xb2
 801b7c6:	bfb8      	it	lt
 801b7c8:	4662      	movlt	r2, ip
 801b7ca:	4288      	cmp	r0, r1
 801b7cc:	bfb8      	it	lt
 801b7ce:	461f      	movlt	r7, r3
 801b7d0:	e086      	b.n	801b8e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 801b7d2:	428a      	cmp	r2, r1
 801b7d4:	bfb8      	it	lt
 801b7d6:	460a      	movlt	r2, r1
 801b7d8:	e082      	b.n	801b8e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 801b7da:	bf00      	nop
 801b7dc:	24006d70 	.word	0x24006d70
 801b7e0:	24006d7c 	.word	0x24006d7c
 801b7e4:	24000054 	.word	0x24000054
 801b7e8:	24006d38 	.word	0x24006d38
 801b7ec:	24006d2e 	.word	0x24006d2e
 801b7f0:	24006d2c 	.word	0x24006d2c
 801b7f4:	24006d36 	.word	0x24006d36
 801b7f8:	24006d30 	.word	0x24006d30
 801b7fc:	19a1      	adds	r1, r4, r6
 801b7fe:	ab07      	add	r3, sp, #28
 801b800:	f851 0fac 	ldr.w	r0, [r1, #172]!
 801b804:	6849      	ldr	r1, [r1, #4]
 801b806:	c303      	stmia	r3!, {r0, r1}
 801b808:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801b80c:	a807      	add	r0, sp, #28
 801b80e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801b812:	2b13      	cmp	r3, #19
 801b814:	440b      	add	r3, r1
 801b816:	bfd8      	it	le
 801b818:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801b81c:	1a9b      	subs	r3, r3, r2
 801b81e:	f8ad 201c 	strh.w	r2, [sp, #28]
 801b822:	f8ad 3020 	strh.w	r3, [sp, #32]
 801b826:	f7ff f811 	bl	801a84c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b82a:	a807      	add	r0, sp, #28
 801b82c:	f7fc f8fd 	bl	8017a2a <_ZNK8touchgfx4Rect7isEmptyEv>
 801b830:	bb78      	cbnz	r0, 801b892 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801b832:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801b836:	4426      	add	r6, r4
 801b838:	f8d9 0000 	ldr.w	r0, [r9]
 801b83c:	f1bc 0f14 	cmp.w	ip, #20
 801b840:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801b844:	f8d0 e000 	ldr.w	lr, [r0]
 801b848:	bfa8      	it	ge
 801b84a:	f04f 0c14 	movge.w	ip, #20
 801b84e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801b852:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801b856:	fa1f fc8c 	uxth.w	ip, ip
 801b85a:	f8cd c000 	str.w	ip, [sp]
 801b85e:	f8de b090 	ldr.w	fp, [lr, #144]	; 0x90
 801b862:	47d8      	blx	fp
 801b864:	4683      	mov	fp, r0
 801b866:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801b86a:	a807      	add	r0, sp, #28
 801b86c:	f7fe ffd4 	bl	801a818 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801b870:	6823      	ldr	r3, [r4, #0]
 801b872:	4620      	mov	r0, r4
 801b874:	a907      	add	r1, sp, #28
 801b876:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b878:	4798      	blx	r3
 801b87a:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	; 0xb0
 801b87e:	eba0 000b 	sub.w	r0, r0, fp
 801b882:	b200      	sxth	r0, r0
 801b884:	f8a6 00b0 	strh.w	r0, [r6, #176]	; 0xb0
 801b888:	b918      	cbnz	r0, 801b892 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801b88a:	b2b9      	uxth	r1, r7
 801b88c:	4650      	mov	r0, sl
 801b88e:	f7ff fa7b 	bl	801ad88 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b892:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
 801b896:	f1bb 0f00 	cmp.w	fp, #0
 801b89a:	f43f af2c 	beq.w	801b6f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801b89e:	882b      	ldrh	r3, [r5, #0]
 801b8a0:	2700      	movs	r7, #0
 801b8a2:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 801b8a6:	3301      	adds	r3, #1
 801b8a8:	b29b      	uxth	r3, r3
 801b8aa:	b299      	uxth	r1, r3
 801b8ac:	00fe      	lsls	r6, r7, #3
 801b8ae:	458b      	cmp	fp, r1
 801b8b0:	d9a4      	bls.n	801b7fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>
 801b8b2:	4426      	add	r6, r4
 801b8b4:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 801b8b8:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	; 0xac
 801b8bc:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	; 0xb0
 801b8c0:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	; 0xac
 801b8c4:	4408      	add	r0, r1
 801b8c6:	f8be 10b0 	ldrh.w	r1, [lr, #176]	; 0xb0
 801b8ca:	4461      	add	r1, ip
 801b8cc:	b200      	sxth	r0, r0
 801b8ce:	b209      	sxth	r1, r1
 801b8d0:	4288      	cmp	r0, r1
 801b8d2:	f6bf af72 	bge.w	801b7ba <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 801b8d6:	4584      	cmp	ip, r0
 801b8d8:	4662      	mov	r2, ip
 801b8da:	461f      	mov	r7, r3
 801b8dc:	bfb8      	it	lt
 801b8de:	4602      	movlt	r2, r0
 801b8e0:	3301      	adds	r3, #1
 801b8e2:	e7e2      	b.n	801b8aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x40e>
 801b8e4:	d10e      	bne.n	801b904 <_ZN8touchgfx11Application15drawCachedAreasEv+0x468>
 801b8e6:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
 801b8ea:	f8be e0b2 	ldrh.w	lr, [lr, #178]	; 0xb2
 801b8ee:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
 801b8f2:	4473      	add	r3, lr
 801b8f4:	b21b      	sxth	r3, r3
 801b8f6:	429e      	cmp	r6, r3
 801b8f8:	bfa8      	it	ge
 801b8fa:	461e      	movge	r6, r3
 801b8fc:	4287      	cmp	r7, r0
 801b8fe:	bfb8      	it	lt
 801b900:	46e1      	movlt	r9, ip
 801b902:	e757      	b.n	801b7b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 801b904:	4286      	cmp	r6, r0
 801b906:	bfa8      	it	ge
 801b908:	4606      	movge	r6, r0
 801b90a:	e753      	b.n	801b7b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 801b90c:	eb0a 0007 	add.w	r0, sl, r7
 801b910:	4427      	add	r7, r4
 801b912:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	; 0xb2
 801b916:	f1bb 0f13 	cmp.w	fp, #19
 801b91a:	bfdc      	itt	le
 801b91c:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	; 0xae
 801b920:	445e      	addle	r6, fp
 801b922:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801b926:	bfd8      	it	le
 801b928:	b236      	sxthle	r6, r6
 801b92a:	f7fc f87e 	bl	8017a2a <_ZNK8touchgfx4Rect7isEmptyEv>
 801b92e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801b932:	2800      	cmp	r0, #0
 801b934:	f47f af1a 	bne.w	801b76c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d0>
 801b938:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 801b93c:	fa1f fb8b 	uxth.w	fp, fp
 801b940:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801b944:	1ab6      	subs	r6, r6, r2
 801b946:	4829      	ldr	r0, [pc, #164]	; (801b9ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>)
 801b948:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
 801b94c:	2e14      	cmp	r6, #20
 801b94e:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 801b952:	6800      	ldr	r0, [r0, #0]
 801b954:	bfa8      	it	ge
 801b956:	2614      	movge	r6, #20
 801b958:	f8ad 101c 	strh.w	r1, [sp, #28]
 801b95c:	f8ad 201e 	strh.w	r2, [sp, #30]
 801b960:	b289      	uxth	r1, r1
 801b962:	f8ad 3020 	strh.w	r3, [sp, #32]
 801b966:	b2b6      	uxth	r6, r6
 801b968:	f8d0 c000 	ldr.w	ip, [r0]
 801b96c:	b292      	uxth	r2, r2
 801b96e:	455e      	cmp	r6, fp
 801b970:	bf94      	ite	ls
 801b972:	9600      	strls	r6, [sp, #0]
 801b974:	f8cd b000 	strhi.w	fp, [sp]
 801b978:	b29b      	uxth	r3, r3
 801b97a:	f8dc 6090 	ldr.w	r6, [ip, #144]	; 0x90
 801b97e:	47b0      	blx	r6
 801b980:	6823      	ldr	r3, [r4, #0]
 801b982:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801b986:	a907      	add	r1, sp, #28
 801b988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b98a:	4620      	mov	r0, r4
 801b98c:	4798      	blx	r3
 801b98e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801b992:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801b996:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 801b99a:	1a5b      	subs	r3, r3, r1
 801b99c:	440a      	add	r2, r1
 801b99e:	b21b      	sxth	r3, r3
 801b9a0:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 801b9a4:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801b9a8:	2b00      	cmp	r3, #0
 801b9aa:	f47f aeda 	bne.w	801b762 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 801b9ae:	fa1f f189 	uxth.w	r1, r9
 801b9b2:	4650      	mov	r0, sl
 801b9b4:	f7ff f9e8 	bl	801ad88 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b9b8:	e6d3      	b.n	801b762 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 801b9ba:	882e      	ldrh	r6, [r5, #0]
 801b9bc:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801b9c0:	42b3      	cmp	r3, r6
 801b9c2:	f67f ae98 	bls.w	801b6f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801b9c6:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 801b9ca:	ab07      	add	r3, sp, #28
 801b9cc:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801b9d0:	6851      	ldr	r1, [r2, #4]
 801b9d2:	c303      	stmia	r3!, {r0, r1}
 801b9d4:	a807      	add	r0, sp, #28
 801b9d6:	f7fc f828 	bl	8017a2a <_ZNK8touchgfx4Rect7isEmptyEv>
 801b9da:	b920      	cbnz	r0, 801b9e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x54a>
 801b9dc:	6823      	ldr	r3, [r4, #0]
 801b9de:	a907      	add	r1, sp, #28
 801b9e0:	4620      	mov	r0, r4
 801b9e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b9e4:	4798      	blx	r3
 801b9e6:	3601      	adds	r6, #1
 801b9e8:	b2b6      	uxth	r6, r6
 801b9ea:	e7e7      	b.n	801b9bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 801b9ec:	24006d38 	.word	0x24006d38

0801b9f0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801b9f0:	4b03      	ldr	r3, [pc, #12]	; (801ba00 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801b9f2:	2200      	movs	r2, #0
 801b9f4:	801a      	strh	r2, [r3, #0]
 801b9f6:	805a      	strh	r2, [r3, #2]
 801b9f8:	809a      	strh	r2, [r3, #4]
 801b9fa:	80da      	strh	r2, [r3, #6]
 801b9fc:	4770      	bx	lr
 801b9fe:	bf00      	nop
 801ba00:	24006d7c 	.word	0x24006d7c

0801ba04 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801ba04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba08:	b09d      	sub	sp, #116	; 0x74
 801ba0a:	4606      	mov	r6, r0
 801ba0c:	4614      	mov	r4, r2
 801ba0e:	468a      	mov	sl, r1
 801ba10:	a803      	add	r0, sp, #12
 801ba12:	461d      	mov	r5, r3
 801ba14:	f000 fd72 	bl	801c4fc <_ZN8touchgfx12TextProviderC1Ev>
 801ba18:	6833      	ldr	r3, [r6, #0]
 801ba1a:	4630      	mov	r0, r6
 801ba1c:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801ba20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ba22:	4798      	blx	r3
 801ba24:	6833      	ldr	r3, [r6, #0]
 801ba26:	4607      	mov	r7, r0
 801ba28:	4630      	mov	r0, r6
 801ba2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ba2c:	4798      	blx	r3
 801ba2e:	462a      	mov	r2, r5
 801ba30:	2500      	movs	r5, #0
 801ba32:	4621      	mov	r1, r4
 801ba34:	9000      	str	r0, [sp, #0]
 801ba36:	463b      	mov	r3, r7
 801ba38:	462c      	mov	r4, r5
 801ba3a:	46a9      	mov	r9, r5
 801ba3c:	46a8      	mov	r8, r5
 801ba3e:	a803      	add	r0, sp, #12
 801ba40:	f000 fdb7 	bl	801c5b2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801ba44:	2300      	movs	r3, #0
 801ba46:	9302      	str	r3, [sp, #8]
 801ba48:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801ba4c:	429c      	cmp	r4, r3
 801ba4e:	d002      	beq.n	801ba56 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801ba50:	455c      	cmp	r4, fp
 801ba52:	bf18      	it	ne
 801ba54:	4625      	movne	r5, r4
 801ba56:	ab02      	add	r3, sp, #8
 801ba58:	4632      	mov	r2, r6
 801ba5a:	4651      	mov	r1, sl
 801ba5c:	a803      	add	r0, sp, #12
 801ba5e:	f001 f8ad 	bl	801cbbc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801ba62:	4604      	mov	r4, r0
 801ba64:	b108      	cbz	r0, 801ba6a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801ba66:	280a      	cmp	r0, #10
 801ba68:	d10a      	bne.n	801ba80 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801ba6a:	45c1      	cmp	r9, r8
 801ba6c:	bf38      	it	cc
 801ba6e:	46c1      	movcc	r9, r8
 801ba70:	f04f 0800 	mov.w	r8, #0
 801ba74:	2c00      	cmp	r4, #0
 801ba76:	d1e5      	bne.n	801ba44 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801ba78:	4648      	mov	r0, r9
 801ba7a:	b01d      	add	sp, #116	; 0x74
 801ba7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba80:	9a02      	ldr	r2, [sp, #8]
 801ba82:	2a00      	cmp	r2, #0
 801ba84:	d0de      	beq.n	801ba44 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801ba86:	7b57      	ldrb	r7, [r2, #13]
 801ba88:	4629      	mov	r1, r5
 801ba8a:	6833      	ldr	r3, [r6, #0]
 801ba8c:	007f      	lsls	r7, r7, #1
 801ba8e:	8894      	ldrh	r4, [r2, #4]
 801ba90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ba92:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801ba96:	7a97      	ldrb	r7, [r2, #10]
 801ba98:	4307      	orrs	r7, r0
 801ba9a:	4630      	mov	r0, r6
 801ba9c:	4798      	blx	r3
 801ba9e:	4438      	add	r0, r7
 801baa0:	4480      	add	r8, r0
 801baa2:	fa1f f888 	uxth.w	r8, r8
 801baa6:	e7e5      	b.n	801ba74 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801baa8 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801baa8:	b508      	push	{r3, lr}
 801baaa:	6803      	ldr	r3, [r0, #0]
 801baac:	68db      	ldr	r3, [r3, #12]
 801baae:	4798      	blx	r3
 801bab0:	b128      	cbz	r0, 801babe <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801bab2:	7b43      	ldrb	r3, [r0, #13]
 801bab4:	7a80      	ldrb	r0, [r0, #10]
 801bab6:	005b      	lsls	r3, r3, #1
 801bab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801babc:	4318      	orrs	r0, r3
 801babe:	bd08      	pop	{r3, pc}

0801bac0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801bac0:	b40e      	push	{r1, r2, r3}
 801bac2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bac4:	b09e      	sub	sp, #120	; 0x78
 801bac6:	4605      	mov	r5, r0
 801bac8:	ab23      	add	r3, sp, #140	; 0x8c
 801baca:	a805      	add	r0, sp, #20
 801bacc:	f853 4b04 	ldr.w	r4, [r3], #4
 801bad0:	9303      	str	r3, [sp, #12]
 801bad2:	f000 fd13 	bl	801c4fc <_ZN8touchgfx12TextProviderC1Ev>
 801bad6:	682b      	ldr	r3, [r5, #0]
 801bad8:	4628      	mov	r0, r5
 801bada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801badc:	4798      	blx	r3
 801bade:	682b      	ldr	r3, [r5, #0]
 801bae0:	4606      	mov	r6, r0
 801bae2:	4628      	mov	r0, r5
 801bae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bae6:	4798      	blx	r3
 801bae8:	4633      	mov	r3, r6
 801baea:	4621      	mov	r1, r4
 801baec:	ae1e      	add	r6, sp, #120	; 0x78
 801baee:	2400      	movs	r4, #0
 801baf0:	9000      	str	r0, [sp, #0]
 801baf2:	9a03      	ldr	r2, [sp, #12]
 801baf4:	a805      	add	r0, sp, #20
 801baf6:	f000 fd5c 	bl	801c5b2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801bafa:	f846 4d68 	str.w	r4, [r6, #-104]!
 801bafe:	462a      	mov	r2, r5
 801bb00:	4633      	mov	r3, r6
 801bb02:	4621      	mov	r1, r4
 801bb04:	a805      	add	r0, sp, #20
 801bb06:	f001 f859 	bl	801cbbc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801bb0a:	b300      	cbz	r0, 801bb4e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801bb0c:	280a      	cmp	r0, #10
 801bb0e:	d01a      	beq.n	801bb46 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801bb10:	9f04      	ldr	r7, [sp, #16]
 801bb12:	b1c7      	cbz	r7, 801bb46 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801bb14:	7b78      	ldrb	r0, [r7, #13]
 801bb16:	7a3b      	ldrb	r3, [r7, #8]
 801bb18:	00c1      	lsls	r1, r0, #3
 801bb1a:	88ea      	ldrh	r2, [r5, #6]
 801bb1c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801bb20:	4319      	orrs	r1, r3
 801bb22:	0643      	lsls	r3, r0, #25
 801bb24:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801bb28:	bf48      	it	mi
 801bb2a:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801bb2e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801bb32:	bf48      	it	mi
 801bb34:	b219      	sxthmi	r1, r3
 801bb36:	79fb      	ldrb	r3, [r7, #7]
 801bb38:	4303      	orrs	r3, r0
 801bb3a:	4413      	add	r3, r2
 801bb3c:	1a5b      	subs	r3, r3, r1
 801bb3e:	b21b      	sxth	r3, r3
 801bb40:	429c      	cmp	r4, r3
 801bb42:	bfb8      	it	lt
 801bb44:	461c      	movlt	r4, r3
 801bb46:	4633      	mov	r3, r6
 801bb48:	462a      	mov	r2, r5
 801bb4a:	2100      	movs	r1, #0
 801bb4c:	e7da      	b.n	801bb04 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801bb4e:	b2a0      	uxth	r0, r4
 801bb50:	b01e      	add	sp, #120	; 0x78
 801bb52:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801bb56:	b003      	add	sp, #12
 801bb58:	4770      	bx	lr

0801bb5a <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801bb5a:	7a43      	ldrb	r3, [r0, #9]
 801bb5c:	8880      	ldrh	r0, [r0, #4]
 801bb5e:	4418      	add	r0, r3
 801bb60:	b280      	uxth	r0, r0
 801bb62:	4770      	bx	lr

0801bb64 <_ZNK8touchgfx4Font13getFontHeightEv>:
 801bb64:	6803      	ldr	r3, [r0, #0]
 801bb66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bb68:	4718      	bx	r3

0801bb6a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801bb6a:	b40e      	push	{r1, r2, r3}
 801bb6c:	b570      	push	{r4, r5, r6, lr}
 801bb6e:	b09d      	sub	sp, #116	; 0x74
 801bb70:	4604      	mov	r4, r0
 801bb72:	ab21      	add	r3, sp, #132	; 0x84
 801bb74:	a803      	add	r0, sp, #12
 801bb76:	f853 5b04 	ldr.w	r5, [r3], #4
 801bb7a:	9302      	str	r3, [sp, #8]
 801bb7c:	f000 fcbe 	bl	801c4fc <_ZN8touchgfx12TextProviderC1Ev>
 801bb80:	6823      	ldr	r3, [r4, #0]
 801bb82:	4620      	mov	r0, r4
 801bb84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801bb86:	4798      	blx	r3
 801bb88:	6823      	ldr	r3, [r4, #0]
 801bb8a:	4606      	mov	r6, r0
 801bb8c:	4620      	mov	r0, r4
 801bb8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bb90:	2401      	movs	r4, #1
 801bb92:	4798      	blx	r3
 801bb94:	4633      	mov	r3, r6
 801bb96:	9000      	str	r0, [sp, #0]
 801bb98:	4629      	mov	r1, r5
 801bb9a:	9a02      	ldr	r2, [sp, #8]
 801bb9c:	a803      	add	r0, sp, #12
 801bb9e:	f000 fd08 	bl	801c5b2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801bba2:	a803      	add	r0, sp, #12
 801bba4:	f001 f8d6 	bl	801cd54 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801bba8:	b2a3      	uxth	r3, r4
 801bbaa:	b138      	cbz	r0, 801bbbc <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801bbac:	280a      	cmp	r0, #10
 801bbae:	a803      	add	r0, sp, #12
 801bbb0:	bf04      	itt	eq
 801bbb2:	3301      	addeq	r3, #1
 801bbb4:	b21c      	sxtheq	r4, r3
 801bbb6:	f001 f8cd 	bl	801cd54 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801bbba:	e7f5      	b.n	801bba8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801bbbc:	4618      	mov	r0, r3
 801bbbe:	b01d      	add	sp, #116	; 0x74
 801bbc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bbc4:	b003      	add	sp, #12
 801bbc6:	4770      	bx	lr

0801bbc8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801bbc8:	b40e      	push	{r1, r2, r3}
 801bbca:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bbcc:	b09e      	sub	sp, #120	; 0x78
 801bbce:	4604      	mov	r4, r0
 801bbd0:	ab23      	add	r3, sp, #140	; 0x8c
 801bbd2:	a805      	add	r0, sp, #20
 801bbd4:	f853 5b04 	ldr.w	r5, [r3], #4
 801bbd8:	9303      	str	r3, [sp, #12]
 801bbda:	f000 fc8f 	bl	801c4fc <_ZN8touchgfx12TextProviderC1Ev>
 801bbde:	6823      	ldr	r3, [r4, #0]
 801bbe0:	4620      	mov	r0, r4
 801bbe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801bbe4:	4798      	blx	r3
 801bbe6:	6823      	ldr	r3, [r4, #0]
 801bbe8:	4606      	mov	r6, r0
 801bbea:	4620      	mov	r0, r4
 801bbec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bbee:	4798      	blx	r3
 801bbf0:	4633      	mov	r3, r6
 801bbf2:	4629      	mov	r1, r5
 801bbf4:	9000      	str	r0, [sp, #0]
 801bbf6:	9a03      	ldr	r2, [sp, #12]
 801bbf8:	a805      	add	r0, sp, #20
 801bbfa:	f000 fcda 	bl	801c5b2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801bbfe:	ad1e      	add	r5, sp, #120	; 0x78
 801bc00:	2100      	movs	r1, #0
 801bc02:	f647 76ff 	movw	r6, #32767	; 0x7fff
 801bc06:	4622      	mov	r2, r4
 801bc08:	a805      	add	r0, sp, #20
 801bc0a:	f845 1d68 	str.w	r1, [r5, #-104]!
 801bc0e:	462b      	mov	r3, r5
 801bc10:	f000 ffd4 	bl	801cbbc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801bc14:	b1d8      	cbz	r0, 801bc4e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 801bc16:	280a      	cmp	r0, #10
 801bc18:	d012      	beq.n	801bc40 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801bc1a:	9804      	ldr	r0, [sp, #16]
 801bc1c:	b180      	cbz	r0, 801bc40 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801bc1e:	7b47      	ldrb	r7, [r0, #13]
 801bc20:	88e2      	ldrh	r2, [r4, #6]
 801bc22:	00fb      	lsls	r3, r7, #3
 801bc24:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801bc28:	7a03      	ldrb	r3, [r0, #8]
 801bc2a:	430b      	orrs	r3, r1
 801bc2c:	0679      	lsls	r1, r7, #25
 801bc2e:	bf44      	itt	mi
 801bc30:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801bc34:	b21b      	sxthmi	r3, r3
 801bc36:	1ad3      	subs	r3, r2, r3
 801bc38:	b21b      	sxth	r3, r3
 801bc3a:	429e      	cmp	r6, r3
 801bc3c:	bfa8      	it	ge
 801bc3e:	461e      	movge	r6, r3
 801bc40:	462b      	mov	r3, r5
 801bc42:	4622      	mov	r2, r4
 801bc44:	2100      	movs	r1, #0
 801bc46:	a805      	add	r0, sp, #20
 801bc48:	f000 ffb8 	bl	801cbbc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801bc4c:	e7e2      	b.n	801bc14 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801bc4e:	4630      	mov	r0, r6
 801bc50:	b01e      	add	sp, #120	; 0x78
 801bc52:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801bc56:	b003      	add	sp, #12
 801bc58:	4770      	bx	lr

0801bc5a <_ZNK8touchgfx8Drawable10invalidateEv>:
 801bc5a:	b513      	push	{r0, r1, r4, lr}
 801bc5c:	6803      	ldr	r3, [r0, #0]
 801bc5e:	2400      	movs	r4, #0
 801bc60:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801bc64:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801bc68:	f8ad 1004 	strh.w	r1, [sp, #4]
 801bc6c:	4669      	mov	r1, sp
 801bc6e:	691b      	ldr	r3, [r3, #16]
 801bc70:	9400      	str	r4, [sp, #0]
 801bc72:	f8ad 2006 	strh.w	r2, [sp, #6]
 801bc76:	4798      	blx	r3
 801bc78:	b002      	add	sp, #8
 801bc7a:	bd10      	pop	{r4, pc}

0801bc7c <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801bc7c:	b538      	push	{r3, r4, r5, lr}
 801bc7e:	680b      	ldr	r3, [r1, #0]
 801bc80:	460c      	mov	r4, r1
 801bc82:	4605      	mov	r5, r0
 801bc84:	68db      	ldr	r3, [r3, #12]
 801bc86:	4798      	blx	r3
 801bc88:	6823      	ldr	r3, [r4, #0]
 801bc8a:	4620      	mov	r0, r4
 801bc8c:	4629      	mov	r1, r5
 801bc8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bc90:	4798      	blx	r3
 801bc92:	4628      	mov	r0, r5
 801bc94:	bd38      	pop	{r3, r4, r5, pc}

0801bc96 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801bc96:	b410      	push	{r4}
 801bc98:	880a      	ldrh	r2, [r1, #0]
 801bc9a:	8884      	ldrh	r4, [r0, #4]
 801bc9c:	4422      	add	r2, r4
 801bc9e:	800a      	strh	r2, [r1, #0]
 801bca0:	884a      	ldrh	r2, [r1, #2]
 801bca2:	88c4      	ldrh	r4, [r0, #6]
 801bca4:	4422      	add	r2, r4
 801bca6:	804a      	strh	r2, [r1, #2]
 801bca8:	6940      	ldr	r0, [r0, #20]
 801bcaa:	b120      	cbz	r0, 801bcb6 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801bcac:	6803      	ldr	r3, [r0, #0]
 801bcae:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bcb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bcb4:	4718      	bx	r3
 801bcb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bcba:	4770      	bx	lr

0801bcbc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801bcbc:	b570      	push	{r4, r5, r6, lr}
 801bcbe:	8882      	ldrh	r2, [r0, #4]
 801bcc0:	460c      	mov	r4, r1
 801bcc2:	880b      	ldrh	r3, [r1, #0]
 801bcc4:	4605      	mov	r5, r0
 801bcc6:	4413      	add	r3, r2
 801bcc8:	800b      	strh	r3, [r1, #0]
 801bcca:	884b      	ldrh	r3, [r1, #2]
 801bccc:	88c2      	ldrh	r2, [r0, #6]
 801bcce:	4413      	add	r3, r2
 801bcd0:	804b      	strh	r3, [r1, #2]
 801bcd2:	1d01      	adds	r1, r0, #4
 801bcd4:	4620      	mov	r0, r4
 801bcd6:	f7fb fe65 	bl	80179a4 <_ZN8touchgfx4RectaNERKS0_>
 801bcda:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801bcde:	2b00      	cmp	r3, #0
 801bce0:	dd0b      	ble.n	801bcfa <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801bce2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801bce6:	2b00      	cmp	r3, #0
 801bce8:	dd07      	ble.n	801bcfa <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801bcea:	6968      	ldr	r0, [r5, #20]
 801bcec:	b128      	cbz	r0, 801bcfa <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801bcee:	6803      	ldr	r3, [r0, #0]
 801bcf0:	4621      	mov	r1, r4
 801bcf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bcf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bcf8:	4718      	bx	r3
 801bcfa:	bd70      	pop	{r4, r5, r6, pc}

0801bcfc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801bcfc:	b570      	push	{r4, r5, r6, lr}
 801bcfe:	8882      	ldrh	r2, [r0, #4]
 801bd00:	460c      	mov	r4, r1
 801bd02:	880b      	ldrh	r3, [r1, #0]
 801bd04:	4605      	mov	r5, r0
 801bd06:	4413      	add	r3, r2
 801bd08:	800b      	strh	r3, [r1, #0]
 801bd0a:	884b      	ldrh	r3, [r1, #2]
 801bd0c:	88c2      	ldrh	r2, [r0, #6]
 801bd0e:	4413      	add	r3, r2
 801bd10:	804b      	strh	r3, [r1, #2]
 801bd12:	1d01      	adds	r1, r0, #4
 801bd14:	4620      	mov	r0, r4
 801bd16:	f7fb fe45 	bl	80179a4 <_ZN8touchgfx4RectaNERKS0_>
 801bd1a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801bd1e:	2b00      	cmp	r3, #0
 801bd20:	dd19      	ble.n	801bd56 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801bd22:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801bd26:	2b00      	cmp	r3, #0
 801bd28:	dd15      	ble.n	801bd56 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801bd2a:	6968      	ldr	r0, [r5, #20]
 801bd2c:	b128      	cbz	r0, 801bd3a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801bd2e:	6803      	ldr	r3, [r0, #0]
 801bd30:	4621      	mov	r1, r4
 801bd32:	691b      	ldr	r3, [r3, #16]
 801bd34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bd38:	4718      	bx	r3
 801bd3a:	4b07      	ldr	r3, [pc, #28]	; (801bd58 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801bd3c:	681b      	ldr	r3, [r3, #0]
 801bd3e:	3304      	adds	r3, #4
 801bd40:	429d      	cmp	r5, r3
 801bd42:	d108      	bne.n	801bd56 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801bd44:	f7fe ff10 	bl	801ab68 <_ZN8touchgfx11Application11getInstanceEv>
 801bd48:	6803      	ldr	r3, [r0, #0]
 801bd4a:	6821      	ldr	r1, [r4, #0]
 801bd4c:	6862      	ldr	r2, [r4, #4]
 801bd4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bd50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bd54:	4718      	bx	r3
 801bd56:	bd70      	pop	{r4, r5, r6, pc}
 801bd58:	24006d74 	.word	0x24006d74

0801bd5c <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801bd5c:	b570      	push	{r4, r5, r6, lr}
 801bd5e:	4604      	mov	r4, r0
 801bd60:	4616      	mov	r6, r2
 801bd62:	460d      	mov	r5, r1
 801bd64:	b901      	cbnz	r1, 801bd68 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801bd66:	b192      	cbz	r2, 801bd8e <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801bd68:	6823      	ldr	r3, [r4, #0]
 801bd6a:	4620      	mov	r0, r4
 801bd6c:	699b      	ldr	r3, [r3, #24]
 801bd6e:	4798      	blx	r3
 801bd70:	88e2      	ldrh	r2, [r4, #6]
 801bd72:	88a1      	ldrh	r1, [r4, #4]
 801bd74:	4620      	mov	r0, r4
 801bd76:	4432      	add	r2, r6
 801bd78:	4429      	add	r1, r5
 801bd7a:	b212      	sxth	r2, r2
 801bd7c:	b209      	sxth	r1, r1
 801bd7e:	f7e9 f978 	bl	8005072 <_ZN8touchgfx8Drawable5setXYEss>
 801bd82:	6823      	ldr	r3, [r4, #0]
 801bd84:	4620      	mov	r0, r4
 801bd86:	699b      	ldr	r3, [r3, #24]
 801bd88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bd8c:	4718      	bx	r3
 801bd8e:	bd70      	pop	{r4, r5, r6, pc}

0801bd90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801bd90:	b510      	push	{r4, lr}
 801bd92:	2300      	movs	r3, #0
 801bd94:	4604      	mov	r4, r0
 801bd96:	4608      	mov	r0, r1
 801bd98:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801bd9c:	8023      	strh	r3, [r4, #0]
 801bd9e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801bda2:	8063      	strh	r3, [r4, #2]
 801bda4:	6803      	ldr	r3, [r0, #0]
 801bda6:	80a1      	strh	r1, [r4, #4]
 801bda8:	4621      	mov	r1, r4
 801bdaa:	80e2      	strh	r2, [r4, #6]
 801bdac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bdae:	4798      	blx	r3
 801bdb0:	4620      	mov	r0, r4
 801bdb2:	bd10      	pop	{r4, pc}

0801bdb4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 801bdb4:	b530      	push	{r4, r5, lr}
 801bdb6:	8083      	strh	r3, [r0, #4]
 801bdb8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801bdbc:	f89d 5018 	ldrb.w	r5, [sp, #24]
 801bdc0:	80c3      	strh	r3, [r0, #6]
 801bdc2:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801bdc6:	6141      	str	r1, [r0, #20]
 801bdc8:	7203      	strb	r3, [r0, #8]
 801bdca:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801bdce:	8302      	strh	r2, [r0, #24]
 801bdd0:	7243      	strb	r3, [r0, #9]
 801bdd2:	7a83      	ldrb	r3, [r0, #10]
 801bdd4:	f365 0306 	bfi	r3, r5, #0, #7
 801bdd8:	f89d 501c 	ldrb.w	r5, [sp, #28]
 801bddc:	f365 13c7 	bfi	r3, r5, #7, #1
 801bde0:	7283      	strb	r3, [r0, #10]
 801bde2:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801bde6:	72c3      	strb	r3, [r0, #11]
 801bde8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 801bdec:	7303      	strb	r3, [r0, #12]
 801bdee:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801bdf2:	81c3      	strh	r3, [r0, #14]
 801bdf4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 801bdf8:	8203      	strh	r3, [r0, #16]
 801bdfa:	4b01      	ldr	r3, [pc, #4]	; (801be00 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 801bdfc:	6003      	str	r3, [r0, #0]
 801bdfe:	bd30      	pop	{r4, r5, pc}
 801be00:	0802935c 	.word	0x0802935c

0801be04 <_ZNK8touchgfx9ConstFont4findEt>:
 801be04:	b5f0      	push	{r4, r5, r6, r7, lr}
 801be06:	6944      	ldr	r4, [r0, #20]
 801be08:	b3bc      	cbz	r4, 801be7a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801be0a:	88a3      	ldrh	r3, [r4, #4]
 801be0c:	8b02      	ldrh	r2, [r0, #24]
 801be0e:	1acb      	subs	r3, r1, r3
 801be10:	f102 32ff 	add.w	r2, r2, #4294967295
 801be14:	d431      	bmi.n	801be7a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801be16:	4293      	cmp	r3, r2
 801be18:	dd0c      	ble.n	801be34 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801be1a:	230e      	movs	r3, #14
 801be1c:	fb03 4302 	mla	r3, r3, r2, r4
 801be20:	889b      	ldrh	r3, [r3, #4]
 801be22:	1a5b      	subs	r3, r3, r1
 801be24:	1ad3      	subs	r3, r2, r3
 801be26:	429a      	cmp	r2, r3
 801be28:	db27      	blt.n	801be7a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801be2a:	2b00      	cmp	r3, #0
 801be2c:	bfbc      	itt	lt
 801be2e:	2302      	movlt	r3, #2
 801be30:	fb92 f3f3 	sdivlt	r3, r2, r3
 801be34:	2500      	movs	r5, #0
 801be36:	260e      	movs	r6, #14
 801be38:	4295      	cmp	r5, r2
 801be3a:	dc1e      	bgt.n	801be7a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801be3c:	fb06 4003 	mla	r0, r6, r3, r4
 801be40:	8887      	ldrh	r7, [r0, #4]
 801be42:	42b9      	cmp	r1, r7
 801be44:	d01a      	beq.n	801be7c <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801be46:	d20d      	bcs.n	801be64 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801be48:	1e5a      	subs	r2, r3, #1
 801be4a:	4295      	cmp	r5, r2
 801be4c:	dc15      	bgt.n	801be7a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801be4e:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801be52:	1a5b      	subs	r3, r3, r1
 801be54:	1ad3      	subs	r3, r2, r3
 801be56:	429a      	cmp	r2, r3
 801be58:	db0f      	blt.n	801be7a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801be5a:	429d      	cmp	r5, r3
 801be5c:	ddec      	ble.n	801be38 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801be5e:	1953      	adds	r3, r2, r5
 801be60:	105b      	asrs	r3, r3, #1
 801be62:	e7e9      	b.n	801be38 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801be64:	1c5d      	adds	r5, r3, #1
 801be66:	42aa      	cmp	r2, r5
 801be68:	db07      	blt.n	801be7a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801be6a:	8a43      	ldrh	r3, [r0, #18]
 801be6c:	1acb      	subs	r3, r1, r3
 801be6e:	442b      	add	r3, r5
 801be70:	429d      	cmp	r5, r3
 801be72:	dc02      	bgt.n	801be7a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801be74:	429a      	cmp	r2, r3
 801be76:	dadf      	bge.n	801be38 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801be78:	e7f1      	b.n	801be5e <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801be7a:	2000      	movs	r0, #0
 801be7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801be7e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801be7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801be80:	4604      	mov	r4, r0
 801be82:	4617      	mov	r7, r2
 801be84:	461e      	mov	r6, r3
 801be86:	b911      	cbnz	r1, 801be8e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801be88:	2500      	movs	r5, #0
 801be8a:	4628      	mov	r0, r5
 801be8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801be8e:	290a      	cmp	r1, #10
 801be90:	d0fa      	beq.n	801be88 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801be92:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801be96:	4291      	cmp	r1, r2
 801be98:	d0f6      	beq.n	801be88 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801be9a:	f242 020b 	movw	r2, #8203	; 0x200b
 801be9e:	4291      	cmp	r1, r2
 801bea0:	d0f2      	beq.n	801be88 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801bea2:	f7ff ffaf 	bl	801be04 <_ZNK8touchgfx9ConstFont4findEt>
 801bea6:	4605      	mov	r5, r0
 801bea8:	b950      	cbnz	r0, 801bec0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801beaa:	6823      	ldr	r3, [r4, #0]
 801beac:	4620      	mov	r0, r4
 801beae:	691b      	ldr	r3, [r3, #16]
 801beb0:	4798      	blx	r3
 801beb2:	4601      	mov	r1, r0
 801beb4:	4620      	mov	r0, r4
 801beb6:	f7ff ffa5 	bl	801be04 <_ZNK8touchgfx9ConstFont4findEt>
 801beba:	4605      	mov	r5, r0
 801bebc:	2800      	cmp	r0, #0
 801bebe:	d0e3      	beq.n	801be88 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801bec0:	6823      	ldr	r3, [r4, #0]
 801bec2:	4629      	mov	r1, r5
 801bec4:	4620      	mov	r0, r4
 801bec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801bec8:	4798      	blx	r3
 801beca:	6038      	str	r0, [r7, #0]
 801becc:	6823      	ldr	r3, [r4, #0]
 801bece:	4620      	mov	r0, r4
 801bed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bed2:	4798      	blx	r3
 801bed4:	7030      	strb	r0, [r6, #0]
 801bed6:	e7d8      	b.n	801be8a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801bed8 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801bed8:	2000      	movs	r0, #0
 801beda:	4770      	bx	lr

0801bedc <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801bedc:	2001      	movs	r0, #1
 801bede:	4770      	bx	lr

0801bee0 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801bee0:	2002      	movs	r0, #2
 801bee2:	4770      	bx	lr

0801bee4 <_ZN8touchgfx12GestureEventD1Ev>:
 801bee4:	4770      	bx	lr

0801bee6 <_ZN8touchgfx9DragEventD1Ev>:
 801bee6:	4770      	bx	lr

0801bee8 <_ZN8touchgfx10ClickEventD1Ev>:
 801bee8:	4770      	bx	lr

0801beea <_ZN8touchgfx10ClickEventD0Ev>:
 801beea:	b510      	push	{r4, lr}
 801beec:	4604      	mov	r4, r0
 801beee:	210c      	movs	r1, #12
 801bef0:	f00a fdd1 	bl	8026a96 <_ZdlPvj>
 801bef4:	4620      	mov	r0, r4
 801bef6:	bd10      	pop	{r4, pc}

0801bef8 <_ZN8touchgfx9DragEventD0Ev>:
 801bef8:	b510      	push	{r4, lr}
 801befa:	4604      	mov	r4, r0
 801befc:	2110      	movs	r1, #16
 801befe:	f00a fdca 	bl	8026a96 <_ZdlPvj>
 801bf02:	4620      	mov	r0, r4
 801bf04:	bd10      	pop	{r4, pc}

0801bf06 <_ZN8touchgfx12GestureEventD0Ev>:
 801bf06:	b510      	push	{r4, lr}
 801bf08:	4604      	mov	r4, r0
 801bf0a:	210c      	movs	r1, #12
 801bf0c:	f00a fdc3 	bl	8026a96 <_ZdlPvj>
 801bf10:	4620      	mov	r0, r4
 801bf12:	bd10      	pop	{r4, pc}

0801bf14 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801bf14:	b530      	push	{r4, r5, lr}
 801bf16:	460d      	mov	r5, r1
 801bf18:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801bf1a:	b087      	sub	sp, #28
 801bf1c:	4604      	mov	r4, r0
 801bf1e:	b301      	cbz	r1, 801bf62 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801bf20:	a801      	add	r0, sp, #4
 801bf22:	f7ff ff35 	bl	801bd90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801bf26:	892a      	ldrh	r2, [r5, #8]
 801bf28:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801bf2c:	7928      	ldrb	r0, [r5, #4]
 801bf2e:	1ad2      	subs	r2, r2, r3
 801bf30:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801bf32:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801bf36:	441a      	add	r2, r3
 801bf38:	896b      	ldrh	r3, [r5, #10]
 801bf3a:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801bf3e:	f88d 0010 	strb.w	r0, [sp, #16]
 801bf42:	1b5b      	subs	r3, r3, r5
 801bf44:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801bf46:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801bf48:	442b      	add	r3, r5
 801bf4a:	4d07      	ldr	r5, [pc, #28]	; (801bf68 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801bf4c:	f8ad 1012 	strh.w	r1, [sp, #18]
 801bf50:	a903      	add	r1, sp, #12
 801bf52:	9503      	str	r5, [sp, #12]
 801bf54:	f8ad 2014 	strh.w	r2, [sp, #20]
 801bf58:	f8ad 3016 	strh.w	r3, [sp, #22]
 801bf5c:	6803      	ldr	r3, [r0, #0]
 801bf5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bf60:	4798      	blx	r3
 801bf62:	b007      	add	sp, #28
 801bf64:	bd30      	pop	{r4, r5, pc}
 801bf66:	bf00      	nop
 801bf68:	080293e4 	.word	0x080293e4

0801bf6c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801bf6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bf70:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801bf72:	b08a      	sub	sp, #40	; 0x28
 801bf74:	4604      	mov	r4, r0
 801bf76:	460d      	mov	r5, r1
 801bf78:	b113      	cbz	r3, 801bf80 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801bf7a:	790b      	ldrb	r3, [r1, #4]
 801bf7c:	2b00      	cmp	r3, #0
 801bf7e:	d044      	beq.n	801c00a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801bf80:	f104 0804 	add.w	r8, r4, #4
 801bf84:	a803      	add	r0, sp, #12
 801bf86:	4641      	mov	r1, r8
 801bf88:	f7ff ff02 	bl	801bd90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801bf8c:	792b      	ldrb	r3, [r5, #4]
 801bf8e:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801bf92:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801bf96:	b983      	cbnz	r3, 801bfba <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801bf98:	f104 0336 	add.w	r3, r4, #54	; 0x36
 801bf9c:	892a      	ldrh	r2, [r5, #8]
 801bf9e:	88e9      	ldrh	r1, [r5, #6]
 801bfa0:	4640      	mov	r0, r8
 801bfa2:	1b92      	subs	r2, r2, r6
 801bfa4:	9301      	str	r3, [sp, #4]
 801bfa6:	1bc9      	subs	r1, r1, r7
 801bfa8:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801bfac:	b212      	sxth	r2, r2
 801bfae:	9300      	str	r3, [sp, #0]
 801bfb0:	b209      	sxth	r1, r1
 801bfb2:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801bfb6:	f7fb fc13 	bl	80177e0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801bfba:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801bfbc:	b329      	cbz	r1, 801c00a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801bfbe:	a805      	add	r0, sp, #20
 801bfc0:	f7ff fee6 	bl	801bd90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801bfc4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801bfc8:	792b      	ldrb	r3, [r5, #4]
 801bfca:	a907      	add	r1, sp, #28
 801bfcc:	1abf      	subs	r7, r7, r2
 801bfce:	88ea      	ldrh	r2, [r5, #6]
 801bfd0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801bfd2:	4417      	add	r7, r2
 801bfd4:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801bfd6:	f88d 3020 	strb.w	r3, [sp, #32]
 801bfda:	4417      	add	r7, r2
 801bfdc:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801bfe0:	1ab6      	subs	r6, r6, r2
 801bfe2:	892a      	ldrh	r2, [r5, #8]
 801bfe4:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801bfe8:	4416      	add	r6, r2
 801bfea:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801bfec:	4416      	add	r6, r2
 801bfee:	4a08      	ldr	r2, [pc, #32]	; (801c010 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801bff0:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801bff4:	2600      	movs	r6, #0
 801bff6:	9207      	str	r2, [sp, #28]
 801bff8:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 801bffc:	6803      	ldr	r3, [r0, #0]
 801bffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c000:	4798      	blx	r3
 801c002:	792b      	ldrb	r3, [r5, #4]
 801c004:	b10b      	cbz	r3, 801c00a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801c006:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801c00a:	b00a      	add	sp, #40	; 0x28
 801c00c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c010:	080293bc 	.word	0x080293bc

0801c014 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801c014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c018:	460c      	mov	r4, r1
 801c01a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801c01c:	b088      	sub	sp, #32
 801c01e:	4605      	mov	r5, r0
 801c020:	2900      	cmp	r1, #0
 801c022:	d06d      	beq.n	801c100 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801c024:	4668      	mov	r0, sp
 801c026:	f7ff feb3 	bl	801bd90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c02a:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 801c02c:	88e3      	ldrh	r3, [r4, #6]
 801c02e:	f9bd 8000 	ldrsh.w	r8, [sp]
 801c032:	440b      	add	r3, r1
 801c034:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801c038:	b21b      	sxth	r3, r3
 801c03a:	4543      	cmp	r3, r8
 801c03c:	db31      	blt.n	801c0a2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c03e:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801c042:	44c4      	add	ip, r8
 801c044:	fa0f fc8c 	sxth.w	ip, ip
 801c048:	4563      	cmp	r3, ip
 801c04a:	da2a      	bge.n	801c0a2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c04c:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801c04e:	8926      	ldrh	r6, [r4, #8]
 801c050:	4416      	add	r6, r2
 801c052:	b236      	sxth	r6, r6
 801c054:	42be      	cmp	r6, r7
 801c056:	db24      	blt.n	801c0a2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c058:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801c05c:	4438      	add	r0, r7
 801c05e:	b200      	sxth	r0, r0
 801c060:	4286      	cmp	r6, r0
 801c062:	da1e      	bge.n	801c0a2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c064:	8963      	ldrh	r3, [r4, #10]
 801c066:	4419      	add	r1, r3
 801c068:	b209      	sxth	r1, r1
 801c06a:	4541      	cmp	r1, r8
 801c06c:	db08      	blt.n	801c080 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801c06e:	4561      	cmp	r1, ip
 801c070:	da06      	bge.n	801c080 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801c072:	89a3      	ldrh	r3, [r4, #12]
 801c074:	441a      	add	r2, r3
 801c076:	b212      	sxth	r2, r2
 801c078:	42ba      	cmp	r2, r7
 801c07a:	db01      	blt.n	801c080 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801c07c:	4282      	cmp	r2, r0
 801c07e:	db10      	blt.n	801c0a2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c080:	4b21      	ldr	r3, [pc, #132]	; (801c108 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801c082:	a904      	add	r1, sp, #16
 801c084:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801c086:	9304      	str	r3, [sp, #16]
 801c088:	2302      	movs	r3, #2
 801c08a:	f88d 3014 	strb.w	r3, [sp, #20]
 801c08e:	2300      	movs	r3, #0
 801c090:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c094:	f8ad 3018 	strh.w	r3, [sp, #24]
 801c098:	f8ad 301a 	strh.w	r3, [sp, #26]
 801c09c:	6803      	ldr	r3, [r0, #0]
 801c09e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c0a0:	4798      	blx	r3
 801c0a2:	1d29      	adds	r1, r5, #4
 801c0a4:	a802      	add	r0, sp, #8
 801c0a6:	f7ff fe73 	bl	801bd90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c0aa:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801c0ae:	88e0      	ldrh	r0, [r4, #6]
 801c0b0:	eba3 0808 	sub.w	r8, r3, r8
 801c0b4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801c0b8:	7921      	ldrb	r1, [r4, #4]
 801c0ba:	fa1f f888 	uxth.w	r8, r8
 801c0be:	1bdf      	subs	r7, r3, r7
 801c0c0:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801c0c4:	b2bb      	uxth	r3, r7
 801c0c6:	4440      	add	r0, r8
 801c0c8:	8922      	ldrh	r2, [r4, #8]
 801c0ca:	8967      	ldrh	r7, [r4, #10]
 801c0cc:	4460      	add	r0, ip
 801c0ce:	89a4      	ldrh	r4, [r4, #12]
 801c0d0:	441a      	add	r2, r3
 801c0d2:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801c0d4:	44b8      	add	r8, r7
 801c0d6:	4423      	add	r3, r4
 801c0d8:	f8ad 0016 	strh.w	r0, [sp, #22]
 801c0dc:	4432      	add	r2, r6
 801c0de:	44e0      	add	r8, ip
 801c0e0:	4433      	add	r3, r6
 801c0e2:	4c0a      	ldr	r4, [pc, #40]	; (801c10c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801c0e4:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801c0e6:	f88d 1014 	strb.w	r1, [sp, #20]
 801c0ea:	a904      	add	r1, sp, #16
 801c0ec:	9404      	str	r4, [sp, #16]
 801c0ee:	f8ad 2018 	strh.w	r2, [sp, #24]
 801c0f2:	f8ad 801a 	strh.w	r8, [sp, #26]
 801c0f6:	f8ad 301c 	strh.w	r3, [sp, #28]
 801c0fa:	6803      	ldr	r3, [r0, #0]
 801c0fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c0fe:	4798      	blx	r3
 801c100:	b008      	add	sp, #32
 801c102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c106:	bf00      	nop
 801c108:	080293bc 	.word	0x080293bc
 801c10c:	080293d0 	.word	0x080293d0

0801c110 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801c110:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c112:	4604      	mov	r4, r0
 801c114:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801c118:	3201      	adds	r2, #1
 801c11a:	d112      	bne.n	801c142 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801c11c:	2500      	movs	r5, #0
 801c11e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801c122:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801c126:	6803      	ldr	r3, [r0, #0]
 801c128:	9500      	str	r5, [sp, #0]
 801c12a:	466d      	mov	r5, sp
 801c12c:	f8ad 1004 	strh.w	r1, [sp, #4]
 801c130:	f8ad 2006 	strh.w	r2, [sp, #6]
 801c134:	4629      	mov	r1, r5
 801c136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c138:	4798      	blx	r3
 801c13a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801c13e:	e884 0003 	stmia.w	r4, {r0, r1}
 801c142:	4620      	mov	r0, r4
 801c144:	b003      	add	sp, #12
 801c146:	bd30      	pop	{r4, r5, pc}

0801c148 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801c148:	b513      	push	{r0, r1, r4, lr}
 801c14a:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801c14e:	4604      	mov	r4, r0
 801c150:	3301      	adds	r3, #1
 801c152:	d109      	bne.n	801c168 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801c154:	4601      	mov	r1, r0
 801c156:	4668      	mov	r0, sp
 801c158:	f7ff fe1a 	bl	801bd90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c15c:	f8bd 3000 	ldrh.w	r3, [sp]
 801c160:	8423      	strh	r3, [r4, #32]
 801c162:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c166:	8463      	strh	r3, [r4, #34]	; 0x22
 801c168:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801c16c:	b002      	add	sp, #8
 801c16e:	bd10      	pop	{r4, pc}

0801c170 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801c170:	b513      	push	{r0, r1, r4, lr}
 801c172:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801c176:	4604      	mov	r4, r0
 801c178:	3301      	adds	r3, #1
 801c17a:	d109      	bne.n	801c190 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801c17c:	4601      	mov	r1, r0
 801c17e:	4668      	mov	r0, sp
 801c180:	f7ff fe06 	bl	801bd90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c184:	f8bd 3000 	ldrh.w	r3, [sp]
 801c188:	8423      	strh	r3, [r4, #32]
 801c18a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c18e:	8463      	strh	r3, [r4, #34]	; 0x22
 801c190:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801c194:	b002      	add	sp, #8
 801c196:	bd10      	pop	{r4, pc}

0801c198 <_ZN8touchgfx6ScreenC1Ev>:
 801c198:	b570      	push	{r4, r5, r6, lr}
 801c19a:	4b17      	ldr	r3, [pc, #92]	; (801c1f8 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801c19c:	4605      	mov	r5, r0
 801c19e:	4a17      	ldr	r2, [pc, #92]	; (801c1fc <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801c1a0:	2101      	movs	r1, #1
 801c1a2:	f845 3b04 	str.w	r3, [r5], #4
 801c1a6:	2300      	movs	r3, #0
 801c1a8:	6042      	str	r2, [r0, #4]
 801c1aa:	4604      	mov	r4, r0
 801c1ac:	8103      	strh	r3, [r0, #8]
 801c1ae:	8143      	strh	r3, [r0, #10]
 801c1b0:	8183      	strh	r3, [r0, #12]
 801c1b2:	81c3      	strh	r3, [r0, #14]
 801c1b4:	8203      	strh	r3, [r0, #16]
 801c1b6:	8243      	strh	r3, [r0, #18]
 801c1b8:	8283      	strh	r3, [r0, #20]
 801c1ba:	82c3      	strh	r3, [r0, #22]
 801c1bc:	6203      	str	r3, [r0, #32]
 801c1be:	8483      	strh	r3, [r0, #36]	; 0x24
 801c1c0:	84c3      	strh	r3, [r0, #38]	; 0x26
 801c1c2:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801c1c6:	6343      	str	r3, [r0, #52]	; 0x34
 801c1c8:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801c1cc:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801c1d0:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801c1d4:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801c1d8:	4b09      	ldr	r3, [pc, #36]	; (801c200 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801c1da:	4628      	mov	r0, r5
 801c1dc:	f9b3 6000 	ldrsh.w	r6, [r3]
 801c1e0:	6b93      	ldr	r3, [r2, #56]	; 0x38
 801c1e2:	4a08      	ldr	r2, [pc, #32]	; (801c204 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801c1e4:	f9b2 1000 	ldrsh.w	r1, [r2]
 801c1e8:	4798      	blx	r3
 801c1ea:	6863      	ldr	r3, [r4, #4]
 801c1ec:	4628      	mov	r0, r5
 801c1ee:	4631      	mov	r1, r6
 801c1f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c1f2:	4798      	blx	r3
 801c1f4:	4620      	mov	r0, r4
 801c1f6:	bd70      	pop	{r4, r5, r6, pc}
 801c1f8:	080293f8 	.word	0x080293f8
 801c1fc:	08028f68 	.word	0x08028f68
 801c200:	24006d2e 	.word	0x24006d2e
 801c204:	24006d2c 	.word	0x24006d2c

0801c208 <_ZN8touchgfx6Screen4drawEv>:
 801c208:	4b09      	ldr	r3, [pc, #36]	; (801c230 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801c20a:	b507      	push	{r0, r1, r2, lr}
 801c20c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c210:	2100      	movs	r1, #0
 801c212:	4b08      	ldr	r3, [pc, #32]	; (801c234 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801c214:	9100      	str	r1, [sp, #0]
 801c216:	4669      	mov	r1, sp
 801c218:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c21c:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c220:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c224:	6803      	ldr	r3, [r0, #0]
 801c226:	689b      	ldr	r3, [r3, #8]
 801c228:	4798      	blx	r3
 801c22a:	b003      	add	sp, #12
 801c22c:	f85d fb04 	ldr.w	pc, [sp], #4
 801c230:	24006d2c 	.word	0x24006d2c
 801c234:	24006d2e 	.word	0x24006d2e

0801c238 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801c238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c23c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801c240:	b089      	sub	sp, #36	; 0x24
 801c242:	4680      	mov	r8, r0
 801c244:	460c      	mov	r4, r1
 801c246:	2b00      	cmp	r3, #0
 801c248:	4615      	mov	r5, r2
 801c24a:	dd0e      	ble.n	801c26a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c24c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801c250:	2b00      	cmp	r3, #0
 801c252:	dd0a      	ble.n	801c26a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c254:	4628      	mov	r0, r5
 801c256:	f7ff ff5b 	bl	801c110 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801c25a:	4621      	mov	r1, r4
 801c25c:	f7fe fba6 	bl	801a9ac <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c260:	69eb      	ldr	r3, [r5, #28]
 801c262:	b928      	cbnz	r0, 801c270 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801c264:	461d      	mov	r5, r3
 801c266:	2b00      	cmp	r3, #0
 801c268:	d1f4      	bne.n	801c254 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801c26a:	b009      	add	sp, #36	; 0x24
 801c26c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c270:	ae04      	add	r6, sp, #16
 801c272:	2b00      	cmp	r3, #0
 801c274:	f000 80b5 	beq.w	801c3e2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801c278:	682b      	ldr	r3, [r5, #0]
 801c27a:	4629      	mov	r1, r5
 801c27c:	a802      	add	r0, sp, #8
 801c27e:	68db      	ldr	r3, [r3, #12]
 801c280:	4798      	blx	r3
 801c282:	4628      	mov	r0, r5
 801c284:	f7ff ff60 	bl	801c148 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801c288:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801c28c:	4407      	add	r7, r0
 801c28e:	4628      	mov	r0, r5
 801c290:	f7ff ff6e 	bl	801c170 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801c294:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801c298:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801c29c:	b23f      	sxth	r7, r7
 801c29e:	4418      	add	r0, r3
 801c2a0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801c2a4:	4621      	mov	r1, r4
 801c2a6:	f8ad 2014 	strh.w	r2, [sp, #20]
 801c2aa:	f8ad 0012 	strh.w	r0, [sp, #18]
 801c2ae:	4630      	mov	r0, r6
 801c2b0:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c2b4:	f8ad 7010 	strh.w	r7, [sp, #16]
 801c2b8:	f7fb fb74 	bl	80179a4 <_ZN8touchgfx4RectaNERKS0_>
 801c2bc:	4628      	mov	r0, r5
 801c2be:	f7ff ff27 	bl	801c110 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801c2c2:	ab06      	add	r3, sp, #24
 801c2c4:	4602      	mov	r2, r0
 801c2c6:	e896 0003 	ldmia.w	r6, {r0, r1}
 801c2ca:	e883 0003 	stmia.w	r3, {r0, r1}
 801c2ce:	4611      	mov	r1, r2
 801c2d0:	4618      	mov	r0, r3
 801c2d2:	f7fb fb67 	bl	80179a4 <_ZN8touchgfx4RectaNERKS0_>
 801c2d6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801c2da:	f9b4 1000 	ldrsh.w	r1, [r4]
 801c2de:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801c2e2:	4299      	cmp	r1, r3
 801c2e4:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801c2e8:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801c2ec:	d10b      	bne.n	801c306 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801c2ee:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801c2f2:	4552      	cmp	r2, sl
 801c2f4:	d107      	bne.n	801c306 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801c2f6:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801c2fa:	455a      	cmp	r2, fp
 801c2fc:	d103      	bne.n	801c306 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801c2fe:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801c302:	454a      	cmp	r2, r9
 801c304:	d06d      	beq.n	801c3e2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801c306:	f1bb 0f00 	cmp.w	fp, #0
 801c30a:	dd65      	ble.n	801c3d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801c30c:	f1b9 0f00 	cmp.w	r9, #0
 801c310:	dd62      	ble.n	801c3d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801c312:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801c316:	fa1f f08a 	uxth.w	r0, sl
 801c31a:	4552      	cmp	r2, sl
 801c31c:	9000      	str	r0, [sp, #0]
 801c31e:	da12      	bge.n	801c346 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801c320:	9301      	str	r3, [sp, #4]
 801c322:	9b00      	ldr	r3, [sp, #0]
 801c324:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801c328:	f8ad 2012 	strh.w	r2, [sp, #18]
 801c32c:	1a9a      	subs	r2, r3, r2
 801c32e:	f8ad 1010 	strh.w	r1, [sp, #16]
 801c332:	4631      	mov	r1, r6
 801c334:	f8ad 0014 	strh.w	r0, [sp, #20]
 801c338:	4640      	mov	r0, r8
 801c33a:	f8ad 2016 	strh.w	r2, [sp, #22]
 801c33e:	69ea      	ldr	r2, [r5, #28]
 801c340:	f7ff ff7a 	bl	801c238 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c344:	9b01      	ldr	r3, [sp, #4]
 801c346:	f9b4 2000 	ldrsh.w	r2, [r4]
 801c34a:	b29f      	uxth	r7, r3
 801c34c:	429a      	cmp	r2, r3
 801c34e:	da0d      	bge.n	801c36c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801c350:	f8ad 2010 	strh.w	r2, [sp, #16]
 801c354:	1aba      	subs	r2, r7, r2
 801c356:	f8ad a012 	strh.w	sl, [sp, #18]
 801c35a:	4631      	mov	r1, r6
 801c35c:	f8ad 2014 	strh.w	r2, [sp, #20]
 801c360:	4640      	mov	r0, r8
 801c362:	f8ad 9016 	strh.w	r9, [sp, #22]
 801c366:	69ea      	ldr	r2, [r5, #28]
 801c368:	f7ff ff66 	bl	801c238 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c36c:	8822      	ldrh	r2, [r4, #0]
 801c36e:	445f      	add	r7, fp
 801c370:	88a3      	ldrh	r3, [r4, #4]
 801c372:	b2bf      	uxth	r7, r7
 801c374:	4413      	add	r3, r2
 801c376:	b23a      	sxth	r2, r7
 801c378:	b29b      	uxth	r3, r3
 801c37a:	b219      	sxth	r1, r3
 801c37c:	4291      	cmp	r1, r2
 801c37e:	dd0d      	ble.n	801c39c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801c380:	1bdb      	subs	r3, r3, r7
 801c382:	f8ad 2010 	strh.w	r2, [sp, #16]
 801c386:	f8ad a012 	strh.w	sl, [sp, #18]
 801c38a:	4631      	mov	r1, r6
 801c38c:	f8ad 3014 	strh.w	r3, [sp, #20]
 801c390:	4640      	mov	r0, r8
 801c392:	f8ad 9016 	strh.w	r9, [sp, #22]
 801c396:	69ea      	ldr	r2, [r5, #28]
 801c398:	f7ff ff4e 	bl	801c238 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c39c:	88e2      	ldrh	r2, [r4, #6]
 801c39e:	8863      	ldrh	r3, [r4, #2]
 801c3a0:	4413      	add	r3, r2
 801c3a2:	9a00      	ldr	r2, [sp, #0]
 801c3a4:	444a      	add	r2, r9
 801c3a6:	b29b      	uxth	r3, r3
 801c3a8:	fa1f f982 	uxth.w	r9, r2
 801c3ac:	b219      	sxth	r1, r3
 801c3ae:	fa0f f289 	sxth.w	r2, r9
 801c3b2:	428a      	cmp	r2, r1
 801c3b4:	da15      	bge.n	801c3e2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801c3b6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801c3ba:	eba3 0309 	sub.w	r3, r3, r9
 801c3be:	f9b4 0000 	ldrsh.w	r0, [r4]
 801c3c2:	f8ad 1014 	strh.w	r1, [sp, #20]
 801c3c6:	4631      	mov	r1, r6
 801c3c8:	f8ad 0010 	strh.w	r0, [sp, #16]
 801c3cc:	f8ad 2012 	strh.w	r2, [sp, #18]
 801c3d0:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c3d4:	69ea      	ldr	r2, [r5, #28]
 801c3d6:	e001      	b.n	801c3dc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801c3d8:	69ea      	ldr	r2, [r5, #28]
 801c3da:	4621      	mov	r1, r4
 801c3dc:	4640      	mov	r0, r8
 801c3de:	f7ff ff2b 	bl	801c238 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c3e2:	4628      	mov	r0, r5
 801c3e4:	f7ff fe94 	bl	801c110 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801c3e8:	6861      	ldr	r1, [r4, #4]
 801c3ea:	4602      	mov	r2, r0
 801c3ec:	4633      	mov	r3, r6
 801c3ee:	6820      	ldr	r0, [r4, #0]
 801c3f0:	c303      	stmia	r3!, {r0, r1}
 801c3f2:	4611      	mov	r1, r2
 801c3f4:	4630      	mov	r0, r6
 801c3f6:	f7fb fad5 	bl	80179a4 <_ZN8touchgfx4RectaNERKS0_>
 801c3fa:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801c3fe:	2b00      	cmp	r3, #0
 801c400:	f77f af33 	ble.w	801c26a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c404:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801c408:	2b00      	cmp	r3, #0
 801c40a:	f77f af2e 	ble.w	801c26a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c40e:	4628      	mov	r0, r5
 801c410:	f7ff fe9a 	bl	801c148 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801c414:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801c418:	1a18      	subs	r0, r3, r0
 801c41a:	f8ad 0010 	strh.w	r0, [sp, #16]
 801c41e:	4628      	mov	r0, r5
 801c420:	f7ff fea6 	bl	801c170 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801c424:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801c428:	4631      	mov	r1, r6
 801c42a:	1a18      	subs	r0, r3, r0
 801c42c:	f8ad 0012 	strh.w	r0, [sp, #18]
 801c430:	4628      	mov	r0, r5
 801c432:	682b      	ldr	r3, [r5, #0]
 801c434:	689b      	ldr	r3, [r3, #8]
 801c436:	4798      	blx	r3
 801c438:	e717      	b.n	801c26a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801c43a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801c43a:	b570      	push	{r4, r5, r6, lr}
 801c43c:	1d06      	adds	r6, r0, #4
 801c43e:	b086      	sub	sp, #24
 801c440:	460c      	mov	r4, r1
 801c442:	2300      	movs	r3, #0
 801c444:	4631      	mov	r1, r6
 801c446:	4605      	mov	r5, r0
 801c448:	a802      	add	r0, sp, #8
 801c44a:	9301      	str	r3, [sp, #4]
 801c44c:	f7ff fca0 	bl	801bd90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c450:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801c454:	8822      	ldrh	r2, [r4, #0]
 801c456:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801c45a:	1ad2      	subs	r2, r2, r3
 801c45c:	8863      	ldrh	r3, [r4, #2]
 801c45e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801c462:	1a5b      	subs	r3, r3, r1
 801c464:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801c468:	f8ad 2010 	strh.w	r2, [sp, #16]
 801c46c:	aa01      	add	r2, sp, #4
 801c46e:	f8ad 0014 	strh.w	r0, [sp, #20]
 801c472:	4630      	mov	r0, r6
 801c474:	f8ad 1016 	strh.w	r1, [sp, #22]
 801c478:	a904      	add	r1, sp, #16
 801c47a:	f8ad 3012 	strh.w	r3, [sp, #18]
 801c47e:	f7fb fb69 	bl	8017b54 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801c482:	9a01      	ldr	r2, [sp, #4]
 801c484:	b11a      	cbz	r2, 801c48e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801c486:	4621      	mov	r1, r4
 801c488:	4628      	mov	r0, r5
 801c48a:	f7ff fed5 	bl	801c238 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c48e:	b006      	add	sp, #24
 801c490:	bd70      	pop	{r4, r5, r6, pc}

0801c492 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801c492:	4602      	mov	r2, r0
 801c494:	b530      	push	{r4, r5, lr}
 801c496:	4604      	mov	r4, r0
 801c498:	b085      	sub	sp, #20
 801c49a:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801c49e:	460d      	mov	r5, r1
 801c4a0:	466b      	mov	r3, sp
 801c4a2:	6851      	ldr	r1, [r2, #4]
 801c4a4:	c303      	stmia	r3!, {r0, r1}
 801c4a6:	4629      	mov	r1, r5
 801c4a8:	4668      	mov	r0, sp
 801c4aa:	f7fb fa7b 	bl	80179a4 <_ZN8touchgfx4RectaNERKS0_>
 801c4ae:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801c4b2:	b12b      	cbz	r3, 801c4c0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801c4b4:	4669      	mov	r1, sp
 801c4b6:	4620      	mov	r0, r4
 801c4b8:	f7ff ffbf 	bl	801c43a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801c4bc:	b005      	add	sp, #20
 801c4be:	bd30      	pop	{r4, r5, pc}
 801c4c0:	3404      	adds	r4, #4
 801c4c2:	a802      	add	r0, sp, #8
 801c4c4:	4621      	mov	r1, r4
 801c4c6:	f7ff fc63 	bl	801bd90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c4ca:	f8bd 3000 	ldrh.w	r3, [sp]
 801c4ce:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801c4d2:	4669      	mov	r1, sp
 801c4d4:	4620      	mov	r0, r4
 801c4d6:	1a9b      	subs	r3, r3, r2
 801c4d8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801c4dc:	f8ad 3000 	strh.w	r3, [sp]
 801c4e0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c4e4:	1a9b      	subs	r3, r3, r2
 801c4e6:	f8ad 3002 	strh.w	r3, [sp, #2]
 801c4ea:	f7fb fafa 	bl	8017ae2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801c4ee:	e7e5      	b.n	801c4bc <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801c4f0 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801c4f0:	460b      	mov	r3, r1
 801c4f2:	680a      	ldr	r2, [r1, #0]
 801c4f4:	1d01      	adds	r1, r0, #4
 801c4f6:	6992      	ldr	r2, [r2, #24]
 801c4f8:	4618      	mov	r0, r3
 801c4fa:	4710      	bx	r2

0801c4fc <_ZN8touchgfx12TextProviderC1Ev>:
 801c4fc:	b538      	push	{r3, r4, r5, lr}
 801c4fe:	2500      	movs	r5, #0
 801c500:	2302      	movs	r3, #2
 801c502:	4604      	mov	r4, r0
 801c504:	220e      	movs	r2, #14
 801c506:	7403      	strb	r3, [r0, #16]
 801c508:	4629      	mov	r1, r5
 801c50a:	6145      	str	r5, [r0, #20]
 801c50c:	7605      	strb	r5, [r0, #24]
 801c50e:	83c5      	strh	r5, [r0, #30]
 801c510:	8405      	strh	r5, [r0, #32]
 801c512:	86c5      	strh	r5, [r0, #54]	; 0x36
 801c514:	8705      	strh	r5, [r0, #56]	; 0x38
 801c516:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801c518:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801c51c:	e9c0 5500 	strd	r5, r5, [r0]
 801c520:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801c524:	304c      	adds	r0, #76	; 0x4c
 801c526:	f00a fcea 	bl	8026efe <memset>
 801c52a:	2301      	movs	r3, #1
 801c52c:	4620      	mov	r0, r4
 801c52e:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801c532:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801c536:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801c53a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801c53e:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801c542:	f7e9 fbdf 	bl	8005d04 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801c546:	4620      	mov	r0, r4
 801c548:	bd38      	pop	{r3, r4, r5, pc}

0801c54a <_ZN8touchgfx12TextProvider11endOfStringEv>:
 801c54a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801c54c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c550:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 801c552:	fab0 f080 	clz	r0, r0
 801c556:	0940      	lsrs	r0, r0, #5
 801c558:	4770      	bx	lr

0801c55a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801c55a:	b530      	push	{r4, r5, lr}
 801c55c:	2500      	movs	r5, #0
 801c55e:	2401      	movs	r4, #1
 801c560:	6843      	ldr	r3, [r0, #4]
 801c562:	b913      	cbnz	r3, 801c56a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801c564:	6803      	ldr	r3, [r0, #0]
 801c566:	b313      	cbz	r3, 801c5ae <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801c568:	6043      	str	r3, [r0, #4]
 801c56a:	7e03      	ldrb	r3, [r0, #24]
 801c56c:	b143      	cbz	r3, 801c580 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801c56e:	6943      	ldr	r3, [r0, #20]
 801c570:	b12b      	cbz	r3, 801c57e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801c572:	881a      	ldrh	r2, [r3, #0]
 801c574:	b11a      	cbz	r2, 801c57e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801c576:	1c9a      	adds	r2, r3, #2
 801c578:	6142      	str	r2, [r0, #20]
 801c57a:	8818      	ldrh	r0, [r3, #0]
 801c57c:	bd30      	pop	{r4, r5, pc}
 801c57e:	7605      	strb	r5, [r0, #24]
 801c580:	6843      	ldr	r3, [r0, #4]
 801c582:	8819      	ldrh	r1, [r3, #0]
 801c584:	b199      	cbz	r1, 801c5ae <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801c586:	1c9a      	adds	r2, r3, #2
 801c588:	2902      	cmp	r1, #2
 801c58a:	6042      	str	r2, [r0, #4]
 801c58c:	d1f5      	bne.n	801c57a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801c58e:	7c03      	ldrb	r3, [r0, #16]
 801c590:	2b01      	cmp	r3, #1
 801c592:	d8e5      	bhi.n	801c560 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801c594:	1c5a      	adds	r2, r3, #1
 801c596:	3302      	adds	r3, #2
 801c598:	7402      	strb	r2, [r0, #16]
 801c59a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801c59e:	6143      	str	r3, [r0, #20]
 801c5a0:	2b00      	cmp	r3, #0
 801c5a2:	d0dd      	beq.n	801c560 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801c5a4:	881b      	ldrh	r3, [r3, #0]
 801c5a6:	2b00      	cmp	r3, #0
 801c5a8:	d0da      	beq.n	801c560 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801c5aa:	7604      	strb	r4, [r0, #24]
 801c5ac:	e7d8      	b.n	801c560 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801c5ae:	2000      	movs	r0, #0
 801c5b0:	e7e4      	b.n	801c57c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801c5b2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801c5b2:	6001      	str	r1, [r0, #0]
 801c5b4:	2100      	movs	r1, #0
 801c5b6:	b430      	push	{r4, r5}
 801c5b8:	6041      	str	r1, [r0, #4]
 801c5ba:	6815      	ldr	r5, [r2, #0]
 801c5bc:	6085      	str	r5, [r0, #8]
 801c5be:	6852      	ldr	r2, [r2, #4]
 801c5c0:	6443      	str	r3, [r0, #68]	; 0x44
 801c5c2:	9b02      	ldr	r3, [sp, #8]
 801c5c4:	60c2      	str	r2, [r0, #12]
 801c5c6:	7401      	strb	r1, [r0, #16]
 801c5c8:	6141      	str	r1, [r0, #20]
 801c5ca:	7601      	strb	r1, [r0, #24]
 801c5cc:	8701      	strh	r1, [r0, #56]	; 0x38
 801c5ce:	8401      	strh	r1, [r0, #32]
 801c5d0:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801c5d4:	6483      	str	r3, [r0, #72]	; 0x48
 801c5d6:	bc30      	pop	{r4, r5}
 801c5d8:	f7e9 bb94 	b.w	8005d04 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801c5dc <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 801c5dc:	b408      	push	{r3}
 801c5de:	b510      	push	{r4, lr}
 801c5e0:	b085      	sub	sp, #20
 801c5e2:	ac07      	add	r4, sp, #28
 801c5e4:	f854 3b04 	ldr.w	r3, [r4], #4
 801c5e8:	9300      	str	r3, [sp, #0]
 801c5ea:	4613      	mov	r3, r2
 801c5ec:	4622      	mov	r2, r4
 801c5ee:	9403      	str	r4, [sp, #12]
 801c5f0:	f7ff ffdf 	bl	801c5b2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c5f4:	b005      	add	sp, #20
 801c5f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c5fa:	b001      	add	sp, #4
 801c5fc:	4770      	bx	lr

0801c5fe <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801c5fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c600:	4605      	mov	r5, r0
 801c602:	4608      	mov	r0, r1
 801c604:	b1f1      	cbz	r1, 801c644 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801c606:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801c60a:	460b      	mov	r3, r1
 801c60c:	f101 0708 	add.w	r7, r1, #8
 801c610:	4622      	mov	r2, r4
 801c612:	6818      	ldr	r0, [r3, #0]
 801c614:	3308      	adds	r3, #8
 801c616:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801c61a:	4626      	mov	r6, r4
 801c61c:	42bb      	cmp	r3, r7
 801c61e:	c603      	stmia	r6!, {r0, r1}
 801c620:	4634      	mov	r4, r6
 801c622:	d1f6      	bne.n	801c612 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801c624:	6818      	ldr	r0, [r3, #0]
 801c626:	6030      	str	r0, [r6, #0]
 801c628:	4610      	mov	r0, r2
 801c62a:	889b      	ldrh	r3, [r3, #4]
 801c62c:	80b3      	strh	r3, [r6, #4]
 801c62e:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801c632:	015b      	lsls	r3, r3, #5
 801c634:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801c638:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801c63c:	430b      	orrs	r3, r1
 801c63e:	425b      	negs	r3, r3
 801c640:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801c644:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c646 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801c646:	b538      	push	{r3, r4, r5, lr}
 801c648:	460c      	mov	r4, r1
 801c64a:	6811      	ldr	r1, [r2, #0]
 801c64c:	4610      	mov	r0, r2
 801c64e:	68cd      	ldr	r5, [r1, #12]
 801c650:	4619      	mov	r1, r3
 801c652:	47a8      	blx	r5
 801c654:	2800      	cmp	r0, #0
 801c656:	bf08      	it	eq
 801c658:	4620      	moveq	r0, r4
 801c65a:	bd38      	pop	{r3, r4, r5, pc}

0801c65c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801c65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c65e:	4604      	mov	r4, r0
 801c660:	4615      	mov	r5, r2
 801c662:	4608      	mov	r0, r1
 801c664:	b93a      	cbnz	r2, 801c676 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801c666:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801c66a:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801c66e:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801c672:	4628      	mov	r0, r5
 801c674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c676:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801c67a:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 801c67e:	8893      	ldrh	r3, [r2, #4]
 801c680:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801c684:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801c688:	79ee      	ldrb	r6, [r5, #7]
 801c68a:	4316      	orrs	r6, r2
 801c68c:	19da      	adds	r2, r3, r7
 801c68e:	b291      	uxth	r1, r2
 801c690:	b2b7      	uxth	r7, r6
 801c692:	291d      	cmp	r1, #29
 801c694:	d87b      	bhi.n	801c78e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801c696:	2201      	movs	r2, #1
 801c698:	10f6      	asrs	r6, r6, #3
 801c69a:	408a      	lsls	r2, r1
 801c69c:	4974      	ldr	r1, [pc, #464]	; (801c870 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 801c69e:	420a      	tst	r2, r1
 801c6a0:	d12e      	bne.n	801c700 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801c6a2:	f412 7f60 	tst.w	r2, #896	; 0x380
 801c6a6:	d072      	beq.n	801c78e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801c6a8:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801c6ac:	462b      	mov	r3, r5
 801c6ae:	f105 0e08 	add.w	lr, r5, #8
 801c6b2:	4615      	mov	r5, r2
 801c6b4:	6818      	ldr	r0, [r3, #0]
 801c6b6:	3308      	adds	r3, #8
 801c6b8:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801c6bc:	4694      	mov	ip, r2
 801c6be:	4573      	cmp	r3, lr
 801c6c0:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801c6c4:	4662      	mov	r2, ip
 801c6c6:	d1f5      	bne.n	801c6b4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801c6c8:	6818      	ldr	r0, [r3, #0]
 801c6ca:	f8cc 0000 	str.w	r0, [ip]
 801c6ce:	889b      	ldrh	r3, [r3, #4]
 801c6d0:	f8ac 3004 	strh.w	r3, [ip, #4]
 801c6d4:	b2b3      	uxth	r3, r6
 801c6d6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801c6da:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801c6de:	1aca      	subs	r2, r1, r3
 801c6e0:	1bcf      	subs	r7, r1, r7
 801c6e2:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801c6e6:	b292      	uxth	r2, r2
 801c6e8:	1afb      	subs	r3, r7, r3
 801c6ea:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801c6ee:	10d2      	asrs	r2, r2, #3
 801c6f0:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801c6f4:	4302      	orrs	r2, r0
 801c6f6:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801c6fa:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801c6fe:	e7b8      	b.n	801c672 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801c700:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801c702:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c706:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801c708:	f640 6333 	movw	r3, #3635	; 0xe33
 801c70c:	4299      	cmp	r1, r3
 801c70e:	d110      	bne.n	801c732 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 801c710:	6803      	ldr	r3, [r0, #0]
 801c712:	68db      	ldr	r3, [r3, #12]
 801c714:	4798      	blx	r3
 801c716:	7b41      	ldrb	r1, [r0, #13]
 801c718:	00cb      	lsls	r3, r1, #3
 801c71a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c71e:	7a03      	ldrb	r3, [r0, #8]
 801c720:	0648      	lsls	r0, r1, #25
 801c722:	ea43 0302 	orr.w	r3, r3, r2
 801c726:	bf44      	itt	mi
 801c728:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c72c:	b21b      	sxthmi	r3, r3
 801c72e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801c732:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801c736:	462a      	mov	r2, r5
 801c738:	f105 0c08 	add.w	ip, r5, #8
 801c73c:	443b      	add	r3, r7
 801c73e:	4433      	add	r3, r6
 801c740:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801c744:	b29b      	uxth	r3, r3
 801c746:	4635      	mov	r5, r6
 801c748:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801c74c:	6810      	ldr	r0, [r2, #0]
 801c74e:	3208      	adds	r2, #8
 801c750:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801c754:	4637      	mov	r7, r6
 801c756:	4562      	cmp	r2, ip
 801c758:	c703      	stmia	r7!, {r0, r1}
 801c75a:	463e      	mov	r6, r7
 801c75c:	d1f6      	bne.n	801c74c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 801c75e:	6810      	ldr	r0, [r2, #0]
 801c760:	6038      	str	r0, [r7, #0]
 801c762:	8892      	ldrh	r2, [r2, #4]
 801c764:	80ba      	strh	r2, [r7, #4]
 801c766:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801c76a:	10db      	asrs	r3, r3, #3
 801c76c:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801c770:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801c774:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801c778:	4313      	orrs	r3, r2
 801c77a:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801c77e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801c782:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801c786:	1a9b      	subs	r3, r3, r2
 801c788:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801c78c:	e771      	b.n	801c672 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801c78e:	f023 0204 	bic.w	r2, r3, #4
 801c792:	f640 611b 	movw	r1, #3611	; 0xe1b
 801c796:	428a      	cmp	r2, r1
 801c798:	d003      	beq.n	801c7a2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 801c79a:	f640 621d 	movw	r2, #3613	; 0xe1d
 801c79e:	4293      	cmp	r3, r2
 801c7a0:	d120      	bne.n	801c7e4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 801c7a2:	3b01      	subs	r3, #1
 801c7a4:	4602      	mov	r2, r0
 801c7a6:	4629      	mov	r1, r5
 801c7a8:	4620      	mov	r0, r4
 801c7aa:	b29b      	uxth	r3, r3
 801c7ac:	f7ff ff4b 	bl	801c646 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801c7b0:	7b41      	ldrb	r1, [r0, #13]
 801c7b2:	00cb      	lsls	r3, r1, #3
 801c7b4:	0649      	lsls	r1, r1, #25
 801c7b6:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c7ba:	7a03      	ldrb	r3, [r0, #8]
 801c7bc:	ea43 0302 	orr.w	r3, r3, r2
 801c7c0:	bf44      	itt	mi
 801c7c2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c7c6:	b21b      	sxthmi	r3, r3
 801c7c8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801c7cc:	7b6b      	ldrb	r3, [r5, #13]
 801c7ce:	7aaa      	ldrb	r2, [r5, #10]
 801c7d0:	005b      	lsls	r3, r3, #1
 801c7d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c7d6:	4313      	orrs	r3, r2
 801c7d8:	115a      	asrs	r2, r3, #5
 801c7da:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801c7de:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801c7e2:	e035      	b.n	801c850 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 801c7e4:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801c7e8:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801c7ec:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801c7f0:	7a2a      	ldrb	r2, [r5, #8]
 801c7f2:	ea42 0201 	orr.w	r2, r2, r1
 801c7f6:	f640 6109 	movw	r1, #3593	; 0xe09
 801c7fa:	bf1c      	itt	ne
 801c7fc:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801c800:	b212      	sxthne	r2, r2
 801c802:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801c806:	f023 0210 	bic.w	r2, r3, #16
 801c80a:	428a      	cmp	r2, r1
 801c80c:	d003      	beq.n	801c816 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 801c80e:	f640 6213 	movw	r2, #3603	; 0xe13
 801c812:	4293      	cmp	r3, r2
 801c814:	d129      	bne.n	801c86a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 801c816:	7b6e      	ldrb	r6, [r5, #13]
 801c818:	4629      	mov	r1, r5
 801c81a:	0076      	lsls	r6, r6, #1
 801c81c:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801c820:	7aae      	ldrb	r6, [r5, #10]
 801c822:	4316      	orrs	r6, r2
 801c824:	f640 6213 	movw	r2, #3603	; 0xe13
 801c828:	4293      	cmp	r3, r2
 801c82a:	4602      	mov	r2, r0
 801c82c:	4620      	mov	r0, r4
 801c82e:	bf16      	itet	ne
 801c830:	f103 33ff 	addne.w	r3, r3, #4294967295
 801c834:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801c838:	b29b      	uxthne	r3, r3
 801c83a:	f7ff ff04 	bl	801c646 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801c83e:	7b43      	ldrb	r3, [r0, #13]
 801c840:	7a82      	ldrb	r2, [r0, #10]
 801c842:	005b      	lsls	r3, r3, #1
 801c844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c848:	4313      	orrs	r3, r2
 801c84a:	1af6      	subs	r6, r6, r3
 801c84c:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801c850:	7b69      	ldrb	r1, [r5, #13]
 801c852:	00cb      	lsls	r3, r1, #3
 801c854:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c858:	7a2b      	ldrb	r3, [r5, #8]
 801c85a:	4313      	orrs	r3, r2
 801c85c:	064a      	lsls	r2, r1, #25
 801c85e:	bf44      	itt	mi
 801c860:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c864:	b21b      	sxthmi	r3, r3
 801c866:	1bdb      	subs	r3, r3, r7
 801c868:	e747      	b.n	801c6fa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 801c86a:	2300      	movs	r3, #0
 801c86c:	e7b7      	b.n	801c7de <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 801c86e:	bf00      	nop
 801c870:	3fc00079 	.word	0x3fc00079

0801c874 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801c874:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c878:	4604      	mov	r4, r0
 801c87a:	b942      	cbnz	r2, 801c88e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801c87c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801c880:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 801c884:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801c888:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801c88c:	e047      	b.n	801c91e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801c88e:	7b51      	ldrb	r1, [r2, #13]
 801c890:	8893      	ldrh	r3, [r2, #4]
 801c892:	010d      	lsls	r5, r1, #4
 801c894:	f405 7080 	and.w	r0, r5, #256	; 0x100
 801c898:	79d5      	ldrb	r5, [r2, #7]
 801c89a:	4305      	orrs	r5, r0
 801c89c:	2d04      	cmp	r5, #4
 801c89e:	bfcc      	ite	gt
 801c8a0:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801c8a4:	f04f 0e01 	movle.w	lr, #1
 801c8a8:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801c8ac:	f200 80ab 	bhi.w	801ca06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801c8b0:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801c8b4:	4283      	cmp	r3, r0
 801c8b6:	d216      	bcs.n	801c8e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c8b8:	f240 605b 	movw	r0, #1627	; 0x65b
 801c8bc:	4283      	cmp	r3, r0
 801c8be:	d859      	bhi.n	801c974 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801c8c0:	f240 6057 	movw	r0, #1623	; 0x657
 801c8c4:	4283      	cmp	r3, r0
 801c8c6:	d20e      	bcs.n	801c8e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c8c8:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801c8cc:	d24a      	bcs.n	801c964 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801c8ce:	f240 604e 	movw	r0, #1614	; 0x64e
 801c8d2:	4283      	cmp	r3, r0
 801c8d4:	d207      	bcs.n	801c8e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c8d6:	f240 601a 	movw	r0, #1562	; 0x61a
 801c8da:	4283      	cmp	r3, r0
 801c8dc:	d02a      	beq.n	801c934 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c8de:	d821      	bhi.n	801c924 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801c8e0:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801c8e4:	d35b      	bcc.n	801c99e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801c8e6:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801c8ea:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801c8ee:	f040 80d0 	bne.w	801ca92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801c8f2:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801c8f6:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801c8fa:	f040 80ca 	bne.w	801ca92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801c8fe:	00cb      	lsls	r3, r1, #3
 801c900:	0649      	lsls	r1, r1, #25
 801c902:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801c906:	7a13      	ldrb	r3, [r2, #8]
 801c908:	ea43 0300 	orr.w	r3, r3, r0
 801c90c:	bf44      	itt	mi
 801c90e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c912:	b21b      	sxthmi	r3, r3
 801c914:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801c918:	1b5d      	subs	r5, r3, r5
 801c91a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801c91e:	4610      	mov	r0, r2
 801c920:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c924:	f240 604b 	movw	r0, #1611	; 0x64b
 801c928:	4283      	cmp	r3, r0
 801c92a:	d338      	bcc.n	801c99e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801c92c:	f240 604c 	movw	r0, #1612	; 0x64c
 801c930:	4283      	cmp	r3, r0
 801c932:	d9d8      	bls.n	801c8e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c934:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801c938:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801c93c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801c940:	f040 80f3 	bne.w	801cb2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801c944:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801c948:	f040 80ef 	bne.w	801cb2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801c94c:	00cb      	lsls	r3, r1, #3
 801c94e:	064e      	lsls	r6, r1, #25
 801c950:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801c954:	7a13      	ldrb	r3, [r2, #8]
 801c956:	ea43 0300 	orr.w	r3, r3, r0
 801c95a:	bf44      	itt	mi
 801c95c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c960:	b21b      	sxthmi	r3, r3
 801c962:	e7d9      	b.n	801c918 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801c964:	f240 6054 	movw	r0, #1620	; 0x654
 801c968:	4283      	cmp	r3, r0
 801c96a:	d8e3      	bhi.n	801c934 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c96c:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801c970:	d9e0      	bls.n	801c934 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c972:	e7b8      	b.n	801c8e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c974:	f240 6074 	movw	r0, #1652	; 0x674
 801c978:	4283      	cmp	r3, r0
 801c97a:	d0b4      	beq.n	801c8e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c97c:	d82d      	bhi.n	801c9da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801c97e:	f240 605e 	movw	r0, #1630	; 0x65e
 801c982:	4283      	cmp	r3, r0
 801c984:	d804      	bhi.n	801c990 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801c986:	f240 605d 	movw	r0, #1629	; 0x65d
 801c98a:	4283      	cmp	r3, r0
 801c98c:	d3d2      	bcc.n	801c934 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c98e:	e7aa      	b.n	801c8e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c990:	f240 605f 	movw	r0, #1631	; 0x65f
 801c994:	4283      	cmp	r3, r0
 801c996:	d0cd      	beq.n	801c934 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c998:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801c99c:	d0a3      	beq.n	801c8e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c99e:	00cb      	lsls	r3, r1, #3
 801c9a0:	0649      	lsls	r1, r1, #25
 801c9a2:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801c9a6:	7a13      	ldrb	r3, [r2, #8]
 801c9a8:	ea43 0300 	orr.w	r3, r3, r0
 801c9ac:	bf44      	itt	mi
 801c9ae:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c9b2:	b21b      	sxthmi	r3, r3
 801c9b4:	1b5d      	subs	r5, r3, r5
 801c9b6:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801c9ba:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801c9be:	7b53      	ldrb	r3, [r2, #13]
 801c9c0:	015b      	lsls	r3, r3, #5
 801c9c2:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801c9c6:	7993      	ldrb	r3, [r2, #6]
 801c9c8:	430b      	orrs	r3, r1
 801c9ca:	2105      	movs	r1, #5
 801c9cc:	005b      	lsls	r3, r3, #1
 801c9ce:	fb93 f3f1 	sdiv	r3, r3, r1
 801c9d2:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801c9d6:	440b      	add	r3, r1
 801c9d8:	e756      	b.n	801c888 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801c9da:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801c9de:	4283      	cmp	r3, r0
 801c9e0:	d809      	bhi.n	801c9f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801c9e2:	f240 60df 	movw	r0, #1759	; 0x6df
 801c9e6:	4283      	cmp	r3, r0
 801c9e8:	f4bf af7d 	bcs.w	801c8e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c9ec:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801c9f0:	2b05      	cmp	r3, #5
 801c9f2:	d8d4      	bhi.n	801c99e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801c9f4:	e777      	b.n	801c8e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c9f6:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801c9fa:	4283      	cmp	r3, r0
 801c9fc:	d09a      	beq.n	801c934 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c9fe:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801ca02:	4283      	cmp	r3, r0
 801ca04:	e7ca      	b.n	801c99c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801ca06:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801ca0a:	d22b      	bcs.n	801ca64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801ca0c:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801ca10:	4283      	cmp	r3, r0
 801ca12:	d28f      	bcs.n	801c934 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ca14:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801ca18:	4283      	cmp	r3, r0
 801ca1a:	d816      	bhi.n	801ca4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801ca1c:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801ca20:	4283      	cmp	r3, r0
 801ca22:	f4bf af60 	bcs.w	801c8e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ca26:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801ca2a:	4283      	cmp	r3, r0
 801ca2c:	d80a      	bhi.n	801ca44 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801ca2e:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801ca32:	4283      	cmp	r3, r0
 801ca34:	f4bf af57 	bcs.w	801c8e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ca38:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801ca3c:	4283      	cmp	r3, r0
 801ca3e:	f43f af79 	beq.w	801c934 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ca42:	e7ac      	b.n	801c99e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801ca44:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801ca48:	e7f8      	b.n	801ca3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801ca4a:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801ca4e:	4283      	cmp	r3, r0
 801ca50:	d802      	bhi.n	801ca58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801ca52:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801ca56:	e798      	b.n	801c98a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801ca58:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801ca5c:	4283      	cmp	r3, r0
 801ca5e:	f47f af42 	bne.w	801c8e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ca62:	e767      	b.n	801c934 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ca64:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801ca68:	4283      	cmp	r3, r0
 801ca6a:	f43f af63 	beq.w	801c934 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ca6e:	d802      	bhi.n	801ca76 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801ca70:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801ca74:	e7f2      	b.n	801ca5c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801ca76:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801ca7a:	4283      	cmp	r3, r0
 801ca7c:	d805      	bhi.n	801ca8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801ca7e:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801ca82:	4283      	cmp	r3, r0
 801ca84:	f4ff af2f 	bcc.w	801c8e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ca88:	e754      	b.n	801c934 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ca8a:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801ca8e:	4283      	cmp	r3, r0
 801ca90:	e7af      	b.n	801c9f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801ca92:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801ca96:	4617      	mov	r7, r2
 801ca98:	f102 0808 	add.w	r8, r2, #8
 801ca9c:	4666      	mov	r6, ip
 801ca9e:	6838      	ldr	r0, [r7, #0]
 801caa0:	3708      	adds	r7, #8
 801caa2:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801caa6:	46e6      	mov	lr, ip
 801caa8:	4547      	cmp	r7, r8
 801caaa:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801caae:	46f4      	mov	ip, lr
 801cab0:	d1f5      	bne.n	801ca9e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801cab2:	6838      	ldr	r0, [r7, #0]
 801cab4:	f8ce 0000 	str.w	r0, [lr]
 801cab8:	88b9      	ldrh	r1, [r7, #4]
 801caba:	f8ae 1004 	strh.w	r1, [lr, #4]
 801cabe:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801cac2:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801cac6:	d009      	beq.n	801cadc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 801cac8:	7b51      	ldrb	r1, [r2, #13]
 801caca:	7992      	ldrb	r2, [r2, #6]
 801cacc:	0149      	lsls	r1, r1, #5
 801cace:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801cad2:	4311      	orrs	r1, r2
 801cad4:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801cad8:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801cadc:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801cae0:	b2ad      	uxth	r5, r5
 801cae2:	d00d      	beq.n	801cb00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 801cae4:	442b      	add	r3, r5
 801cae6:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801caea:	b29b      	uxth	r3, r3
 801caec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801caf0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801caf4:	10db      	asrs	r3, r3, #3
 801caf6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801cafa:	4313      	orrs	r3, r2
 801cafc:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801cb00:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801cb04:	00cb      	lsls	r3, r1, #3
 801cb06:	064f      	lsls	r7, r1, #25
 801cb08:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801cb0c:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801cb10:	ea43 0302 	orr.w	r3, r3, r2
 801cb14:	bf44      	itt	mi
 801cb16:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801cb1a:	b21b      	sxthmi	r3, r3
 801cb1c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801cb20:	1b5b      	subs	r3, r3, r5
 801cb22:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801cb26:	4632      	mov	r2, r6
 801cb28:	e6f9      	b.n	801c91e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801cb2a:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801cb2e:	4617      	mov	r7, r2
 801cb30:	f102 0908 	add.w	r9, r2, #8
 801cb34:	4666      	mov	r6, ip
 801cb36:	6838      	ldr	r0, [r7, #0]
 801cb38:	3708      	adds	r7, #8
 801cb3a:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801cb3e:	46e0      	mov	r8, ip
 801cb40:	454f      	cmp	r7, r9
 801cb42:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801cb46:	46c4      	mov	ip, r8
 801cb48:	d1f5      	bne.n	801cb36 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 801cb4a:	6838      	ldr	r0, [r7, #0]
 801cb4c:	f8c8 0000 	str.w	r0, [r8]
 801cb50:	88b9      	ldrh	r1, [r7, #4]
 801cb52:	f8a8 1004 	strh.w	r1, [r8, #4]
 801cb56:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801cb5a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801cb5e:	d009      	beq.n	801cb74 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 801cb60:	7b51      	ldrb	r1, [r2, #13]
 801cb62:	7992      	ldrb	r2, [r2, #6]
 801cb64:	0149      	lsls	r1, r1, #5
 801cb66:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801cb6a:	4311      	orrs	r1, r2
 801cb6c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801cb70:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801cb74:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801cb78:	d00e      	beq.n	801cb98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801cb7a:	eba3 030e 	sub.w	r3, r3, lr
 801cb7e:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801cb82:	b29b      	uxth	r3, r3
 801cb84:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801cb88:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801cb8c:	10db      	asrs	r3, r3, #3
 801cb8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801cb92:	4313      	orrs	r3, r2
 801cb94:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801cb98:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801cb9c:	00cb      	lsls	r3, r1, #3
 801cb9e:	0648      	lsls	r0, r1, #25
 801cba0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801cba4:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801cba8:	ea43 0302 	orr.w	r3, r3, r2
 801cbac:	bf44      	itt	mi
 801cbae:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801cbb2:	b21b      	sxthmi	r3, r3
 801cbb4:	1b5d      	subs	r5, r3, r5
 801cbb6:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801cbba:	e7b4      	b.n	801cb26 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

0801cbbc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801cbbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cbc0:	461e      	mov	r6, r3
 801cbc2:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801cbc4:	4604      	mov	r4, r0
 801cbc6:	4617      	mov	r7, r2
 801cbc8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801cbcc:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801cbd0:	f7e8 fff2 	bl	8005bb8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801cbd4:	4605      	mov	r5, r0
 801cbd6:	b918      	cbnz	r0, 801cbe0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801cbd8:	6030      	str	r0, [r6, #0]
 801cbda:	4628      	mov	r0, r5
 801cbdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cbe0:	683b      	ldr	r3, [r7, #0]
 801cbe2:	4601      	mov	r1, r0
 801cbe4:	4638      	mov	r0, r7
 801cbe6:	68db      	ldr	r3, [r3, #12]
 801cbe8:	4798      	blx	r3
 801cbea:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801cbee:	4602      	mov	r2, r0
 801cbf0:	6030      	str	r0, [r6, #0]
 801cbf2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801cbf6:	d213      	bcs.n	801cc20 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801cbf8:	4643      	mov	r3, r8
 801cbfa:	4639      	mov	r1, r7
 801cbfc:	4620      	mov	r0, r4
 801cbfe:	f7ff fe39 	bl	801c874 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801cc02:	6030      	str	r0, [r6, #0]
 801cc04:	6833      	ldr	r3, [r6, #0]
 801cc06:	b143      	cbz	r3, 801cc1a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801cc08:	7b5a      	ldrb	r2, [r3, #13]
 801cc0a:	7a9b      	ldrb	r3, [r3, #10]
 801cc0c:	0052      	lsls	r2, r2, #1
 801cc0e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801cc12:	4313      	orrs	r3, r2
 801cc14:	bf0c      	ite	eq
 801cc16:	2301      	moveq	r3, #1
 801cc18:	2300      	movne	r3, #0
 801cc1a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801cc1e:	e7dc      	b.n	801cbda <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801cc20:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801cc24:	b29b      	uxth	r3, r3
 801cc26:	2b7f      	cmp	r3, #127	; 0x7f
 801cc28:	d804      	bhi.n	801cc34 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801cc2a:	4639      	mov	r1, r7
 801cc2c:	4620      	mov	r0, r4
 801cc2e:	f7ff fd15 	bl	801c65c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801cc32:	e7e6      	b.n	801cc02 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801cc34:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801cc38:	2b00      	cmp	r3, #0
 801cc3a:	d0e3      	beq.n	801cc04 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801cc3c:	f640 1302 	movw	r3, #2306	; 0x902
 801cc40:	429d      	cmp	r5, r3
 801cc42:	d1df      	bne.n	801cc04 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801cc44:	4601      	mov	r1, r0
 801cc46:	4620      	mov	r0, r4
 801cc48:	f7ff fcd9 	bl	801c5fe <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801cc4c:	e7d9      	b.n	801cc02 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801cc4e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801cc4e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cc52:	461e      	mov	r6, r3
 801cc54:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801cc56:	4604      	mov	r4, r0
 801cc58:	4617      	mov	r7, r2
 801cc5a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801cc5e:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801cc62:	f7e8 ffa9 	bl	8005bb8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801cc66:	4605      	mov	r5, r0
 801cc68:	b918      	cbnz	r0, 801cc72 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 801cc6a:	6030      	str	r0, [r6, #0]
 801cc6c:	4628      	mov	r0, r5
 801cc6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cc72:	683b      	ldr	r3, [r7, #0]
 801cc74:	4601      	mov	r1, r0
 801cc76:	4638      	mov	r0, r7
 801cc78:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801cc7c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801cc80:	47c8      	blx	r9
 801cc82:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801cc86:	4602      	mov	r2, r0
 801cc88:	6030      	str	r0, [r6, #0]
 801cc8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801cc8e:	d213      	bcs.n	801ccb8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801cc90:	4643      	mov	r3, r8
 801cc92:	4639      	mov	r1, r7
 801cc94:	4620      	mov	r0, r4
 801cc96:	f7ff fded 	bl	801c874 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801cc9a:	6030      	str	r0, [r6, #0]
 801cc9c:	6833      	ldr	r3, [r6, #0]
 801cc9e:	b143      	cbz	r3, 801ccb2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 801cca0:	7b5a      	ldrb	r2, [r3, #13]
 801cca2:	7a9b      	ldrb	r3, [r3, #10]
 801cca4:	0052      	lsls	r2, r2, #1
 801cca6:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801ccaa:	4313      	orrs	r3, r2
 801ccac:	bf0c      	ite	eq
 801ccae:	2301      	moveq	r3, #1
 801ccb0:	2300      	movne	r3, #0
 801ccb2:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801ccb6:	e7d9      	b.n	801cc6c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 801ccb8:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801ccbc:	b29b      	uxth	r3, r3
 801ccbe:	2b7f      	cmp	r3, #127	; 0x7f
 801ccc0:	d804      	bhi.n	801cccc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 801ccc2:	4639      	mov	r1, r7
 801ccc4:	4620      	mov	r0, r4
 801ccc6:	f7ff fcc9 	bl	801c65c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801ccca:	e7e6      	b.n	801cc9a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 801cccc:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801ccd0:	2b00      	cmp	r3, #0
 801ccd2:	d0e3      	beq.n	801cc9c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801ccd4:	f640 1302 	movw	r3, #2306	; 0x902
 801ccd8:	429d      	cmp	r5, r3
 801ccda:	d1df      	bne.n	801cc9c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801ccdc:	4601      	mov	r1, r0
 801ccde:	4620      	mov	r0, r4
 801cce0:	f7ff fc8d 	bl	801c5fe <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801cce4:	e7d9      	b.n	801cc9a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0801cce6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801cce6:	b510      	push	{r4, lr}
 801cce8:	4604      	mov	r4, r0
 801ccea:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801ccee:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801ccf0:	b1e1      	cbz	r1, 801cd2c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801ccf2:	2b0a      	cmp	r3, #10
 801ccf4:	d02d      	beq.n	801cd52 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801ccf6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801ccf8:	3901      	subs	r1, #1
 801ccfa:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801ccfe:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801cd00:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 801cd04:	1c51      	adds	r1, r2, #1
 801cd06:	b289      	uxth	r1, r1
 801cd08:	2901      	cmp	r1, #1
 801cd0a:	bf8a      	itet	hi
 801cd0c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801cd10:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801cd12:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801cd14:	1c5a      	adds	r2, r3, #1
 801cd16:	8722      	strh	r2, [r4, #56]	; 0x38
 801cd18:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801cd1a:	4413      	add	r3, r2
 801cd1c:	b29b      	uxth	r3, r3
 801cd1e:	2b09      	cmp	r3, #9
 801cd20:	bf88      	it	hi
 801cd22:	3b0a      	subhi	r3, #10
 801cd24:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801cd28:	8458      	strh	r0, [r3, #34]	; 0x22
 801cd2a:	e7de      	b.n	801ccea <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801cd2c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801cd2e:	2b0a      	cmp	r3, #10
 801cd30:	d00f      	beq.n	801cd52 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801cd32:	4620      	mov	r0, r4
 801cd34:	f7ff fc11 	bl	801c55a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801cd38:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801cd3a:	1c5a      	adds	r2, r3, #1
 801cd3c:	8722      	strh	r2, [r4, #56]	; 0x38
 801cd3e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801cd40:	4413      	add	r3, r2
 801cd42:	b29b      	uxth	r3, r3
 801cd44:	2b09      	cmp	r3, #9
 801cd46:	bf88      	it	hi
 801cd48:	3b0a      	subhi	r3, #10
 801cd4a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801cd4e:	8458      	strh	r0, [r3, #34]	; 0x22
 801cd50:	e7ec      	b.n	801cd2c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801cd52:	bd10      	pop	{r4, pc}

0801cd54 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801cd54:	b538      	push	{r3, r4, r5, lr}
 801cd56:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801cd58:	4604      	mov	r4, r0
 801cd5a:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801cd5e:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 801cd60:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801cd62:	3a01      	subs	r2, #1
 801cd64:	8702      	strh	r2, [r0, #56]	; 0x38
 801cd66:	1c5a      	adds	r2, r3, #1
 801cd68:	b292      	uxth	r2, r2
 801cd6a:	2a09      	cmp	r2, #9
 801cd6c:	bf8a      	itet	hi
 801cd6e:	3b09      	subhi	r3, #9
 801cd70:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801cd72:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801cd74:	f7ff ffb7 	bl	801cce6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801cd78:	8c23      	ldrh	r3, [r4, #32]
 801cd7a:	2b01      	cmp	r3, #1
 801cd7c:	bf9c      	itt	ls
 801cd7e:	3301      	addls	r3, #1
 801cd80:	8423      	strhls	r3, [r4, #32]
 801cd82:	8be3      	ldrh	r3, [r4, #30]
 801cd84:	b90b      	cbnz	r3, 801cd8a <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801cd86:	2302      	movs	r3, #2
 801cd88:	83e3      	strh	r3, [r4, #30]
 801cd8a:	8be3      	ldrh	r3, [r4, #30]
 801cd8c:	4628      	mov	r0, r5
 801cd8e:	3b01      	subs	r3, #1
 801cd90:	b29b      	uxth	r3, r3
 801cd92:	83e3      	strh	r3, [r4, #30]
 801cd94:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801cd98:	8365      	strh	r5, [r4, #26]
 801cd9a:	bd38      	pop	{r3, r4, r5, pc}

0801cd9c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801cd9c:	428a      	cmp	r2, r1
 801cd9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cda2:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 801cda4:	d932      	bls.n	801ce0c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801cda6:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 801cda8:	1a54      	subs	r4, r2, r1
 801cdaa:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 801cdae:	19ee      	adds	r6, r5, r7
 801cdb0:	fa1f fe84 	uxth.w	lr, r4
 801cdb4:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 801cdb8:	3e01      	subs	r6, #1
 801cdba:	b2b4      	uxth	r4, r6
 801cdbc:	eba4 090e 	sub.w	r9, r4, lr
 801cdc0:	fa1f f989 	uxth.w	r9, r9
 801cdc4:	2c09      	cmp	r4, #9
 801cdc6:	4626      	mov	r6, r4
 801cdc8:	bf88      	it	hi
 801cdca:	f1a4 060a 	subhi.w	r6, r4, #10
 801cdce:	f1bc 0f00 	cmp.w	ip, #0
 801cdd2:	f104 34ff 	add.w	r4, r4, #4294967295
 801cdd6:	bf08      	it	eq
 801cdd8:	f04f 0c02 	moveq.w	ip, #2
 801cddc:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801cde0:	b2a4      	uxth	r4, r4
 801cde2:	f10c 3cff 	add.w	ip, ip, #4294967295
 801cde6:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 801cdea:	454c      	cmp	r4, r9
 801cdec:	fa1f fc8c 	uxth.w	ip, ip
 801cdf0:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801cdf4:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 801cdf8:	d1e4      	bne.n	801cdc4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801cdfa:	eba5 050e 	sub.w	r5, r5, lr
 801cdfe:	eb0e 0408 	add.w	r4, lr, r8
 801ce02:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 801ce06:	8705      	strh	r5, [r0, #56]	; 0x38
 801ce08:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 801ce0c:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801ce0e:	250a      	movs	r5, #10
 801ce10:	1a64      	subs	r4, r4, r1
 801ce12:	4439      	add	r1, r7
 801ce14:	b289      	uxth	r1, r1
 801ce16:	8704      	strh	r4, [r0, #56]	; 0x38
 801ce18:	2909      	cmp	r1, #9
 801ce1a:	bf88      	it	hi
 801ce1c:	390a      	subhi	r1, #10
 801ce1e:	86c1      	strh	r1, [r0, #54]	; 0x36
 801ce20:	b18a      	cbz	r2, 801ce46 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801ce22:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801ce24:	3a01      	subs	r2, #1
 801ce26:	3101      	adds	r1, #1
 801ce28:	b292      	uxth	r2, r2
 801ce2a:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801ce2e:	8701      	strh	r1, [r0, #56]	; 0x38
 801ce30:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801ce32:	b901      	cbnz	r1, 801ce36 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 801ce34:	86c5      	strh	r5, [r0, #54]	; 0x36
 801ce36:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801ce38:	3901      	subs	r1, #1
 801ce3a:	b289      	uxth	r1, r1
 801ce3c:	86c1      	strh	r1, [r0, #54]	; 0x36
 801ce3e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801ce42:	844c      	strh	r4, [r1, #34]	; 0x22
 801ce44:	e7ec      	b.n	801ce20 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801ce46:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ce4a:	f7ff bf4c 	b.w	801cce6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801ce4e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801ce4e:	b570      	push	{r4, r5, r6, lr}
 801ce50:	2500      	movs	r5, #0
 801ce52:	4295      	cmp	r5, r2
 801ce54:	d011      	beq.n	801ce7a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801ce56:	8bc4      	ldrh	r4, [r0, #30]
 801ce58:	f831 6b02 	ldrh.w	r6, [r1], #2
 801ce5c:	4414      	add	r4, r2
 801ce5e:	3c01      	subs	r4, #1
 801ce60:	1b64      	subs	r4, r4, r5
 801ce62:	b2a4      	uxth	r4, r4
 801ce64:	2c01      	cmp	r4, #1
 801ce66:	bf88      	it	hi
 801ce68:	3c02      	subhi	r4, #2
 801ce6a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801ce6e:	8b64      	ldrh	r4, [r4, #26]
 801ce70:	42b4      	cmp	r4, r6
 801ce72:	d117      	bne.n	801cea4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801ce74:	3501      	adds	r5, #1
 801ce76:	b2ad      	uxth	r5, r5
 801ce78:	e7eb      	b.n	801ce52 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801ce7a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801ce7e:	2400      	movs	r4, #0
 801ce80:	4413      	add	r3, r2
 801ce82:	b2a2      	uxth	r2, r4
 801ce84:	429a      	cmp	r2, r3
 801ce86:	da0f      	bge.n	801cea8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801ce88:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801ce8a:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801ce8e:	3401      	adds	r4, #1
 801ce90:	4432      	add	r2, r6
 801ce92:	b292      	uxth	r2, r2
 801ce94:	2a09      	cmp	r2, #9
 801ce96:	bf88      	it	hi
 801ce98:	3a0a      	subhi	r2, #10
 801ce9a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801ce9e:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801cea0:	42aa      	cmp	r2, r5
 801cea2:	d0ee      	beq.n	801ce82 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801cea4:	2000      	movs	r0, #0
 801cea6:	bd70      	pop	{r4, r5, r6, pc}
 801cea8:	2001      	movs	r0, #1
 801ceaa:	e7fc      	b.n	801cea6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801ceac <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801ceac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ceb0:	4605      	mov	r5, r0
 801ceb2:	4616      	mov	r6, r2
 801ceb4:	1c8c      	adds	r4, r1, #2
 801ceb6:	8809      	ldrh	r1, [r1, #0]
 801ceb8:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801cebc:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801cec0:	42b3      	cmp	r3, r6
 801cec2:	d124      	bne.n	801cf0e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801cec4:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801cec8:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801cecc:	f001 070f 	and.w	r7, r1, #15
 801ced0:	4652      	mov	r2, sl
 801ced2:	f8cd 8000 	str.w	r8, [sp]
 801ced6:	464b      	mov	r3, r9
 801ced8:	4621      	mov	r1, r4
 801ceda:	4628      	mov	r0, r5
 801cedc:	f7ff ffb7 	bl	801ce4e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801cee0:	4683      	mov	fp, r0
 801cee2:	b168      	cbz	r0, 801cf00 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801cee4:	eb0a 0109 	add.w	r1, sl, r9
 801cee8:	463a      	mov	r2, r7
 801ceea:	4628      	mov	r0, r5
 801ceec:	4441      	add	r1, r8
 801ceee:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801cef2:	4649      	mov	r1, r9
 801cef4:	f7ff ff52 	bl	801cd9c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801cef8:	4658      	mov	r0, fp
 801cefa:	b003      	add	sp, #12
 801cefc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf00:	eb07 010a 	add.w	r1, r7, sl
 801cf04:	4449      	add	r1, r9
 801cf06:	4441      	add	r1, r8
 801cf08:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801cf0c:	e7d2      	b.n	801ceb4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801cf0e:	f04f 0b00 	mov.w	fp, #0
 801cf12:	e7f1      	b.n	801cef8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801cf14 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801cf14:	b570      	push	{r4, r5, r6, lr}
 801cf16:	8810      	ldrh	r0, [r2, #0]
 801cf18:	4298      	cmp	r0, r3
 801cf1a:	d817      	bhi.n	801cf4c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801cf1c:	1e48      	subs	r0, r1, #1
 801cf1e:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801cf22:	4298      	cmp	r0, r3
 801cf24:	d312      	bcc.n	801cf4c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801cf26:	2400      	movs	r4, #0
 801cf28:	428c      	cmp	r4, r1
 801cf2a:	d20f      	bcs.n	801cf4c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801cf2c:	1860      	adds	r0, r4, r1
 801cf2e:	1040      	asrs	r0, r0, #1
 801cf30:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801cf34:	0085      	lsls	r5, r0, #2
 801cf36:	42b3      	cmp	r3, r6
 801cf38:	d902      	bls.n	801cf40 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801cf3a:	3001      	adds	r0, #1
 801cf3c:	b284      	uxth	r4, r0
 801cf3e:	e7f3      	b.n	801cf28 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801cf40:	d201      	bcs.n	801cf46 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801cf42:	b281      	uxth	r1, r0
 801cf44:	e7f0      	b.n	801cf28 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801cf46:	442a      	add	r2, r5
 801cf48:	8850      	ldrh	r0, [r2, #2]
 801cf4a:	bd70      	pop	{r4, r5, r6, pc}
 801cf4c:	2000      	movs	r0, #0
 801cf4e:	e7fc      	b.n	801cf4a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801cf50 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801cf50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cf54:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801cf56:	4604      	mov	r4, r0
 801cf58:	260b      	movs	r6, #11
 801cf5a:	886f      	ldrh	r7, [r5, #2]
 801cf5c:	087f      	lsrs	r7, r7, #1
 801cf5e:	3e01      	subs	r6, #1
 801cf60:	d013      	beq.n	801cf8a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801cf62:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801cf64:	462a      	mov	r2, r5
 801cf66:	4639      	mov	r1, r7
 801cf68:	4620      	mov	r0, r4
 801cf6a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801cf6e:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801cf72:	4643      	mov	r3, r8
 801cf74:	f7ff ffce 	bl	801cf14 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801cf78:	b138      	cbz	r0, 801cf8a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801cf7a:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801cf7e:	4642      	mov	r2, r8
 801cf80:	4620      	mov	r0, r4
 801cf82:	f7ff ff93 	bl	801ceac <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801cf86:	2800      	cmp	r0, #0
 801cf88:	d1e9      	bne.n	801cf5e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801cf8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801cf90 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801cf90:	b570      	push	{r4, r5, r6, lr}
 801cf92:	694a      	ldr	r2, [r1, #20]
 801cf94:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801cf96:	684b      	ldr	r3, [r1, #4]
 801cf98:	1b54      	subs	r4, r2, r5
 801cf9a:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801cf9c:	f000 8106 	beq.w	801d1ac <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801cfa0:	1b9b      	subs	r3, r3, r6
 801cfa2:	d003      	beq.n	801cfac <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801cfa4:	4363      	muls	r3, r4
 801cfa6:	2210      	movs	r2, #16
 801cfa8:	fb93 f3f2 	sdiv	r3, r3, r2
 801cfac:	680c      	ldr	r4, [r1, #0]
 801cfae:	698a      	ldr	r2, [r1, #24]
 801cfb0:	1b65      	subs	r5, r4, r5
 801cfb2:	f000 80fd 	beq.w	801d1b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801cfb6:	1b92      	subs	r2, r2, r6
 801cfb8:	d003      	beq.n	801cfc2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801cfba:	436a      	muls	r2, r5
 801cfbc:	2410      	movs	r4, #16
 801cfbe:	fb92 f2f4 	sdiv	r2, r2, r4
 801cfc2:	1a9b      	subs	r3, r3, r2
 801cfc4:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801d1ec <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801cfc8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801cfcc:	460a      	mov	r2, r1
 801cfce:	ee07 3a90 	vmov	s15, r3
 801cfd2:	f100 040c 	add.w	r4, r0, #12
 801cfd6:	4603      	mov	r3, r0
 801cfd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cfdc:	ee67 7a84 	vmul.f32	s15, s15, s8
 801cfe0:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801cfe4:	eeb1 6a43 	vneg.f32	s12, s6
 801cfe8:	edd2 7a02 	vldr	s15, [r2, #8]
 801cfec:	3214      	adds	r2, #20
 801cfee:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801cff2:	ece3 6a01 	vstmia	r3!, {s13}
 801cff6:	429c      	cmp	r4, r3
 801cff8:	ed52 7a02 	vldr	s15, [r2, #-8]
 801cffc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d000:	edc3 7a02 	vstr	s15, [r3, #8]
 801d004:	ed52 7a01 	vldr	s15, [r2, #-4]
 801d008:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d00c:	edc3 7a05 	vstr	s15, [r3, #20]
 801d010:	d1ea      	bne.n	801cfe8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801d012:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801d014:	698b      	ldr	r3, [r1, #24]
 801d016:	edd0 4a02 	vldr	s9, [r0, #8]
 801d01a:	1a9b      	subs	r3, r3, r2
 801d01c:	edd0 3a00 	vldr	s7, [r0]
 801d020:	edd0 6a01 	vldr	s13, [r0, #4]
 801d024:	ee07 3a90 	vmov	s15, r3
 801d028:	684b      	ldr	r3, [r1, #4]
 801d02a:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801d02e:	ed90 5a05 	vldr	s10, [r0, #20]
 801d032:	1a9b      	subs	r3, r3, r2
 801d034:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d038:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801d03c:	ed90 2a03 	vldr	s4, [r0, #12]
 801d040:	ee07 3a10 	vmov	s14, r3
 801d044:	edd0 5a04 	vldr	s11, [r0, #16]
 801d048:	ee67 7a84 	vmul.f32	s15, s15, s8
 801d04c:	ed90 1a07 	vldr	s2, [r0, #28]
 801d050:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d054:	edd0 2a06 	vldr	s5, [r0, #24]
 801d058:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801d05c:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801d060:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d064:	ee32 5a45 	vsub.f32	s10, s4, s10
 801d068:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d06c:	ee67 7a83 	vmul.f32	s15, s15, s6
 801d070:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801d074:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801d076:	694a      	ldr	r2, [r1, #20]
 801d078:	1b13      	subs	r3, r2, r4
 801d07a:	ee07 3a10 	vmov	s14, r3
 801d07e:	680b      	ldr	r3, [r1, #0]
 801d080:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d084:	1b1b      	subs	r3, r3, r4
 801d086:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d08a:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801d08e:	ee07 3a10 	vmov	s14, r3
 801d092:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d096:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d09a:	eee6 4a87 	vfma.f32	s9, s13, s14
 801d09e:	ee64 4a86 	vmul.f32	s9, s9, s12
 801d0a2:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801d0a6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801d0a8:	698b      	ldr	r3, [r1, #24]
 801d0aa:	1a9b      	subs	r3, r3, r2
 801d0ac:	ee06 3a90 	vmov	s13, r3
 801d0b0:	684b      	ldr	r3, [r1, #4]
 801d0b2:	1a9b      	subs	r3, r3, r2
 801d0b4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801d0b8:	ee07 3a10 	vmov	s14, r3
 801d0bc:	ee66 6a84 	vmul.f32	s13, s13, s8
 801d0c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d0c4:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801d0c8:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d0cc:	eee5 6a87 	vfma.f32	s13, s11, s14
 801d0d0:	ee66 6a83 	vmul.f32	s13, s13, s6
 801d0d4:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801d0d8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801d0da:	694a      	ldr	r2, [r1, #20]
 801d0dc:	1b13      	subs	r3, r2, r4
 801d0de:	ee07 3a10 	vmov	s14, r3
 801d0e2:	680b      	ldr	r3, [r1, #0]
 801d0e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d0e8:	1b1b      	subs	r3, r3, r4
 801d0ea:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d0ee:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801d0f2:	ee07 3a10 	vmov	s14, r3
 801d0f6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d0fa:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d0fe:	eea5 5a87 	vfma.f32	s10, s11, s14
 801d102:	edd0 5a08 	vldr	s11, [r0, #32]
 801d106:	ee31 1a65 	vsub.f32	s2, s2, s11
 801d10a:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801d10e:	ee25 5a06 	vmul.f32	s10, s10, s12
 801d112:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801d116:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801d118:	698b      	ldr	r3, [r1, #24]
 801d11a:	1a9b      	subs	r3, r3, r2
 801d11c:	ee07 3a10 	vmov	s14, r3
 801d120:	684b      	ldr	r3, [r1, #4]
 801d122:	1a9b      	subs	r3, r3, r2
 801d124:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d128:	ee01 3a90 	vmov	s3, r3
 801d12c:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d130:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801d134:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801d138:	ee61 1a84 	vmul.f32	s3, s3, s8
 801d13c:	eea1 7a21 	vfma.f32	s14, s2, s3
 801d140:	ee27 7a03 	vmul.f32	s14, s14, s6
 801d144:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801d148:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801d14a:	694a      	ldr	r2, [r1, #20]
 801d14c:	1b13      	subs	r3, r2, r4
 801d14e:	ee03 3a10 	vmov	s6, r3
 801d152:	680b      	ldr	r3, [r1, #0]
 801d154:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801d158:	1b1b      	subs	r3, r3, r4
 801d15a:	ee23 3a04 	vmul.f32	s6, s6, s8
 801d15e:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801d162:	ee03 3a10 	vmov	s6, r3
 801d166:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801d16a:	ee23 4a04 	vmul.f32	s8, s6, s8
 801d16e:	eee1 5a04 	vfma.f32	s11, s2, s8
 801d172:	ee25 6a86 	vmul.f32	s12, s11, s12
 801d176:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801d17a:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801d17e:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801d182:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801d186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d18a:	dd13      	ble.n	801d1b4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801d18c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801d190:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801d194:	63c3      	str	r3, [r0, #60]	; 0x3c
 801d196:	eee3 7a87 	vfma.f32	s15, s7, s14
 801d19a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d19e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d1a2:	dd15      	ble.n	801d1d0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801d1a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801d1a8:	6403      	str	r3, [r0, #64]	; 0x40
 801d1aa:	bd70      	pop	{r4, r5, r6, pc}
 801d1ac:	4623      	mov	r3, r4
 801d1ae:	e6fd      	b.n	801cfac <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801d1b0:	462a      	mov	r2, r5
 801d1b2:	e706      	b.n	801cfc2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801d1b4:	d502      	bpl.n	801d1bc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801d1b6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801d1ba:	e7e9      	b.n	801d190 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801d1bc:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801d1c0:	eea3 2a85 	vfma.f32	s4, s7, s10
 801d1c4:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801d1c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d1cc:	dade      	bge.n	801d18c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801d1ce:	e7f2      	b.n	801d1b6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801d1d0:	d502      	bpl.n	801d1d8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801d1d2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801d1d6:	e7e7      	b.n	801d1a8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801d1d8:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801d1dc:	eee3 4a86 	vfma.f32	s9, s7, s12
 801d1e0:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801d1e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d1e8:	dadc      	bge.n	801d1a4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801d1ea:	e7f2      	b.n	801d1d2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801d1ec:	3d800000 	.word	0x3d800000

0801d1f0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801d1f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d1f4:	2714      	movs	r7, #20
 801d1f6:	435f      	muls	r7, r3
 801d1f8:	eb02 0c07 	add.w	ip, r2, r7
 801d1fc:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801d200:	f115 0e0f 	adds.w	lr, r5, #15
 801d204:	f100 80a2 	bmi.w	801d34c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801d208:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801d20c:	9c08      	ldr	r4, [sp, #32]
 801d20e:	2614      	movs	r6, #20
 801d210:	f8c0 e014 	str.w	lr, [r0, #20]
 801d214:	4366      	muls	r6, r4
 801d216:	eb02 0806 	add.w	r8, r2, r6
 801d21a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801d21e:	f115 040f 	adds.w	r4, r5, #15
 801d222:	f100 809f 	bmi.w	801d364 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801d226:	1124      	asrs	r4, r4, #4
 801d228:	eba4 040e 	sub.w	r4, r4, lr
 801d22c:	6184      	str	r4, [r0, #24]
 801d22e:	2c00      	cmp	r4, #0
 801d230:	f000 808a 	beq.w	801d348 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801d234:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801d238:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801d23c:	5995      	ldr	r5, [r2, r6]
 801d23e:	eba4 0809 	sub.w	r8, r4, r9
 801d242:	59d4      	ldr	r4, [r2, r7]
 801d244:	eba5 0a04 	sub.w	sl, r5, r4
 801d248:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801d24c:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801d250:	fb0e fe05 	mul.w	lr, lr, r5
 801d254:	fb0a ee19 	mls	lr, sl, r9, lr
 801d258:	fb08 e404 	mla	r4, r8, r4, lr
 801d25c:	3c01      	subs	r4, #1
 801d25e:	19a4      	adds	r4, r4, r6
 801d260:	f100 808c 	bmi.w	801d37c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801d264:	fb94 fef6 	sdiv	lr, r4, r6
 801d268:	fb06 441e 	mls	r4, r6, lr, r4
 801d26c:	f8c0 e000 	str.w	lr, [r0]
 801d270:	6104      	str	r4, [r0, #16]
 801d272:	2d00      	cmp	r5, #0
 801d274:	f2c0 8095 	blt.w	801d3a2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801d278:	fb95 f4f6 	sdiv	r4, r5, r6
 801d27c:	fb06 5514 	mls	r5, r6, r4, r5
 801d280:	6044      	str	r4, [r0, #4]
 801d282:	6085      	str	r5, [r0, #8]
 801d284:	60c6      	str	r6, [r0, #12]
 801d286:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801d28a:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801d28e:	6945      	ldr	r5, [r0, #20]
 801d290:	59d2      	ldr	r2, [r2, r7]
 801d292:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801d296:	eddf 6a4b 	vldr	s13, [pc, #300]	; 801d3c4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801d29a:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801d29e:	ee07 4a10 	vmov	s14, r4
 801d2a2:	6804      	ldr	r4, [r0, #0]
 801d2a4:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801d2a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d2ac:	ee07 2a90 	vmov	s15, r2
 801d2b0:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d2b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d2b8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d2bc:	edd3 6a00 	vldr	s13, [r3]
 801d2c0:	eee6 6a07 	vfma.f32	s13, s12, s14
 801d2c4:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 801d2c8:	eee6 6a27 	vfma.f32	s13, s12, s15
 801d2cc:	edc0 6a07 	vstr	s13, [r0, #28]
 801d2d0:	edd0 6a01 	vldr	s13, [r0, #4]
 801d2d4:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 801d2d8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801d2dc:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801d2e0:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801d2e4:	ed80 6a08 	vstr	s12, [r0, #32]
 801d2e8:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 801d2ea:	6242      	str	r2, [r0, #36]	; 0x24
 801d2ec:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 801d2f0:	ed93 6a03 	vldr	s12, [r3, #12]
 801d2f4:	eea5 6a87 	vfma.f32	s12, s11, s14
 801d2f8:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801d2fc:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801d300:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 801d304:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801d308:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 801d30c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801d310:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 801d314:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801d316:	6302      	str	r2, [r0, #48]	; 0x30
 801d318:	ed93 6a06 	vldr	s12, [r3, #24]
 801d31c:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 801d320:	eea5 6a87 	vfma.f32	s12, s11, s14
 801d324:	eeb0 7a46 	vmov.f32	s14, s12
 801d328:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 801d32c:	eea6 7a27 	vfma.f32	s14, s12, s15
 801d330:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801d334:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 801d338:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 801d33c:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d340:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 801d344:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801d346:	63c3      	str	r3, [r0, #60]	; 0x3c
 801d348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d34c:	2410      	movs	r4, #16
 801d34e:	f1c5 0501 	rsb	r5, r5, #1
 801d352:	fb9e fef4 	sdiv	lr, lr, r4
 801d356:	f015 050f 	ands.w	r5, r5, #15
 801d35a:	bf18      	it	ne
 801d35c:	2501      	movne	r5, #1
 801d35e:	ebae 0e05 	sub.w	lr, lr, r5
 801d362:	e753      	b.n	801d20c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801d364:	f04f 0910 	mov.w	r9, #16
 801d368:	f1c5 0501 	rsb	r5, r5, #1
 801d36c:	fb94 f4f9 	sdiv	r4, r4, r9
 801d370:	f015 050f 	ands.w	r5, r5, #15
 801d374:	bf18      	it	ne
 801d376:	2501      	movne	r5, #1
 801d378:	1b64      	subs	r4, r4, r5
 801d37a:	e755      	b.n	801d228 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801d37c:	4264      	negs	r4, r4
 801d37e:	fb94 fef6 	sdiv	lr, r4, r6
 801d382:	f1ce 0800 	rsb	r8, lr, #0
 801d386:	fb06 441e 	mls	r4, r6, lr, r4
 801d38a:	f8c0 8000 	str.w	r8, [r0]
 801d38e:	6104      	str	r4, [r0, #16]
 801d390:	2c00      	cmp	r4, #0
 801d392:	f43f af6e 	beq.w	801d272 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801d396:	ea6f 0e0e 	mvn.w	lr, lr
 801d39a:	1b34      	subs	r4, r6, r4
 801d39c:	f8c0 e000 	str.w	lr, [r0]
 801d3a0:	e766      	b.n	801d270 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801d3a2:	426d      	negs	r5, r5
 801d3a4:	fb95 f4f6 	sdiv	r4, r5, r6
 801d3a8:	f1c4 0e00 	rsb	lr, r4, #0
 801d3ac:	fb06 5514 	mls	r5, r6, r4, r5
 801d3b0:	f8c0 e004 	str.w	lr, [r0, #4]
 801d3b4:	6085      	str	r5, [r0, #8]
 801d3b6:	2d00      	cmp	r5, #0
 801d3b8:	f43f af64 	beq.w	801d284 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801d3bc:	43e4      	mvns	r4, r4
 801d3be:	1b75      	subs	r5, r6, r5
 801d3c0:	6044      	str	r4, [r0, #4]
 801d3c2:	e75e      	b.n	801d282 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801d3c4:	3d800000 	.word	0x3d800000

0801d3c8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801d3c8:	4b01      	ldr	r3, [pc, #4]	; (801d3d0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801d3ca:	6018      	str	r0, [r3, #0]
 801d3cc:	4770      	bx	lr
 801d3ce:	bf00      	nop
 801d3d0:	24006d98 	.word	0x24006d98

0801d3d4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801d3d4:	4b06      	ldr	r3, [pc, #24]	; (801d3f0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801d3d6:	881a      	ldrh	r2, [r3, #0]
 801d3d8:	4282      	cmp	r2, r0
 801d3da:	d807      	bhi.n	801d3ec <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801d3dc:	4b05      	ldr	r3, [pc, #20]	; (801d3f4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801d3de:	881b      	ldrh	r3, [r3, #0]
 801d3e0:	4413      	add	r3, r2
 801d3e2:	4298      	cmp	r0, r3
 801d3e4:	bfac      	ite	ge
 801d3e6:	2000      	movge	r0, #0
 801d3e8:	2001      	movlt	r0, #1
 801d3ea:	4770      	bx	lr
 801d3ec:	2000      	movs	r0, #0
 801d3ee:	4770      	bx	lr
 801d3f0:	24006db8 	.word	0x24006db8
 801d3f4:	24006dbc 	.word	0x24006dbc

0801d3f8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801d3f8:	b508      	push	{r3, lr}
 801d3fa:	4601      	mov	r1, r0
 801d3fc:	f7ff ffea 	bl	801d3d4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801d400:	b118      	cbz	r0, 801d40a <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801d402:	4b02      	ldr	r3, [pc, #8]	; (801d40c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801d404:	681b      	ldr	r3, [r3, #0]
 801d406:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801d40a:	bd08      	pop	{r3, pc}
 801d40c:	24006d9c 	.word	0x24006d9c

0801d410 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 801d410:	b538      	push	{r3, r4, r5, lr}
 801d412:	4604      	mov	r4, r0
 801d414:	f7ff ffde 	bl	801d3d4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801d418:	b188      	cbz	r0, 801d43e <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x2e>
 801d41a:	4b09      	ldr	r3, [pc, #36]	; (801d440 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x30>)
 801d41c:	881a      	ldrh	r2, [r3, #0]
 801d41e:	4b09      	ldr	r3, [pc, #36]	; (801d444 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x34>)
 801d420:	1aa4      	subs	r4, r4, r2
 801d422:	220e      	movs	r2, #14
 801d424:	681d      	ldr	r5, [r3, #0]
 801d426:	4362      	muls	r2, r4
 801d428:	18ac      	adds	r4, r5, r2
 801d42a:	7b23      	ldrb	r3, [r4, #12]
 801d42c:	f013 0320 	ands.w	r3, r3, #32
 801d430:	bf17      	itett	ne
 801d432:	680b      	ldrne	r3, [r1, #0]
 801d434:	4618      	moveq	r0, r3
 801d436:	50ab      	strne	r3, [r5, r2]
 801d438:	684b      	ldrne	r3, [r1, #4]
 801d43a:	bf18      	it	ne
 801d43c:	6063      	strne	r3, [r4, #4]
 801d43e:	bd38      	pop	{r3, r4, r5, pc}
 801d440:	24006db8 	.word	0x24006db8
 801d444:	24006da0 	.word	0x24006da0

0801d448 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 801d448:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801d44c:	4606      	mov	r6, r0
 801d44e:	460c      	mov	r4, r1
 801d450:	f7ff ffc0 	bl	801d3d4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801d454:	b918      	cbnz	r0, 801d45e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 801d456:	2000      	movs	r0, #0
 801d458:	b002      	add	sp, #8
 801d45a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d45e:	4608      	mov	r0, r1
 801d460:	f7fa fae3 	bl	8017a2a <_ZNK8touchgfx4Rect7isEmptyEv>
 801d464:	2800      	cmp	r0, #0
 801d466:	d1f6      	bne.n	801d456 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801d468:	4b3f      	ldr	r3, [pc, #252]	; (801d568 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 801d46a:	f8df 9100 	ldr.w	r9, [pc, #256]	; 801d56c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 801d46e:	881d      	ldrh	r5, [r3, #0]
 801d470:	f8d9 a000 	ldr.w	sl, [r9]
 801d474:	46c8      	mov	r8, r9
 801d476:	1b73      	subs	r3, r6, r5
 801d478:	250e      	movs	r5, #14
 801d47a:	435d      	muls	r5, r3
 801d47c:	eb0a 0705 	add.w	r7, sl, r5
 801d480:	7b3b      	ldrb	r3, [r7, #12]
 801d482:	f013 0f20 	tst.w	r3, #32
 801d486:	d0e6      	beq.n	801d456 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801d488:	4621      	mov	r1, r4
 801d48a:	4638      	mov	r0, r7
 801d48c:	f7fd fb00 	bl	801aa90 <_ZNK8touchgfx4Rect8includesERKS0_>
 801d490:	2800      	cmp	r0, #0
 801d492:	d1e1      	bne.n	801d458 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801d494:	4639      	mov	r1, r7
 801d496:	4620      	mov	r0, r4
 801d498:	f7fd fafa 	bl	801aa90 <_ZNK8touchgfx4Rect8includesERKS0_>
 801d49c:	b108      	cbz	r0, 801d4a2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 801d49e:	4621      	mov	r1, r4
 801d4a0:	e020      	b.n	801d4e4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 801d4a2:	f9b4 2000 	ldrsh.w	r2, [r4]
 801d4a6:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 801d4aa:	429a      	cmp	r2, r3
 801d4ac:	d11e      	bne.n	801d4ec <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801d4ae:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801d4b2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801d4b6:	429a      	cmp	r2, r3
 801d4b8:	d118      	bne.n	801d4ec <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801d4ba:	6820      	ldr	r0, [r4, #0]
 801d4bc:	466b      	mov	r3, sp
 801d4be:	6861      	ldr	r1, [r4, #4]
 801d4c0:	c303      	stmia	r3!, {r0, r1}
 801d4c2:	4639      	mov	r1, r7
 801d4c4:	4668      	mov	r0, sp
 801d4c6:	f7fd fb09 	bl	801aadc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801d4ca:	f8d9 3000 	ldr.w	r3, [r9]
 801d4ce:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801d4d2:	442b      	add	r3, r5
 801d4d4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801d4d8:	4413      	add	r3, r2
 801d4da:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801d4de:	4293      	cmp	r3, r2
 801d4e0:	dc04      	bgt.n	801d4ec <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801d4e2:	4669      	mov	r1, sp
 801d4e4:	4630      	mov	r0, r6
 801d4e6:	f7ff ff93 	bl	801d410 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 801d4ea:	e7b5      	b.n	801d458 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801d4ec:	f8d8 3000 	ldr.w	r3, [r8]
 801d4f0:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801d4f4:	442b      	add	r3, r5
 801d4f6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801d4fa:	4291      	cmp	r1, r2
 801d4fc:	d119      	bne.n	801d532 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801d4fe:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801d502:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801d506:	4291      	cmp	r1, r2
 801d508:	d113      	bne.n	801d532 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801d50a:	6820      	ldr	r0, [r4, #0]
 801d50c:	466a      	mov	r2, sp
 801d50e:	6861      	ldr	r1, [r4, #4]
 801d510:	c203      	stmia	r2!, {r0, r1}
 801d512:	4619      	mov	r1, r3
 801d514:	4668      	mov	r0, sp
 801d516:	f7fd fae1 	bl	801aadc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801d51a:	f8d8 3000 	ldr.w	r3, [r8]
 801d51e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801d522:	442b      	add	r3, r5
 801d524:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d528:	4413      	add	r3, r2
 801d52a:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801d52e:	4293      	cmp	r3, r2
 801d530:	ddd7      	ble.n	801d4e2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 801d532:	4620      	mov	r0, r4
 801d534:	f7fa fa79 	bl	8017a2a <_ZNK8touchgfx4Rect7isEmptyEv>
 801d538:	b990      	cbnz	r0, 801d560 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 801d53a:	88a7      	ldrh	r7, [r4, #4]
 801d53c:	88e3      	ldrh	r3, [r4, #6]
 801d53e:	fb17 f703 	smulbb	r7, r7, r3
 801d542:	f8d8 3000 	ldr.w	r3, [r8]
 801d546:	441d      	add	r5, r3
 801d548:	4628      	mov	r0, r5
 801d54a:	f7fa fa6e 	bl	8017a2a <_ZNK8touchgfx4Rect7isEmptyEv>
 801d54e:	b948      	cbnz	r0, 801d564 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 801d550:	88ab      	ldrh	r3, [r5, #4]
 801d552:	88ea      	ldrh	r2, [r5, #6]
 801d554:	fb13 f302 	smulbb	r3, r3, r2
 801d558:	42bb      	cmp	r3, r7
 801d55a:	f6bf af7c 	bge.w	801d456 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801d55e:	e79e      	b.n	801d49e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 801d560:	2700      	movs	r7, #0
 801d562:	e7ee      	b.n	801d542 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 801d564:	2300      	movs	r3, #0
 801d566:	e7f7      	b.n	801d558 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 801d568:	24006db8 	.word	0x24006db8
 801d56c:	24006da0 	.word	0x24006da0

0801d570 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801d570:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d572:	4c24      	ldr	r4, [pc, #144]	; (801d604 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801d574:	6823      	ldr	r3, [r4, #0]
 801d576:	2b00      	cmp	r3, #0
 801d578:	d042      	beq.n	801d600 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801d57a:	4a23      	ldr	r2, [pc, #140]	; (801d608 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801d57c:	4d23      	ldr	r5, [pc, #140]	; (801d60c <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801d57e:	8811      	ldrh	r1, [r2, #0]
 801d580:	f8b5 c000 	ldrh.w	ip, [r5]
 801d584:	4822      	ldr	r0, [pc, #136]	; (801d610 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801d586:	4461      	add	r1, ip
 801d588:	1c4a      	adds	r2, r1, #1
 801d58a:	008f      	lsls	r7, r1, #2
 801d58c:	f022 0201 	bic.w	r2, r2, #1
 801d590:	19de      	adds	r6, r3, r7
 801d592:	0412      	lsls	r2, r2, #16
 801d594:	6006      	str	r6, [r0, #0]
 801d596:	4e1f      	ldr	r6, [pc, #124]	; (801d614 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801d598:	0c12      	lsrs	r2, r2, #16
 801d59a:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801d59e:	19da      	adds	r2, r3, r7
 801d5a0:	6032      	str	r2, [r6, #0]
 801d5a2:	220e      	movs	r2, #14
 801d5a4:	fb02 f20c 	mul.w	r2, r2, ip
 801d5a8:	3203      	adds	r2, #3
 801d5aa:	f022 0203 	bic.w	r2, r2, #3
 801d5ae:	443a      	add	r2, r7
 801d5b0:	4f19      	ldr	r7, [pc, #100]	; (801d618 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801d5b2:	4413      	add	r3, r2
 801d5b4:	603b      	str	r3, [r7, #0]
 801d5b6:	2300      	movs	r3, #0
 801d5b8:	4f18      	ldr	r7, [pc, #96]	; (801d61c <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801d5ba:	469c      	mov	ip, r3
 801d5bc:	803b      	strh	r3, [r7, #0]
 801d5be:	4f18      	ldr	r7, [pc, #96]	; (801d620 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801d5c0:	683f      	ldr	r7, [r7, #0]
 801d5c2:	1aba      	subs	r2, r7, r2
 801d5c4:	4f17      	ldr	r7, [pc, #92]	; (801d624 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801d5c6:	603a      	str	r2, [r7, #0]
 801d5c8:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801d5cc:	4a16      	ldr	r2, [pc, #88]	; (801d628 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801d5ce:	8013      	strh	r3, [r2, #0]
 801d5d0:	428b      	cmp	r3, r1
 801d5d2:	d10d      	bne.n	801d5f0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801d5d4:	882d      	ldrh	r5, [r5, #0]
 801d5d6:	2300      	movs	r3, #0
 801d5d8:	6830      	ldr	r0, [r6, #0]
 801d5da:	240e      	movs	r4, #14
 801d5dc:	429d      	cmp	r5, r3
 801d5de:	d90f      	bls.n	801d600 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801d5e0:	fb04 0203 	mla	r2, r4, r3, r0
 801d5e4:	3301      	adds	r3, #1
 801d5e6:	7b11      	ldrb	r1, [r2, #12]
 801d5e8:	f36f 1145 	bfc	r1, #5, #1
 801d5ec:	7311      	strb	r1, [r2, #12]
 801d5ee:	e7f5      	b.n	801d5dc <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801d5f0:	6822      	ldr	r2, [r4, #0]
 801d5f2:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801d5f6:	6802      	ldr	r2, [r0, #0]
 801d5f8:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801d5fc:	3301      	adds	r3, #1
 801d5fe:	e7e7      	b.n	801d5d0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801d600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d602:	bf00      	nop
 801d604:	24006d9c 	.word	0x24006d9c
 801d608:	24006db8 	.word	0x24006db8
 801d60c:	24006dbc 	.word	0x24006dbc
 801d610:	24006db0 	.word	0x24006db0
 801d614:	24006da0 	.word	0x24006da0
 801d618:	24006da8 	.word	0x24006da8
 801d61c:	24006dba 	.word	0x24006dba
 801d620:	24006da4 	.word	0x24006da4
 801d624:	24006db4 	.word	0x24006db4
 801d628:	24006dac 	.word	0x24006dac

0801d62c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801d62c:	4b06      	ldr	r3, [pc, #24]	; (801d648 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801d62e:	681b      	ldr	r3, [r3, #0]
 801d630:	b943      	cbnz	r3, 801d644 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801d632:	b139      	cbz	r1, 801d644 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801d634:	4b05      	ldr	r3, [pc, #20]	; (801d64c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801d636:	801a      	strh	r2, [r3, #0]
 801d638:	4b05      	ldr	r3, [pc, #20]	; (801d650 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801d63a:	6019      	str	r1, [r3, #0]
 801d63c:	4b05      	ldr	r3, [pc, #20]	; (801d654 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801d63e:	6018      	str	r0, [r3, #0]
 801d640:	f7ff bf96 	b.w	801d570 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801d644:	4770      	bx	lr
 801d646:	bf00      	nop
 801d648:	24006da8 	.word	0x24006da8
 801d64c:	24006dbc 	.word	0x24006dbc
 801d650:	24006da4 	.word	0x24006da4
 801d654:	24006d9c 	.word	0x24006d9c

0801d658 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801d658:	b470      	push	{r4, r5, r6}
 801d65a:	4c07      	ldr	r4, [pc, #28]	; (801d678 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801d65c:	4605      	mov	r5, r0
 801d65e:	4610      	mov	r0, r2
 801d660:	9a03      	ldr	r2, [sp, #12]
 801d662:	6826      	ldr	r6, [r4, #0]
 801d664:	b936      	cbnz	r6, 801d674 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801d666:	6025      	str	r5, [r4, #0]
 801d668:	4c04      	ldr	r4, [pc, #16]	; (801d67c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801d66a:	8021      	strh	r1, [r4, #0]
 801d66c:	4619      	mov	r1, r3
 801d66e:	bc70      	pop	{r4, r5, r6}
 801d670:	f7ff bfdc 	b.w	801d62c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801d674:	bc70      	pop	{r4, r5, r6}
 801d676:	4770      	bx	lr
 801d678:	24006dc0 	.word	0x24006dc0
 801d67c:	24006db8 	.word	0x24006db8

0801d680 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801d680:	4a12      	ldr	r2, [pc, #72]	; (801d6cc <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801d682:	8803      	ldrh	r3, [r0, #0]
 801d684:	8812      	ldrh	r2, [r2, #0]
 801d686:	4293      	cmp	r3, r2
 801d688:	d207      	bcs.n	801d69a <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801d68a:	4a11      	ldr	r2, [pc, #68]	; (801d6d0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801d68c:	2114      	movs	r1, #20
 801d68e:	6812      	ldr	r2, [r2, #0]
 801d690:	fb01 2303 	mla	r3, r1, r3, r2
 801d694:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801d698:	4770      	bx	lr
 801d69a:	490e      	ldr	r1, [pc, #56]	; (801d6d4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801d69c:	8809      	ldrh	r1, [r1, #0]
 801d69e:	4411      	add	r1, r2
 801d6a0:	428b      	cmp	r3, r1
 801d6a2:	da04      	bge.n	801d6ae <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801d6a4:	1a9b      	subs	r3, r3, r2
 801d6a6:	4a0c      	ldr	r2, [pc, #48]	; (801d6d8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801d6a8:	210e      	movs	r1, #14
 801d6aa:	6812      	ldr	r2, [r2, #0]
 801d6ac:	e7f0      	b.n	801d690 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801d6ae:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801d6b2:	4293      	cmp	r3, r2
 801d6b4:	d108      	bne.n	801d6c8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801d6b6:	4b09      	ldr	r3, [pc, #36]	; (801d6dc <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801d6b8:	781b      	ldrb	r3, [r3, #0]
 801d6ba:	b91b      	cbnz	r3, 801d6c4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801d6bc:	4b08      	ldr	r3, [pc, #32]	; (801d6e0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801d6be:	f9b3 0000 	ldrsh.w	r0, [r3]
 801d6c2:	4770      	bx	lr
 801d6c4:	4b07      	ldr	r3, [pc, #28]	; (801d6e4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801d6c6:	e7fa      	b.n	801d6be <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801d6c8:	2000      	movs	r0, #0
 801d6ca:	4770      	bx	lr
 801d6cc:	24006db8 	.word	0x24006db8
 801d6d0:	24006dc0 	.word	0x24006dc0
 801d6d4:	24006dbc 	.word	0x24006dbc
 801d6d8:	24006da0 	.word	0x24006da0
 801d6dc:	24006d30 	.word	0x24006d30
 801d6e0:	24006d32 	.word	0x24006d32
 801d6e4:	24006d34 	.word	0x24006d34

0801d6e8 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801d6e8:	4a12      	ldr	r2, [pc, #72]	; (801d734 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801d6ea:	8803      	ldrh	r3, [r0, #0]
 801d6ec:	8812      	ldrh	r2, [r2, #0]
 801d6ee:	4293      	cmp	r3, r2
 801d6f0:	d207      	bcs.n	801d702 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801d6f2:	4a11      	ldr	r2, [pc, #68]	; (801d738 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801d6f4:	2114      	movs	r1, #20
 801d6f6:	6812      	ldr	r2, [r2, #0]
 801d6f8:	fb01 2303 	mla	r3, r1, r3, r2
 801d6fc:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801d700:	4770      	bx	lr
 801d702:	490e      	ldr	r1, [pc, #56]	; (801d73c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801d704:	8809      	ldrh	r1, [r1, #0]
 801d706:	4411      	add	r1, r2
 801d708:	428b      	cmp	r3, r1
 801d70a:	da04      	bge.n	801d716 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801d70c:	1a9b      	subs	r3, r3, r2
 801d70e:	4a0c      	ldr	r2, [pc, #48]	; (801d740 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801d710:	210e      	movs	r1, #14
 801d712:	6812      	ldr	r2, [r2, #0]
 801d714:	e7f0      	b.n	801d6f8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801d716:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801d71a:	4293      	cmp	r3, r2
 801d71c:	d108      	bne.n	801d730 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801d71e:	4b09      	ldr	r3, [pc, #36]	; (801d744 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801d720:	781b      	ldrb	r3, [r3, #0]
 801d722:	b91b      	cbnz	r3, 801d72c <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801d724:	4b08      	ldr	r3, [pc, #32]	; (801d748 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801d726:	f9b3 0000 	ldrsh.w	r0, [r3]
 801d72a:	4770      	bx	lr
 801d72c:	4b07      	ldr	r3, [pc, #28]	; (801d74c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801d72e:	e7fa      	b.n	801d726 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801d730:	2000      	movs	r0, #0
 801d732:	4770      	bx	lr
 801d734:	24006db8 	.word	0x24006db8
 801d738:	24006dc0 	.word	0x24006dc0
 801d73c:	24006dbc 	.word	0x24006dbc
 801d740:	24006da0 	.word	0x24006da0
 801d744:	24006d30 	.word	0x24006d30
 801d748:	24006d34 	.word	0x24006d34
 801d74c:	24006d32 	.word	0x24006d32

0801d750 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801d750:	4a12      	ldr	r2, [pc, #72]	; (801d79c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801d752:	8803      	ldrh	r3, [r0, #0]
 801d754:	8811      	ldrh	r1, [r2, #0]
 801d756:	428b      	cmp	r3, r1
 801d758:	d20b      	bcs.n	801d772 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801d75a:	4a11      	ldr	r2, [pc, #68]	; (801d7a0 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801d75c:	6812      	ldr	r2, [r2, #0]
 801d75e:	b112      	cbz	r2, 801d766 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801d760:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801d764:	b9c0      	cbnz	r0, 801d798 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801d766:	4a0f      	ldr	r2, [pc, #60]	; (801d7a4 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801d768:	6811      	ldr	r1, [r2, #0]
 801d76a:	2214      	movs	r2, #20
 801d76c:	4353      	muls	r3, r2
 801d76e:	58c8      	ldr	r0, [r1, r3]
 801d770:	4770      	bx	lr
 801d772:	4a0d      	ldr	r2, [pc, #52]	; (801d7a8 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801d774:	8812      	ldrh	r2, [r2, #0]
 801d776:	440a      	add	r2, r1
 801d778:	4293      	cmp	r3, r2
 801d77a:	da04      	bge.n	801d786 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801d77c:	4a08      	ldr	r2, [pc, #32]	; (801d7a0 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801d77e:	6812      	ldr	r2, [r2, #0]
 801d780:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801d784:	4770      	bx	lr
 801d786:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801d78a:	4293      	cmp	r3, r2
 801d78c:	d103      	bne.n	801d796 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801d78e:	4b07      	ldr	r3, [pc, #28]	; (801d7ac <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801d790:	681b      	ldr	r3, [r3, #0]
 801d792:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801d794:	4770      	bx	lr
 801d796:	2000      	movs	r0, #0
 801d798:	4770      	bx	lr
 801d79a:	bf00      	nop
 801d79c:	24006db8 	.word	0x24006db8
 801d7a0:	24006d9c 	.word	0x24006d9c
 801d7a4:	24006dc0 	.word	0x24006dc0
 801d7a8:	24006dbc 	.word	0x24006dbc
 801d7ac:	24006d38 	.word	0x24006d38

0801d7b0 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801d7b0:	4b24      	ldr	r3, [pc, #144]	; (801d844 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801d7b2:	8802      	ldrh	r2, [r0, #0]
 801d7b4:	8818      	ldrh	r0, [r3, #0]
 801d7b6:	4282      	cmp	r2, r0
 801d7b8:	d221      	bcs.n	801d7fe <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801d7ba:	4b23      	ldr	r3, [pc, #140]	; (801d848 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801d7bc:	6819      	ldr	r1, [r3, #0]
 801d7be:	2314      	movs	r3, #20
 801d7c0:	fb03 1302 	mla	r3, r3, r2, r1
 801d7c4:	6858      	ldr	r0, [r3, #4]
 801d7c6:	2800      	cmp	r0, #0
 801d7c8:	d03a      	beq.n	801d840 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801d7ca:	4920      	ldr	r1, [pc, #128]	; (801d84c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801d7cc:	6809      	ldr	r1, [r1, #0]
 801d7ce:	2900      	cmp	r1, #0
 801d7d0:	d036      	beq.n	801d840 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801d7d2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801d7d6:	2900      	cmp	r1, #0
 801d7d8:	d032      	beq.n	801d840 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801d7da:	891a      	ldrh	r2, [r3, #8]
 801d7dc:	8958      	ldrh	r0, [r3, #10]
 801d7de:	4350      	muls	r0, r2
 801d7e0:	7c5a      	ldrb	r2, [r3, #17]
 801d7e2:	7cdb      	ldrb	r3, [r3, #19]
 801d7e4:	0952      	lsrs	r2, r2, #5
 801d7e6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801d7ea:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801d7ee:	2b0b      	cmp	r3, #11
 801d7f0:	bf18      	it	ne
 801d7f2:	0040      	lslne	r0, r0, #1
 801d7f4:	3003      	adds	r0, #3
 801d7f6:	f020 0003 	bic.w	r0, r0, #3
 801d7fa:	4408      	add	r0, r1
 801d7fc:	4770      	bx	lr
 801d7fe:	4b14      	ldr	r3, [pc, #80]	; (801d850 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801d800:	881b      	ldrh	r3, [r3, #0]
 801d802:	4403      	add	r3, r0
 801d804:	429a      	cmp	r2, r3
 801d806:	da1a      	bge.n	801d83e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801d808:	4b12      	ldr	r3, [pc, #72]	; (801d854 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801d80a:	1a10      	subs	r0, r2, r0
 801d80c:	210e      	movs	r1, #14
 801d80e:	681b      	ldr	r3, [r3, #0]
 801d810:	fb01 3000 	mla	r0, r1, r0, r3
 801d814:	7b03      	ldrb	r3, [r0, #12]
 801d816:	f003 031f 	and.w	r3, r3, #31
 801d81a:	2b0b      	cmp	r3, #11
 801d81c:	d10b      	bne.n	801d836 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801d81e:	8903      	ldrh	r3, [r0, #8]
 801d820:	8940      	ldrh	r0, [r0, #10]
 801d822:	4358      	muls	r0, r3
 801d824:	4b09      	ldr	r3, [pc, #36]	; (801d84c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801d826:	3003      	adds	r0, #3
 801d828:	6819      	ldr	r1, [r3, #0]
 801d82a:	f020 0303 	bic.w	r3, r0, #3
 801d82e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801d832:	4418      	add	r0, r3
 801d834:	4770      	bx	lr
 801d836:	2b0d      	cmp	r3, #13
 801d838:	d101      	bne.n	801d83e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801d83a:	300d      	adds	r0, #13
 801d83c:	4770      	bx	lr
 801d83e:	2000      	movs	r0, #0
 801d840:	4770      	bx	lr
 801d842:	bf00      	nop
 801d844:	24006db8 	.word	0x24006db8
 801d848:	24006dc0 	.word	0x24006dc0
 801d84c:	24006d9c 	.word	0x24006d9c
 801d850:	24006dbc 	.word	0x24006dbc
 801d854:	24006da0 	.word	0x24006da0

0801d858 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801d858:	4a17      	ldr	r2, [pc, #92]	; (801d8b8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801d85a:	b510      	push	{r4, lr}
 801d85c:	8803      	ldrh	r3, [r0, #0]
 801d85e:	8812      	ldrh	r2, [r2, #0]
 801d860:	4293      	cmp	r3, r2
 801d862:	d20c      	bcs.n	801d87e <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801d864:	4a15      	ldr	r2, [pc, #84]	; (801d8bc <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801d866:	2114      	movs	r1, #20
 801d868:	6812      	ldr	r2, [r2, #0]
 801d86a:	fb01 2303 	mla	r3, r1, r3, r2
 801d86e:	7c58      	ldrb	r0, [r3, #17]
 801d870:	0942      	lsrs	r2, r0, #5
 801d872:	7cd8      	ldrb	r0, [r3, #19]
 801d874:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801d878:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801d87c:	bd10      	pop	{r4, pc}
 801d87e:	4910      	ldr	r1, [pc, #64]	; (801d8c0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801d880:	8809      	ldrh	r1, [r1, #0]
 801d882:	4411      	add	r1, r2
 801d884:	428b      	cmp	r3, r1
 801d886:	da09      	bge.n	801d89c <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801d888:	1a9b      	subs	r3, r3, r2
 801d88a:	4a0e      	ldr	r2, [pc, #56]	; (801d8c4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801d88c:	210e      	movs	r1, #14
 801d88e:	6812      	ldr	r2, [r2, #0]
 801d890:	fb01 2303 	mla	r3, r1, r3, r2
 801d894:	7b18      	ldrb	r0, [r3, #12]
 801d896:	f000 001f 	and.w	r0, r0, #31
 801d89a:	e7ef      	b.n	801d87c <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801d89c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801d8a0:	4293      	cmp	r3, r2
 801d8a2:	d106      	bne.n	801d8b2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801d8a4:	f7e6 fef0 	bl	8004688 <_ZN8touchgfx3HAL3lcdEv>
 801d8a8:	6803      	ldr	r3, [r0, #0]
 801d8aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d8ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d8b0:	4718      	bx	r3
 801d8b2:	2000      	movs	r0, #0
 801d8b4:	e7e2      	b.n	801d87c <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801d8b6:	bf00      	nop
 801d8b8:	24006db8 	.word	0x24006db8
 801d8bc:	24006dc0 	.word	0x24006dc0
 801d8c0:	24006dbc 	.word	0x24006dbc
 801d8c4:	24006da0 	.word	0x24006da0

0801d8c8 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801d8c8:	2018      	movs	r0, #24
 801d8ca:	4770      	bx	lr

0801d8cc <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801d8cc:	2001      	movs	r0, #1
 801d8ce:	4770      	bx	lr

0801d8d0 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801d8d0:	4b02      	ldr	r3, [pc, #8]	; (801d8dc <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 801d8d2:	8818      	ldrh	r0, [r3, #0]
 801d8d4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d8d8:	b280      	uxth	r0, r0
 801d8da:	4770      	bx	lr
 801d8dc:	24006d32 	.word	0x24006d32

0801d8e0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801d8e0:	2bff      	cmp	r3, #255	; 0xff
 801d8e2:	d040      	beq.n	801d966 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 801d8e4:	2a2c      	cmp	r2, #44	; 0x2c
 801d8e6:	d02a      	beq.n	801d93e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5e>
 801d8e8:	d80f      	bhi.n	801d90a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 801d8ea:	2a08      	cmp	r2, #8
 801d8ec:	d037      	beq.n	801d95e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d8ee:	d805      	bhi.n	801d8fc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 801d8f0:	2a04      	cmp	r2, #4
 801d8f2:	d032      	beq.n	801d95a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a>
 801d8f4:	2a05      	cmp	r2, #5
 801d8f6:	d02e      	beq.n	801d956 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801d8f8:	2000      	movs	r0, #0
 801d8fa:	4770      	bx	lr
 801d8fc:	2a0a      	cmp	r2, #10
 801d8fe:	d02e      	beq.n	801d95e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d900:	d301      	bcc.n	801d906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 801d902:	2a0b      	cmp	r2, #11
 801d904:	d1f8      	bne.n	801d8f8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801d906:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801d908:	4770      	bx	lr
 801d90a:	2a30      	cmp	r2, #48	; 0x30
 801d90c:	d029      	beq.n	801d962 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801d90e:	d808      	bhi.n	801d922 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 801d910:	2a2e      	cmp	r2, #46	; 0x2e
 801d912:	684b      	ldr	r3, [r1, #4]
 801d914:	d01a      	beq.n	801d94c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801d916:	d90b      	bls.n	801d930 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 801d918:	781b      	ldrb	r3, [r3, #0]
 801d91a:	2b00      	cmp	r3, #0
 801d91c:	d1ec      	bne.n	801d8f8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801d91e:	6a00      	ldr	r0, [r0, #32]
 801d920:	4770      	bx	lr
 801d922:	2a32      	cmp	r2, #50	; 0x32
 801d924:	d01d      	beq.n	801d962 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801d926:	d301      	bcc.n	801d92c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4c>
 801d928:	2a33      	cmp	r2, #51	; 0x33
 801d92a:	d1e5      	bne.n	801d8f8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801d92c:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801d92e:	4770      	bx	lr
 801d930:	781b      	ldrb	r3, [r3, #0]
 801d932:	2b00      	cmp	r3, #0
 801d934:	d0f3      	beq.n	801d91e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3e>
 801d936:	2b01      	cmp	r3, #1
 801d938:	d1de      	bne.n	801d8f8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801d93a:	6900      	ldr	r0, [r0, #16]
 801d93c:	4770      	bx	lr
 801d93e:	684b      	ldr	r3, [r1, #4]
 801d940:	781b      	ldrb	r3, [r3, #0]
 801d942:	b133      	cbz	r3, 801d952 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801d944:	2b01      	cmp	r3, #1
 801d946:	d1d7      	bne.n	801d8f8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801d948:	6880      	ldr	r0, [r0, #8]
 801d94a:	4770      	bx	lr
 801d94c:	781b      	ldrb	r3, [r3, #0]
 801d94e:	2b00      	cmp	r3, #0
 801d950:	d1d2      	bne.n	801d8f8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801d952:	6980      	ldr	r0, [r0, #24]
 801d954:	4770      	bx	lr
 801d956:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801d958:	4770      	bx	lr
 801d95a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801d95c:	4770      	bx	lr
 801d95e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801d960:	4770      	bx	lr
 801d962:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801d964:	4770      	bx	lr
 801d966:	2a2c      	cmp	r2, #44	; 0x2c
 801d968:	d02a      	beq.n	801d9c0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801d96a:	d80f      	bhi.n	801d98c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xac>
 801d96c:	2a08      	cmp	r2, #8
 801d96e:	d035      	beq.n	801d9dc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 801d970:	d805      	bhi.n	801d97e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801d972:	2a04      	cmp	r2, #4
 801d974:	d030      	beq.n	801d9d8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf8>
 801d976:	2a05      	cmp	r2, #5
 801d978:	d1be      	bne.n	801d8f8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801d97a:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801d97c:	4770      	bx	lr
 801d97e:	2a0a      	cmp	r2, #10
 801d980:	d02c      	beq.n	801d9dc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 801d982:	d301      	bcc.n	801d988 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 801d984:	2a0b      	cmp	r2, #11
 801d986:	d1b7      	bne.n	801d8f8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801d988:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801d98a:	4770      	bx	lr
 801d98c:	2a30      	cmp	r2, #48	; 0x30
 801d98e:	d027      	beq.n	801d9e0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 801d990:	d808      	bhi.n	801d9a4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 801d992:	2a2e      	cmp	r2, #46	; 0x2e
 801d994:	684b      	ldr	r3, [r1, #4]
 801d996:	d01a      	beq.n	801d9ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801d998:	d90b      	bls.n	801d9b2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd2>
 801d99a:	781b      	ldrb	r3, [r3, #0]
 801d99c:	2b00      	cmp	r3, #0
 801d99e:	d1ab      	bne.n	801d8f8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801d9a0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801d9a2:	4770      	bx	lr
 801d9a4:	2a32      	cmp	r2, #50	; 0x32
 801d9a6:	d01b      	beq.n	801d9e0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 801d9a8:	d301      	bcc.n	801d9ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xce>
 801d9aa:	2a33      	cmp	r2, #51	; 0x33
 801d9ac:	d1a4      	bne.n	801d8f8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801d9ae:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801d9b0:	4770      	bx	lr
 801d9b2:	781b      	ldrb	r3, [r3, #0]
 801d9b4:	2b00      	cmp	r3, #0
 801d9b6:	d0f3      	beq.n	801d9a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 801d9b8:	2b01      	cmp	r3, #1
 801d9ba:	d19d      	bne.n	801d8f8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801d9bc:	6940      	ldr	r0, [r0, #20]
 801d9be:	4770      	bx	lr
 801d9c0:	684b      	ldr	r3, [r1, #4]
 801d9c2:	781b      	ldrb	r3, [r3, #0]
 801d9c4:	b133      	cbz	r3, 801d9d4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf4>
 801d9c6:	2b01      	cmp	r3, #1
 801d9c8:	d196      	bne.n	801d8f8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801d9ca:	68c0      	ldr	r0, [r0, #12]
 801d9cc:	4770      	bx	lr
 801d9ce:	781b      	ldrb	r3, [r3, #0]
 801d9d0:	2b00      	cmp	r3, #0
 801d9d2:	d191      	bne.n	801d8f8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801d9d4:	69c0      	ldr	r0, [r0, #28]
 801d9d6:	4770      	bx	lr
 801d9d8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801d9da:	4770      	bx	lr
 801d9dc:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801d9de:	4770      	bx	lr
 801d9e0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801d9e2:	4770      	bx	lr

0801d9e4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d9e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d9e8:	b085      	sub	sp, #20
 801d9ea:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801d9ec:	9203      	str	r2, [sp, #12]
 801d9ee:	6870      	ldr	r0, [r6, #4]
 801d9f0:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801d9f4:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801d9f8:	9101      	str	r1, [sp, #4]
 801d9fa:	fa1f f885 	uxth.w	r8, r5
 801d9fe:	43ed      	mvns	r5, r5
 801da00:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801da04:	b2ed      	uxtb	r5, r5
 801da06:	fb00 2404 	mla	r4, r0, r4, r2
 801da0a:	6832      	ldr	r2, [r6, #0]
 801da0c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801da10:	4414      	add	r4, r2
 801da12:	f8dc 2000 	ldr.w	r2, [ip]
 801da16:	9202      	str	r2, [sp, #8]
 801da18:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801da1c:	f102 0e04 	add.w	lr, r2, #4
 801da20:	9a01      	ldr	r2, [sp, #4]
 801da22:	2a00      	cmp	r2, #0
 801da24:	dc03      	bgt.n	801da2e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801da26:	9a03      	ldr	r2, [sp, #12]
 801da28:	2a00      	cmp	r2, #0
 801da2a:	f340 8116 	ble.w	801dc5a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801da2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801da30:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801da34:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801da38:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801da3a:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801da3e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801da42:	2b00      	cmp	r3, #0
 801da44:	dd0e      	ble.n	801da64 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801da46:	1406      	asrs	r6, r0, #16
 801da48:	d405      	bmi.n	801da56 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801da4a:	4556      	cmp	r6, sl
 801da4c:	da03      	bge.n	801da56 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801da4e:	1416      	asrs	r6, r2, #16
 801da50:	d401      	bmi.n	801da56 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801da52:	454e      	cmp	r6, r9
 801da54:	db07      	blt.n	801da66 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801da56:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801da58:	3b01      	subs	r3, #1
 801da5a:	3403      	adds	r4, #3
 801da5c:	4430      	add	r0, r6
 801da5e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801da60:	4432      	add	r2, r6
 801da62:	e7ee      	b.n	801da42 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801da64:	d063      	beq.n	801db2e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801da66:	1e5e      	subs	r6, r3, #1
 801da68:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801da6a:	fb07 0706 	mla	r7, r7, r6, r0
 801da6e:	143f      	asrs	r7, r7, #16
 801da70:	d454      	bmi.n	801db1c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801da72:	4557      	cmp	r7, sl
 801da74:	da52      	bge.n	801db1c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801da76:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801da78:	fb07 2606 	mla	r6, r7, r6, r2
 801da7c:	1436      	asrs	r6, r6, #16
 801da7e:	d44d      	bmi.n	801db1c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801da80:	454e      	cmp	r6, r9
 801da82:	da4b      	bge.n	801db1c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801da84:	1ce6      	adds	r6, r4, #3
 801da86:	4699      	mov	r9, r3
 801da88:	f1b9 0f00 	cmp.w	r9, #0
 801da8c:	f106 0603 	add.w	r6, r6, #3
 801da90:	dd48      	ble.n	801db24 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801da92:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801da96:	1417      	asrs	r7, r2, #16
 801da98:	9902      	ldr	r1, [sp, #8]
 801da9a:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801da9e:	f109 39ff 	add.w	r9, r9, #4294967295
 801daa2:	fb0b 1707 	mla	r7, fp, r7, r1
 801daa6:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801daaa:	9911      	ldr	r1, [sp, #68]	; 0x44
 801daac:	f817 700a 	ldrb.w	r7, [r7, sl]
 801dab0:	fb1b fb05 	smulbb	fp, fp, r5
 801dab4:	4408      	add	r0, r1
 801dab6:	9912      	ldr	r1, [sp, #72]	; 0x48
 801dab8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801dabc:	440a      	add	r2, r1
 801dabe:	eb0e 0a07 	add.w	sl, lr, r7
 801dac2:	f81e 7007 	ldrb.w	r7, [lr, r7]
 801dac6:	fb07 b708 	mla	r7, r7, r8, fp
 801daca:	b2bf      	uxth	r7, r7
 801dacc:	f107 0b01 	add.w	fp, r7, #1
 801dad0:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801dad4:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801dad8:	fb1b fb05 	smulbb	fp, fp, r5
 801dadc:	123f      	asrs	r7, r7, #8
 801dade:	f806 7c06 	strb.w	r7, [r6, #-6]
 801dae2:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801dae6:	fb07 b708 	mla	r7, r7, r8, fp
 801daea:	b2bf      	uxth	r7, r7
 801daec:	f107 0b01 	add.w	fp, r7, #1
 801daf0:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801daf4:	123f      	asrs	r7, r7, #8
 801daf6:	f806 7c05 	strb.w	r7, [r6, #-5]
 801dafa:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801dafe:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801db02:	fb1a fa05 	smulbb	sl, sl, r5
 801db06:	fb07 a708 	mla	r7, r7, r8, sl
 801db0a:	b2bf      	uxth	r7, r7
 801db0c:	f107 0a01 	add.w	sl, r7, #1
 801db10:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801db14:	123f      	asrs	r7, r7, #8
 801db16:	f806 7c04 	strb.w	r7, [r6, #-4]
 801db1a:	e7b5      	b.n	801da88 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801db1c:	2700      	movs	r7, #0
 801db1e:	1bde      	subs	r6, r3, r7
 801db20:	2e00      	cmp	r6, #0
 801db22:	dc42      	bgt.n	801dbaa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801db24:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801db28:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801db2c:	441c      	add	r4, r3
 801db2e:	9b01      	ldr	r3, [sp, #4]
 801db30:	2b00      	cmp	r3, #0
 801db32:	f340 8092 	ble.w	801dc5a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801db36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801db3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801db3c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801db40:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801db44:	eef0 6a62 	vmov.f32	s13, s5
 801db48:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801db4c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801db50:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801db54:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801db58:	eef0 6a43 	vmov.f32	s13, s6
 801db5c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801db60:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801db64:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801db68:	ee61 7a27 	vmul.f32	s15, s2, s15
 801db6c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801db70:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801db74:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801db78:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801db7c:	ee12 2a90 	vmov	r2, s5
 801db80:	eef0 2a47 	vmov.f32	s5, s14
 801db84:	fb92 f3f3 	sdiv	r3, r2, r3
 801db88:	ee13 2a10 	vmov	r2, s6
 801db8c:	9311      	str	r3, [sp, #68]	; 0x44
 801db8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801db90:	eeb0 3a67 	vmov.f32	s6, s15
 801db94:	fb92 f3f3 	sdiv	r3, r2, r3
 801db98:	9312      	str	r3, [sp, #72]	; 0x48
 801db9a:	9b01      	ldr	r3, [sp, #4]
 801db9c:	9a03      	ldr	r2, [sp, #12]
 801db9e:	3b01      	subs	r3, #1
 801dba0:	9301      	str	r3, [sp, #4]
 801dba2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dba4:	bf08      	it	eq
 801dba6:	4613      	moveq	r3, r2
 801dba8:	e73a      	b.n	801da20 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801dbaa:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801dbae:	d44e      	bmi.n	801dc4e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801dbb0:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801dbb4:	4556      	cmp	r6, sl
 801dbb6:	dd4a      	ble.n	801dc4e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801dbb8:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801dbbc:	d447      	bmi.n	801dc4e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801dbbe:	f8dc 100c 	ldr.w	r1, [ip, #12]
 801dbc2:	4559      	cmp	r1, fp
 801dbc4:	dd43      	ble.n	801dc4e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801dbc6:	fa0f f986 	sxth.w	r9, r6
 801dbca:	9902      	ldr	r1, [sp, #8]
 801dbcc:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801dbd0:	fb0b 1909 	mla	r9, fp, r9, r1
 801dbd4:	f814 b006 	ldrb.w	fp, [r4, r6]
 801dbd8:	f819 900a 	ldrb.w	r9, [r9, sl]
 801dbdc:	fb1b fb05 	smulbb	fp, fp, r5
 801dbe0:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801dbe4:	eb0e 0a09 	add.w	sl, lr, r9
 801dbe8:	f81e 9009 	ldrb.w	r9, [lr, r9]
 801dbec:	fb09 b908 	mla	r9, r9, r8, fp
 801dbf0:	fa1f f989 	uxth.w	r9, r9
 801dbf4:	f109 0b01 	add.w	fp, r9, #1
 801dbf8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801dbfc:	ea4f 2929 	mov.w	r9, r9, asr #8
 801dc00:	f804 9006 	strb.w	r9, [r4, r6]
 801dc04:	4426      	add	r6, r4
 801dc06:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801dc0a:	f896 b001 	ldrb.w	fp, [r6, #1]
 801dc0e:	fb1b fb05 	smulbb	fp, fp, r5
 801dc12:	fb09 b908 	mla	r9, r9, r8, fp
 801dc16:	fa1f f989 	uxth.w	r9, r9
 801dc1a:	f109 0b01 	add.w	fp, r9, #1
 801dc1e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801dc22:	ea4f 2929 	mov.w	r9, r9, asr #8
 801dc26:	f886 9001 	strb.w	r9, [r6, #1]
 801dc2a:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801dc2e:	f896 a002 	ldrb.w	sl, [r6, #2]
 801dc32:	fb1a fa05 	smulbb	sl, sl, r5
 801dc36:	fb09 a908 	mla	r9, r9, r8, sl
 801dc3a:	fa1f f989 	uxth.w	r9, r9
 801dc3e:	f109 0a01 	add.w	sl, r9, #1
 801dc42:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801dc46:	ea4f 2929 	mov.w	r9, r9, asr #8
 801dc4a:	f886 9002 	strb.w	r9, [r6, #2]
 801dc4e:	9911      	ldr	r1, [sp, #68]	; 0x44
 801dc50:	3701      	adds	r7, #1
 801dc52:	4408      	add	r0, r1
 801dc54:	9912      	ldr	r1, [sp, #72]	; 0x48
 801dc56:	440a      	add	r2, r1
 801dc58:	e761      	b.n	801db1e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801dc5a:	b005      	add	sp, #20
 801dc5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dc60 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dc60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc64:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801dc66:	4693      	mov	fp, r2
 801dc68:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801dc6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801dc6e:	6868      	ldr	r0, [r5, #4]
 801dc70:	6877      	ldr	r7, [r6, #4]
 801dc72:	9100      	str	r1, [sp, #0]
 801dc74:	3704      	adds	r7, #4
 801dc76:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801dc7a:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 801dc7e:	fb00 2404 	mla	r4, r0, r4, r2
 801dc82:	682a      	ldr	r2, [r5, #0]
 801dc84:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801dc88:	4414      	add	r4, r2
 801dc8a:	6832      	ldr	r2, [r6, #0]
 801dc8c:	9201      	str	r2, [sp, #4]
 801dc8e:	9a00      	ldr	r2, [sp, #0]
 801dc90:	2a00      	cmp	r2, #0
 801dc92:	dc03      	bgt.n	801dc9c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801dc94:	f1bb 0f00 	cmp.w	fp, #0
 801dc98:	f340 80bc 	ble.w	801de14 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801dc9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801dc9e:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 801dca2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801dca6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801dca8:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 801dcac:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801dcb0:	2b00      	cmp	r3, #0
 801dcb2:	dd0c      	ble.n	801dcce <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801dcb4:	1405      	asrs	r5, r0, #16
 801dcb6:	d405      	bmi.n	801dcc4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801dcb8:	4555      	cmp	r5, sl
 801dcba:	da03      	bge.n	801dcc4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801dcbc:	1415      	asrs	r5, r2, #16
 801dcbe:	d401      	bmi.n	801dcc4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801dcc0:	454d      	cmp	r5, r9
 801dcc2:	db05      	blt.n	801dcd0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801dcc4:	4440      	add	r0, r8
 801dcc6:	4472      	add	r2, lr
 801dcc8:	3b01      	subs	r3, #1
 801dcca:	3403      	adds	r4, #3
 801dccc:	e7f0      	b.n	801dcb0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801dcce:	d03f      	beq.n	801dd50 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 801dcd0:	1e5d      	subs	r5, r3, #1
 801dcd2:	fb08 0c05 	mla	ip, r8, r5, r0
 801dcd6:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801dcda:	d42e      	bmi.n	801dd3a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801dcdc:	45d4      	cmp	ip, sl
 801dcde:	da2c      	bge.n	801dd3a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801dce0:	fb0e 2505 	mla	r5, lr, r5, r2
 801dce4:	142d      	asrs	r5, r5, #16
 801dce6:	d428      	bmi.n	801dd3a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801dce8:	454d      	cmp	r5, r9
 801dcea:	da26      	bge.n	801dd3a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801dcec:	1ce5      	adds	r5, r4, #3
 801dcee:	469c      	mov	ip, r3
 801dcf0:	f1bc 0f00 	cmp.w	ip, #0
 801dcf4:	f105 0503 	add.w	r5, r5, #3
 801dcf8:	dd25      	ble.n	801dd46 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801dcfa:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801dcfe:	ea4f 4922 	mov.w	r9, r2, asr #16
 801dd02:	f10c 3cff 	add.w	ip, ip, #4294967295
 801dd06:	4472      	add	r2, lr
 801dd08:	468a      	mov	sl, r1
 801dd0a:	9901      	ldr	r1, [sp, #4]
 801dd0c:	fb0a 1909 	mla	r9, sl, r9, r1
 801dd10:	1401      	asrs	r1, r0, #16
 801dd12:	4440      	add	r0, r8
 801dd14:	f819 9001 	ldrb.w	r9, [r9, r1]
 801dd18:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801dd1c:	eb07 0a09 	add.w	sl, r7, r9
 801dd20:	f817 9009 	ldrb.w	r9, [r7, r9]
 801dd24:	f805 9c06 	strb.w	r9, [r5, #-6]
 801dd28:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801dd2c:	f805 9c05 	strb.w	r9, [r5, #-5]
 801dd30:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801dd34:	f805 9c04 	strb.w	r9, [r5, #-4]
 801dd38:	e7da      	b.n	801dcf0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801dd3a:	2500      	movs	r5, #0
 801dd3c:	eba3 0c05 	sub.w	ip, r3, r5
 801dd40:	f1bc 0f00 	cmp.w	ip, #0
 801dd44:	dc3b      	bgt.n	801ddbe <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801dd46:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801dd4a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dd4e:	441c      	add	r4, r3
 801dd50:	9b00      	ldr	r3, [sp, #0]
 801dd52:	2b00      	cmp	r3, #0
 801dd54:	dd5e      	ble.n	801de14 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801dd56:	ee30 0a04 	vadd.f32	s0, s0, s8
 801dd5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dd5c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dd60:	eeb0 6a62 	vmov.f32	s12, s5
 801dd64:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801dd68:	ee31 1a05 	vadd.f32	s2, s2, s10
 801dd6c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dd70:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801dd74:	eeb0 6a43 	vmov.f32	s12, s6
 801dd78:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dd7c:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801dd80:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801dd84:	ee61 7a27 	vmul.f32	s15, s2, s15
 801dd88:	ee77 2a62 	vsub.f32	s5, s14, s5
 801dd8c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801dd90:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801dd94:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801dd98:	ee12 2a90 	vmov	r2, s5
 801dd9c:	eef0 2a47 	vmov.f32	s5, s14
 801dda0:	fb92 f8f3 	sdiv	r8, r2, r3
 801dda4:	ee13 2a10 	vmov	r2, s6
 801dda8:	eeb0 3a67 	vmov.f32	s6, s15
 801ddac:	fb92 fef3 	sdiv	lr, r2, r3
 801ddb0:	9b00      	ldr	r3, [sp, #0]
 801ddb2:	3b01      	subs	r3, #1
 801ddb4:	9300      	str	r3, [sp, #0]
 801ddb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ddb8:	bf08      	it	eq
 801ddba:	465b      	moveq	r3, fp
 801ddbc:	e767      	b.n	801dc8e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801ddbe:	ea5f 4920 	movs.w	r9, r0, asr #16
 801ddc2:	d423      	bmi.n	801de0c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801ddc4:	f8d6 c008 	ldr.w	ip, [r6, #8]
 801ddc8:	45cc      	cmp	ip, r9
 801ddca:	dd1f      	ble.n	801de0c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801ddcc:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801ddd0:	d41c      	bmi.n	801de0c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801ddd2:	68f1      	ldr	r1, [r6, #12]
 801ddd4:	4551      	cmp	r1, sl
 801ddd6:	dd19      	ble.n	801de0c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801ddd8:	fa0f fc8c 	sxth.w	ip, ip
 801dddc:	9901      	ldr	r1, [sp, #4]
 801ddde:	fb0a 1c0c 	mla	ip, sl, ip, r1
 801dde2:	f81c c009 	ldrb.w	ip, [ip, r9]
 801dde6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801ddea:	f817 a00c 	ldrb.w	sl, [r7, ip]
 801ddee:	eb07 090c 	add.w	r9, r7, ip
 801ddf2:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 801ddf6:	f804 a00c 	strb.w	sl, [r4, ip]
 801ddfa:	44a4      	add	ip, r4
 801ddfc:	f899 a001 	ldrb.w	sl, [r9, #1]
 801de00:	f88c a001 	strb.w	sl, [ip, #1]
 801de04:	f899 9002 	ldrb.w	r9, [r9, #2]
 801de08:	f88c 9002 	strb.w	r9, [ip, #2]
 801de0c:	4440      	add	r0, r8
 801de0e:	4472      	add	r2, lr
 801de10:	3501      	adds	r5, #1
 801de12:	e793      	b.n	801dd3c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 801de14:	b003      	add	sp, #12
 801de16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801de1a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801de1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de1e:	b085      	sub	sp, #20
 801de20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801de24:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801de26:	9202      	str	r2, [sp, #8]
 801de28:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801de2c:	6860      	ldr	r0, [r4, #4]
 801de2e:	9203      	str	r2, [sp, #12]
 801de30:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801de34:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801de38:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801de3c:	fb00 2505 	mla	r5, r0, r5, r2
 801de40:	6822      	ldr	r2, [r4, #0]
 801de42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801de46:	4415      	add	r5, r2
 801de48:	f8dc 2000 	ldr.w	r2, [ip]
 801de4c:	9200      	str	r2, [sp, #0]
 801de4e:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801de52:	3204      	adds	r2, #4
 801de54:	9201      	str	r2, [sp, #4]
 801de56:	2900      	cmp	r1, #0
 801de58:	dc03      	bgt.n	801de62 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801de5a:	9a02      	ldr	r2, [sp, #8]
 801de5c:	2a00      	cmp	r2, #0
 801de5e:	f340 8127 	ble.w	801e0b0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801de62:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801de64:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801de68:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801de6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801de6e:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801de72:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801de76:	2b00      	cmp	r3, #0
 801de78:	dd0d      	ble.n	801de96 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801de7a:	1422      	asrs	r2, r4, #16
 801de7c:	d405      	bmi.n	801de8a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801de7e:	4542      	cmp	r2, r8
 801de80:	da03      	bge.n	801de8a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801de82:	1402      	asrs	r2, r0, #16
 801de84:	d401      	bmi.n	801de8a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801de86:	42ba      	cmp	r2, r7
 801de88:	db06      	blt.n	801de98 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801de8a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801de8c:	4474      	add	r4, lr
 801de8e:	3b01      	subs	r3, #1
 801de90:	3503      	adds	r5, #3
 801de92:	4410      	add	r0, r2
 801de94:	e7ef      	b.n	801de76 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801de96:	d075      	beq.n	801df84 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801de98:	1e5a      	subs	r2, r3, #1
 801de9a:	fb0e 4602 	mla	r6, lr, r2, r4
 801de9e:	1436      	asrs	r6, r6, #16
 801dea0:	d465      	bmi.n	801df6e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801dea2:	4546      	cmp	r6, r8
 801dea4:	da63      	bge.n	801df6e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801dea6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801dea8:	fb06 0202 	mla	r2, r6, r2, r0
 801deac:	1412      	asrs	r2, r2, #16
 801deae:	d45e      	bmi.n	801df6e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801deb0:	42ba      	cmp	r2, r7
 801deb2:	da5c      	bge.n	801df6e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801deb4:	1cef      	adds	r7, r5, #3
 801deb6:	4699      	mov	r9, r3
 801deb8:	f1b9 0f00 	cmp.w	r9, #0
 801debc:	dd5d      	ble.n	801df7a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801debe:	1402      	asrs	r2, r0, #16
 801dec0:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801dec4:	1426      	asrs	r6, r4, #16
 801dec6:	4692      	mov	sl, r2
 801dec8:	9a00      	ldr	r2, [sp, #0]
 801deca:	fb08 220a 	mla	r2, r8, sl, r2
 801dece:	5d92      	ldrb	r2, [r2, r6]
 801ded0:	9e01      	ldr	r6, [sp, #4]
 801ded2:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801ded6:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801deda:	d041      	beq.n	801df60 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801dedc:	9a03      	ldr	r2, [sp, #12]
 801dede:	fa5f fb86 	uxtb.w	fp, r6
 801dee2:	fb02 f808 	mul.w	r8, r2, r8
 801dee6:	f108 0201 	add.w	r2, r8, #1
 801deea:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801deee:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801def2:	1212      	asrs	r2, r2, #8
 801def4:	fa1f fa82 	uxth.w	sl, r2
 801def8:	43d2      	mvns	r2, r2
 801defa:	fb1b fb0a 	smulbb	fp, fp, sl
 801defe:	b2d2      	uxtb	r2, r2
 801df00:	fb08 b802 	mla	r8, r8, r2, fp
 801df04:	fa1f f888 	uxth.w	r8, r8
 801df08:	f108 0b01 	add.w	fp, r8, #1
 801df0c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801df10:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801df14:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801df18:	fb1b fb0a 	smulbb	fp, fp, sl
 801df1c:	ea4f 2828 	mov.w	r8, r8, asr #8
 801df20:	fb16 fa0a 	smulbb	sl, r6, sl
 801df24:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801df28:	f807 8c03 	strb.w	r8, [r7, #-3]
 801df2c:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801df30:	fb06 aa02 	mla	sl, r6, r2, sl
 801df34:	fb08 b802 	mla	r8, r8, r2, fp
 801df38:	fa1f fa8a 	uxth.w	sl, sl
 801df3c:	fa1f f888 	uxth.w	r8, r8
 801df40:	f10a 0601 	add.w	r6, sl, #1
 801df44:	f108 0b01 	add.w	fp, r8, #1
 801df48:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801df4c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801df50:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801df54:	ea4f 2828 	mov.w	r8, r8, asr #8
 801df58:	f807 ac01 	strb.w	sl, [r7, #-1]
 801df5c:	f807 8c02 	strb.w	r8, [r7, #-2]
 801df60:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801df62:	4474      	add	r4, lr
 801df64:	3703      	adds	r7, #3
 801df66:	f109 39ff 	add.w	r9, r9, #4294967295
 801df6a:	4410      	add	r0, r2
 801df6c:	e7a4      	b.n	801deb8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801df6e:	f04f 0800 	mov.w	r8, #0
 801df72:	eba3 0208 	sub.w	r2, r3, r8
 801df76:	2a00      	cmp	r2, #0
 801df78:	dc3b      	bgt.n	801dff2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801df7a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801df7e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801df82:	441d      	add	r5, r3
 801df84:	2900      	cmp	r1, #0
 801df86:	f340 8093 	ble.w	801e0b0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801df8a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801df8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801df90:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801df94:	3901      	subs	r1, #1
 801df96:	eeb0 6a62 	vmov.f32	s12, s5
 801df9a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801df9e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801dfa2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dfa6:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801dfaa:	eeb0 6a43 	vmov.f32	s12, s6
 801dfae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dfb2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801dfb6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801dfba:	ee61 7a27 	vmul.f32	s15, s2, s15
 801dfbe:	ee77 2a62 	vsub.f32	s5, s14, s5
 801dfc2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801dfc6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801dfca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801dfce:	ee12 2a90 	vmov	r2, s5
 801dfd2:	eef0 2a47 	vmov.f32	s5, s14
 801dfd6:	fb92 fef3 	sdiv	lr, r2, r3
 801dfda:	ee13 2a10 	vmov	r2, s6
 801dfde:	eeb0 3a67 	vmov.f32	s6, s15
 801dfe2:	fb92 f3f3 	sdiv	r3, r2, r3
 801dfe6:	9a02      	ldr	r2, [sp, #8]
 801dfe8:	9312      	str	r3, [sp, #72]	; 0x48
 801dfea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dfec:	bf08      	it	eq
 801dfee:	4613      	moveq	r3, r2
 801dff0:	e731      	b.n	801de56 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801dff2:	1427      	asrs	r7, r4, #16
 801dff4:	d456      	bmi.n	801e0a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801dff6:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801dffa:	42be      	cmp	r6, r7
 801dffc:	dd52      	ble.n	801e0a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801dffe:	ea5f 4920 	movs.w	r9, r0, asr #16
 801e002:	d44f      	bmi.n	801e0a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801e004:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801e008:	454a      	cmp	r2, r9
 801e00a:	dd4b      	ble.n	801e0a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801e00c:	9a00      	ldr	r2, [sp, #0]
 801e00e:	b236      	sxth	r6, r6
 801e010:	fb09 2606 	mla	r6, r9, r6, r2
 801e014:	5df2      	ldrb	r2, [r6, r7]
 801e016:	9e01      	ldr	r6, [sp, #4]
 801e018:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801e01c:	0e3a      	lsrs	r2, r7, #24
 801e01e:	d041      	beq.n	801e0a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801e020:	9e03      	ldr	r6, [sp, #12]
 801e022:	fa5f fb87 	uxtb.w	fp, r7
 801e026:	4372      	muls	r2, r6
 801e028:	1c56      	adds	r6, r2, #1
 801e02a:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801e02e:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801e032:	1212      	asrs	r2, r2, #8
 801e034:	f815 9006 	ldrb.w	r9, [r5, r6]
 801e038:	fa1f fa82 	uxth.w	sl, r2
 801e03c:	43d2      	mvns	r2, r2
 801e03e:	fb1b fb0a 	smulbb	fp, fp, sl
 801e042:	b2d2      	uxtb	r2, r2
 801e044:	fb09 b902 	mla	r9, r9, r2, fp
 801e048:	fa1f f989 	uxth.w	r9, r9
 801e04c:	f109 0b01 	add.w	fp, r9, #1
 801e050:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e054:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801e058:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801e05c:	fb1b fb0a 	smulbb	fp, fp, sl
 801e060:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e064:	fb17 fa0a 	smulbb	sl, r7, sl
 801e068:	f805 9006 	strb.w	r9, [r5, r6]
 801e06c:	442e      	add	r6, r5
 801e06e:	78b7      	ldrb	r7, [r6, #2]
 801e070:	f896 9001 	ldrb.w	r9, [r6, #1]
 801e074:	fb07 aa02 	mla	sl, r7, r2, sl
 801e078:	fb09 b902 	mla	r9, r9, r2, fp
 801e07c:	fa1f fa8a 	uxth.w	sl, sl
 801e080:	fa1f f989 	uxth.w	r9, r9
 801e084:	f10a 0701 	add.w	r7, sl, #1
 801e088:	f109 0b01 	add.w	fp, r9, #1
 801e08c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e090:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e094:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e098:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e09c:	f886 a002 	strb.w	sl, [r6, #2]
 801e0a0:	f886 9001 	strb.w	r9, [r6, #1]
 801e0a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e0a6:	4474      	add	r4, lr
 801e0a8:	f108 0801 	add.w	r8, r8, #1
 801e0ac:	4410      	add	r0, r2
 801e0ae:	e760      	b.n	801df72 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 801e0b0:	b005      	add	sp, #20
 801e0b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e0b6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e0b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e0ba:	b085      	sub	sp, #20
 801e0bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e0c0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801e0c2:	9203      	str	r2, [sp, #12]
 801e0c4:	6868      	ldr	r0, [r5, #4]
 801e0c6:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801e0ca:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801e0ce:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801e0d2:	fb00 2404 	mla	r4, r0, r4, r2
 801e0d6:	682a      	ldr	r2, [r5, #0]
 801e0d8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e0dc:	4414      	add	r4, r2
 801e0de:	f8dc 2000 	ldr.w	r2, [ip]
 801e0e2:	9201      	str	r2, [sp, #4]
 801e0e4:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801e0e8:	3204      	adds	r2, #4
 801e0ea:	9202      	str	r2, [sp, #8]
 801e0ec:	2900      	cmp	r1, #0
 801e0ee:	dc03      	bgt.n	801e0f8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801e0f0:	9a03      	ldr	r2, [sp, #12]
 801e0f2:	2a00      	cmp	r2, #0
 801e0f4:	f340 8137 	ble.w	801e366 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801e0f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e0fa:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801e0fe:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e102:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e104:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801e108:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e10c:	2b00      	cmp	r3, #0
 801e10e:	dd0d      	ble.n	801e12c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e110:	1405      	asrs	r5, r0, #16
 801e112:	d405      	bmi.n	801e120 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801e114:	4545      	cmp	r5, r8
 801e116:	da03      	bge.n	801e120 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801e118:	1415      	asrs	r5, r2, #16
 801e11a:	d401      	bmi.n	801e120 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801e11c:	42bd      	cmp	r5, r7
 801e11e:	db06      	blt.n	801e12e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801e120:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801e122:	4470      	add	r0, lr
 801e124:	3b01      	subs	r3, #1
 801e126:	3403      	adds	r4, #3
 801e128:	442a      	add	r2, r5
 801e12a:	e7ef      	b.n	801e10c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801e12c:	d070      	beq.n	801e210 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801e12e:	1e5d      	subs	r5, r3, #1
 801e130:	fb0e 0605 	mla	r6, lr, r5, r0
 801e134:	1436      	asrs	r6, r6, #16
 801e136:	d462      	bmi.n	801e1fe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801e138:	4546      	cmp	r6, r8
 801e13a:	da60      	bge.n	801e1fe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801e13c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801e13e:	fb06 2505 	mla	r5, r6, r5, r2
 801e142:	142d      	asrs	r5, r5, #16
 801e144:	d45b      	bmi.n	801e1fe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801e146:	42bd      	cmp	r5, r7
 801e148:	da59      	bge.n	801e1fe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801e14a:	1ce5      	adds	r5, r4, #3
 801e14c:	469a      	mov	sl, r3
 801e14e:	f1ba 0f00 	cmp.w	sl, #0
 801e152:	dd58      	ble.n	801e206 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 801e154:	1416      	asrs	r6, r2, #16
 801e156:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801e15a:	1407      	asrs	r7, r0, #16
 801e15c:	46b1      	mov	r9, r6
 801e15e:	9e01      	ldr	r6, [sp, #4]
 801e160:	fb08 6609 	mla	r6, r8, r9, r6
 801e164:	5df6      	ldrb	r6, [r6, r7]
 801e166:	9f02      	ldr	r7, [sp, #8]
 801e168:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 801e16c:	0e37      	lsrs	r7, r6, #24
 801e16e:	2fff      	cmp	r7, #255	; 0xff
 801e170:	f000 80f0 	beq.w	801e354 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801e174:	fa5f f887 	uxtb.w	r8, r7
 801e178:	b3d7      	cbz	r7, 801e1f0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801e17a:	fa1f f788 	uxth.w	r7, r8
 801e17e:	ea6f 0808 	mvn.w	r8, r8
 801e182:	fa5f fb86 	uxtb.w	fp, r6
 801e186:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801e18a:	fa5f f888 	uxtb.w	r8, r8
 801e18e:	fb1b fb07 	smulbb	fp, fp, r7
 801e192:	fb09 b908 	mla	r9, r9, r8, fp
 801e196:	fa1f f989 	uxth.w	r9, r9
 801e19a:	f109 0b01 	add.w	fp, r9, #1
 801e19e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e1a2:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801e1a6:	fb1b fb08 	smulbb	fp, fp, r8
 801e1aa:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e1ae:	f805 9c03 	strb.w	r9, [r5, #-3]
 801e1b2:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801e1b6:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801e1ba:	fb09 b907 	mla	r9, r9, r7, fp
 801e1be:	fa1f f989 	uxth.w	r9, r9
 801e1c2:	f109 0b01 	add.w	fp, r9, #1
 801e1c6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e1ca:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e1ce:	f805 9c02 	strb.w	r9, [r5, #-2]
 801e1d2:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801e1d6:	fb19 f808 	smulbb	r8, r9, r8
 801e1da:	fb06 8607 	mla	r6, r6, r7, r8
 801e1de:	b2b6      	uxth	r6, r6
 801e1e0:	f106 0801 	add.w	r8, r6, #1
 801e1e4:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 801e1e8:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e1ec:	f805 8c01 	strb.w	r8, [r5, #-1]
 801e1f0:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801e1f2:	4470      	add	r0, lr
 801e1f4:	3503      	adds	r5, #3
 801e1f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e1fa:	4432      	add	r2, r6
 801e1fc:	e7a7      	b.n	801e14e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801e1fe:	2600      	movs	r6, #0
 801e200:	1b9d      	subs	r5, r3, r6
 801e202:	2d00      	cmp	r5, #0
 801e204:	dc3b      	bgt.n	801e27e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801e206:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e20a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e20e:	441c      	add	r4, r3
 801e210:	2900      	cmp	r1, #0
 801e212:	f340 80a8 	ble.w	801e366 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801e216:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e21a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e21c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e220:	3901      	subs	r1, #1
 801e222:	eeb0 6a62 	vmov.f32	s12, s5
 801e226:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e22a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e22e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e232:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801e236:	eeb0 6a43 	vmov.f32	s12, s6
 801e23a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e23e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801e242:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e246:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e24a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e24e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e252:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e256:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e25a:	ee12 2a90 	vmov	r2, s5
 801e25e:	eef0 2a47 	vmov.f32	s5, s14
 801e262:	fb92 fef3 	sdiv	lr, r2, r3
 801e266:	ee13 2a10 	vmov	r2, s6
 801e26a:	eeb0 3a67 	vmov.f32	s6, s15
 801e26e:	fb92 f3f3 	sdiv	r3, r2, r3
 801e272:	9a03      	ldr	r2, [sp, #12]
 801e274:	9312      	str	r3, [sp, #72]	; 0x48
 801e276:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e278:	bf08      	it	eq
 801e27a:	4613      	moveq	r3, r2
 801e27c:	e736      	b.n	801e0ec <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801e27e:	ea5f 4820 	movs.w	r8, r0, asr #16
 801e282:	d457      	bmi.n	801e334 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801e284:	f8dc 7008 	ldr.w	r7, [ip, #8]
 801e288:	4547      	cmp	r7, r8
 801e28a:	dd53      	ble.n	801e334 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801e28c:	ea5f 4922 	movs.w	r9, r2, asr #16
 801e290:	d450      	bmi.n	801e334 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801e292:	f8dc 500c 	ldr.w	r5, [ip, #12]
 801e296:	454d      	cmp	r5, r9
 801e298:	dd4c      	ble.n	801e334 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801e29a:	9d01      	ldr	r5, [sp, #4]
 801e29c:	b23f      	sxth	r7, r7
 801e29e:	fb09 5707 	mla	r7, r9, r7, r5
 801e2a2:	f817 5008 	ldrb.w	r5, [r7, r8]
 801e2a6:	9f02      	ldr	r7, [sp, #8]
 801e2a8:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801e2ac:	0e2f      	lsrs	r7, r5, #24
 801e2ae:	2fff      	cmp	r7, #255	; 0xff
 801e2b0:	d045      	beq.n	801e33e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801e2b2:	fa5f f987 	uxtb.w	r9, r7
 801e2b6:	b3ef      	cbz	r7, 801e334 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801e2b8:	fa1f f889 	uxth.w	r8, r9
 801e2bc:	ea6f 0909 	mvn.w	r9, r9
 801e2c0:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801e2c4:	fa5f fb85 	uxtb.w	fp, r5
 801e2c8:	f814 a007 	ldrb.w	sl, [r4, r7]
 801e2cc:	fa5f f989 	uxtb.w	r9, r9
 801e2d0:	fb1b fb08 	smulbb	fp, fp, r8
 801e2d4:	fb0a ba09 	mla	sl, sl, r9, fp
 801e2d8:	fa1f fa8a 	uxth.w	sl, sl
 801e2dc:	f10a 0b01 	add.w	fp, sl, #1
 801e2e0:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801e2e4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e2e8:	f804 a007 	strb.w	sl, [r4, r7]
 801e2ec:	4427      	add	r7, r4
 801e2ee:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801e2f2:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801e2f6:	f897 b001 	ldrb.w	fp, [r7, #1]
 801e2fa:	fb1b fb09 	smulbb	fp, fp, r9
 801e2fe:	fb0a ba08 	mla	sl, sl, r8, fp
 801e302:	fa1f fa8a 	uxth.w	sl, sl
 801e306:	f10a 0b01 	add.w	fp, sl, #1
 801e30a:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801e30e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e312:	f887 a001 	strb.w	sl, [r7, #1]
 801e316:	f897 a002 	ldrb.w	sl, [r7, #2]
 801e31a:	fb1a f909 	smulbb	r9, sl, r9
 801e31e:	fb05 9508 	mla	r5, r5, r8, r9
 801e322:	b2ad      	uxth	r5, r5
 801e324:	f105 0901 	add.w	r9, r5, #1
 801e328:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801e32c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e330:	f887 9002 	strb.w	r9, [r7, #2]
 801e334:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801e336:	4470      	add	r0, lr
 801e338:	3601      	adds	r6, #1
 801e33a:	442a      	add	r2, r5
 801e33c:	e760      	b.n	801e200 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801e33e:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801e342:	ea4f 2815 	mov.w	r8, r5, lsr #8
 801e346:	55e5      	strb	r5, [r4, r7]
 801e348:	4427      	add	r7, r4
 801e34a:	0c2d      	lsrs	r5, r5, #16
 801e34c:	f887 8001 	strb.w	r8, [r7, #1]
 801e350:	70bd      	strb	r5, [r7, #2]
 801e352:	e7ef      	b.n	801e334 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801e354:	0a37      	lsrs	r7, r6, #8
 801e356:	f805 6c03 	strb.w	r6, [r5, #-3]
 801e35a:	0c36      	lsrs	r6, r6, #16
 801e35c:	f805 7c02 	strb.w	r7, [r5, #-2]
 801e360:	f805 6c01 	strb.w	r6, [r5, #-1]
 801e364:	e744      	b.n	801e1f0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801e366:	b005      	add	sp, #20
 801e368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e36c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e36c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e370:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801e372:	9201      	str	r2, [sp, #4]
 801e374:	6870      	ldr	r0, [r6, #4]
 801e376:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801e37a:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801e37e:	fa1f fe85 	uxth.w	lr, r5
 801e382:	43ed      	mvns	r5, r5
 801e384:	f8dc 8000 	ldr.w	r8, [ip]
 801e388:	b2ed      	uxtb	r5, r5
 801e38a:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801e38e:	fb00 2404 	mla	r4, r0, r4, r2
 801e392:	6832      	ldr	r2, [r6, #0]
 801e394:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e398:	4414      	add	r4, r2
 801e39a:	2900      	cmp	r1, #0
 801e39c:	dc03      	bgt.n	801e3a6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801e39e:	9a01      	ldr	r2, [sp, #4]
 801e3a0:	2a00      	cmp	r2, #0
 801e3a2:	f340 810d 	ble.w	801e5c0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801e3a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e3a8:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801e3ac:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e3b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e3b2:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801e3b6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e3ba:	2b00      	cmp	r3, #0
 801e3bc:	dd0e      	ble.n	801e3dc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e3be:	1406      	asrs	r6, r0, #16
 801e3c0:	d405      	bmi.n	801e3ce <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801e3c2:	4556      	cmp	r6, sl
 801e3c4:	da03      	bge.n	801e3ce <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801e3c6:	1416      	asrs	r6, r2, #16
 801e3c8:	d401      	bmi.n	801e3ce <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801e3ca:	454e      	cmp	r6, r9
 801e3cc:	db07      	blt.n	801e3de <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e3ce:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801e3d0:	3b01      	subs	r3, #1
 801e3d2:	3403      	adds	r4, #3
 801e3d4:	4430      	add	r0, r6
 801e3d6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801e3d8:	4432      	add	r2, r6
 801e3da:	e7ee      	b.n	801e3ba <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801e3dc:	d060      	beq.n	801e4a0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801e3de:	1e5e      	subs	r6, r3, #1
 801e3e0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801e3e2:	fb07 0706 	mla	r7, r7, r6, r0
 801e3e6:	143f      	asrs	r7, r7, #16
 801e3e8:	d451      	bmi.n	801e48e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801e3ea:	4557      	cmp	r7, sl
 801e3ec:	da4f      	bge.n	801e48e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801e3ee:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801e3f0:	fb07 2606 	mla	r6, r7, r6, r2
 801e3f4:	1436      	asrs	r6, r6, #16
 801e3f6:	d44a      	bmi.n	801e48e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801e3f8:	454e      	cmp	r6, r9
 801e3fa:	da48      	bge.n	801e48e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801e3fc:	1ce6      	adds	r6, r4, #3
 801e3fe:	4699      	mov	r9, r3
 801e400:	f1b9 0f00 	cmp.w	r9, #0
 801e404:	f106 0603 	add.w	r6, r6, #3
 801e408:	dd45      	ble.n	801e496 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 801e40a:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801e40e:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801e412:	1417      	asrs	r7, r2, #16
 801e414:	f109 39ff 	add.w	r9, r9, #4294967295
 801e418:	fb0b a707 	mla	r7, fp, r7, sl
 801e41c:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801e420:	fb1b fb05 	smulbb	fp, fp, r5
 801e424:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801e428:	eb08 0a07 	add.w	sl, r8, r7
 801e42c:	f818 7007 	ldrb.w	r7, [r8, r7]
 801e430:	fb07 b70e 	mla	r7, r7, lr, fp
 801e434:	b2bf      	uxth	r7, r7
 801e436:	f107 0b01 	add.w	fp, r7, #1
 801e43a:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801e43e:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801e442:	fb1b fb05 	smulbb	fp, fp, r5
 801e446:	123f      	asrs	r7, r7, #8
 801e448:	f806 7c06 	strb.w	r7, [r6, #-6]
 801e44c:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801e450:	fb07 b70e 	mla	r7, r7, lr, fp
 801e454:	b2bf      	uxth	r7, r7
 801e456:	f107 0b01 	add.w	fp, r7, #1
 801e45a:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801e45e:	123f      	asrs	r7, r7, #8
 801e460:	f806 7c05 	strb.w	r7, [r6, #-5]
 801e464:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801e468:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801e46c:	fb1a fa05 	smulbb	sl, sl, r5
 801e470:	fb07 a70e 	mla	r7, r7, lr, sl
 801e474:	b2bf      	uxth	r7, r7
 801e476:	f107 0a01 	add.w	sl, r7, #1
 801e47a:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801e47e:	123f      	asrs	r7, r7, #8
 801e480:	f806 7c04 	strb.w	r7, [r6, #-4]
 801e484:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801e486:	4438      	add	r0, r7
 801e488:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801e48a:	443a      	add	r2, r7
 801e48c:	e7b8      	b.n	801e400 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801e48e:	2700      	movs	r7, #0
 801e490:	1bde      	subs	r6, r3, r7
 801e492:	2e00      	cmp	r6, #0
 801e494:	dc3f      	bgt.n	801e516 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801e496:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e49a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e49e:	441c      	add	r4, r3
 801e4a0:	2900      	cmp	r1, #0
 801e4a2:	f340 808d 	ble.w	801e5c0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801e4a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e4aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e4ac:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e4b0:	3901      	subs	r1, #1
 801e4b2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e4b6:	eef0 6a62 	vmov.f32	s13, s5
 801e4ba:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e4be:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e4c2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e4c6:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801e4ca:	eef0 6a43 	vmov.f32	s13, s6
 801e4ce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e4d2:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801e4d6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e4da:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e4de:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e4e2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e4e6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e4ea:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e4ee:	ee12 2a90 	vmov	r2, s5
 801e4f2:	eef0 2a47 	vmov.f32	s5, s14
 801e4f6:	fb92 f3f3 	sdiv	r3, r2, r3
 801e4fa:	ee13 2a10 	vmov	r2, s6
 801e4fe:	930f      	str	r3, [sp, #60]	; 0x3c
 801e500:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e502:	eeb0 3a67 	vmov.f32	s6, s15
 801e506:	fb92 f3f3 	sdiv	r3, r2, r3
 801e50a:	9a01      	ldr	r2, [sp, #4]
 801e50c:	9310      	str	r3, [sp, #64]	; 0x40
 801e50e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e510:	bf08      	it	eq
 801e512:	4613      	moveq	r3, r2
 801e514:	e741      	b.n	801e39a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801e516:	ea5f 4920 	movs.w	r9, r0, asr #16
 801e51a:	d44b      	bmi.n	801e5b4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801e51c:	f8dc b008 	ldr.w	fp, [ip, #8]
 801e520:	45cb      	cmp	fp, r9
 801e522:	dd47      	ble.n	801e5b4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801e524:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801e528:	d444      	bmi.n	801e5b4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801e52a:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801e52e:	4556      	cmp	r6, sl
 801e530:	dd40      	ble.n	801e5b4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801e532:	fa0f f68b 	sxth.w	r6, fp
 801e536:	fb0a 9906 	mla	r9, sl, r6, r9
 801e53a:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801e53e:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801e542:	f814 b006 	ldrb.w	fp, [r4, r6]
 801e546:	fb1b fb05 	smulbb	fp, fp, r5
 801e54a:	eb08 0a09 	add.w	sl, r8, r9
 801e54e:	f818 9009 	ldrb.w	r9, [r8, r9]
 801e552:	fb09 b90e 	mla	r9, r9, lr, fp
 801e556:	fa1f f989 	uxth.w	r9, r9
 801e55a:	f109 0b01 	add.w	fp, r9, #1
 801e55e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e562:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e566:	f804 9006 	strb.w	r9, [r4, r6]
 801e56a:	4426      	add	r6, r4
 801e56c:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801e570:	f896 b001 	ldrb.w	fp, [r6, #1]
 801e574:	fb1b fb05 	smulbb	fp, fp, r5
 801e578:	fb09 b90e 	mla	r9, r9, lr, fp
 801e57c:	fa1f f989 	uxth.w	r9, r9
 801e580:	f109 0b01 	add.w	fp, r9, #1
 801e584:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e588:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e58c:	f886 9001 	strb.w	r9, [r6, #1]
 801e590:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801e594:	f896 a002 	ldrb.w	sl, [r6, #2]
 801e598:	fb1a fa05 	smulbb	sl, sl, r5
 801e59c:	fb09 a90e 	mla	r9, r9, lr, sl
 801e5a0:	fa1f f989 	uxth.w	r9, r9
 801e5a4:	f109 0a01 	add.w	sl, r9, #1
 801e5a8:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801e5ac:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e5b0:	f886 9002 	strb.w	r9, [r6, #2]
 801e5b4:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801e5b6:	3701      	adds	r7, #1
 801e5b8:	4430      	add	r0, r6
 801e5ba:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801e5bc:	4432      	add	r2, r6
 801e5be:	e767      	b.n	801e490 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801e5c0:	b003      	add	sp, #12
 801e5c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e5c6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e5c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5ca:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801e5cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e5d0:	9201      	str	r2, [sp, #4]
 801e5d2:	6868      	ldr	r0, [r5, #4]
 801e5d4:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801e5d6:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801e5da:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 801e5de:	fb00 2404 	mla	r4, r0, r4, r2
 801e5e2:	682a      	ldr	r2, [r5, #0]
 801e5e4:	f8d7 8000 	ldr.w	r8, [r7]
 801e5e8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e5ec:	4414      	add	r4, r2
 801e5ee:	2900      	cmp	r1, #0
 801e5f0:	dc03      	bgt.n	801e5fa <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801e5f2:	9a01      	ldr	r2, [sp, #4]
 801e5f4:	2a00      	cmp	r2, #0
 801e5f6:	f340 80af 	ble.w	801e758 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801e5fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e5fc:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 801e600:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e604:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e606:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 801e60a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e60e:	2b00      	cmp	r3, #0
 801e610:	dd0c      	ble.n	801e62c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e612:	1405      	asrs	r5, r0, #16
 801e614:	d405      	bmi.n	801e622 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801e616:	4555      	cmp	r5, sl
 801e618:	da03      	bge.n	801e622 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801e61a:	1415      	asrs	r5, r2, #16
 801e61c:	d401      	bmi.n	801e622 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801e61e:	454d      	cmp	r5, r9
 801e620:	db05      	blt.n	801e62e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801e622:	4470      	add	r0, lr
 801e624:	4462      	add	r2, ip
 801e626:	3b01      	subs	r3, #1
 801e628:	3403      	adds	r4, #3
 801e62a:	e7f0      	b.n	801e60e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801e62c:	d038      	beq.n	801e6a0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801e62e:	1e5d      	subs	r5, r3, #1
 801e630:	fb0e 0605 	mla	r6, lr, r5, r0
 801e634:	1436      	asrs	r6, r6, #16
 801e636:	d42a      	bmi.n	801e68e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801e638:	4556      	cmp	r6, sl
 801e63a:	da28      	bge.n	801e68e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801e63c:	fb0c 2505 	mla	r5, ip, r5, r2
 801e640:	142d      	asrs	r5, r5, #16
 801e642:	d424      	bmi.n	801e68e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801e644:	454d      	cmp	r5, r9
 801e646:	da22      	bge.n	801e68e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801e648:	1ce6      	adds	r6, r4, #3
 801e64a:	4699      	mov	r9, r3
 801e64c:	f1b9 0f00 	cmp.w	r9, #0
 801e650:	f106 0603 	add.w	r6, r6, #3
 801e654:	dd1f      	ble.n	801e696 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 801e656:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 801e65a:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801e65e:	1415      	asrs	r5, r2, #16
 801e660:	4470      	add	r0, lr
 801e662:	4462      	add	r2, ip
 801e664:	f109 39ff 	add.w	r9, r9, #4294967295
 801e668:	fb0b a505 	mla	r5, fp, r5, sl
 801e66c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e670:	eb08 0a05 	add.w	sl, r8, r5
 801e674:	f818 5005 	ldrb.w	r5, [r8, r5]
 801e678:	f806 5c06 	strb.w	r5, [r6, #-6]
 801e67c:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801e680:	f806 5c05 	strb.w	r5, [r6, #-5]
 801e684:	f89a 5002 	ldrb.w	r5, [sl, #2]
 801e688:	f806 5c04 	strb.w	r5, [r6, #-4]
 801e68c:	e7de      	b.n	801e64c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801e68e:	2600      	movs	r6, #0
 801e690:	1b9d      	subs	r5, r3, r6
 801e692:	2d00      	cmp	r5, #0
 801e694:	dc38      	bgt.n	801e708 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801e696:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e69a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e69e:	441c      	add	r4, r3
 801e6a0:	2900      	cmp	r1, #0
 801e6a2:	dd59      	ble.n	801e758 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801e6a4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e6a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e6aa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e6ae:	3901      	subs	r1, #1
 801e6b0:	eeb0 6a62 	vmov.f32	s12, s5
 801e6b4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e6b8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e6bc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e6c0:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801e6c4:	eeb0 6a43 	vmov.f32	s12, s6
 801e6c8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e6cc:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801e6d0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e6d4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e6d8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e6dc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e6e0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e6e4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e6e8:	ee12 2a90 	vmov	r2, s5
 801e6ec:	eef0 2a47 	vmov.f32	s5, s14
 801e6f0:	fb92 fef3 	sdiv	lr, r2, r3
 801e6f4:	ee13 2a10 	vmov	r2, s6
 801e6f8:	eeb0 3a67 	vmov.f32	s6, s15
 801e6fc:	fb92 fcf3 	sdiv	ip, r2, r3
 801e700:	9a01      	ldr	r2, [sp, #4]
 801e702:	bf08      	it	eq
 801e704:	4613      	moveq	r3, r2
 801e706:	e772      	b.n	801e5ee <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801e708:	ea5f 4920 	movs.w	r9, r0, asr #16
 801e70c:	d420      	bmi.n	801e750 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801e70e:	f8d7 b008 	ldr.w	fp, [r7, #8]
 801e712:	45cb      	cmp	fp, r9
 801e714:	dd1c      	ble.n	801e750 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801e716:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801e71a:	d419      	bmi.n	801e750 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801e71c:	68fd      	ldr	r5, [r7, #12]
 801e71e:	4555      	cmp	r5, sl
 801e720:	dd16      	ble.n	801e750 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801e722:	fa0f f58b 	sxth.w	r5, fp
 801e726:	fb0a 9505 	mla	r5, sl, r5, r9
 801e72a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e72e:	f818 9005 	ldrb.w	r9, [r8, r5]
 801e732:	eb08 0b05 	add.w	fp, r8, r5
 801e736:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801e73a:	f804 9005 	strb.w	r9, [r4, r5]
 801e73e:	4425      	add	r5, r4
 801e740:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801e744:	f885 9001 	strb.w	r9, [r5, #1]
 801e748:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801e74c:	f885 9002 	strb.w	r9, [r5, #2]
 801e750:	4470      	add	r0, lr
 801e752:	4462      	add	r2, ip
 801e754:	3601      	adds	r6, #1
 801e756:	e79b      	b.n	801e690 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 801e758:	b003      	add	sp, #12
 801e75a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e75e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e75e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e762:	b085      	sub	sp, #20
 801e764:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e768:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e76a:	9202      	str	r2, [sp, #8]
 801e76c:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801e770:	6860      	ldr	r0, [r4, #4]
 801e772:	9203      	str	r2, [sp, #12]
 801e774:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801e778:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801e77c:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801e780:	fb00 2505 	mla	r5, r0, r5, r2
 801e784:	6822      	ldr	r2, [r4, #0]
 801e786:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e78a:	4415      	add	r5, r2
 801e78c:	f8dc 2000 	ldr.w	r2, [ip]
 801e790:	9201      	str	r2, [sp, #4]
 801e792:	2900      	cmp	r1, #0
 801e794:	dc03      	bgt.n	801e79e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801e796:	9a02      	ldr	r2, [sp, #8]
 801e798:	2a00      	cmp	r2, #0
 801e79a:	f340 8122 	ble.w	801e9e2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801e79e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e7a0:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801e7a4:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801e7a8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e7aa:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801e7ae:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e7b2:	2b00      	cmp	r3, #0
 801e7b4:	dd0d      	ble.n	801e7d2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801e7b6:	1422      	asrs	r2, r4, #16
 801e7b8:	d405      	bmi.n	801e7c6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801e7ba:	4542      	cmp	r2, r8
 801e7bc:	da03      	bge.n	801e7c6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801e7be:	1402      	asrs	r2, r0, #16
 801e7c0:	d401      	bmi.n	801e7c6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801e7c2:	42ba      	cmp	r2, r7
 801e7c4:	db06      	blt.n	801e7d4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e7c6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e7c8:	4474      	add	r4, lr
 801e7ca:	3b01      	subs	r3, #1
 801e7cc:	3503      	adds	r5, #3
 801e7ce:	4410      	add	r0, r2
 801e7d0:	e7ef      	b.n	801e7b2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801e7d2:	d072      	beq.n	801e8ba <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801e7d4:	1e5a      	subs	r2, r3, #1
 801e7d6:	fb0e 4602 	mla	r6, lr, r2, r4
 801e7da:	1436      	asrs	r6, r6, #16
 801e7dc:	d462      	bmi.n	801e8a4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801e7de:	4546      	cmp	r6, r8
 801e7e0:	da60      	bge.n	801e8a4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801e7e2:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801e7e4:	fb06 0202 	mla	r2, r6, r2, r0
 801e7e8:	1412      	asrs	r2, r2, #16
 801e7ea:	d45b      	bmi.n	801e8a4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801e7ec:	42ba      	cmp	r2, r7
 801e7ee:	da59      	bge.n	801e8a4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801e7f0:	1cef      	adds	r7, r5, #3
 801e7f2:	4699      	mov	r9, r3
 801e7f4:	f1b9 0f00 	cmp.w	r9, #0
 801e7f8:	dd5a      	ble.n	801e8b0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801e7fa:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801e7fe:	1426      	asrs	r6, r4, #16
 801e800:	1402      	asrs	r2, r0, #16
 801e802:	fb08 6202 	mla	r2, r8, r2, r6
 801e806:	9e01      	ldr	r6, [sp, #4]
 801e808:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801e80c:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801e810:	d041      	beq.n	801e896 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801e812:	9a03      	ldr	r2, [sp, #12]
 801e814:	fa5f fb86 	uxtb.w	fp, r6
 801e818:	fb02 f808 	mul.w	r8, r2, r8
 801e81c:	f108 0201 	add.w	r2, r8, #1
 801e820:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801e824:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801e828:	1212      	asrs	r2, r2, #8
 801e82a:	fa1f fa82 	uxth.w	sl, r2
 801e82e:	43d2      	mvns	r2, r2
 801e830:	fb1b fb0a 	smulbb	fp, fp, sl
 801e834:	b2d2      	uxtb	r2, r2
 801e836:	fb08 b802 	mla	r8, r8, r2, fp
 801e83a:	fa1f f888 	uxth.w	r8, r8
 801e83e:	f108 0b01 	add.w	fp, r8, #1
 801e842:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801e846:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801e84a:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801e84e:	fb1b fb0a 	smulbb	fp, fp, sl
 801e852:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e856:	fb16 fa0a 	smulbb	sl, r6, sl
 801e85a:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801e85e:	f807 8c03 	strb.w	r8, [r7, #-3]
 801e862:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801e866:	fb06 aa02 	mla	sl, r6, r2, sl
 801e86a:	fb08 b802 	mla	r8, r8, r2, fp
 801e86e:	fa1f fa8a 	uxth.w	sl, sl
 801e872:	fa1f f888 	uxth.w	r8, r8
 801e876:	f10a 0601 	add.w	r6, sl, #1
 801e87a:	f108 0b01 	add.w	fp, r8, #1
 801e87e:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801e882:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801e886:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e88a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e88e:	f807 ac01 	strb.w	sl, [r7, #-1]
 801e892:	f807 8c02 	strb.w	r8, [r7, #-2]
 801e896:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e898:	4474      	add	r4, lr
 801e89a:	3703      	adds	r7, #3
 801e89c:	f109 39ff 	add.w	r9, r9, #4294967295
 801e8a0:	4410      	add	r0, r2
 801e8a2:	e7a7      	b.n	801e7f4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e8a4:	f04f 0800 	mov.w	r8, #0
 801e8a8:	eba3 0208 	sub.w	r2, r3, r8
 801e8ac:	2a00      	cmp	r2, #0
 801e8ae:	dc3b      	bgt.n	801e928 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801e8b0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e8b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e8b8:	441d      	add	r5, r3
 801e8ba:	2900      	cmp	r1, #0
 801e8bc:	f340 8091 	ble.w	801e9e2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801e8c0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e8c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e8c6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e8ca:	3901      	subs	r1, #1
 801e8cc:	eeb0 6a62 	vmov.f32	s12, s5
 801e8d0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e8d4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e8d8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e8dc:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801e8e0:	eeb0 6a43 	vmov.f32	s12, s6
 801e8e4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e8e8:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801e8ec:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e8f0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e8f4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e8f8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e8fc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e900:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e904:	ee12 2a90 	vmov	r2, s5
 801e908:	eef0 2a47 	vmov.f32	s5, s14
 801e90c:	fb92 fef3 	sdiv	lr, r2, r3
 801e910:	ee13 2a10 	vmov	r2, s6
 801e914:	eeb0 3a67 	vmov.f32	s6, s15
 801e918:	fb92 f3f3 	sdiv	r3, r2, r3
 801e91c:	9a02      	ldr	r2, [sp, #8]
 801e91e:	9312      	str	r3, [sp, #72]	; 0x48
 801e920:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e922:	bf08      	it	eq
 801e924:	4613      	moveq	r3, r2
 801e926:	e734      	b.n	801e792 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801e928:	1427      	asrs	r7, r4, #16
 801e92a:	d454      	bmi.n	801e9d6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801e92c:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801e930:	42be      	cmp	r6, r7
 801e932:	dd50      	ble.n	801e9d6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801e934:	ea5f 4920 	movs.w	r9, r0, asr #16
 801e938:	d44d      	bmi.n	801e9d6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801e93a:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801e93e:	454a      	cmp	r2, r9
 801e940:	dd49      	ble.n	801e9d6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801e942:	b236      	sxth	r6, r6
 801e944:	9a01      	ldr	r2, [sp, #4]
 801e946:	fb09 7606 	mla	r6, r9, r6, r7
 801e94a:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801e94e:	0e3a      	lsrs	r2, r7, #24
 801e950:	d041      	beq.n	801e9d6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801e952:	9e03      	ldr	r6, [sp, #12]
 801e954:	fa5f fb87 	uxtb.w	fp, r7
 801e958:	4372      	muls	r2, r6
 801e95a:	1c56      	adds	r6, r2, #1
 801e95c:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801e960:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801e964:	1212      	asrs	r2, r2, #8
 801e966:	f815 9006 	ldrb.w	r9, [r5, r6]
 801e96a:	fa1f fa82 	uxth.w	sl, r2
 801e96e:	43d2      	mvns	r2, r2
 801e970:	fb1b fb0a 	smulbb	fp, fp, sl
 801e974:	b2d2      	uxtb	r2, r2
 801e976:	fb09 b902 	mla	r9, r9, r2, fp
 801e97a:	fa1f f989 	uxth.w	r9, r9
 801e97e:	f109 0b01 	add.w	fp, r9, #1
 801e982:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e986:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801e98a:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801e98e:	fb1b fb0a 	smulbb	fp, fp, sl
 801e992:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e996:	fb17 fa0a 	smulbb	sl, r7, sl
 801e99a:	f805 9006 	strb.w	r9, [r5, r6]
 801e99e:	442e      	add	r6, r5
 801e9a0:	78b7      	ldrb	r7, [r6, #2]
 801e9a2:	f896 9001 	ldrb.w	r9, [r6, #1]
 801e9a6:	fb07 aa02 	mla	sl, r7, r2, sl
 801e9aa:	fb09 b902 	mla	r9, r9, r2, fp
 801e9ae:	fa1f fa8a 	uxth.w	sl, sl
 801e9b2:	fa1f f989 	uxth.w	r9, r9
 801e9b6:	f10a 0701 	add.w	r7, sl, #1
 801e9ba:	f109 0b01 	add.w	fp, r9, #1
 801e9be:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e9c2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e9c6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e9ca:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e9ce:	f886 a002 	strb.w	sl, [r6, #2]
 801e9d2:	f886 9001 	strb.w	r9, [r6, #1]
 801e9d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e9d8:	4474      	add	r4, lr
 801e9da:	f108 0801 	add.w	r8, r8, #1
 801e9de:	4410      	add	r0, r2
 801e9e0:	e762      	b.n	801e8a8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801e9e2:	b005      	add	sp, #20
 801e9e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e9e8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e9e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e9ec:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e9ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e9f2:	9201      	str	r2, [sp, #4]
 801e9f4:	6860      	ldr	r0, [r4, #4]
 801e9f6:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801e9fa:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 801e9fe:	fb00 2505 	mla	r5, r0, r5, r2
 801ea02:	6822      	ldr	r2, [r4, #0]
 801ea04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ea08:	4415      	add	r5, r2
 801ea0a:	f8dc 2000 	ldr.w	r2, [ip]
 801ea0e:	9200      	str	r2, [sp, #0]
 801ea10:	2900      	cmp	r1, #0
 801ea12:	dc03      	bgt.n	801ea1c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801ea14:	9a01      	ldr	r2, [sp, #4]
 801ea16:	2a00      	cmp	r2, #0
 801ea18:	f340 812b 	ble.w	801ec72 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801ea1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ea1e:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801ea22:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801ea26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ea28:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801ea2c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ea30:	2b00      	cmp	r3, #0
 801ea32:	dd0e      	ble.n	801ea52 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ea34:	1422      	asrs	r2, r4, #16
 801ea36:	d405      	bmi.n	801ea44 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801ea38:	4572      	cmp	r2, lr
 801ea3a:	da03      	bge.n	801ea44 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801ea3c:	1402      	asrs	r2, r0, #16
 801ea3e:	d401      	bmi.n	801ea44 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801ea40:	42ba      	cmp	r2, r7
 801ea42:	db07      	blt.n	801ea54 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801ea44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ea46:	3b01      	subs	r3, #1
 801ea48:	3503      	adds	r5, #3
 801ea4a:	4414      	add	r4, r2
 801ea4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ea4e:	4410      	add	r0, r2
 801ea50:	e7ee      	b.n	801ea30 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801ea52:	d06f      	beq.n	801eb34 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801ea54:	1e5a      	subs	r2, r3, #1
 801ea56:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801ea58:	fb06 4602 	mla	r6, r6, r2, r4
 801ea5c:	1436      	asrs	r6, r6, #16
 801ea5e:	d45e      	bmi.n	801eb1e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801ea60:	4576      	cmp	r6, lr
 801ea62:	da5c      	bge.n	801eb1e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801ea64:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801ea66:	fb06 0202 	mla	r2, r6, r2, r0
 801ea6a:	1412      	asrs	r2, r2, #16
 801ea6c:	d457      	bmi.n	801eb1e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801ea6e:	42ba      	cmp	r2, r7
 801ea70:	da55      	bge.n	801eb1e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801ea72:	1cee      	adds	r6, r5, #3
 801ea74:	469a      	mov	sl, r3
 801ea76:	f1ba 0f00 	cmp.w	sl, #0
 801ea7a:	dd56      	ble.n	801eb2a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801ea7c:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801ea80:	1427      	asrs	r7, r4, #16
 801ea82:	1402      	asrs	r2, r0, #16
 801ea84:	fb0e 7202 	mla	r2, lr, r2, r7
 801ea88:	9f00      	ldr	r7, [sp, #0]
 801ea8a:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801ea8e:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 801ea92:	d03c      	beq.n	801eb0e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801ea94:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801ea98:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801ea9c:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801eaa0:	fa5f f28e 	uxtb.w	r2, lr
 801eaa4:	b2ff      	uxtb	r7, r7
 801eaa6:	f000 80dd 	beq.w	801ec64 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801eaaa:	fa1f f882 	uxth.w	r8, r2
 801eaae:	43d2      	mvns	r2, r2
 801eab0:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 801eab4:	fb17 f708 	smulbb	r7, r7, r8
 801eab8:	b2d2      	uxtb	r2, r2
 801eaba:	fb19 f908 	smulbb	r9, r9, r8
 801eabe:	fb0e 7702 	mla	r7, lr, r2, r7
 801eac2:	fb1b f808 	smulbb	r8, fp, r8
 801eac6:	b2bf      	uxth	r7, r7
 801eac8:	f107 0e01 	add.w	lr, r7, #1
 801eacc:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801ead0:	123f      	asrs	r7, r7, #8
 801ead2:	f806 7c03 	strb.w	r7, [r6, #-3]
 801ead6:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801eada:	fb07 9902 	mla	r9, r7, r2, r9
 801eade:	fa1f f989 	uxth.w	r9, r9
 801eae2:	f109 0701 	add.w	r7, r9, #1
 801eae6:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801eaea:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801eaee:	fb07 8802 	mla	r8, r7, r2, r8
 801eaf2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801eaf6:	fa1f f888 	uxth.w	r8, r8
 801eafa:	f806 9c02 	strb.w	r9, [r6, #-2]
 801eafe:	f108 0201 	add.w	r2, r8, #1
 801eb02:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801eb06:	ea4f 2828 	mov.w	r8, r8, asr #8
 801eb0a:	f806 8c01 	strb.w	r8, [r6, #-1]
 801eb0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801eb10:	3603      	adds	r6, #3
 801eb12:	f10a 3aff 	add.w	sl, sl, #4294967295
 801eb16:	4414      	add	r4, r2
 801eb18:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801eb1a:	4410      	add	r0, r2
 801eb1c:	e7ab      	b.n	801ea76 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801eb1e:	f04f 0e00 	mov.w	lr, #0
 801eb22:	eba3 020e 	sub.w	r2, r3, lr
 801eb26:	2a00      	cmp	r2, #0
 801eb28:	dc3d      	bgt.n	801eba6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801eb2a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801eb2e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801eb32:	441d      	add	r5, r3
 801eb34:	2900      	cmp	r1, #0
 801eb36:	f340 809c 	ble.w	801ec72 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801eb3a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801eb3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801eb40:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801eb44:	3901      	subs	r1, #1
 801eb46:	eeb0 6a62 	vmov.f32	s12, s5
 801eb4a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801eb4e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801eb52:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eb56:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801eb5a:	eeb0 6a43 	vmov.f32	s12, s6
 801eb5e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eb62:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801eb66:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801eb6a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801eb6e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801eb72:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801eb76:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801eb7a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801eb7e:	ee12 2a90 	vmov	r2, s5
 801eb82:	eef0 2a47 	vmov.f32	s5, s14
 801eb86:	fb92 f3f3 	sdiv	r3, r2, r3
 801eb8a:	ee13 2a10 	vmov	r2, s6
 801eb8e:	930f      	str	r3, [sp, #60]	; 0x3c
 801eb90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801eb92:	eeb0 3a67 	vmov.f32	s6, s15
 801eb96:	fb92 f3f3 	sdiv	r3, r2, r3
 801eb9a:	9a01      	ldr	r2, [sp, #4]
 801eb9c:	9310      	str	r3, [sp, #64]	; 0x40
 801eb9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801eba0:	bf08      	it	eq
 801eba2:	4613      	moveq	r3, r2
 801eba4:	e734      	b.n	801ea10 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801eba6:	1427      	asrs	r7, r4, #16
 801eba8:	d44d      	bmi.n	801ec46 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801ebaa:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801ebae:	42be      	cmp	r6, r7
 801ebb0:	dd49      	ble.n	801ec46 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801ebb2:	ea5f 4820 	movs.w	r8, r0, asr #16
 801ebb6:	d446      	bmi.n	801ec46 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801ebb8:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801ebbc:	4542      	cmp	r2, r8
 801ebbe:	dd42      	ble.n	801ec46 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801ebc0:	b236      	sxth	r6, r6
 801ebc2:	9a00      	ldr	r2, [sp, #0]
 801ebc4:	fb08 7606 	mla	r6, r8, r6, r7
 801ebc8:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801ebcc:	0e3a      	lsrs	r2, r7, #24
 801ebce:	d03a      	beq.n	801ec46 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801ebd0:	2aff      	cmp	r2, #255	; 0xff
 801ebd2:	b2d6      	uxtb	r6, r2
 801ebd4:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801ebd8:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801ebdc:	ea4f 024e 	mov.w	r2, lr, lsl #1
 801ebe0:	b2ff      	uxtb	r7, r7
 801ebe2:	d037      	beq.n	801ec54 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801ebe4:	fa1f f986 	uxth.w	r9, r6
 801ebe8:	4472      	add	r2, lr
 801ebea:	43f6      	mvns	r6, r6
 801ebec:	f815 8002 	ldrb.w	r8, [r5, r2]
 801ebf0:	fb17 f709 	smulbb	r7, r7, r9
 801ebf4:	fb1a fa09 	smulbb	sl, sl, r9
 801ebf8:	b2f6      	uxtb	r6, r6
 801ebfa:	fb1b f909 	smulbb	r9, fp, r9
 801ebfe:	fb08 7706 	mla	r7, r8, r6, r7
 801ec02:	b2bf      	uxth	r7, r7
 801ec04:	f107 0801 	add.w	r8, r7, #1
 801ec08:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801ec0c:	123f      	asrs	r7, r7, #8
 801ec0e:	54af      	strb	r7, [r5, r2]
 801ec10:	442a      	add	r2, r5
 801ec12:	7857      	ldrb	r7, [r2, #1]
 801ec14:	fb07 aa06 	mla	sl, r7, r6, sl
 801ec18:	fa1f fa8a 	uxth.w	sl, sl
 801ec1c:	f10a 0701 	add.w	r7, sl, #1
 801ec20:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ec24:	7897      	ldrb	r7, [r2, #2]
 801ec26:	fb07 9906 	mla	r9, r7, r6, r9
 801ec2a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ec2e:	fa1f f989 	uxth.w	r9, r9
 801ec32:	f882 a001 	strb.w	sl, [r2, #1]
 801ec36:	f109 0601 	add.w	r6, r9, #1
 801ec3a:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801ec3e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ec42:	f882 9002 	strb.w	r9, [r2, #2]
 801ec46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ec48:	f10e 0e01 	add.w	lr, lr, #1
 801ec4c:	4414      	add	r4, r2
 801ec4e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ec50:	4410      	add	r0, r2
 801ec52:	e766      	b.n	801eb22 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801ec54:	4472      	add	r2, lr
 801ec56:	54af      	strb	r7, [r5, r2]
 801ec58:	442a      	add	r2, r5
 801ec5a:	f882 a001 	strb.w	sl, [r2, #1]
 801ec5e:	f882 b002 	strb.w	fp, [r2, #2]
 801ec62:	e7f0      	b.n	801ec46 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801ec64:	f806 7c03 	strb.w	r7, [r6, #-3]
 801ec68:	f806 9c02 	strb.w	r9, [r6, #-2]
 801ec6c:	f806 bc01 	strb.w	fp, [r6, #-1]
 801ec70:	e74d      	b.n	801eb0e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801ec72:	b003      	add	sp, #12
 801ec74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ec78 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ec78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec7c:	b087      	sub	sp, #28
 801ec7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ec82:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ec84:	9204      	str	r2, [sp, #16]
 801ec86:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801ec8a:	6860      	ldr	r0, [r4, #4]
 801ec8c:	9205      	str	r2, [sp, #20]
 801ec8e:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801ec92:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 801ec96:	9101      	str	r1, [sp, #4]
 801ec98:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801ec9c:	fb00 2505 	mla	r5, r0, r5, r2
 801eca0:	6822      	ldr	r2, [r4, #0]
 801eca2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801eca6:	4415      	add	r5, r2
 801eca8:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801ecac:	3201      	adds	r2, #1
 801ecae:	f022 0201 	bic.w	r2, r2, #1
 801ecb2:	9202      	str	r2, [sp, #8]
 801ecb4:	f8dc 2000 	ldr.w	r2, [ip]
 801ecb8:	9203      	str	r2, [sp, #12]
 801ecba:	9a01      	ldr	r2, [sp, #4]
 801ecbc:	2a00      	cmp	r2, #0
 801ecbe:	dc03      	bgt.n	801ecc8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801ecc0:	9a04      	ldr	r2, [sp, #16]
 801ecc2:	2a00      	cmp	r2, #0
 801ecc4:	f340 8135 	ble.w	801ef32 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801ecc8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ecca:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801ecce:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801ecd2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ecd4:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801ecd8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ecdc:	2b00      	cmp	r3, #0
 801ecde:	dd0d      	ble.n	801ecfc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801ece0:	1422      	asrs	r2, r4, #16
 801ece2:	d405      	bmi.n	801ecf0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801ece4:	4542      	cmp	r2, r8
 801ece6:	da03      	bge.n	801ecf0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801ece8:	1402      	asrs	r2, r0, #16
 801ecea:	d401      	bmi.n	801ecf0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801ecec:	42ba      	cmp	r2, r7
 801ecee:	db06      	blt.n	801ecfe <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801ecf0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ecf2:	4474      	add	r4, lr
 801ecf4:	3b01      	subs	r3, #1
 801ecf6:	3503      	adds	r5, #3
 801ecf8:	4410      	add	r0, r2
 801ecfa:	e7ef      	b.n	801ecdc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801ecfc:	d077      	beq.n	801edee <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801ecfe:	1e5a      	subs	r2, r3, #1
 801ed00:	fb0e 4602 	mla	r6, lr, r2, r4
 801ed04:	1436      	asrs	r6, r6, #16
 801ed06:	d469      	bmi.n	801eddc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ed08:	4546      	cmp	r6, r8
 801ed0a:	da67      	bge.n	801eddc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ed0c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801ed0e:	fb06 0202 	mla	r2, r6, r2, r0
 801ed12:	1412      	asrs	r2, r2, #16
 801ed14:	d462      	bmi.n	801eddc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ed16:	42ba      	cmp	r2, r7
 801ed18:	da60      	bge.n	801eddc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ed1a:	1cee      	adds	r6, r5, #3
 801ed1c:	4699      	mov	r9, r3
 801ed1e:	f1b9 0f00 	cmp.w	r9, #0
 801ed22:	dd5f      	ble.n	801ede4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801ed24:	1422      	asrs	r2, r4, #16
 801ed26:	9902      	ldr	r1, [sp, #8]
 801ed28:	1407      	asrs	r7, r0, #16
 801ed2a:	fb01 2707 	mla	r7, r1, r7, r2
 801ed2e:	9903      	ldr	r1, [sp, #12]
 801ed30:	087a      	lsrs	r2, r7, #1
 801ed32:	5c8a      	ldrb	r2, [r1, r2]
 801ed34:	07f9      	lsls	r1, r7, #31
 801ed36:	bf54      	ite	pl
 801ed38:	f002 020f 	andpl.w	r2, r2, #15
 801ed3c:	1112      	asrmi	r2, r2, #4
 801ed3e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ed42:	b2d2      	uxtb	r2, r2
 801ed44:	2a00      	cmp	r2, #0
 801ed46:	d042      	beq.n	801edce <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801ed48:	497b      	ldr	r1, [pc, #492]	; (801ef38 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801ed4a:	680f      	ldr	r7, [r1, #0]
 801ed4c:	9905      	ldr	r1, [sp, #20]
 801ed4e:	fa5f fb87 	uxtb.w	fp, r7
 801ed52:	434a      	muls	r2, r1
 801ed54:	f102 0801 	add.w	r8, r2, #1
 801ed58:	eb08 2222 	add.w	r2, r8, r2, asr #8
 801ed5c:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 801ed60:	1212      	asrs	r2, r2, #8
 801ed62:	fa1f fa82 	uxth.w	sl, r2
 801ed66:	43d2      	mvns	r2, r2
 801ed68:	fb1b fb0a 	smulbb	fp, fp, sl
 801ed6c:	b2d2      	uxtb	r2, r2
 801ed6e:	fb08 b802 	mla	r8, r8, r2, fp
 801ed72:	fa1f f888 	uxth.w	r8, r8
 801ed76:	f108 0b01 	add.w	fp, r8, #1
 801ed7a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801ed7e:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801ed82:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801ed86:	fb1b fb0a 	smulbb	fp, fp, sl
 801ed8a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ed8e:	fb17 fa0a 	smulbb	sl, r7, sl
 801ed92:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801ed96:	f806 8c03 	strb.w	r8, [r6, #-3]
 801ed9a:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 801ed9e:	fb07 aa02 	mla	sl, r7, r2, sl
 801eda2:	fb08 b802 	mla	r8, r8, r2, fp
 801eda6:	fa1f fa8a 	uxth.w	sl, sl
 801edaa:	fa1f f888 	uxth.w	r8, r8
 801edae:	f10a 0701 	add.w	r7, sl, #1
 801edb2:	f108 0b01 	add.w	fp, r8, #1
 801edb6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801edba:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801edbe:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801edc2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801edc6:	f806 ac01 	strb.w	sl, [r6, #-1]
 801edca:	f806 8c02 	strb.w	r8, [r6, #-2]
 801edce:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801edd0:	4474      	add	r4, lr
 801edd2:	3603      	adds	r6, #3
 801edd4:	f109 39ff 	add.w	r9, r9, #4294967295
 801edd8:	4410      	add	r0, r2
 801edda:	e7a0      	b.n	801ed1e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801eddc:	2700      	movs	r7, #0
 801edde:	1bda      	subs	r2, r3, r7
 801ede0:	2a00      	cmp	r2, #0
 801ede2:	dc3e      	bgt.n	801ee62 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801ede4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ede8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801edec:	441d      	add	r5, r3
 801edee:	9b01      	ldr	r3, [sp, #4]
 801edf0:	2b00      	cmp	r3, #0
 801edf2:	f340 809e 	ble.w	801ef32 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801edf6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801edfa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801edfc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ee00:	eeb0 6a62 	vmov.f32	s12, s5
 801ee04:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ee08:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ee0c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ee10:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801ee14:	eeb0 6a43 	vmov.f32	s12, s6
 801ee18:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ee1c:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801ee20:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ee24:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ee28:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ee2c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ee30:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ee34:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ee38:	ee12 2a90 	vmov	r2, s5
 801ee3c:	eef0 2a47 	vmov.f32	s5, s14
 801ee40:	fb92 fef3 	sdiv	lr, r2, r3
 801ee44:	ee13 2a10 	vmov	r2, s6
 801ee48:	eeb0 3a67 	vmov.f32	s6, s15
 801ee4c:	fb92 f3f3 	sdiv	r3, r2, r3
 801ee50:	9314      	str	r3, [sp, #80]	; 0x50
 801ee52:	9b01      	ldr	r3, [sp, #4]
 801ee54:	9a04      	ldr	r2, [sp, #16]
 801ee56:	3b01      	subs	r3, #1
 801ee58:	9301      	str	r3, [sp, #4]
 801ee5a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ee5c:	bf08      	it	eq
 801ee5e:	4613      	moveq	r3, r2
 801ee60:	e72b      	b.n	801ecba <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801ee62:	1426      	asrs	r6, r4, #16
 801ee64:	d460      	bmi.n	801ef28 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801ee66:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801ee6a:	42b2      	cmp	r2, r6
 801ee6c:	dd5c      	ble.n	801ef28 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801ee6e:	ea5f 4820 	movs.w	r8, r0, asr #16
 801ee72:	d459      	bmi.n	801ef28 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801ee74:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801ee78:	4542      	cmp	r2, r8
 801ee7a:	dd55      	ble.n	801ef28 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801ee7c:	9a02      	ldr	r2, [sp, #8]
 801ee7e:	9903      	ldr	r1, [sp, #12]
 801ee80:	fb08 6602 	mla	r6, r8, r2, r6
 801ee84:	0872      	lsrs	r2, r6, #1
 801ee86:	07f6      	lsls	r6, r6, #31
 801ee88:	5c8a      	ldrb	r2, [r1, r2]
 801ee8a:	bf54      	ite	pl
 801ee8c:	f002 020f 	andpl.w	r2, r2, #15
 801ee90:	1112      	asrmi	r2, r2, #4
 801ee92:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ee96:	b2d2      	uxtb	r2, r2
 801ee98:	2a00      	cmp	r2, #0
 801ee9a:	d045      	beq.n	801ef28 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801ee9c:	4926      	ldr	r1, [pc, #152]	; (801ef38 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801ee9e:	f8d1 8000 	ldr.w	r8, [r1]
 801eea2:	9905      	ldr	r1, [sp, #20]
 801eea4:	fa5f fb88 	uxtb.w	fp, r8
 801eea8:	434a      	muls	r2, r1
 801eeaa:	1c56      	adds	r6, r2, #1
 801eeac:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801eeb0:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801eeb4:	1212      	asrs	r2, r2, #8
 801eeb6:	f815 9006 	ldrb.w	r9, [r5, r6]
 801eeba:	fa1f fa82 	uxth.w	sl, r2
 801eebe:	43d2      	mvns	r2, r2
 801eec0:	fb1b fb0a 	smulbb	fp, fp, sl
 801eec4:	b2d2      	uxtb	r2, r2
 801eec6:	fb09 b902 	mla	r9, r9, r2, fp
 801eeca:	fa1f f989 	uxth.w	r9, r9
 801eece:	f109 0b01 	add.w	fp, r9, #1
 801eed2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801eed6:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 801eeda:	f3c8 4807 	ubfx	r8, r8, #16, #8
 801eede:	fb1b fb0a 	smulbb	fp, fp, sl
 801eee2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801eee6:	fb18 fa0a 	smulbb	sl, r8, sl
 801eeea:	f805 9006 	strb.w	r9, [r5, r6]
 801eeee:	442e      	add	r6, r5
 801eef0:	f896 8002 	ldrb.w	r8, [r6, #2]
 801eef4:	f896 9001 	ldrb.w	r9, [r6, #1]
 801eef8:	fb08 aa02 	mla	sl, r8, r2, sl
 801eefc:	fb09 b902 	mla	r9, r9, r2, fp
 801ef00:	fa1f fa8a 	uxth.w	sl, sl
 801ef04:	fa1f f989 	uxth.w	r9, r9
 801ef08:	f10a 0801 	add.w	r8, sl, #1
 801ef0c:	f109 0b01 	add.w	fp, r9, #1
 801ef10:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 801ef14:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ef18:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ef1c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ef20:	f886 a002 	strb.w	sl, [r6, #2]
 801ef24:	f886 9001 	strb.w	r9, [r6, #1]
 801ef28:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ef2a:	4474      	add	r4, lr
 801ef2c:	3701      	adds	r7, #1
 801ef2e:	4410      	add	r0, r2
 801ef30:	e755      	b.n	801edde <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801ef32:	b007      	add	sp, #28
 801ef34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef38:	24006d40 	.word	0x24006d40

0801ef3c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ef3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef40:	b085      	sub	sp, #20
 801ef42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ef46:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ef48:	9203      	str	r2, [sp, #12]
 801ef4a:	6860      	ldr	r0, [r4, #4]
 801ef4c:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801ef50:	9100      	str	r1, [sp, #0]
 801ef52:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 801ef56:	fb00 2606 	mla	r6, r0, r6, r2
 801ef5a:	6822      	ldr	r2, [r4, #0]
 801ef5c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ef60:	4416      	add	r6, r2
 801ef62:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801ef66:	3201      	adds	r2, #1
 801ef68:	f022 0201 	bic.w	r2, r2, #1
 801ef6c:	9201      	str	r2, [sp, #4]
 801ef6e:	f8dc 2000 	ldr.w	r2, [ip]
 801ef72:	9202      	str	r2, [sp, #8]
 801ef74:	9a00      	ldr	r2, [sp, #0]
 801ef76:	2a00      	cmp	r2, #0
 801ef78:	dc03      	bgt.n	801ef82 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801ef7a:	9a03      	ldr	r2, [sp, #12]
 801ef7c:	2a00      	cmp	r2, #0
 801ef7e:	f340 8140 	ble.w	801f202 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801ef82:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ef84:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801ef88:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801ef8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ef8e:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801ef92:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801ef96:	2b00      	cmp	r3, #0
 801ef98:	dd0e      	ble.n	801efb8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ef9a:	142a      	asrs	r2, r5, #16
 801ef9c:	d405      	bmi.n	801efaa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801ef9e:	4572      	cmp	r2, lr
 801efa0:	da03      	bge.n	801efaa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801efa2:	1422      	asrs	r2, r4, #16
 801efa4:	d401      	bmi.n	801efaa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801efa6:	42ba      	cmp	r2, r7
 801efa8:	db07      	blt.n	801efba <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801efaa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801efac:	3b01      	subs	r3, #1
 801efae:	3603      	adds	r6, #3
 801efb0:	4415      	add	r5, r2
 801efb2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801efb4:	4414      	add	r4, r2
 801efb6:	e7ee      	b.n	801ef96 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801efb8:	d072      	beq.n	801f0a0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801efba:	1e5a      	subs	r2, r3, #1
 801efbc:	9811      	ldr	r0, [sp, #68]	; 0x44
 801efbe:	fb00 5002 	mla	r0, r0, r2, r5
 801efc2:	1400      	asrs	r0, r0, #16
 801efc4:	d463      	bmi.n	801f08e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801efc6:	4570      	cmp	r0, lr
 801efc8:	da61      	bge.n	801f08e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801efca:	9812      	ldr	r0, [sp, #72]	; 0x48
 801efcc:	fb00 4202 	mla	r2, r0, r2, r4
 801efd0:	1412      	asrs	r2, r2, #16
 801efd2:	d45c      	bmi.n	801f08e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801efd4:	42ba      	cmp	r2, r7
 801efd6:	da5a      	bge.n	801f08e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801efd8:	1cf0      	adds	r0, r6, #3
 801efda:	469a      	mov	sl, r3
 801efdc:	f1ba 0f00 	cmp.w	sl, #0
 801efe0:	dd59      	ble.n	801f096 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801efe2:	142a      	asrs	r2, r5, #16
 801efe4:	9901      	ldr	r1, [sp, #4]
 801efe6:	1427      	asrs	r7, r4, #16
 801efe8:	fb01 2707 	mla	r7, r1, r7, r2
 801efec:	9902      	ldr	r1, [sp, #8]
 801efee:	087a      	lsrs	r2, r7, #1
 801eff0:	5c8a      	ldrb	r2, [r1, r2]
 801eff2:	07f9      	lsls	r1, r7, #31
 801eff4:	bf54      	ite	pl
 801eff6:	f002 020f 	andpl.w	r2, r2, #15
 801effa:	1112      	asrmi	r2, r2, #4
 801effc:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801f000:	b2d2      	uxtb	r2, r2
 801f002:	2a00      	cmp	r2, #0
 801f004:	d03b      	beq.n	801f07e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801f006:	4980      	ldr	r1, [pc, #512]	; (801f208 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801f008:	2aff      	cmp	r2, #255	; 0xff
 801f00a:	680f      	ldr	r7, [r1, #0]
 801f00c:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801f010:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801f014:	b2ff      	uxtb	r7, r7
 801f016:	f000 80ed 	beq.w	801f1f4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 801f01a:	fa1f f882 	uxth.w	r8, r2
 801f01e:	43d2      	mvns	r2, r2
 801f020:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 801f024:	fb17 f708 	smulbb	r7, r7, r8
 801f028:	b2d2      	uxtb	r2, r2
 801f02a:	fb19 f908 	smulbb	r9, r9, r8
 801f02e:	fb0e 7702 	mla	r7, lr, r2, r7
 801f032:	fb1b f808 	smulbb	r8, fp, r8
 801f036:	b2bf      	uxth	r7, r7
 801f038:	f107 0e01 	add.w	lr, r7, #1
 801f03c:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801f040:	123f      	asrs	r7, r7, #8
 801f042:	f800 7c03 	strb.w	r7, [r0, #-3]
 801f046:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801f04a:	fb07 9902 	mla	r9, r7, r2, r9
 801f04e:	fa1f f989 	uxth.w	r9, r9
 801f052:	f109 0701 	add.w	r7, r9, #1
 801f056:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801f05a:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801f05e:	fb07 8802 	mla	r8, r7, r2, r8
 801f062:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f066:	fa1f f888 	uxth.w	r8, r8
 801f06a:	f800 9c02 	strb.w	r9, [r0, #-2]
 801f06e:	f108 0201 	add.w	r2, r8, #1
 801f072:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801f076:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f07a:	f800 8c01 	strb.w	r8, [r0, #-1]
 801f07e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f080:	3003      	adds	r0, #3
 801f082:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f086:	4415      	add	r5, r2
 801f088:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f08a:	4414      	add	r4, r2
 801f08c:	e7a6      	b.n	801efdc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801f08e:	2700      	movs	r7, #0
 801f090:	1bda      	subs	r2, r3, r7
 801f092:	2a00      	cmp	r2, #0
 801f094:	dc40      	bgt.n	801f118 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801f096:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f09a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f09e:	441e      	add	r6, r3
 801f0a0:	9b00      	ldr	r3, [sp, #0]
 801f0a2:	2b00      	cmp	r3, #0
 801f0a4:	f340 80ad 	ble.w	801f202 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801f0a8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f0ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f0ae:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f0b2:	eeb0 6a62 	vmov.f32	s12, s5
 801f0b6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f0ba:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f0be:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f0c2:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f0c6:	eeb0 6a43 	vmov.f32	s12, s6
 801f0ca:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f0ce:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f0d2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f0d6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f0da:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f0de:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f0e2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f0e6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f0ea:	ee12 2a90 	vmov	r2, s5
 801f0ee:	eef0 2a47 	vmov.f32	s5, s14
 801f0f2:	fb92 f3f3 	sdiv	r3, r2, r3
 801f0f6:	ee13 2a10 	vmov	r2, s6
 801f0fa:	9311      	str	r3, [sp, #68]	; 0x44
 801f0fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f0fe:	eeb0 3a67 	vmov.f32	s6, s15
 801f102:	fb92 f3f3 	sdiv	r3, r2, r3
 801f106:	9312      	str	r3, [sp, #72]	; 0x48
 801f108:	9b00      	ldr	r3, [sp, #0]
 801f10a:	9a03      	ldr	r2, [sp, #12]
 801f10c:	3b01      	subs	r3, #1
 801f10e:	9300      	str	r3, [sp, #0]
 801f110:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f112:	bf08      	it	eq
 801f114:	4613      	moveq	r3, r2
 801f116:	e72d      	b.n	801ef74 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801f118:	1428      	asrs	r0, r5, #16
 801f11a:	d45c      	bmi.n	801f1d6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801f11c:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801f120:	4282      	cmp	r2, r0
 801f122:	dd58      	ble.n	801f1d6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801f124:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801f128:	d455      	bmi.n	801f1d6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801f12a:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801f12e:	4572      	cmp	r2, lr
 801f130:	dd51      	ble.n	801f1d6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801f132:	9a01      	ldr	r2, [sp, #4]
 801f134:	9902      	ldr	r1, [sp, #8]
 801f136:	fb0e 0002 	mla	r0, lr, r2, r0
 801f13a:	0842      	lsrs	r2, r0, #1
 801f13c:	07c0      	lsls	r0, r0, #31
 801f13e:	5c8a      	ldrb	r2, [r1, r2]
 801f140:	bf54      	ite	pl
 801f142:	f002 020f 	andpl.w	r2, r2, #15
 801f146:	1112      	asrmi	r2, r2, #4
 801f148:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801f14c:	b2d2      	uxtb	r2, r2
 801f14e:	2a00      	cmp	r2, #0
 801f150:	d041      	beq.n	801f1d6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801f152:	492d      	ldr	r1, [pc, #180]	; (801f208 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801f154:	2aff      	cmp	r2, #255	; 0xff
 801f156:	6808      	ldr	r0, [r1, #0]
 801f158:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801f15c:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801f160:	fa5f fe80 	uxtb.w	lr, r0
 801f164:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801f168:	d03b      	beq.n	801f1e2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801f16a:	fa1f f982 	uxth.w	r9, r2
 801f16e:	4438      	add	r0, r7
 801f170:	43d2      	mvns	r2, r2
 801f172:	f816 8000 	ldrb.w	r8, [r6, r0]
 801f176:	fb1e fe09 	smulbb	lr, lr, r9
 801f17a:	fb1a fa09 	smulbb	sl, sl, r9
 801f17e:	b2d2      	uxtb	r2, r2
 801f180:	fb1b f909 	smulbb	r9, fp, r9
 801f184:	fb08 ee02 	mla	lr, r8, r2, lr
 801f188:	fa1f fe8e 	uxth.w	lr, lr
 801f18c:	f10e 0801 	add.w	r8, lr, #1
 801f190:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 801f194:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f198:	f806 e000 	strb.w	lr, [r6, r0]
 801f19c:	4430      	add	r0, r6
 801f19e:	f890 e001 	ldrb.w	lr, [r0, #1]
 801f1a2:	fb0e aa02 	mla	sl, lr, r2, sl
 801f1a6:	fa1f fa8a 	uxth.w	sl, sl
 801f1aa:	f10a 0e01 	add.w	lr, sl, #1
 801f1ae:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 801f1b2:	f890 e002 	ldrb.w	lr, [r0, #2]
 801f1b6:	fb0e 9902 	mla	r9, lr, r2, r9
 801f1ba:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f1be:	fa1f f989 	uxth.w	r9, r9
 801f1c2:	f880 a001 	strb.w	sl, [r0, #1]
 801f1c6:	f109 0201 	add.w	r2, r9, #1
 801f1ca:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801f1ce:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f1d2:	f880 9002 	strb.w	r9, [r0, #2]
 801f1d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f1d8:	3701      	adds	r7, #1
 801f1da:	4415      	add	r5, r2
 801f1dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f1de:	4414      	add	r4, r2
 801f1e0:	e756      	b.n	801f090 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801f1e2:	4438      	add	r0, r7
 801f1e4:	f806 e000 	strb.w	lr, [r6, r0]
 801f1e8:	4430      	add	r0, r6
 801f1ea:	f880 a001 	strb.w	sl, [r0, #1]
 801f1ee:	f880 b002 	strb.w	fp, [r0, #2]
 801f1f2:	e7f0      	b.n	801f1d6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801f1f4:	f800 7c03 	strb.w	r7, [r0, #-3]
 801f1f8:	f800 9c02 	strb.w	r9, [r0, #-2]
 801f1fc:	f800 bc01 	strb.w	fp, [r0, #-1]
 801f200:	e73d      	b.n	801f07e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801f202:	b005      	add	sp, #20
 801f204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f208:	24006d40 	.word	0x24006d40

0801f20c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D1Ev>:
 801f20c:	4770      	bx	lr

0801f20e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED1Ev>:
 801f20e:	4770      	bx	lr

0801f210 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D1Ev>:
 801f210:	4770      	bx	lr

0801f212 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801f212:	4770      	bx	lr

0801f214 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801f214:	4770      	bx	lr

0801f216 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801f216:	4770      	bx	lr

0801f218 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801f218:	4770      	bx	lr

0801f21a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801f21a:	4770      	bx	lr

0801f21c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801f21c:	4770      	bx	lr

0801f21e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801f21e:	4770      	bx	lr

0801f220 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801f220:	4770      	bx	lr

0801f222 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801f222:	4770      	bx	lr

0801f224 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801f224:	4770      	bx	lr

0801f226 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801f226:	4770      	bx	lr

0801f228 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801f228:	4770      	bx	lr

0801f22a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801f22a:	4770      	bx	lr

0801f22c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801f22c:	4770      	bx	lr

0801f22e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801f22e:	4770      	bx	lr

0801f230 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801f230:	4770      	bx	lr

0801f232 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801f232:	4770      	bx	lr

0801f234 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801f234:	4770      	bx	lr

0801f236 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801f236:	4770      	bx	lr

0801f238 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801f238:	4770      	bx	lr
	...

0801f23c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801f23c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f23e:	4606      	mov	r6, r0
 801f240:	b087      	sub	sp, #28
 801f242:	4615      	mov	r5, r2
 801f244:	461f      	mov	r7, r3
 801f246:	b353      	cbz	r3, 801f29e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801f248:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801f24c:	2b00      	cmp	r3, #0
 801f24e:	dd26      	ble.n	801f29e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801f250:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801f254:	2b00      	cmp	r3, #0
 801f256:	dd22      	ble.n	801f29e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801f258:	6808      	ldr	r0, [r1, #0]
 801f25a:	aa04      	add	r2, sp, #16
 801f25c:	6849      	ldr	r1, [r1, #4]
 801f25e:	4c1b      	ldr	r4, [pc, #108]	; (801f2cc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801f260:	c203      	stmia	r2!, {r0, r1}
 801f262:	a804      	add	r0, sp, #16
 801f264:	f7fb faf2 	bl	801a84c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f268:	6820      	ldr	r0, [r4, #0]
 801f26a:	6803      	ldr	r3, [r0, #0]
 801f26c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f26e:	4798      	blx	r3
 801f270:	2fff      	cmp	r7, #255	; 0xff
 801f272:	d016      	beq.n	801f2a2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801f274:	f010 0f08 	tst.w	r0, #8
 801f278:	6820      	ldr	r0, [r4, #0]
 801f27a:	d015      	beq.n	801f2a8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 801f27c:	2400      	movs	r4, #0
 801f27e:	6801      	ldr	r1, [r0, #0]
 801f280:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801f284:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801f288:	e9cd 7402 	strd	r7, r4, [sp, #8]
 801f28c:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801f290:	9401      	str	r4, [sp, #4]
 801f292:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801f296:	9400      	str	r4, [sp, #0]
 801f298:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 801f29a:	4629      	mov	r1, r5
 801f29c:	47a0      	blx	r4
 801f29e:	b007      	add	sp, #28
 801f2a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f2a2:	f010 0f02 	tst.w	r0, #2
 801f2a6:	e7e7      	b.n	801f278 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 801f2a8:	6803      	ldr	r3, [r0, #0]
 801f2aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f2ac:	4798      	blx	r3
 801f2ae:	4b08      	ldr	r3, [pc, #32]	; (801f2d0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 801f2b0:	4601      	mov	r1, r0
 801f2b2:	4630      	mov	r0, r6
 801f2b4:	881a      	ldrh	r2, [r3, #0]
 801f2b6:	6833      	ldr	r3, [r6, #0]
 801f2b8:	e9cd 5700 	strd	r5, r7, [sp]
 801f2bc:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801f2be:	ab04      	add	r3, sp, #16
 801f2c0:	47a8      	blx	r5
 801f2c2:	6820      	ldr	r0, [r4, #0]
 801f2c4:	6803      	ldr	r3, [r0, #0]
 801f2c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f2c8:	4798      	blx	r3
 801f2ca:	e7e8      	b.n	801f29e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801f2cc:	24006d38 	.word	0x24006d38
 801f2d0:	24006d32 	.word	0x24006d32

0801f2d4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801f2d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f2d8:	b08b      	sub	sp, #44	; 0x2c
 801f2da:	460d      	mov	r5, r1
 801f2dc:	4616      	mov	r6, r2
 801f2de:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 801f2e2:	f1b8 0f00 	cmp.w	r8, #0
 801f2e6:	d047      	beq.n	801f378 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801f2e8:	6810      	ldr	r0, [r2, #0]
 801f2ea:	ac06      	add	r4, sp, #24
 801f2ec:	6851      	ldr	r1, [r2, #4]
 801f2ee:	4f51      	ldr	r7, [pc, #324]	; (801f434 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 801f2f0:	c403      	stmia	r4!, {r0, r1}
 801f2f2:	6818      	ldr	r0, [r3, #0]
 801f2f4:	ac08      	add	r4, sp, #32
 801f2f6:	6859      	ldr	r1, [r3, #4]
 801f2f8:	c403      	stmia	r4!, {r0, r1}
 801f2fa:	a806      	add	r0, sp, #24
 801f2fc:	f7fb faa6 	bl	801a84c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f300:	4631      	mov	r1, r6
 801f302:	a808      	add	r0, sp, #32
 801f304:	f7fb faca 	bl	801a89c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f308:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801f30c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801f310:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801f314:	6838      	ldr	r0, [r7, #0]
 801f316:	fb11 2103 	smlabb	r1, r1, r3, r2
 801f31a:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 801f31e:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 801f322:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801f326:	440d      	add	r5, r1
 801f328:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801f32c:	440a      	add	r2, r1
 801f32e:	f8ad 2020 	strh.w	r2, [sp, #32]
 801f332:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801f336:	4413      	add	r3, r2
 801f338:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801f33c:	6803      	ldr	r3, [r0, #0]
 801f33e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f340:	4798      	blx	r3
 801f342:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801f346:	d01a      	beq.n	801f37e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 801f348:	f010 0f04 	tst.w	r0, #4
 801f34c:	6838      	ldr	r0, [r7, #0]
 801f34e:	d019      	beq.n	801f384 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 801f350:	2100      	movs	r1, #0
 801f352:	6807      	ldr	r7, [r0, #0]
 801f354:	b2a4      	uxth	r4, r4
 801f356:	f8cd 800c 	str.w	r8, [sp, #12]
 801f35a:	b2b6      	uxth	r6, r6
 801f35c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801f360:	9401      	str	r4, [sp, #4]
 801f362:	9600      	str	r6, [sp, #0]
 801f364:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801f368:	e9cd 1104 	strd	r1, r1, [sp, #16]
 801f36c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801f370:	9102      	str	r1, [sp, #8]
 801f372:	4629      	mov	r1, r5
 801f374:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 801f376:	47a0      	blx	r4
 801f378:	b00b      	add	sp, #44	; 0x2c
 801f37a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f37e:	f010 0f01 	tst.w	r0, #1
 801f382:	e7e3      	b.n	801f34c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 801f384:	6803      	ldr	r3, [r0, #0]
 801f386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f388:	4798      	blx	r3
 801f38a:	4a2b      	ldr	r2, [pc, #172]	; (801f438 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 801f38c:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801f390:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801f394:	8813      	ldrh	r3, [r2, #0]
 801f396:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 801f39a:	fb03 f404 	mul.w	r4, r3, r4
 801f39e:	fb03 c101 	mla	r1, r3, r1, ip
 801f3a2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f3a6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801f3aa:	4408      	add	r0, r1
 801f3ac:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 801f3b0:	4404      	add	r4, r0
 801f3b2:	d02e      	beq.n	801f412 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801f3b4:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801f3b8:	1b9b      	subs	r3, r3, r6
 801f3ba:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 801f3be:	1b96      	subs	r6, r2, r6
 801f3c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f3c4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f3c8:	42a0      	cmp	r0, r4
 801f3ca:	d22d      	bcs.n	801f428 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801f3cc:	eb00 0e01 	add.w	lr, r0, r1
 801f3d0:	4570      	cmp	r0, lr
 801f3d2:	d210      	bcs.n	801f3f6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 801f3d4:	f890 9000 	ldrb.w	r9, [r0]
 801f3d8:	f815 2b01 	ldrb.w	r2, [r5], #1
 801f3dc:	fb19 f90c 	smulbb	r9, r9, ip
 801f3e0:	fb02 9208 	mla	r2, r2, r8, r9
 801f3e4:	b292      	uxth	r2, r2
 801f3e6:	f102 0901 	add.w	r9, r2, #1
 801f3ea:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 801f3ee:	1212      	asrs	r2, r2, #8
 801f3f0:	f800 2b01 	strb.w	r2, [r0], #1
 801f3f4:	e7ec      	b.n	801f3d0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 801f3f6:	4418      	add	r0, r3
 801f3f8:	4435      	add	r5, r6
 801f3fa:	e7e5      	b.n	801f3c8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 801f3fc:	8813      	ldrh	r3, [r2, #0]
 801f3fe:	1b9b      	subs	r3, r3, r6
 801f400:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f404:	4418      	add	r0, r3
 801f406:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801f40a:	1b9b      	subs	r3, r3, r6
 801f40c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f410:	441d      	add	r5, r3
 801f412:	42a0      	cmp	r0, r4
 801f414:	d208      	bcs.n	801f428 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801f416:	eb00 0c01 	add.w	ip, r0, r1
 801f41a:	4560      	cmp	r0, ip
 801f41c:	d2ee      	bcs.n	801f3fc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 801f41e:	f815 3b01 	ldrb.w	r3, [r5], #1
 801f422:	f800 3b01 	strb.w	r3, [r0], #1
 801f426:	e7f8      	b.n	801f41a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 801f428:	6838      	ldr	r0, [r7, #0]
 801f42a:	6803      	ldr	r3, [r0, #0]
 801f42c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f42e:	4798      	blx	r3
 801f430:	e7a2      	b.n	801f378 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801f432:	bf00      	nop
 801f434:	24006d38 	.word	0x24006d38
 801f438:	24006d32 	.word	0x24006d32

0801f43c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801f43c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f43e:	2300      	movs	r3, #0
 801f440:	b085      	sub	sp, #20
 801f442:	9300      	str	r3, [sp, #0]
 801f444:	4b41      	ldr	r3, [pc, #260]	; (801f54c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 801f446:	781b      	ldrb	r3, [r3, #0]
 801f448:	2b00      	cmp	r3, #0
 801f44a:	d136      	bne.n	801f4ba <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 801f44c:	4a40      	ldr	r2, [pc, #256]	; (801f550 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801f44e:	f9b2 2000 	ldrsh.w	r2, [r2]
 801f452:	f8ad 2004 	strh.w	r2, [sp, #4]
 801f456:	2b00      	cmp	r3, #0
 801f458:	d131      	bne.n	801f4be <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 801f45a:	4b3e      	ldr	r3, [pc, #248]	; (801f554 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801f45c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f460:	ac02      	add	r4, sp, #8
 801f462:	6808      	ldr	r0, [r1, #0]
 801f464:	f8ad 3006 	strh.w	r3, [sp, #6]
 801f468:	ab02      	add	r3, sp, #8
 801f46a:	6849      	ldr	r1, [r1, #4]
 801f46c:	4d3a      	ldr	r5, [pc, #232]	; (801f558 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 801f46e:	c303      	stmia	r3!, {r0, r1}
 801f470:	4669      	mov	r1, sp
 801f472:	4620      	mov	r0, r4
 801f474:	f7fb fa12 	bl	801a89c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f478:	4668      	mov	r0, sp
 801f47a:	f7fb f9e7 	bl	801a84c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f47e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801f482:	f8bd 2000 	ldrh.w	r2, [sp]
 801f486:	462e      	mov	r6, r5
 801f488:	6828      	ldr	r0, [r5, #0]
 801f48a:	4413      	add	r3, r2
 801f48c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801f490:	f8ad 3008 	strh.w	r3, [sp, #8]
 801f494:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801f498:	4413      	add	r3, r2
 801f49a:	f8ad 300a 	strh.w	r3, [sp, #10]
 801f49e:	6803      	ldr	r3, [r0, #0]
 801f4a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f4a2:	4798      	blx	r3
 801f4a4:	f010 0f01 	tst.w	r0, #1
 801f4a8:	d00b      	beq.n	801f4c2 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 801f4aa:	6828      	ldr	r0, [r5, #0]
 801f4ac:	6803      	ldr	r3, [r0, #0]
 801f4ae:	e894 0006 	ldmia.w	r4, {r1, r2}
 801f4b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801f4b4:	4798      	blx	r3
 801f4b6:	b005      	add	sp, #20
 801f4b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f4ba:	4a26      	ldr	r2, [pc, #152]	; (801f554 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801f4bc:	e7c7      	b.n	801f44e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801f4be:	4b24      	ldr	r3, [pc, #144]	; (801f550 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801f4c0:	e7cc      	b.n	801f45c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801f4c2:	6830      	ldr	r0, [r6, #0]
 801f4c4:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 801f4c8:	6803      	ldr	r3, [r0, #0]
 801f4ca:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 801f4ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f4d0:	4798      	blx	r3
 801f4d2:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801f4d6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801f4da:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 801f4de:	fb14 3402 	smlabb	r4, r4, r2, r3
 801f4e2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f4e6:	4404      	add	r4, r0
 801f4e8:	6830      	ldr	r0, [r6, #0]
 801f4ea:	6803      	ldr	r3, [r0, #0]
 801f4ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f4ee:	4798      	blx	r3
 801f4f0:	4917      	ldr	r1, [pc, #92]	; (801f550 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801f4f2:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801f4f6:	880b      	ldrh	r3, [r1, #0]
 801f4f8:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 801f4fc:	fb03 c202 	mla	r2, r3, r2, ip
 801f500:	437b      	muls	r3, r7
 801f502:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 801f506:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f50a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f50e:	4410      	add	r0, r2
 801f510:	18c2      	adds	r2, r0, r3
 801f512:	4290      	cmp	r0, r2
 801f514:	d214      	bcs.n	801f540 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 801f516:	eb00 0c07 	add.w	ip, r0, r7
 801f51a:	4560      	cmp	r0, ip
 801f51c:	d204      	bcs.n	801f528 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 801f51e:	f814 3b01 	ldrb.w	r3, [r4], #1
 801f522:	f800 3b01 	strb.w	r3, [r0], #1
 801f526:	e7f8      	b.n	801f51a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 801f528:	880b      	ldrh	r3, [r1, #0]
 801f52a:	1b5b      	subs	r3, r3, r5
 801f52c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f530:	4418      	add	r0, r3
 801f532:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801f536:	1b5b      	subs	r3, r3, r5
 801f538:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f53c:	441c      	add	r4, r3
 801f53e:	e7e8      	b.n	801f512 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 801f540:	6830      	ldr	r0, [r6, #0]
 801f542:	6803      	ldr	r3, [r0, #0]
 801f544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f546:	4798      	blx	r3
 801f548:	e7b5      	b.n	801f4b6 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801f54a:	bf00      	nop
 801f54c:	24006d30 	.word	0x24006d30
 801f550:	24006d32 	.word	0x24006d32
 801f554:	24006d34 	.word	0x24006d34
 801f558:	24006d38 	.word	0x24006d38

0801f55c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801f55c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f560:	b08f      	sub	sp, #60	; 0x3c
 801f562:	461c      	mov	r4, r3
 801f564:	9203      	str	r2, [sp, #12]
 801f566:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801f56a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801f56c:	6820      	ldr	r0, [r4, #0]
 801f56e:	9100      	str	r1, [sp, #0]
 801f570:	9204      	str	r2, [sp, #16]
 801f572:	aa0a      	add	r2, sp, #40	; 0x28
 801f574:	6861      	ldr	r1, [r4, #4]
 801f576:	c203      	stmia	r2!, {r0, r1}
 801f578:	6818      	ldr	r0, [r3, #0]
 801f57a:	aa0c      	add	r2, sp, #48	; 0x30
 801f57c:	6859      	ldr	r1, [r3, #4]
 801f57e:	c203      	stmia	r2!, {r0, r1}
 801f580:	a80a      	add	r0, sp, #40	; 0x28
 801f582:	f7fb f963 	bl	801a84c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f586:	4621      	mov	r1, r4
 801f588:	a80c      	add	r0, sp, #48	; 0x30
 801f58a:	f7fb f987 	bl	801a89c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f58e:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801f592:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	; 0x2e
 801f596:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801f59a:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 801f59e:	bfdb      	ittet	le
 801f5a0:	b2b3      	uxthle	r3, r6
 801f5a2:	f44f 6280 	movle.w	r2, #1024	; 0x400
 801f5a6:	2301      	movgt	r3, #1
 801f5a8:	fb92 f3f3 	sdivle	r3, r2, r3
 801f5ac:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801f5b0:	441d      	add	r5, r3
 801f5b2:	fb92 f1f3 	sdiv	r1, r2, r3
 801f5b6:	fa1f fc81 	uxth.w	ip, r1
 801f5ba:	3d01      	subs	r5, #1
 801f5bc:	fb0c 2413 	mls	r4, ip, r3, r2
 801f5c0:	4661      	mov	r1, ip
 801f5c2:	fb14 f406 	smulbb	r4, r4, r6
 801f5c6:	4404      	add	r4, r0
 801f5c8:	fb95 f5f3 	sdiv	r5, r5, r3
 801f5cc:	b2a4      	uxth	r4, r4
 801f5ce:	b131      	cbz	r1, 801f5de <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x82>
 801f5d0:	9b03      	ldr	r3, [sp, #12]
 801f5d2:	9900      	ldr	r1, [sp, #0]
 801f5d4:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801f5d8:	ba1b      	rev	r3, r3
 801f5da:	4419      	add	r1, r3
 801f5dc:	9100      	str	r1, [sp, #0]
 801f5de:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801f5e2:	b2ad      	uxth	r5, r5
 801f5e4:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 801f5e8:	4418      	add	r0, r3
 801f5ea:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801f5ee:	00ad      	lsls	r5, r5, #2
 801f5f0:	441a      	add	r2, r3
 801f5f2:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801f5f6:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 801f5fa:	9301      	str	r3, [sp, #4]
 801f5fc:	4b79      	ldr	r3, [pc, #484]	; (801f7e4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 801f5fe:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 801f602:	6818      	ldr	r0, [r3, #0]
 801f604:	6803      	ldr	r3, [r0, #0]
 801f606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f608:	4798      	blx	r3
 801f60a:	4a77      	ldr	r2, [pc, #476]	; (801f7e8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>)
 801f60c:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 801f610:	2c00      	cmp	r4, #0
 801f612:	8813      	ldrh	r3, [r2, #0]
 801f614:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801f618:	9209      	str	r2, [sp, #36]	; 0x24
 801f61a:	fb03 c101 	mla	r1, r3, r1, ip
 801f61e:	fb06 f303 	mul.w	r3, r6, r3
 801f622:	bf18      	it	ne
 801f624:	2600      	movne	r6, #0
 801f626:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801f62a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f62e:	4408      	add	r0, r1
 801f630:	4403      	add	r3, r0
 801f632:	9306      	str	r3, [sp, #24]
 801f634:	f105 0304 	add.w	r3, r5, #4
 801f638:	9305      	str	r3, [sp, #20]
 801f63a:	9b01      	ldr	r3, [sp, #4]
 801f63c:	bf08      	it	eq
 801f63e:	461e      	moveq	r6, r3
 801f640:	2300      	movs	r3, #0
 801f642:	b2b6      	uxth	r6, r6
 801f644:	9302      	str	r3, [sp, #8]
 801f646:	9a06      	ldr	r2, [sp, #24]
 801f648:	4290      	cmp	r0, r2
 801f64a:	f080 80c2 	bcs.w	801f7d2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x276>
 801f64e:	b963      	cbnz	r3, 801f66a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 801f650:	9b00      	ldr	r3, [sp, #0]
 801f652:	781a      	ldrb	r2, [r3, #0]
 801f654:	0993      	lsrs	r3, r2, #6
 801f656:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801f65a:	9202      	str	r2, [sp, #8]
 801f65c:	1e5a      	subs	r2, r3, #1
 801f65e:	2a02      	cmp	r2, #2
 801f660:	d815      	bhi.n	801f68e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x132>
 801f662:	9a00      	ldr	r2, [sp, #0]
 801f664:	b29b      	uxth	r3, r3
 801f666:	3201      	adds	r2, #1
 801f668:	9200      	str	r2, [sp, #0]
 801f66a:	b1b4      	cbz	r4, 801f69a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 801f66c:	429c      	cmp	r4, r3
 801f66e:	bf91      	iteee	ls
 801f670:	1b1c      	subls	r4, r3, r4
 801f672:	1ae4      	subhi	r4, r4, r3
 801f674:	4635      	movhi	r5, r6
 801f676:	f04f 0e00 	movhi.w	lr, #0
 801f67a:	bf9b      	ittet	ls
 801f67c:	fa1f fe84 	uxthls.w	lr, r4
 801f680:	f8bd 5004 	ldrhls.w	r5, [sp, #4]
 801f684:	b2a4      	uxthhi	r4, r4
 801f686:	2400      	movls	r4, #0
 801f688:	4673      	mov	r3, lr
 801f68a:	462e      	mov	r6, r5
 801f68c:	e7db      	b.n	801f646 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 801f68e:	9a00      	ldr	r2, [sp, #0]
 801f690:	9b00      	ldr	r3, [sp, #0]
 801f692:	3202      	adds	r2, #2
 801f694:	785b      	ldrb	r3, [r3, #1]
 801f696:	9200      	str	r2, [sp, #0]
 801f698:	e7e7      	b.n	801f66a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 801f69a:	2204      	movs	r2, #4
 801f69c:	9905      	ldr	r1, [sp, #20]
 801f69e:	429e      	cmp	r6, r3
 801f6a0:	4615      	mov	r5, r2
 801f6a2:	9a02      	ldr	r2, [sp, #8]
 801f6a4:	bf94      	ite	ls
 801f6a6:	eba3 0e06 	subls.w	lr, r3, r6
 801f6aa:	46a6      	movhi	lr, r4
 801f6ac:	fb15 1202 	smlabb	r2, r5, r2, r1
 801f6b0:	9903      	ldr	r1, [sp, #12]
 801f6b2:	bf8c      	ite	hi
 801f6b4:	1af5      	subhi	r5, r6, r3
 801f6b6:	fa1f fe8e 	uxthls.w	lr, lr
 801f6ba:	f851 c002 	ldr.w	ip, [r1, r2]
 801f6be:	bf9a      	itte	ls
 801f6c0:	4625      	movls	r5, r4
 801f6c2:	4632      	movls	r2, r6
 801f6c4:	b2ad      	uxthhi	r5, r5
 801f6c6:	ea4f 611c 	mov.w	r1, ip, lsr #24
 801f6ca:	bf88      	it	hi
 801f6cc:	461a      	movhi	r2, r3
 801f6ce:	b179      	cbz	r1, 801f6f0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 801f6d0:	29ff      	cmp	r1, #255	; 0xff
 801f6d2:	fa5f f98c 	uxtb.w	r9, ip
 801f6d6:	f3cc 2807 	ubfx	r8, ip, #8, #8
 801f6da:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 801f6de:	d126      	bne.n	801f72e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 801f6e0:	9f04      	ldr	r7, [sp, #16]
 801f6e2:	2fff      	cmp	r7, #255	; 0xff
 801f6e4:	d123      	bne.n	801f72e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 801f6e6:	4682      	mov	sl, r0
 801f6e8:	4611      	mov	r1, r2
 801f6ea:	f10a 0a03 	add.w	sl, sl, #3
 801f6ee:	b9a9      	cbnz	r1, 801f71c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c0>
 801f6f0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f6f4:	429e      	cmp	r6, r3
 801f6f6:	4410      	add	r0, r2
 801f6f8:	d8c6      	bhi.n	801f688 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 801f6fa:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 801f6fe:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 801f702:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f704:	1b64      	subs	r4, r4, r5
 801f706:	9a01      	ldr	r2, [sp, #4]
 801f708:	881b      	ldrh	r3, [r3, #0]
 801f70a:	b2a4      	uxth	r4, r4
 801f70c:	1a9b      	subs	r3, r3, r2
 801f70e:	2c00      	cmp	r4, #0
 801f710:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f714:	bf18      	it	ne
 801f716:	2500      	movne	r5, #0
 801f718:	4418      	add	r0, r3
 801f71a:	e7b5      	b.n	801f688 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 801f71c:	3901      	subs	r1, #1
 801f71e:	f80a 9c03 	strb.w	r9, [sl, #-3]
 801f722:	f80a 8c02 	strb.w	r8, [sl, #-2]
 801f726:	f80a cc01 	strb.w	ip, [sl, #-1]
 801f72a:	b289      	uxth	r1, r1
 801f72c:	e7dd      	b.n	801f6ea <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 801f72e:	9f04      	ldr	r7, [sp, #16]
 801f730:	fb07 fa01 	mul.w	sl, r7, r1
 801f734:	f10a 0101 	add.w	r1, sl, #1
 801f738:	eb01 212a 	add.w	r1, r1, sl, asr #8
 801f73c:	1209      	asrs	r1, r1, #8
 801f73e:	ea6f 0a01 	mvn.w	sl, r1
 801f742:	b289      	uxth	r1, r1
 801f744:	fb19 f901 	smulbb	r9, r9, r1
 801f748:	fa5f fa8a 	uxtb.w	sl, sl
 801f74c:	fb18 f801 	smulbb	r8, r8, r1
 801f750:	fb1c f101 	smulbb	r1, ip, r1
 801f754:	fa1f f789 	uxth.w	r7, r9
 801f758:	4684      	mov	ip, r0
 801f75a:	4691      	mov	r9, r2
 801f75c:	9707      	str	r7, [sp, #28]
 801f75e:	b289      	uxth	r1, r1
 801f760:	fa1f f788 	uxth.w	r7, r8
 801f764:	9708      	str	r7, [sp, #32]
 801f766:	f10c 0c03 	add.w	ip, ip, #3
 801f76a:	f1b9 0f00 	cmp.w	r9, #0
 801f76e:	d0bf      	beq.n	801f6f0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 801f770:	f81c 8c03 	ldrb.w	r8, [ip, #-3]
 801f774:	f109 39ff 	add.w	r9, r9, #4294967295
 801f778:	9f07      	ldr	r7, [sp, #28]
 801f77a:	fa1f f989 	uxth.w	r9, r9
 801f77e:	fb08 780a 	mla	r8, r8, sl, r7
 801f782:	9f08      	ldr	r7, [sp, #32]
 801f784:	fa1f f888 	uxth.w	r8, r8
 801f788:	f108 0b01 	add.w	fp, r8, #1
 801f78c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801f790:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f794:	f80c 8c03 	strb.w	r8, [ip, #-3]
 801f798:	f81c 8c02 	ldrb.w	r8, [ip, #-2]
 801f79c:	fb08 780a 	mla	r8, r8, sl, r7
 801f7a0:	fa1f f888 	uxth.w	r8, r8
 801f7a4:	f108 0b01 	add.w	fp, r8, #1
 801f7a8:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801f7ac:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f7b0:	f80c 8c02 	strb.w	r8, [ip, #-2]
 801f7b4:	f81c 8c01 	ldrb.w	r8, [ip, #-1]
 801f7b8:	fb08 180a 	mla	r8, r8, sl, r1
 801f7bc:	fa1f f888 	uxth.w	r8, r8
 801f7c0:	f108 0b01 	add.w	fp, r8, #1
 801f7c4:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801f7c8:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f7cc:	f80c 8c01 	strb.w	r8, [ip, #-1]
 801f7d0:	e7c9      	b.n	801f766 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 801f7d2:	4b04      	ldr	r3, [pc, #16]	; (801f7e4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 801f7d4:	6818      	ldr	r0, [r3, #0]
 801f7d6:	6803      	ldr	r3, [r0, #0]
 801f7d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f7da:	4798      	blx	r3
 801f7dc:	b00f      	add	sp, #60	; 0x3c
 801f7de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f7e2:	bf00      	nop
 801f7e4:	24006d38 	.word	0x24006d38
 801f7e8:	24006d32 	.word	0x24006d32

0801f7ec <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801f7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f7f0:	b089      	sub	sp, #36	; 0x24
 801f7f2:	4607      	mov	r7, r0
 801f7f4:	4689      	mov	r9, r1
 801f7f6:	4692      	mov	sl, r2
 801f7f8:	ac08      	add	r4, sp, #32
 801f7fa:	461e      	mov	r6, r3
 801f7fc:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801f800:	4620      	mov	r0, r4
 801f802:	f7fd ffa5 	bl	801d750 <_ZNK8touchgfx6Bitmap7getDataEv>
 801f806:	683b      	ldr	r3, [r7, #0]
 801f808:	4605      	mov	r5, r0
 801f80a:	4620      	mov	r0, r4
 801f80c:	f8d3 8018 	ldr.w	r8, [r3, #24]
 801f810:	f7fd ff36 	bl	801d680 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801f814:	4683      	mov	fp, r0
 801f816:	4620      	mov	r0, r4
 801f818:	f7fd ff66 	bl	801d6e8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801f81c:	4653      	mov	r3, sl
 801f81e:	464a      	mov	r2, r9
 801f820:	4639      	mov	r1, r7
 801f822:	9500      	str	r5, [sp, #0]
 801f824:	e9cd b001 	strd	fp, r0, [sp, #4]
 801f828:	a806      	add	r0, sp, #24
 801f82a:	47c0      	blx	r8
 801f82c:	a906      	add	r1, sp, #24
 801f82e:	4630      	mov	r0, r6
 801f830:	f7fd fe0a 	bl	801d448 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 801f834:	4628      	mov	r0, r5
 801f836:	b009      	add	sp, #36	; 0x24
 801f838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f83c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D0Ev>:
 801f83c:	b510      	push	{r4, lr}
 801f83e:	4604      	mov	r4, r0
 801f840:	2104      	movs	r1, #4
 801f842:	f007 f928 	bl	8026a96 <_ZdlPvj>
 801f846:	4620      	mov	r0, r4
 801f848:	bd10      	pop	{r4, pc}

0801f84a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED0Ev>:
 801f84a:	b510      	push	{r4, lr}
 801f84c:	4604      	mov	r4, r0
 801f84e:	2104      	movs	r1, #4
 801f850:	f007 f921 	bl	8026a96 <_ZdlPvj>
 801f854:	4620      	mov	r0, r4
 801f856:	bd10      	pop	{r4, pc}

0801f858 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D0Ev>:
 801f858:	b510      	push	{r4, lr}
 801f85a:	4604      	mov	r4, r0
 801f85c:	f640 0144 	movw	r1, #2116	; 0x844
 801f860:	f007 f919 	bl	8026a96 <_ZdlPvj>
 801f864:	4620      	mov	r0, r4
 801f866:	bd10      	pop	{r4, pc}

0801f868 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801f868:	b510      	push	{r4, lr}
 801f86a:	4604      	mov	r4, r0
 801f86c:	2104      	movs	r1, #4
 801f86e:	f007 f912 	bl	8026a96 <_ZdlPvj>
 801f872:	4620      	mov	r0, r4
 801f874:	bd10      	pop	{r4, pc}

0801f876 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801f876:	b510      	push	{r4, lr}
 801f878:	4604      	mov	r4, r0
 801f87a:	2104      	movs	r1, #4
 801f87c:	f007 f90b 	bl	8026a96 <_ZdlPvj>
 801f880:	4620      	mov	r0, r4
 801f882:	bd10      	pop	{r4, pc}

0801f884 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801f884:	b510      	push	{r4, lr}
 801f886:	4604      	mov	r4, r0
 801f888:	2104      	movs	r1, #4
 801f88a:	f007 f904 	bl	8026a96 <_ZdlPvj>
 801f88e:	4620      	mov	r0, r4
 801f890:	bd10      	pop	{r4, pc}

0801f892 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801f892:	b510      	push	{r4, lr}
 801f894:	4604      	mov	r4, r0
 801f896:	2104      	movs	r1, #4
 801f898:	f007 f8fd 	bl	8026a96 <_ZdlPvj>
 801f89c:	4620      	mov	r0, r4
 801f89e:	bd10      	pop	{r4, pc}

0801f8a0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801f8a0:	b510      	push	{r4, lr}
 801f8a2:	4604      	mov	r4, r0
 801f8a4:	2104      	movs	r1, #4
 801f8a6:	f007 f8f6 	bl	8026a96 <_ZdlPvj>
 801f8aa:	4620      	mov	r0, r4
 801f8ac:	bd10      	pop	{r4, pc}

0801f8ae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801f8ae:	b510      	push	{r4, lr}
 801f8b0:	4604      	mov	r4, r0
 801f8b2:	2104      	movs	r1, #4
 801f8b4:	f007 f8ef 	bl	8026a96 <_ZdlPvj>
 801f8b8:	4620      	mov	r0, r4
 801f8ba:	bd10      	pop	{r4, pc}

0801f8bc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801f8bc:	b510      	push	{r4, lr}
 801f8be:	4604      	mov	r4, r0
 801f8c0:	2104      	movs	r1, #4
 801f8c2:	f007 f8e8 	bl	8026a96 <_ZdlPvj>
 801f8c6:	4620      	mov	r0, r4
 801f8c8:	bd10      	pop	{r4, pc}

0801f8ca <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801f8ca:	b510      	push	{r4, lr}
 801f8cc:	4604      	mov	r4, r0
 801f8ce:	2104      	movs	r1, #4
 801f8d0:	f007 f8e1 	bl	8026a96 <_ZdlPvj>
 801f8d4:	4620      	mov	r0, r4
 801f8d6:	bd10      	pop	{r4, pc}

0801f8d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801f8d8:	b510      	push	{r4, lr}
 801f8da:	4604      	mov	r4, r0
 801f8dc:	2104      	movs	r1, #4
 801f8de:	f007 f8da 	bl	8026a96 <_ZdlPvj>
 801f8e2:	4620      	mov	r0, r4
 801f8e4:	bd10      	pop	{r4, pc}

0801f8e6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801f8e6:	b510      	push	{r4, lr}
 801f8e8:	4604      	mov	r4, r0
 801f8ea:	2104      	movs	r1, #4
 801f8ec:	f007 f8d3 	bl	8026a96 <_ZdlPvj>
 801f8f0:	4620      	mov	r0, r4
 801f8f2:	bd10      	pop	{r4, pc}

0801f8f4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801f8f4:	b510      	push	{r4, lr}
 801f8f6:	4604      	mov	r4, r0
 801f8f8:	2104      	movs	r1, #4
 801f8fa:	f007 f8cc 	bl	8026a96 <_ZdlPvj>
 801f8fe:	4620      	mov	r0, r4
 801f900:	bd10      	pop	{r4, pc}

0801f902 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801f902:	b510      	push	{r4, lr}
 801f904:	4604      	mov	r4, r0
 801f906:	2104      	movs	r1, #4
 801f908:	f007 f8c5 	bl	8026a96 <_ZdlPvj>
 801f90c:	4620      	mov	r0, r4
 801f90e:	bd10      	pop	{r4, pc}

0801f910 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801f910:	b510      	push	{r4, lr}
 801f912:	4604      	mov	r4, r0
 801f914:	2104      	movs	r1, #4
 801f916:	f007 f8be 	bl	8026a96 <_ZdlPvj>
 801f91a:	4620      	mov	r0, r4
 801f91c:	bd10      	pop	{r4, pc}

0801f91e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801f91e:	b510      	push	{r4, lr}
 801f920:	4604      	mov	r4, r0
 801f922:	2104      	movs	r1, #4
 801f924:	f007 f8b7 	bl	8026a96 <_ZdlPvj>
 801f928:	4620      	mov	r0, r4
 801f92a:	bd10      	pop	{r4, pc}

0801f92c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801f92c:	b510      	push	{r4, lr}
 801f92e:	4604      	mov	r4, r0
 801f930:	2104      	movs	r1, #4
 801f932:	f007 f8b0 	bl	8026a96 <_ZdlPvj>
 801f936:	4620      	mov	r0, r4
 801f938:	bd10      	pop	{r4, pc}

0801f93a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801f93a:	b510      	push	{r4, lr}
 801f93c:	4604      	mov	r4, r0
 801f93e:	2104      	movs	r1, #4
 801f940:	f007 f8a9 	bl	8026a96 <_ZdlPvj>
 801f944:	4620      	mov	r0, r4
 801f946:	bd10      	pop	{r4, pc}

0801f948 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801f948:	b510      	push	{r4, lr}
 801f94a:	4604      	mov	r4, r0
 801f94c:	2104      	movs	r1, #4
 801f94e:	f007 f8a2 	bl	8026a96 <_ZdlPvj>
 801f952:	4620      	mov	r0, r4
 801f954:	bd10      	pop	{r4, pc}

0801f956 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801f956:	b510      	push	{r4, lr}
 801f958:	4604      	mov	r4, r0
 801f95a:	2104      	movs	r1, #4
 801f95c:	f007 f89b 	bl	8026a96 <_ZdlPvj>
 801f960:	4620      	mov	r0, r4
 801f962:	bd10      	pop	{r4, pc}

0801f964 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801f964:	b510      	push	{r4, lr}
 801f966:	4604      	mov	r4, r0
 801f968:	2104      	movs	r1, #4
 801f96a:	f007 f894 	bl	8026a96 <_ZdlPvj>
 801f96e:	4620      	mov	r0, r4
 801f970:	bd10      	pop	{r4, pc}

0801f972 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801f972:	b510      	push	{r4, lr}
 801f974:	4604      	mov	r4, r0
 801f976:	2104      	movs	r1, #4
 801f978:	f007 f88d 	bl	8026a96 <_ZdlPvj>
 801f97c:	4620      	mov	r0, r4
 801f97e:	bd10      	pop	{r4, pc}

0801f980 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801f980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f984:	b08f      	sub	sp, #60	; 0x3c
 801f986:	461c      	mov	r4, r3
 801f988:	460e      	mov	r6, r1
 801f98a:	9206      	str	r2, [sp, #24]
 801f98c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801f990:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801f992:	9202      	str	r2, [sp, #8]
 801f994:	2a00      	cmp	r2, #0
 801f996:	f000 8128 	beq.w	801fbea <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26a>
 801f99a:	6820      	ldr	r0, [r4, #0]
 801f99c:	aa0a      	add	r2, sp, #40	; 0x28
 801f99e:	6861      	ldr	r1, [r4, #4]
 801f9a0:	c203      	stmia	r2!, {r0, r1}
 801f9a2:	6818      	ldr	r0, [r3, #0]
 801f9a4:	aa0c      	add	r2, sp, #48	; 0x30
 801f9a6:	6859      	ldr	r1, [r3, #4]
 801f9a8:	c203      	stmia	r2!, {r0, r1}
 801f9aa:	a80a      	add	r0, sp, #40	; 0x28
 801f9ac:	f7fa ff4e 	bl	801a84c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f9b0:	4621      	mov	r1, r4
 801f9b2:	a80c      	add	r0, sp, #48	; 0x30
 801f9b4:	f7fa ff72 	bl	801a89c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f9b8:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	; 0x2c
 801f9bc:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	; 0x2e
 801f9c0:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 801f9c4:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 801f9c8:	bfdb      	ittet	le
 801f9ca:	b2bb      	uxthle	r3, r7
 801f9cc:	f44f 6280 	movle.w	r2, #1024	; 0x400
 801f9d0:	2301      	movgt	r3, #1
 801f9d2:	fb92 f3f3 	sdivle	r3, r2, r3
 801f9d6:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801f9da:	441d      	add	r5, r3
 801f9dc:	fb92 f1f3 	sdiv	r1, r2, r3
 801f9e0:	fa1f fc81 	uxth.w	ip, r1
 801f9e4:	3d01      	subs	r5, #1
 801f9e6:	fb0c 2413 	mls	r4, ip, r3, r2
 801f9ea:	4661      	mov	r1, ip
 801f9ec:	fb14 f407 	smulbb	r4, r4, r7
 801f9f0:	4404      	add	r4, r0
 801f9f2:	fb95 f5f3 	sdiv	r5, r5, r3
 801f9f6:	b2a4      	uxth	r4, r4
 801f9f8:	b121      	cbz	r1, 801fa04 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x84>
 801f9fa:	9b06      	ldr	r3, [sp, #24]
 801f9fc:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801fa00:	ba1b      	rev	r3, r3
 801fa02:	441e      	add	r6, r3
 801fa04:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801fa08:	b2ad      	uxth	r5, r5
 801fa0a:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 801fa0e:	4418      	add	r0, r3
 801fa10:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801fa14:	f9bd 7036 	ldrsh.w	r7, [sp, #54]	; 0x36
 801fa18:	00ad      	lsls	r5, r5, #2
 801fa1a:	441a      	add	r2, r3
 801fa1c:	4b74      	ldr	r3, [pc, #464]	; (801fbf0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 801fa1e:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 801fa22:	6818      	ldr	r0, [r3, #0]
 801fa24:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 801fa28:	6803      	ldr	r3, [r0, #0]
 801fa2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fa2c:	4798      	blx	r3
 801fa2e:	4a71      	ldr	r2, [pc, #452]	; (801fbf4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>)
 801fa30:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 801fa34:	2c00      	cmp	r4, #0
 801fa36:	8813      	ldrh	r3, [r2, #0]
 801fa38:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801fa3c:	9209      	str	r2, [sp, #36]	; 0x24
 801fa3e:	fb03 c101 	mla	r1, r3, r1, ip
 801fa42:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801fa46:	fb03 f307 	mul.w	r3, r3, r7
 801fa4a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801fa4e:	9204      	str	r2, [sp, #16]
 801fa50:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fa54:	9a02      	ldr	r2, [sp, #8]
 801fa56:	4408      	add	r0, r1
 801fa58:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 801fa5c:	4403      	add	r3, r0
 801fa5e:	b292      	uxth	r2, r2
 801fa60:	9307      	str	r3, [sp, #28]
 801fa62:	f105 0304 	add.w	r3, r5, #4
 801fa66:	bf0c      	ite	eq
 801fa68:	4645      	moveq	r5, r8
 801fa6a:	2500      	movne	r5, #0
 801fa6c:	9308      	str	r3, [sp, #32]
 801fa6e:	2300      	movs	r3, #0
 801fa70:	b2ad      	uxth	r5, r5
 801fa72:	9205      	str	r2, [sp, #20]
 801fa74:	9303      	str	r3, [sp, #12]
 801fa76:	9a07      	ldr	r2, [sp, #28]
 801fa78:	4282      	cmp	r2, r0
 801fa7a:	f240 80b1 	bls.w	801fbe0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x260>
 801fa7e:	b95b      	cbnz	r3, 801fa98 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x118>
 801fa80:	7832      	ldrb	r2, [r6, #0]
 801fa82:	0993      	lsrs	r3, r2, #6
 801fa84:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801fa88:	9203      	str	r2, [sp, #12]
 801fa8a:	1e5a      	subs	r2, r3, #1
 801fa8c:	2a02      	cmp	r2, #2
 801fa8e:	bf8d      	iteet	hi
 801fa90:	7873      	ldrbhi	r3, [r6, #1]
 801fa92:	3601      	addls	r6, #1
 801fa94:	b29b      	uxthls	r3, r3
 801fa96:	3602      	addhi	r6, #2
 801fa98:	b184      	cbz	r4, 801fabc <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13c>
 801fa9a:	429c      	cmp	r4, r3
 801fa9c:	bf91      	iteee	ls
 801fa9e:	1b1c      	subls	r4, r3, r4
 801faa0:	1ae4      	subhi	r4, r4, r3
 801faa2:	4629      	movhi	r1, r5
 801faa4:	f04f 0e00 	movhi.w	lr, #0
 801faa8:	bf9b      	ittet	ls
 801faaa:	fa1f fe84 	uxthls.w	lr, r4
 801faae:	2400      	movls	r4, #0
 801fab0:	b2a4      	uxthhi	r4, r4
 801fab2:	fa1f f188 	uxthls.w	r1, r8
 801fab6:	4673      	mov	r3, lr
 801fab8:	460d      	mov	r5, r1
 801faba:	e7dc      	b.n	801fa76 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 801fabc:	2203      	movs	r2, #3
 801fabe:	9908      	ldr	r1, [sp, #32]
 801fac0:	42ab      	cmp	r3, r5
 801fac2:	4617      	mov	r7, r2
 801fac4:	9a03      	ldr	r2, [sp, #12]
 801fac6:	bf24      	itt	cs
 801fac8:	eba3 0e05 	subcs.w	lr, r3, r5
 801facc:	9501      	strcs	r5, [sp, #4]
 801face:	fb17 1702 	smlabb	r7, r7, r2, r1
 801fad2:	9a06      	ldr	r2, [sp, #24]
 801fad4:	bf34      	ite	cc
 801fad6:	1ae9      	subcc	r1, r5, r3
 801fad8:	fa1f fe8e 	uxthcs.w	lr, lr
 801fadc:	4417      	add	r7, r2
 801fade:	9a02      	ldr	r2, [sp, #8]
 801fae0:	bf2f      	iteee	cs
 801fae2:	4621      	movcs	r1, r4
 801fae4:	b289      	uxthcc	r1, r1
 801fae6:	9301      	strcc	r3, [sp, #4]
 801fae8:	46a6      	movcc	lr, r4
 801faea:	2aff      	cmp	r2, #255	; 0xff
 801faec:	d11e      	bne.n	801fb2c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ac>
 801faee:	4681      	mov	r9, r0
 801faf0:	f8dd c004 	ldr.w	ip, [sp, #4]
 801faf4:	f109 0903 	add.w	r9, r9, #3
 801faf8:	f1bc 0f00 	cmp.w	ip, #0
 801fafc:	d15f      	bne.n	801fbbe <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x23e>
 801fafe:	9a01      	ldr	r2, [sp, #4]
 801fb00:	42ab      	cmp	r3, r5
 801fb02:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fb06:	4410      	add	r0, r2
 801fb08:	d3d5      	bcc.n	801fab6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 801fb0a:	fa1f f188 	uxth.w	r1, r8
 801fb0e:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 801fb12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fb14:	1a64      	subs	r4, r4, r1
 801fb16:	881b      	ldrh	r3, [r3, #0]
 801fb18:	b2a4      	uxth	r4, r4
 801fb1a:	eba3 0308 	sub.w	r3, r3, r8
 801fb1e:	2c00      	cmp	r4, #0
 801fb20:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fb24:	bf18      	it	ne
 801fb26:	2100      	movne	r1, #0
 801fb28:	4418      	add	r0, r3
 801fb2a:	e7c4      	b.n	801fab6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 801fb2c:	4684      	mov	ip, r0
 801fb2e:	f8dd a004 	ldr.w	sl, [sp, #4]
 801fb32:	f10c 0c03 	add.w	ip, ip, #3
 801fb36:	f1ba 0f00 	cmp.w	sl, #0
 801fb3a:	d0e0      	beq.n	801fafe <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 801fb3c:	f81c bc03 	ldrb.w	fp, [ip, #-3]
 801fb40:	f10a 3aff 	add.w	sl, sl, #4294967295
 801fb44:	9a05      	ldr	r2, [sp, #20]
 801fb46:	f897 9000 	ldrb.w	r9, [r7]
 801fb4a:	fa1f fa8a 	uxth.w	sl, sl
 801fb4e:	fb1b fb02 	smulbb	fp, fp, r2
 801fb52:	9a04      	ldr	r2, [sp, #16]
 801fb54:	fb09 b902 	mla	r9, r9, r2, fp
 801fb58:	9a05      	ldr	r2, [sp, #20]
 801fb5a:	fa1f f989 	uxth.w	r9, r9
 801fb5e:	f109 0b01 	add.w	fp, r9, #1
 801fb62:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801fb66:	f81c bc02 	ldrb.w	fp, [ip, #-2]
 801fb6a:	fb1b fb02 	smulbb	fp, fp, r2
 801fb6e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fb72:	9a04      	ldr	r2, [sp, #16]
 801fb74:	f80c 9c03 	strb.w	r9, [ip, #-3]
 801fb78:	f897 9001 	ldrb.w	r9, [r7, #1]
 801fb7c:	fb09 b902 	mla	r9, r9, r2, fp
 801fb80:	9a05      	ldr	r2, [sp, #20]
 801fb82:	fa1f f989 	uxth.w	r9, r9
 801fb86:	f109 0b01 	add.w	fp, r9, #1
 801fb8a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801fb8e:	f81c bc01 	ldrb.w	fp, [ip, #-1]
 801fb92:	fb1b fb02 	smulbb	fp, fp, r2
 801fb96:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fb9a:	9a04      	ldr	r2, [sp, #16]
 801fb9c:	f80c 9c02 	strb.w	r9, [ip, #-2]
 801fba0:	f897 9002 	ldrb.w	r9, [r7, #2]
 801fba4:	fb09 b902 	mla	r9, r9, r2, fp
 801fba8:	fa1f f989 	uxth.w	r9, r9
 801fbac:	f109 0b01 	add.w	fp, r9, #1
 801fbb0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801fbb4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fbb8:	f80c 9c01 	strb.w	r9, [ip, #-1]
 801fbbc:	e7b9      	b.n	801fb32 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1b2>
 801fbbe:	f897 a000 	ldrb.w	sl, [r7]
 801fbc2:	f10c 3cff 	add.w	ip, ip, #4294967295
 801fbc6:	f809 ac03 	strb.w	sl, [r9, #-3]
 801fbca:	fa1f fc8c 	uxth.w	ip, ip
 801fbce:	f897 a001 	ldrb.w	sl, [r7, #1]
 801fbd2:	f809 ac02 	strb.w	sl, [r9, #-2]
 801fbd6:	f897 a002 	ldrb.w	sl, [r7, #2]
 801fbda:	f809 ac01 	strb.w	sl, [r9, #-1]
 801fbde:	e789      	b.n	801faf4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x174>
 801fbe0:	4b03      	ldr	r3, [pc, #12]	; (801fbf0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 801fbe2:	6818      	ldr	r0, [r3, #0]
 801fbe4:	6803      	ldr	r3, [r0, #0]
 801fbe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fbe8:	4798      	blx	r3
 801fbea:	b00f      	add	sp, #60	; 0x3c
 801fbec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fbf0:	24006d38 	.word	0x24006d38
 801fbf4:	24006d32 	.word	0x24006d32

0801fbf8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801fbf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fbfc:	b09b      	sub	sp, #108	; 0x6c
 801fbfe:	461d      	mov	r5, r3
 801fc00:	4604      	mov	r4, r0
 801fc02:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fc04:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
 801fc08:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
 801fc0c:	9208      	str	r2, [sp, #32]
 801fc0e:	2a00      	cmp	r2, #0
 801fc10:	f000 81f3 	beq.w	801fffa <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x402>
 801fc14:	6828      	ldr	r0, [r5, #0]
 801fc16:	aa16      	add	r2, sp, #88	; 0x58
 801fc18:	6869      	ldr	r1, [r5, #4]
 801fc1a:	c203      	stmia	r2!, {r0, r1}
 801fc1c:	6818      	ldr	r0, [r3, #0]
 801fc1e:	aa18      	add	r2, sp, #96	; 0x60
 801fc20:	6859      	ldr	r1, [r3, #4]
 801fc22:	c203      	stmia	r2!, {r0, r1}
 801fc24:	a816      	add	r0, sp, #88	; 0x58
 801fc26:	f7fa fe11 	bl	801a84c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fc2a:	4629      	mov	r1, r5
 801fc2c:	a818      	add	r0, sp, #96	; 0x60
 801fc2e:	f7fa fe35 	bl	801a89c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801fc32:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 801fc36:	f9bd 605e 	ldrsh.w	r6, [sp, #94]	; 0x5e
 801fc3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801fc3e:	f9bd 5066 	ldrsh.w	r5, [sp, #102]	; 0x66
 801fc42:	bfdb      	ittet	le
 801fc44:	b29a      	uxthle	r2, r3
 801fc46:	f44f 6180 	movle.w	r1, #1024	; 0x400
 801fc4a:	f04f 0a01 	movgt.w	sl, #1
 801fc4e:	fb91 faf2 	sdivle	sl, r1, r2
 801fc52:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	; 0x62
 801fc56:	4456      	add	r6, sl
 801fc58:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
 801fc5c:	3e01      	subs	r6, #1
 801fc5e:	fb92 f0fa 	sdiv	r0, r2, sl
 801fc62:	b280      	uxth	r0, r0
 801fc64:	fb00 281a 	mls	r8, r0, sl, r2
 801fc68:	900e      	str	r0, [sp, #56]	; 0x38
 801fc6a:	fb18 f803 	smulbb	r8, r8, r3
 801fc6e:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 801fc72:	4488      	add	r8, r1
 801fc74:	4419      	add	r1, r3
 801fc76:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
 801fc7a:	f8ad 1060 	strh.w	r1, [sp, #96]	; 0x60
 801fc7e:	fa1f f888 	uxth.w	r8, r8
 801fc82:	441a      	add	r2, r3
 801fc84:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 801fc88:	9303      	str	r3, [sp, #12]
 801fc8a:	4b9c      	ldr	r3, [pc, #624]	; (801fefc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
 801fc8c:	f8ad 2062 	strh.w	r2, [sp, #98]	; 0x62
 801fc90:	6818      	ldr	r0, [r3, #0]
 801fc92:	6803      	ldr	r3, [r0, #0]
 801fc94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fc96:	4798      	blx	r3
 801fc98:	4b99      	ldr	r3, [pc, #612]	; (801ff00 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>)
 801fc9a:	f9bd 1062 	ldrsh.w	r1, [sp, #98]	; 0x62
 801fc9e:	f1b8 0f00 	cmp.w	r8, #0
 801fca2:	881a      	ldrh	r2, [r3, #0]
 801fca4:	f9bd 7060 	ldrsh.w	r7, [sp, #96]	; 0x60
 801fca8:	fb02 f505 	mul.w	r5, r2, r5
 801fcac:	fb02 7101 	mla	r1, r2, r1, r7
 801fcb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fcb4:	9314      	str	r3, [sp, #80]	; 0x50
 801fcb6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801fcba:	9b08      	ldr	r3, [sp, #32]
 801fcbc:	fb96 f6fa 	sdiv	r6, r6, sl
 801fcc0:	4408      	add	r0, r1
 801fcc2:	f106 0601 	add.w	r6, r6, #1
 801fcc6:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 801fcca:	f04f 0100 	mov.w	r1, #0
 801fcce:	eb00 0205 	add.w	r2, r0, r5
 801fcd2:	b2b6      	uxth	r6, r6
 801fcd4:	b29b      	uxth	r3, r3
 801fcd6:	910b      	str	r1, [sp, #44]	; 0x2c
 801fcd8:	9209      	str	r2, [sp, #36]	; 0x24
 801fcda:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fcdc:	930d      	str	r3, [sp, #52]	; 0x34
 801fcde:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801fce2:	4b88      	ldr	r3, [pc, #544]	; (801ff04 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30c>)
 801fce4:	f106 0204 	add.w	r2, r6, #4
 801fce8:	eba3 0304 	sub.w	r3, r3, r4
 801fcec:	9205      	str	r2, [sp, #20]
 801fcee:	9a03      	ldr	r2, [sp, #12]
 801fcf0:	bf18      	it	ne
 801fcf2:	2200      	movne	r2, #0
 801fcf4:	9315      	str	r3, [sp, #84]	; 0x54
 801fcf6:	b292      	uxth	r2, r2
 801fcf8:	990e      	ldr	r1, [sp, #56]	; 0x38
 801fcfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fcfc:	fa11 f383 	uxtah	r3, r1, r3
 801fd00:	9911      	ldr	r1, [sp, #68]	; 0x44
 801fd02:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801fd06:	3304      	adds	r3, #4
 801fd08:	9306      	str	r3, [sp, #24]
 801fd0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fd0c:	4283      	cmp	r3, r0
 801fd0e:	f240 816f 	bls.w	801fff0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f8>
 801fd12:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 801fd16:	f04f 0900 	mov.w	r9, #0
 801fd1a:	9d06      	ldr	r5, [sp, #24]
 801fd1c:	fbb8 f3f3 	udiv	r3, r8, r3
 801fd20:	ebaa 0303 	sub.w	r3, sl, r3
 801fd24:	782d      	ldrb	r5, [r5, #0]
 801fd26:	b29b      	uxth	r3, r3
 801fd28:	950f      	str	r5, [sp, #60]	; 0x3c
 801fd2a:	3501      	adds	r5, #1
 801fd2c:	9312      	str	r3, [sp, #72]	; 0x48
 801fd2e:	9b06      	ldr	r3, [sp, #24]
 801fd30:	9504      	str	r5, [sp, #16]
 801fd32:	7859      	ldrb	r1, [r3, #1]
 801fd34:	789b      	ldrb	r3, [r3, #2]
 801fd36:	021b      	lsls	r3, r3, #8
 801fd38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801fd3c:	9906      	ldr	r1, [sp, #24]
 801fd3e:	78c9      	ldrb	r1, [r1, #3]
 801fd40:	430b      	orrs	r3, r1
 801fd42:	9910      	ldr	r1, [sp, #64]	; 0x40
 801fd44:	4419      	add	r1, r3
 801fd46:	1c4d      	adds	r5, r1, #1
 801fd48:	7849      	ldrb	r1, [r1, #1]
 801fd4a:	9502      	str	r5, [sp, #8]
 801fd4c:	0209      	lsls	r1, r1, #8
 801fd4e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801fd50:	f401 71ff 	and.w	r1, r1, #510	; 0x1fe
 801fd54:	5ceb      	ldrb	r3, [r5, r3]
 801fd56:	4319      	orrs	r1, r3
 801fd58:	b28b      	uxth	r3, r1
 801fd5a:	f884 1804 	strb.w	r1, [r4, #2052]	; 0x804
 801fd5e:	930a      	str	r3, [sp, #40]	; 0x28
 801fd60:	2300      	movs	r3, #0
 801fd62:	9307      	str	r3, [sp, #28]
 801fd64:	2301      	movs	r3, #1
 801fd66:	e9cd 3300 	strd	r3, r3, [sp]
 801fd6a:	469c      	mov	ip, r3
 801fd6c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801fd70:	930c      	str	r3, [sp, #48]	; 0x30
 801fd72:	f1b8 0f00 	cmp.w	r8, #0
 801fd76:	f000 8082 	beq.w	801fe7e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x286>
 801fd7a:	45c4      	cmp	ip, r8
 801fd7c:	d270      	bcs.n	801fe60 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 801fd7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fd80:	eba8 080c 	sub.w	r8, r8, ip
 801fd84:	4611      	mov	r1, r2
 801fd86:	4283      	cmp	r3, r0
 801fd88:	fa1f f888 	uxth.w	r8, r8
 801fd8c:	d802      	bhi.n	801fd94 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
 801fd8e:	e074      	b.n	801fe7a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x282>
 801fd90:	2b00      	cmp	r3, #0
 801fd92:	d15f      	bne.n	801fe54 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25c>
 801fd94:	9b02      	ldr	r3, [sp, #8]
 801fd96:	9a01      	ldr	r2, [sp, #4]
 801fd98:	785b      	ldrb	r3, [r3, #1]
 801fd9a:	f1c2 0207 	rsb	r2, r2, #7
 801fd9e:	9d01      	ldr	r5, [sp, #4]
 801fda0:	4093      	lsls	r3, r2
 801fda2:	005b      	lsls	r3, r3, #1
 801fda4:	f403 72ff 	and.w	r2, r3, #510	; 0x1fe
 801fda8:	9b02      	ldr	r3, [sp, #8]
 801fdaa:	781b      	ldrb	r3, [r3, #0]
 801fdac:	412b      	asrs	r3, r5
 801fdae:	b2db      	uxtb	r3, r3
 801fdb0:	4313      	orrs	r3, r2
 801fdb2:	462a      	mov	r2, r5
 801fdb4:	3201      	adds	r2, #1
 801fdb6:	b29e      	uxth	r6, r3
 801fdb8:	b2d2      	uxtb	r2, r2
 801fdba:	2a08      	cmp	r2, #8
 801fdbc:	9201      	str	r2, [sp, #4]
 801fdbe:	9a02      	ldr	r2, [sp, #8]
 801fdc0:	bf09      	itett	eq
 801fdc2:	3202      	addeq	r2, #2
 801fdc4:	3201      	addne	r2, #1
 801fdc6:	9202      	streq	r2, [sp, #8]
 801fdc8:	2200      	moveq	r2, #0
 801fdca:	bf14      	ite	ne
 801fdcc:	9202      	strne	r2, [sp, #8]
 801fdce:	9201      	streq	r2, [sp, #4]
 801fdd0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fdd2:	42b2      	cmp	r2, r6
 801fdd4:	d309      	bcc.n	801fdea <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
 801fdd6:	f884 3804 	strb.w	r3, [r4, #2052]	; 0x804
 801fdda:	2301      	movs	r3, #1
 801fddc:	9a04      	ldr	r2, [sp, #16]
 801fdde:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 801fde2:	d30e      	bcc.n	801fe02 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
 801fde4:	9300      	str	r3, [sp, #0]
 801fde6:	2500      	movs	r5, #0
 801fde8:	e035      	b.n	801fe56 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25e>
 801fdea:	9b04      	ldr	r3, [sp, #16]
 801fdec:	429e      	cmp	r6, r3
 801fdee:	d318      	bcc.n	801fe22 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
 801fdf0:	9b00      	ldr	r3, [sp, #0]
 801fdf2:	f894 2804 	ldrb.w	r2, [r4, #2052]	; 0x804
 801fdf6:	18e3      	adds	r3, r4, r3
 801fdf8:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
 801fdfc:	9b00      	ldr	r3, [sp, #0]
 801fdfe:	3301      	adds	r3, #1
 801fe00:	b29b      	uxth	r3, r3
 801fe02:	9a04      	ldr	r2, [sp, #16]
 801fe04:	f894 5804 	ldrb.w	r5, [r4, #2052]	; 0x804
 801fe08:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801fe0c:	9f00      	ldr	r7, [sp, #0]
 801fe0e:	7115      	strb	r5, [r2, #4]
 801fe10:	3701      	adds	r7, #1
 801fe12:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801fe14:	7157      	strb	r7, [r2, #5]
 801fe16:	80d5      	strh	r5, [r2, #6]
 801fe18:	9a04      	ldr	r2, [sp, #16]
 801fe1a:	3201      	adds	r2, #1
 801fe1c:	b292      	uxth	r2, r2
 801fe1e:	9204      	str	r2, [sp, #16]
 801fe20:	e7e0      	b.n	801fde4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ec>
 801fe22:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801fe26:	4632      	mov	r2, r6
 801fe28:	795b      	ldrb	r3, [r3, #5]
 801fe2a:	f603 0504 	addw	r5, r3, #2052	; 0x804
 801fe2e:	4425      	add	r5, r4
 801fe30:	9f15      	ldr	r7, [sp, #84]	; 0x54
 801fe32:	eb07 0c05 	add.w	ip, r7, r5
 801fe36:	f1bc 0f00 	cmp.w	ip, #0
 801fe3a:	dd07      	ble.n	801fe4c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x254>
 801fe3c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801fe40:	f892 c004 	ldrb.w	ip, [r2, #4]
 801fe44:	f805 cd01 	strb.w	ip, [r5, #-1]!
 801fe48:	88d2      	ldrh	r2, [r2, #6]
 801fe4a:	e7f1      	b.n	801fe30 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
 801fe4c:	f884 2804 	strb.w	r2, [r4, #2052]	; 0x804
 801fe50:	b29b      	uxth	r3, r3
 801fe52:	e7c3      	b.n	801fddc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e4>
 801fe54:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801fe56:	460a      	mov	r2, r1
 801fe58:	960a      	str	r6, [sp, #40]	; 0x28
 801fe5a:	46a9      	mov	r9, r5
 801fe5c:	469c      	mov	ip, r3
 801fe5e:	e788      	b.n	801fd72 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17a>
 801fe60:	ebac 0308 	sub.w	r3, ip, r8
 801fe64:	eb09 0508 	add.w	r5, r9, r8
 801fe68:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801fe6c:	b29b      	uxth	r3, r3
 801fe6e:	b2ad      	uxth	r5, r5
 801fe70:	f04f 0800 	mov.w	r8, #0
 801fe74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fe76:	4282      	cmp	r2, r0
 801fe78:	d88a      	bhi.n	801fd90 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x198>
 801fe7a:	460a      	mov	r2, r1
 801fe7c:	e745      	b.n	801fd0a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x112>
 801fe7e:	4594      	cmp	ip, r2
 801fe80:	9d08      	ldr	r5, [sp, #32]
 801fe82:	4686      	mov	lr, r0
 801fe84:	bf27      	ittee	cs
 801fe86:	ebac 0302 	subcs.w	r3, ip, r2
 801fe8a:	4616      	movcs	r6, r2
 801fe8c:	eba2 010c 	subcc.w	r1, r2, ip
 801fe90:	4666      	movcc	r6, ip
 801fe92:	bf27      	ittee	cs
 801fe94:	b29b      	uxthcs	r3, r3
 801fe96:	4641      	movcs	r1, r8
 801fe98:	b289      	uxthcc	r1, r1
 801fe9a:	4643      	movcc	r3, r8
 801fe9c:	2dff      	cmp	r5, #255	; 0xff
 801fe9e:	eb09 0506 	add.w	r5, r9, r6
 801fea2:	b2ad      	uxth	r5, r5
 801fea4:	d130      	bne.n	801ff08 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 801fea6:	45a9      	cmp	r9, r5
 801fea8:	f10e 0e03 	add.w	lr, lr, #3
 801feac:	d17a      	bne.n	801ffa4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ac>
 801feae:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801feb2:	4594      	cmp	ip, r2
 801feb4:	4430      	add	r0, r6
 801feb6:	d3db      	bcc.n	801fe70 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 801feb8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801feba:	9903      	ldr	r1, [sp, #12]
 801febc:	8812      	ldrh	r2, [r2, #0]
 801febe:	1a52      	subs	r2, r2, r1
 801fec0:	9912      	ldr	r1, [sp, #72]	; 0x48
 801fec2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fec6:	4410      	add	r0, r2
 801fec8:	9a07      	ldr	r2, [sp, #28]
 801feca:	3201      	adds	r2, #1
 801fecc:	428a      	cmp	r2, r1
 801fece:	9207      	str	r2, [sp, #28]
 801fed0:	f040 8081 	bne.w	801ffd6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3de>
 801fed4:	f8bd 8060 	ldrh.w	r8, [sp, #96]	; 0x60
 801fed8:	f8bd c058 	ldrh.w	ip, [sp, #88]	; 0x58
 801fedc:	9b03      	ldr	r3, [sp, #12]
 801fede:	eba8 080c 	sub.w	r8, r8, ip
 801fee2:	fa1f f888 	uxth.w	r8, r8
 801fee6:	f1b8 0f00 	cmp.w	r8, #0
 801feea:	bf08      	it	eq
 801feec:	461a      	moveq	r2, r3
 801feee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fef0:	bf18      	it	ne
 801fef2:	2200      	movne	r2, #0
 801fef4:	3301      	adds	r3, #1
 801fef6:	b292      	uxth	r2, r2
 801fef8:	930b      	str	r3, [sp, #44]	; 0x2c
 801fefa:	e6fd      	b.n	801fcf8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x100>
 801fefc:	24006d38 	.word	0x24006d38
 801ff00:	24006d32 	.word	0x24006d32
 801ff04:	fffff7fb 	.word	0xfffff7fb
 801ff08:	45a9      	cmp	r9, r5
 801ff0a:	f10e 0e03 	add.w	lr, lr, #3
 801ff0e:	d0ce      	beq.n	801feae <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b6>
 801ff10:	f109 0701 	add.w	r7, r9, #1
 801ff14:	44a1      	add	r9, r4
 801ff16:	f81e bc03 	ldrb.w	fp, [lr, #-3]
 801ff1a:	f899 8804 	ldrb.w	r8, [r9, #2052]	; 0x804
 801ff1e:	9713      	str	r7, [sp, #76]	; 0x4c
 801ff20:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801ff24:	9f05      	ldr	r7, [sp, #20]
 801ff26:	eb07 0908 	add.w	r9, r7, r8
 801ff2a:	f817 8008 	ldrb.w	r8, [r7, r8]
 801ff2e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801ff30:	fb1b fb07 	smulbb	fp, fp, r7
 801ff34:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801ff36:	fb08 b807 	mla	r8, r8, r7, fp
 801ff3a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801ff3c:	fa1f f888 	uxth.w	r8, r8
 801ff40:	f108 0b01 	add.w	fp, r8, #1
 801ff44:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801ff48:	f81e bc02 	ldrb.w	fp, [lr, #-2]
 801ff4c:	fb1b fb07 	smulbb	fp, fp, r7
 801ff50:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ff54:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801ff56:	f80e 8c03 	strb.w	r8, [lr, #-3]
 801ff5a:	f899 8001 	ldrb.w	r8, [r9, #1]
 801ff5e:	fb08 b807 	mla	r8, r8, r7, fp
 801ff62:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801ff64:	fa1f f888 	uxth.w	r8, r8
 801ff68:	f108 0b01 	add.w	fp, r8, #1
 801ff6c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801ff70:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ff74:	f80e 8c02 	strb.w	r8, [lr, #-2]
 801ff78:	f899 8002 	ldrb.w	r8, [r9, #2]
 801ff7c:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
 801ff80:	fb19 f907 	smulbb	r9, r9, r7
 801ff84:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801ff86:	fb08 9807 	mla	r8, r8, r7, r9
 801ff8a:	fa1f f888 	uxth.w	r8, r8
 801ff8e:	f108 0901 	add.w	r9, r8, #1
 801ff92:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 801ff96:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
 801ff9a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ff9e:	f80e 8c01 	strb.w	r8, [lr, #-1]
 801ffa2:	e7b1      	b.n	801ff08 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 801ffa4:	f109 0b01 	add.w	fp, r9, #1
 801ffa8:	44a1      	add	r9, r4
 801ffaa:	9f05      	ldr	r7, [sp, #20]
 801ffac:	f899 8804 	ldrb.w	r8, [r9, #2052]	; 0x804
 801ffb0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801ffb4:	eb07 0908 	add.w	r9, r7, r8
 801ffb8:	f817 8008 	ldrb.w	r8, [r7, r8]
 801ffbc:	f80e 8c03 	strb.w	r8, [lr, #-3]
 801ffc0:	f899 8001 	ldrb.w	r8, [r9, #1]
 801ffc4:	f80e 8c02 	strb.w	r8, [lr, #-2]
 801ffc8:	f899 8002 	ldrb.w	r8, [r9, #2]
 801ffcc:	fa1f f98b 	uxth.w	r9, fp
 801ffd0:	f80e 8c01 	strb.w	r8, [lr, #-1]
 801ffd4:	e767      	b.n	801fea6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ae>
 801ffd6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801ffda:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 801ffde:	eba8 0801 	sub.w	r8, r8, r1
 801ffe2:	fa1f f888 	uxth.w	r8, r8
 801ffe6:	f1b8 0f00 	cmp.w	r8, #0
 801ffea:	bf18      	it	ne
 801ffec:	2100      	movne	r1, #0
 801ffee:	e741      	b.n	801fe74 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>
 801fff0:	4b03      	ldr	r3, [pc, #12]	; (8020000 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x408>)
 801fff2:	6818      	ldr	r0, [r3, #0]
 801fff4:	6803      	ldr	r3, [r0, #0]
 801fff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fff8:	4798      	blx	r3
 801fffa:	b01b      	add	sp, #108	; 0x6c
 801fffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020000:	24006d38 	.word	0x24006d38

08020004 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8020004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020008:	b09d      	sub	sp, #116	; 0x74
 802000a:	461d      	mov	r5, r3
 802000c:	4604      	mov	r4, r0
 802000e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020010:	e9cd 120f 	strd	r1, r2, [sp, #60]	; 0x3c
 8020014:	f89d 209c 	ldrb.w	r2, [sp, #156]	; 0x9c
 8020018:	920c      	str	r2, [sp, #48]	; 0x30
 802001a:	2a00      	cmp	r2, #0
 802001c:	f000 81de 	beq.w	80203dc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d8>
 8020020:	6828      	ldr	r0, [r5, #0]
 8020022:	aa18      	add	r2, sp, #96	; 0x60
 8020024:	6869      	ldr	r1, [r5, #4]
 8020026:	c203      	stmia	r2!, {r0, r1}
 8020028:	6818      	ldr	r0, [r3, #0]
 802002a:	aa1a      	add	r2, sp, #104	; 0x68
 802002c:	6859      	ldr	r1, [r3, #4]
 802002e:	c203      	stmia	r2!, {r0, r1}
 8020030:	a818      	add	r0, sp, #96	; 0x60
 8020032:	f7fa fc0b 	bl	801a84c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020036:	4629      	mov	r1, r5
 8020038:	a81a      	add	r0, sp, #104	; 0x68
 802003a:	f7fa fc2f 	bl	801a89c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802003e:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 8020042:	f9bd 7066 	ldrsh.w	r7, [sp, #102]	; 0x66
 8020046:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802004a:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	; 0x6e
 802004e:	bfdb      	ittet	le
 8020050:	b29a      	uxthle	r2, r3
 8020052:	f44f 6180 	movle.w	r1, #1024	; 0x400
 8020056:	2201      	movgt	r2, #1
 8020058:	fb91 f2f2 	sdivle	r2, r1, r2
 802005c:	9201      	str	r2, [sp, #4]
 802005e:	9801      	ldr	r0, [sp, #4]
 8020060:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
 8020064:	9901      	ldr	r1, [sp, #4]
 8020066:	fb92 f0f0 	sdiv	r0, r2, r0
 802006a:	b280      	uxth	r0, r0
 802006c:	440f      	add	r7, r1
 802006e:	900d      	str	r0, [sp, #52]	; 0x34
 8020070:	3f01      	subs	r7, #1
 8020072:	9801      	ldr	r0, [sp, #4]
 8020074:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8020076:	fb05 2510 	mls	r5, r5, r0, r2
 802007a:	fb97 f7f1 	sdiv	r7, r7, r1
 802007e:	fb15 f503 	smulbb	r5, r5, r3
 8020082:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
 8020086:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 802008a:	3701      	adds	r7, #1
 802008c:	440d      	add	r5, r1
 802008e:	4419      	add	r1, r3
 8020090:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
 8020094:	b2bf      	uxth	r7, r7
 8020096:	441a      	add	r2, r3
 8020098:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 802009c:	f8ad 1068 	strh.w	r1, [sp, #104]	; 0x68
 80200a0:	00bf      	lsls	r7, r7, #2
 80200a2:	9304      	str	r3, [sp, #16]
 80200a4:	b2ad      	uxth	r5, r5
 80200a6:	4bb0      	ldr	r3, [pc, #704]	; (8020368 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x364>)
 80200a8:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
 80200ac:	6818      	ldr	r0, [r3, #0]
 80200ae:	6803      	ldr	r3, [r0, #0]
 80200b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80200b2:	4798      	blx	r3
 80200b4:	4bad      	ldr	r3, [pc, #692]	; (802036c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x368>)
 80200b6:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	; 0x6a
 80200ba:	2d00      	cmp	r5, #0
 80200bc:	881a      	ldrh	r2, [r3, #0]
 80200be:	f9bd c068 	ldrsh.w	ip, [sp, #104]	; 0x68
 80200c2:	fb02 f606 	mul.w	r6, r2, r6
 80200c6:	fb02 c101 	mla	r1, r2, r1, ip
 80200ca:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80200ce:	9316      	str	r3, [sp, #88]	; 0x58
 80200d0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80200d4:	4ba6      	ldr	r3, [pc, #664]	; (8020370 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 80200d6:	eb00 0801 	add.w	r8, r0, r1
 80200da:	bf18      	it	ne
 80200dc:	2100      	movne	r1, #0
 80200de:	eba3 0304 	sub.w	r3, r3, r4
 80200e2:	eb08 0206 	add.w	r2, r8, r6
 80200e6:	9317      	str	r3, [sp, #92]	; 0x5c
 80200e8:	9208      	str	r2, [sp, #32]
 80200ea:	f107 0204 	add.w	r2, r7, #4
 80200ee:	9211      	str	r2, [sp, #68]	; 0x44
 80200f0:	9a04      	ldr	r2, [sp, #16]
 80200f2:	bf08      	it	eq
 80200f4:	4611      	moveq	r1, r2
 80200f6:	2200      	movs	r2, #0
 80200f8:	b289      	uxth	r1, r1
 80200fa:	920b      	str	r2, [sp, #44]	; 0x2c
 80200fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80200fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020100:	fa12 f383 	uxtah	r3, r2, r3
 8020104:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020106:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802010a:	3304      	adds	r3, #4
 802010c:	9306      	str	r3, [sp, #24]
 802010e:	9b08      	ldr	r3, [sp, #32]
 8020110:	4543      	cmp	r3, r8
 8020112:	f240 815e 	bls.w	80203d2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ce>
 8020116:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 802011a:	f04f 0b01 	mov.w	fp, #1
 802011e:	9a01      	ldr	r2, [sp, #4]
 8020120:	9806      	ldr	r0, [sp, #24]
 8020122:	465e      	mov	r6, fp
 8020124:	f8cd b008 	str.w	fp, [sp, #8]
 8020128:	7800      	ldrb	r0, [r0, #0]
 802012a:	fbb5 f3f3 	udiv	r3, r5, r3
 802012e:	1ad3      	subs	r3, r2, r3
 8020130:	900e      	str	r0, [sp, #56]	; 0x38
 8020132:	3001      	adds	r0, #1
 8020134:	b29b      	uxth	r3, r3
 8020136:	9005      	str	r0, [sp, #20]
 8020138:	9312      	str	r3, [sp, #72]	; 0x48
 802013a:	9b06      	ldr	r3, [sp, #24]
 802013c:	785a      	ldrb	r2, [r3, #1]
 802013e:	789b      	ldrb	r3, [r3, #2]
 8020140:	021b      	lsls	r3, r3, #8
 8020142:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020146:	9a06      	ldr	r2, [sp, #24]
 8020148:	78d2      	ldrb	r2, [r2, #3]
 802014a:	4313      	orrs	r3, r2
 802014c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802014e:	441a      	add	r2, r3
 8020150:	1c50      	adds	r0, r2, #1
 8020152:	7852      	ldrb	r2, [r2, #1]
 8020154:	9003      	str	r0, [sp, #12]
 8020156:	0212      	lsls	r2, r2, #8
 8020158:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802015a:	f402 72ff 	and.w	r2, r2, #510	; 0x1fe
 802015e:	5cc3      	ldrb	r3, [r0, r3]
 8020160:	431a      	orrs	r2, r3
 8020162:	b293      	uxth	r3, r2
 8020164:	f884 2804 	strb.w	r2, [r4, #2052]	; 0x804
 8020168:	930a      	str	r3, [sp, #40]	; 0x28
 802016a:	2300      	movs	r3, #0
 802016c:	461a      	mov	r2, r3
 802016e:	9307      	str	r3, [sp, #28]
 8020170:	2d00      	cmp	r5, #0
 8020172:	d07c      	beq.n	802026e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 8020174:	42ae      	cmp	r6, r5
 8020176:	d26c      	bcs.n	8020252 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x24e>
 8020178:	9b08      	ldr	r3, [sp, #32]
 802017a:	1bad      	subs	r5, r5, r6
 802017c:	4608      	mov	r0, r1
 802017e:	4543      	cmp	r3, r8
 8020180:	b2ad      	uxth	r5, r5
 8020182:	d802      	bhi.n	802018a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x186>
 8020184:	e071      	b.n	802026a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
 8020186:	2b00      	cmp	r3, #0
 8020188:	d15d      	bne.n	8020246 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x242>
 802018a:	9b03      	ldr	r3, [sp, #12]
 802018c:	9a02      	ldr	r2, [sp, #8]
 802018e:	785b      	ldrb	r3, [r3, #1]
 8020190:	f1c2 0207 	rsb	r2, r2, #7
 8020194:	9902      	ldr	r1, [sp, #8]
 8020196:	4093      	lsls	r3, r2
 8020198:	005b      	lsls	r3, r3, #1
 802019a:	f403 72ff 	and.w	r2, r3, #510	; 0x1fe
 802019e:	9b03      	ldr	r3, [sp, #12]
 80201a0:	781b      	ldrb	r3, [r3, #0]
 80201a2:	410b      	asrs	r3, r1
 80201a4:	3101      	adds	r1, #1
 80201a6:	b2c9      	uxtb	r1, r1
 80201a8:	b2db      	uxtb	r3, r3
 80201aa:	2908      	cmp	r1, #8
 80201ac:	9102      	str	r1, [sp, #8]
 80201ae:	9903      	ldr	r1, [sp, #12]
 80201b0:	ea43 0302 	orr.w	r3, r3, r2
 80201b4:	bf0c      	ite	eq
 80201b6:	3102      	addeq	r1, #2
 80201b8:	3101      	addne	r1, #1
 80201ba:	b29a      	uxth	r2, r3
 80201bc:	bf05      	ittet	eq
 80201be:	9103      	streq	r1, [sp, #12]
 80201c0:	2100      	moveq	r1, #0
 80201c2:	9103      	strne	r1, [sp, #12]
 80201c4:	9102      	streq	r1, [sp, #8]
 80201c6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80201c8:	4291      	cmp	r1, r2
 80201ca:	d30a      	bcc.n	80201e2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1de>
 80201cc:	f884 3804 	strb.w	r3, [r4, #2052]	; 0x804
 80201d0:	2301      	movs	r3, #1
 80201d2:	9905      	ldr	r1, [sp, #20]
 80201d4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80201d8:	d30f      	bcc.n	80201fa <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f6>
 80201da:	469b      	mov	fp, r3
 80201dc:	f04f 0c00 	mov.w	ip, #0
 80201e0:	e032      	b.n	8020248 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x244>
 80201e2:	9b05      	ldr	r3, [sp, #20]
 80201e4:	429a      	cmp	r2, r3
 80201e6:	d318      	bcc.n	802021a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x216>
 80201e8:	eb04 030b 	add.w	r3, r4, fp
 80201ec:	f894 1804 	ldrb.w	r1, [r4, #2052]	; 0x804
 80201f0:	f883 1804 	strb.w	r1, [r3, #2052]	; 0x804
 80201f4:	f10b 0301 	add.w	r3, fp, #1
 80201f8:	b29b      	uxth	r3, r3
 80201fa:	9905      	ldr	r1, [sp, #20]
 80201fc:	f894 6804 	ldrb.w	r6, [r4, #2052]	; 0x804
 8020200:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8020204:	710e      	strb	r6, [r1, #4]
 8020206:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8020208:	80ce      	strh	r6, [r1, #6]
 802020a:	f10b 0601 	add.w	r6, fp, #1
 802020e:	714e      	strb	r6, [r1, #5]
 8020210:	9905      	ldr	r1, [sp, #20]
 8020212:	3101      	adds	r1, #1
 8020214:	b289      	uxth	r1, r1
 8020216:	9105      	str	r1, [sp, #20]
 8020218:	e7df      	b.n	80201da <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d6>
 802021a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802021e:	4611      	mov	r1, r2
 8020220:	795b      	ldrb	r3, [r3, #5]
 8020222:	f603 0604 	addw	r6, r3, #2052	; 0x804
 8020226:	4426      	add	r6, r4
 8020228:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 802022a:	4437      	add	r7, r6
 802022c:	2f00      	cmp	r7, #0
 802022e:	dd06      	ble.n	802023e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 8020230:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8020234:	790f      	ldrb	r7, [r1, #4]
 8020236:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802023a:	88c9      	ldrh	r1, [r1, #6]
 802023c:	e7f4      	b.n	8020228 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x224>
 802023e:	f884 1804 	strb.w	r1, [r4, #2052]	; 0x804
 8020242:	b29b      	uxth	r3, r3
 8020244:	e7c5      	b.n	80201d2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ce>
 8020246:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020248:	920a      	str	r2, [sp, #40]	; 0x28
 802024a:	4601      	mov	r1, r0
 802024c:	4662      	mov	r2, ip
 802024e:	461e      	mov	r6, r3
 8020250:	e78e      	b.n	8020170 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16c>
 8020252:	1b73      	subs	r3, r6, r5
 8020254:	eb02 0c05 	add.w	ip, r2, r5
 8020258:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 802025c:	b29b      	uxth	r3, r3
 802025e:	fa1f fc8c 	uxth.w	ip, ip
 8020262:	2500      	movs	r5, #0
 8020264:	9a08      	ldr	r2, [sp, #32]
 8020266:	4542      	cmp	r2, r8
 8020268:	d88d      	bhi.n	8020186 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
 802026a:	4601      	mov	r1, r0
 802026c:	e74f      	b.n	802010e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10a>
 802026e:	428e      	cmp	r6, r1
 8020270:	bf2b      	itete	cs
 8020272:	468e      	movcs	lr, r1
 8020274:	46b6      	movcc	lr, r6
 8020276:	1a73      	subcs	r3, r6, r1
 8020278:	1b88      	subcc	r0, r1, r6
 802027a:	eb02 0c0e 	add.w	ip, r2, lr
 802027e:	bf2b      	itete	cs
 8020280:	4628      	movcs	r0, r5
 8020282:	462b      	movcc	r3, r5
 8020284:	b29b      	uxthcs	r3, r3
 8020286:	b280      	uxthcc	r0, r0
 8020288:	f108 0503 	add.w	r5, r8, #3
 802028c:	fa1f fc8c 	uxth.w	ip, ip
 8020290:	4562      	cmp	r2, ip
 8020292:	d06f      	beq.n	8020374 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>
 8020294:	1c57      	adds	r7, r2, #1
 8020296:	4422      	add	r2, r4
 8020298:	b2bf      	uxth	r7, r7
 802029a:	f892 2804 	ldrb.w	r2, [r2, #2052]	; 0x804
 802029e:	9713      	str	r7, [sp, #76]	; 0x4c
 80202a0:	2704      	movs	r7, #4
 80202a2:	46b9      	mov	r9, r7
 80202a4:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80202a6:	fb19 7202 	smlabb	r2, r9, r2, r7
 80202aa:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80202ac:	58bf      	ldr	r7, [r7, r2]
 80202ae:	0e3a      	lsrs	r2, r7, #24
 80202b0:	9209      	str	r2, [sp, #36]	; 0x24
 80202b2:	d016      	beq.n	80202e2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 80202b4:	f3c7 2907 	ubfx	r9, r7, #8, #8
 80202b8:	fa5f fa87 	uxtb.w	sl, r7
 80202bc:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80202c0:	fa5f f289 	uxtb.w	r2, r9
 80202c4:	9214      	str	r2, [sp, #80]	; 0x50
 80202c6:	b2fa      	uxtb	r2, r7
 80202c8:	9215      	str	r2, [sp, #84]	; 0x54
 80202ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80202cc:	2aff      	cmp	r2, #255	; 0xff
 80202ce:	d10b      	bne.n	80202e8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 80202d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80202d2:	2aff      	cmp	r2, #255	; 0xff
 80202d4:	d108      	bne.n	80202e8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 80202d6:	f805 ac03 	strb.w	sl, [r5, #-3]
 80202da:	f805 9c02 	strb.w	r9, [r5, #-2]
 80202de:	f805 7c01 	strb.w	r7, [r5, #-1]
 80202e2:	3503      	adds	r5, #3
 80202e4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80202e6:	e7d3      	b.n	8020290 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>
 80202e8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80202ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80202ec:	437a      	muls	r2, r7
 80202ee:	1c57      	adds	r7, r2, #1
 80202f0:	eb07 2222 	add.w	r2, r7, r2, asr #8
 80202f4:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 80202f8:	1212      	asrs	r2, r2, #8
 80202fa:	fa1f f982 	uxth.w	r9, r2
 80202fe:	43d2      	mvns	r2, r2
 8020300:	fb1a fa09 	smulbb	sl, sl, r9
 8020304:	b2d2      	uxtb	r2, r2
 8020306:	fb07 a702 	mla	r7, r7, r2, sl
 802030a:	9209      	str	r2, [sp, #36]	; 0x24
 802030c:	b2bf      	uxth	r7, r7
 802030e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020310:	f107 0a01 	add.w	sl, r7, #1
 8020314:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8020318:	fb12 fa09 	smulbb	sl, r2, r9
 802031c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802031e:	123f      	asrs	r7, r7, #8
 8020320:	f805 7c03 	strb.w	r7, [r5, #-3]
 8020324:	f815 7c02 	ldrb.w	r7, [r5, #-2]
 8020328:	fb07 aa02 	mla	sl, r7, r2, sl
 802032c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802032e:	fb12 f909 	smulbb	r9, r2, r9
 8020332:	fa1f fa8a 	uxth.w	sl, sl
 8020336:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020338:	f10a 0701 	add.w	r7, sl, #1
 802033c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020340:	f815 7c01 	ldrb.w	r7, [r5, #-1]
 8020344:	fb07 9902 	mla	r9, r7, r2, r9
 8020348:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802034c:	fa1f f989 	uxth.w	r9, r9
 8020350:	f805 ac02 	strb.w	sl, [r5, #-2]
 8020354:	f109 0201 	add.w	r2, r9, #1
 8020358:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 802035c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020360:	f805 9c01 	strb.w	r9, [r5, #-1]
 8020364:	e7bd      	b.n	80202e2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 8020366:	bf00      	nop
 8020368:	24006d38 	.word	0x24006d38
 802036c:	24006d32 	.word	0x24006d32
 8020370:	fffff7fb 	.word	0xfffff7fb
 8020374:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8020378:	428e      	cmp	r6, r1
 802037a:	44f0      	add	r8, lr
 802037c:	f4ff af71 	bcc.w	8020262 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 8020380:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8020382:	9904      	ldr	r1, [sp, #16]
 8020384:	8812      	ldrh	r2, [r2, #0]
 8020386:	1a52      	subs	r2, r2, r1
 8020388:	9912      	ldr	r1, [sp, #72]	; 0x48
 802038a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802038e:	4490      	add	r8, r2
 8020390:	9a07      	ldr	r2, [sp, #28]
 8020392:	3201      	adds	r2, #1
 8020394:	428a      	cmp	r2, r1
 8020396:	9207      	str	r2, [sp, #28]
 8020398:	d111      	bne.n	80203be <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ba>
 802039a:	f8bd 5068 	ldrh.w	r5, [sp, #104]	; 0x68
 802039e:	f8bd c060 	ldrh.w	ip, [sp, #96]	; 0x60
 80203a2:	9b04      	ldr	r3, [sp, #16]
 80203a4:	eba5 050c 	sub.w	r5, r5, ip
 80203a8:	b2ad      	uxth	r5, r5
 80203aa:	2d00      	cmp	r5, #0
 80203ac:	bf08      	it	eq
 80203ae:	4619      	moveq	r1, r3
 80203b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80203b2:	bf18      	it	ne
 80203b4:	2100      	movne	r1, #0
 80203b6:	3301      	adds	r3, #1
 80203b8:	b289      	uxth	r1, r1
 80203ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80203bc:	e69e      	b.n	80200fc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf8>
 80203be:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 80203c2:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 80203c6:	1a2d      	subs	r5, r5, r0
 80203c8:	b2ad      	uxth	r5, r5
 80203ca:	2d00      	cmp	r5, #0
 80203cc:	bf18      	it	ne
 80203ce:	2000      	movne	r0, #0
 80203d0:	e748      	b.n	8020264 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 80203d2:	4b04      	ldr	r3, [pc, #16]	; (80203e4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e0>)
 80203d4:	6818      	ldr	r0, [r3, #0]
 80203d6:	6803      	ldr	r3, [r0, #0]
 80203d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80203da:	4798      	blx	r3
 80203dc:	b01d      	add	sp, #116	; 0x74
 80203de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80203e2:	bf00      	nop
 80203e4:	24006d38 	.word	0x24006d38

080203e8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 80203e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80203ec:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80203f0:	9c06      	ldr	r4, [sp, #24]
 80203f2:	2800      	cmp	r0, #0
 80203f4:	d06e      	beq.n	80204d4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80203f6:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 80203fa:	2d00      	cmp	r5, #0
 80203fc:	dd6a      	ble.n	80204d4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80203fe:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 8020402:	f1bc 0f00 	cmp.w	ip, #0
 8020406:	dd65      	ble.n	80204d4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8020408:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 802040c:	28ff      	cmp	r0, #255	; 0xff
 802040e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020412:	f3c4 2707 	ubfx	r7, r4, #8, #8
 8020416:	fb02 3306 	mla	r3, r2, r6, r3
 802041a:	f3c4 4607 	ubfx	r6, r4, #16, #8
 802041e:	b2e4      	uxtb	r4, r4
 8020420:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020424:	4419      	add	r1, r3
 8020426:	fb02 f30c 	mul.w	r3, r2, ip
 802042a:	eba2 0205 	sub.w	r2, r2, r5
 802042e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020432:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020436:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802043a:	440b      	add	r3, r1
 802043c:	d03e      	beq.n	80204bc <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 802043e:	fa1f fc80 	uxth.w	ip, r0
 8020442:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8020446:	fb06 f60c 	mul.w	r6, r6, ip
 802044a:	b280      	uxth	r0, r0
 802044c:	fb07 f70c 	mul.w	r7, r7, ip
 8020450:	fb04 f40c 	mul.w	r4, r4, ip
 8020454:	4299      	cmp	r1, r3
 8020456:	d23d      	bcs.n	80204d4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8020458:	eb01 0c05 	add.w	ip, r1, r5
 802045c:	458c      	cmp	ip, r1
 802045e:	f101 0e03 	add.w	lr, r1, #3
 8020462:	d928      	bls.n	80204b6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 8020464:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8020468:	fb11 f100 	smulbb	r1, r1, r0
 802046c:	4421      	add	r1, r4
 802046e:	b289      	uxth	r1, r1
 8020470:	f101 0801 	add.w	r8, r1, #1
 8020474:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8020478:	1209      	asrs	r1, r1, #8
 802047a:	f80e 1c03 	strb.w	r1, [lr, #-3]
 802047e:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 8020482:	fb11 f100 	smulbb	r1, r1, r0
 8020486:	4439      	add	r1, r7
 8020488:	b289      	uxth	r1, r1
 802048a:	f101 0801 	add.w	r8, r1, #1
 802048e:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8020492:	1209      	asrs	r1, r1, #8
 8020494:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8020498:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 802049c:	fb11 f100 	smulbb	r1, r1, r0
 80204a0:	4431      	add	r1, r6
 80204a2:	b289      	uxth	r1, r1
 80204a4:	f101 0801 	add.w	r8, r1, #1
 80204a8:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80204ac:	1209      	asrs	r1, r1, #8
 80204ae:	f80e 1c01 	strb.w	r1, [lr, #-1]
 80204b2:	4671      	mov	r1, lr
 80204b4:	e7d2      	b.n	802045c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 80204b6:	4411      	add	r1, r2
 80204b8:	e7cc      	b.n	8020454 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 80204ba:	4411      	add	r1, r2
 80204bc:	4299      	cmp	r1, r3
 80204be:	d209      	bcs.n	80204d4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80204c0:	1948      	adds	r0, r1, r5
 80204c2:	4281      	cmp	r1, r0
 80204c4:	d2f9      	bcs.n	80204ba <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 80204c6:	700c      	strb	r4, [r1, #0]
 80204c8:	3103      	adds	r1, #3
 80204ca:	f801 7c02 	strb.w	r7, [r1, #-2]
 80204ce:	f801 6c01 	strb.w	r6, [r1, #-1]
 80204d2:	e7f6      	b.n	80204c2 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 80204d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080204d8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 80204d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80204dc:	b093      	sub	sp, #76	; 0x4c
 80204de:	4699      	mov	r9, r3
 80204e0:	4617      	mov	r7, r2
 80204e2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80204e6:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	; 0x74
 80204ea:	4604      	mov	r4, r0
 80204ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80204f0:	a80c      	add	r0, sp, #48	; 0x30
 80204f2:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	; 0x78
 80204f6:	460d      	mov	r5, r1
 80204f8:	4649      	mov	r1, r9
 80204fa:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 80204fe:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8020502:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
 8020506:	f8ad 6036 	strh.w	r6, [sp, #54]	; 0x36
 802050a:	f7f7 fa4b 	bl	80179a4 <_ZN8touchgfx4RectaNERKS0_>
 802050e:	4639      	mov	r1, r7
 8020510:	a80c      	add	r0, sp, #48	; 0x30
 8020512:	f7f7 fa47 	bl	80179a4 <_ZN8touchgfx4RectaNERKS0_>
 8020516:	4b78      	ldr	r3, [pc, #480]	; (80206f8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8020518:	8818      	ldrh	r0, [r3, #0]
 802051a:	4b78      	ldr	r3, [pc, #480]	; (80206fc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 802051c:	b202      	sxth	r2, r0
 802051e:	8819      	ldrh	r1, [r3, #0]
 8020520:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8020524:	b20f      	sxth	r7, r1
 8020526:	2b00      	cmp	r3, #0
 8020528:	da07      	bge.n	802053a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 802052a:	f8bd c034 	ldrh.w	ip, [sp, #52]	; 0x34
 802052e:	4463      	add	r3, ip
 8020530:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8020534:	2300      	movs	r3, #0
 8020536:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 802053a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 802053e:	f9bd c034 	ldrsh.w	ip, [sp, #52]	; 0x34
 8020542:	1ad2      	subs	r2, r2, r3
 8020544:	4594      	cmp	ip, r2
 8020546:	bfc4      	itt	gt
 8020548:	1ac2      	subgt	r2, r0, r3
 802054a:	f8ad 2034 	strhgt.w	r2, [sp, #52]	; 0x34
 802054e:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8020552:	2a00      	cmp	r2, #0
 8020554:	da07      	bge.n	8020566 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 8020556:	f8bd c036 	ldrh.w	ip, [sp, #54]	; 0x36
 802055a:	4462      	add	r2, ip
 802055c:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 8020560:	2200      	movs	r2, #0
 8020562:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8020566:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 802056a:	f9bd c036 	ldrsh.w	ip, [sp, #54]	; 0x36
 802056e:	1abf      	subs	r7, r7, r2
 8020570:	45bc      	cmp	ip, r7
 8020572:	f8df c190 	ldr.w	ip, [pc, #400]	; 8020704 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 8020576:	bfc8      	it	gt
 8020578:	1a8f      	subgt	r7, r1, r2
 802057a:	f89c c000 	ldrb.w	ip, [ip]
 802057e:	bfc8      	it	gt
 8020580:	f8ad 7036 	strhgt.w	r7, [sp, #54]	; 0x36
 8020584:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 8020588:	f1bc 0f00 	cmp.w	ip, #0
 802058c:	d176      	bne.n	802067c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 802058e:	4287      	cmp	r7, r0
 8020590:	bf14      	ite	ne
 8020592:	2100      	movne	r1, #0
 8020594:	2101      	moveq	r1, #1
 8020596:	2f00      	cmp	r7, #0
 8020598:	9107      	str	r1, [sp, #28]
 802059a:	dd73      	ble.n	8020684 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 802059c:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	; 0x36
 80205a0:	2900      	cmp	r1, #0
 80205a2:	9104      	str	r1, [sp, #16]
 80205a4:	dd6e      	ble.n	8020684 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 80205a6:	f8b9 1000 	ldrh.w	r1, [r9]
 80205aa:	a80e      	add	r0, sp, #56	; 0x38
 80205ac:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
 80205b0:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80205b4:	1a5b      	subs	r3, r3, r1
 80205b6:	a910      	add	r1, sp, #64	; 0x40
 80205b8:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 80205bc:	b21b      	sxth	r3, r3
 80205be:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
 80205c2:	f8df a144 	ldr.w	sl, [pc, #324]	; 8020708 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 80205c6:	9305      	str	r3, [sp, #20]
 80205c8:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 80205cc:	1ad2      	subs	r2, r2, r3
 80205ce:	b213      	sxth	r3, r2
 80205d0:	9306      	str	r3, [sp, #24]
 80205d2:	9b05      	ldr	r3, [sp, #20]
 80205d4:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 80205d8:	9b06      	ldr	r3, [sp, #24]
 80205da:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80205de:	9b04      	ldr	r3, [sp, #16]
 80205e0:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 80205e4:	2300      	movs	r3, #0
 80205e6:	9310      	str	r3, [sp, #64]	; 0x40
 80205e8:	f7fa f958 	bl	801a89c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80205ec:	4640      	mov	r0, r8
 80205ee:	f7fa f92d 	bl	801a84c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80205f2:	a810      	add	r0, sp, #64	; 0x40
 80205f4:	f7fa f92a 	bl	801a84c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80205f8:	4b41      	ldr	r3, [pc, #260]	; (8020700 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 80205fa:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 80205fe:	4628      	mov	r0, r5
 8020600:	881b      	ldrh	r3, [r3, #0]
 8020602:	9308      	str	r3, [sp, #32]
 8020604:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8020608:	b21b      	sxth	r3, r3
 802060a:	9303      	str	r3, [sp, #12]
 802060c:	682b      	ldr	r3, [r5, #0]
 802060e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020610:	4798      	blx	r3
 8020612:	9a03      	ldr	r2, [sp, #12]
 8020614:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8020618:	4681      	mov	r9, r0
 802061a:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 802061e:	fb13 f302 	smulbb	r3, r3, r2
 8020622:	2203      	movs	r2, #3
 8020624:	f8da 0000 	ldr.w	r0, [sl]
 8020628:	fb15 3302 	smlabb	r3, r5, r2, r3
 802062c:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 802062e:	920b      	str	r2, [sp, #44]	; 0x2c
 8020630:	441d      	add	r5, r3
 8020632:	6803      	ldr	r3, [r0, #0]
 8020634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020636:	4798      	blx	r3
 8020638:	9009      	str	r0, [sp, #36]	; 0x24
 802063a:	f8da 0000 	ldr.w	r0, [sl]
 802063e:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8020642:	6803      	ldr	r3, [r0, #0]
 8020644:	910a      	str	r1, [sp, #40]	; 0x28
 8020646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020648:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	; 0x32
 802064c:	4798      	blx	r3
 802064e:	f010 0f01 	tst.w	r0, #1
 8020652:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8020656:	d01e      	beq.n	8020696 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 8020658:	f8da 0000 	ldr.w	r0, [sl]
 802065c:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8020660:	6803      	ldr	r3, [r0, #0]
 8020662:	9200      	str	r2, [sp, #0]
 8020664:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8020666:	462b      	mov	r3, r5
 8020668:	e898 0006 	ldmia.w	r8, {r1, r2}
 802066c:	47b0      	blx	r6
 802066e:	9b05      	ldr	r3, [sp, #20]
 8020670:	80a7      	strh	r7, [r4, #4]
 8020672:	8023      	strh	r3, [r4, #0]
 8020674:	9b06      	ldr	r3, [sp, #24]
 8020676:	8063      	strh	r3, [r4, #2]
 8020678:	9b04      	ldr	r3, [sp, #16]
 802067a:	e007      	b.n	802068c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 802067c:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	; 0x36
 8020680:	4288      	cmp	r0, r1
 8020682:	e785      	b.n	8020590 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 8020684:	2300      	movs	r3, #0
 8020686:	8023      	strh	r3, [r4, #0]
 8020688:	8063      	strh	r3, [r4, #2]
 802068a:	80a3      	strh	r3, [r4, #4]
 802068c:	4620      	mov	r0, r4
 802068e:	80e3      	strh	r3, [r4, #6]
 8020690:	b013      	add	sp, #76	; 0x4c
 8020692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020696:	fb09 f606 	mul.w	r6, r9, r6
 802069a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802069c:	fb11 6602 	smlabb	r6, r1, r2, r6
 80206a0:	9a07      	ldr	r2, [sp, #28]
 80206a2:	4433      	add	r3, r6
 80206a4:	461e      	mov	r6, r3
 80206a6:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 80206aa:	b16a      	cbz	r2, 80206c8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 80206ac:	9a08      	ldr	r2, [sp, #32]
 80206ae:	4593      	cmp	fp, r2
 80206b0:	d10a      	bne.n	80206c8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 80206b2:	f8da 0000 	ldr.w	r0, [sl]
 80206b6:	fb09 f303 	mul.w	r3, r9, r3
 80206ba:	4629      	mov	r1, r5
 80206bc:	6802      	ldr	r2, [r0, #0]
 80206be:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 80206c2:	4632      	mov	r2, r6
 80206c4:	47d0      	blx	sl
 80206c6:	e7d2      	b.n	802066e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 80206c8:	9a03      	ldr	r2, [sp, #12]
 80206ca:	f8df b03c 	ldr.w	fp, [pc, #60]	; 8020708 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 80206ce:	fb02 5803 	mla	r8, r2, r3, r5
 80206d2:	4545      	cmp	r5, r8
 80206d4:	d2cb      	bcs.n	802066e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 80206d6:	f8db 0000 	ldr.w	r0, [fp]
 80206da:	4629      	mov	r1, r5
 80206dc:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 80206e0:	6802      	ldr	r2, [r0, #0]
 80206e2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80206e6:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 80206ea:	4632      	mov	r2, r6
 80206ec:	47d0      	blx	sl
 80206ee:	9b03      	ldr	r3, [sp, #12]
 80206f0:	444e      	add	r6, r9
 80206f2:	441d      	add	r5, r3
 80206f4:	e7ed      	b.n	80206d2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 80206f6:	bf00      	nop
 80206f8:	24006d2c 	.word	0x24006d2c
 80206fc:	24006d2e 	.word	0x24006d2e
 8020700:	24006d32 	.word	0x24006d32
 8020704:	24006d30 	.word	0x24006d30
 8020708:	24006d38 	.word	0x24006d38

0802070c <_ZN8touchgfx8LCD24bppC1Ev>:
 802070c:	2200      	movs	r2, #0
 802070e:	490d      	ldr	r1, [pc, #52]	; (8020744 <_ZN8touchgfx8LCD24bppC1Ev+0x38>)
 8020710:	6042      	str	r2, [r0, #4]
 8020712:	6001      	str	r1, [r0, #0]
 8020714:	6602      	str	r2, [r0, #96]	; 0x60
 8020716:	e9c0 2202 	strd	r2, r2, [r0, #8]
 802071a:	e9c0 2204 	strd	r2, r2, [r0, #16]
 802071e:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8020722:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8020726:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 802072a:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 802072e:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8020732:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8020736:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 802073a:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 802073e:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8020742:	4770      	bx	lr
 8020744:	08029604 	.word	0x08029604

08020748 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8020748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802074c:	b091      	sub	sp, #68	; 0x44
 802074e:	4607      	mov	r7, r0
 8020750:	4688      	mov	r8, r1
 8020752:	6810      	ldr	r0, [r2, #0]
 8020754:	6851      	ldr	r1, [r2, #4]
 8020756:	ac0c      	add	r4, sp, #48	; 0x30
 8020758:	4616      	mov	r6, r2
 802075a:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 802075e:	4d64      	ldr	r5, [pc, #400]	; (80208f0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8020760:	f8df a190 	ldr.w	sl, [pc, #400]	; 80208f4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 8020764:	c403      	stmia	r4!, {r0, r1}
 8020766:	6818      	ldr	r0, [r3, #0]
 8020768:	ac0e      	add	r4, sp, #56	; 0x38
 802076a:	6859      	ldr	r1, [r3, #4]
 802076c:	c403      	stmia	r4!, {r0, r1}
 802076e:	a80c      	add	r0, sp, #48	; 0x30
 8020770:	f7fa f86c 	bl	801a84c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020774:	4631      	mov	r1, r6
 8020776:	a80e      	add	r0, sp, #56	; 0x38
 8020778:	f7fa f890 	bl	801a89c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802077c:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8020780:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8020784:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8020788:	6828      	ldr	r0, [r5, #0]
 802078a:	fb11 2103 	smlabb	r1, r1, r3, r2
 802078e:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 8020792:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 8020796:	440f      	add	r7, r1
 8020798:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 802079c:	440a      	add	r2, r1
 802079e:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 80207a2:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 80207a6:	4413      	add	r3, r2
 80207a8:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80207ac:	6803      	ldr	r3, [r0, #0]
 80207ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80207b0:	4798      	blx	r3
 80207b2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80207b6:	6828      	ldr	r0, [r5, #0]
 80207b8:	d01f      	beq.n	80207fa <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 80207ba:	2201      	movs	r2, #1
 80207bc:	2500      	movs	r5, #0
 80207be:	6801      	ldr	r1, [r0, #0]
 80207c0:	b2a4      	uxth	r4, r4
 80207c2:	b2b6      	uxth	r6, r6
 80207c4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80207c8:	e9cd 2508 	strd	r2, r5, [sp, #32]
 80207cc:	250b      	movs	r5, #11
 80207ce:	9507      	str	r5, [sp, #28]
 80207d0:	f8ba 5000 	ldrh.w	r5, [sl]
 80207d4:	f8cd 9010 	str.w	r9, [sp, #16]
 80207d8:	9602      	str	r6, [sp, #8]
 80207da:	9401      	str	r4, [sp, #4]
 80207dc:	e9cd 2505 	strd	r2, r5, [sp, #20]
 80207e0:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80207e4:	9203      	str	r2, [sp, #12]
 80207e6:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80207ea:	9200      	str	r2, [sp, #0]
 80207ec:	4642      	mov	r2, r8
 80207ee:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 80207f0:	4639      	mov	r1, r7
 80207f2:	47a0      	blx	r4
 80207f4:	b011      	add	sp, #68	; 0x44
 80207f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80207fa:	6803      	ldr	r3, [r0, #0]
 80207fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80207fe:	4798      	blx	r3
 8020800:	f8ba 5000 	ldrh.w	r5, [sl]
 8020804:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8020808:	f04f 0e04 	mov.w	lr, #4
 802080c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8020810:	436e      	muls	r6, r5
 8020812:	fb05 2303 	mla	r3, r5, r3, r2
 8020816:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802081a:	1b2d      	subs	r5, r5, r4
 802081c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020820:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020824:	4418      	add	r0, r3
 8020826:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 802082a:	1982      	adds	r2, r0, r6
 802082c:	1b1b      	subs	r3, r3, r4
 802082e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020832:	930b      	str	r3, [sp, #44]	; 0x2c
 8020834:	4290      	cmp	r0, r2
 8020836:	d254      	bcs.n	80208e2 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 8020838:	eb00 0a04 	add.w	sl, r0, r4
 802083c:	4550      	cmp	r0, sl
 802083e:	d24c      	bcs.n	80208da <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 8020840:	f817 1b01 	ldrb.w	r1, [r7], #1
 8020844:	fb1e e101 	smlabb	r1, lr, r1, lr
 8020848:	eb08 0c01 	add.w	ip, r8, r1
 802084c:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8020850:	b173      	cbz	r3, 8020870 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8020852:	2bff      	cmp	r3, #255	; 0xff
 8020854:	f818 b001 	ldrb.w	fp, [r8, r1]
 8020858:	d10c      	bne.n	8020874 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 802085a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802085e:	d109      	bne.n	8020874 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8020860:	f880 b000 	strb.w	fp, [r0]
 8020864:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8020868:	7043      	strb	r3, [r0, #1]
 802086a:	f89c 3002 	ldrb.w	r3, [ip, #2]
 802086e:	7083      	strb	r3, [r0, #2]
 8020870:	3003      	adds	r0, #3
 8020872:	e7e3      	b.n	802083c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 8020874:	fb09 f103 	mul.w	r1, r9, r3
 8020878:	1c4b      	adds	r3, r1, #1
 802087a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802087e:	7801      	ldrb	r1, [r0, #0]
 8020880:	121b      	asrs	r3, r3, #8
 8020882:	b29e      	uxth	r6, r3
 8020884:	43db      	mvns	r3, r3
 8020886:	fb1b fb06 	smulbb	fp, fp, r6
 802088a:	b2db      	uxtb	r3, r3
 802088c:	fb01 b103 	mla	r1, r1, r3, fp
 8020890:	b289      	uxth	r1, r1
 8020892:	f101 0b01 	add.w	fp, r1, #1
 8020896:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 802089a:	f890 b001 	ldrb.w	fp, [r0, #1]
 802089e:	fb1b fb03 	smulbb	fp, fp, r3
 80208a2:	1209      	asrs	r1, r1, #8
 80208a4:	7001      	strb	r1, [r0, #0]
 80208a6:	f89c 1001 	ldrb.w	r1, [ip, #1]
 80208aa:	fb01 b106 	mla	r1, r1, r6, fp
 80208ae:	b289      	uxth	r1, r1
 80208b0:	f101 0b01 	add.w	fp, r1, #1
 80208b4:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 80208b8:	1209      	asrs	r1, r1, #8
 80208ba:	7041      	strb	r1, [r0, #1]
 80208bc:	f89c 1002 	ldrb.w	r1, [ip, #2]
 80208c0:	f890 c002 	ldrb.w	ip, [r0, #2]
 80208c4:	fb1c f303 	smulbb	r3, ip, r3
 80208c8:	fb01 3606 	mla	r6, r1, r6, r3
 80208cc:	b2b6      	uxth	r6, r6
 80208ce:	1c73      	adds	r3, r6, #1
 80208d0:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 80208d4:	1236      	asrs	r6, r6, #8
 80208d6:	7086      	strb	r6, [r0, #2]
 80208d8:	e7ca      	b.n	8020870 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 80208da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80208dc:	4428      	add	r0, r5
 80208de:	441f      	add	r7, r3
 80208e0:	e7a8      	b.n	8020834 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 80208e2:	4b03      	ldr	r3, [pc, #12]	; (80208f0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 80208e4:	6818      	ldr	r0, [r3, #0]
 80208e6:	6803      	ldr	r3, [r0, #0]
 80208e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80208ea:	4798      	blx	r3
 80208ec:	e782      	b.n	80207f4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 80208ee:	bf00      	nop
 80208f0:	24006d38 	.word	0x24006d38
 80208f4:	24006d32 	.word	0x24006d32

080208f8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 80208f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80208fc:	b091      	sub	sp, #68	; 0x44
 80208fe:	4680      	mov	r8, r0
 8020900:	460e      	mov	r6, r1
 8020902:	6810      	ldr	r0, [r2, #0]
 8020904:	6851      	ldr	r1, [r2, #4]
 8020906:	ad0c      	add	r5, sp, #48	; 0x30
 8020908:	4614      	mov	r4, r2
 802090a:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 802090e:	f8df 9198 	ldr.w	r9, [pc, #408]	; 8020aa8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 8020912:	f8df a198 	ldr.w	sl, [pc, #408]	; 8020aac <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 8020916:	c503      	stmia	r5!, {r0, r1}
 8020918:	6818      	ldr	r0, [r3, #0]
 802091a:	ad0e      	add	r5, sp, #56	; 0x38
 802091c:	6859      	ldr	r1, [r3, #4]
 802091e:	c503      	stmia	r5!, {r0, r1}
 8020920:	a80c      	add	r0, sp, #48	; 0x30
 8020922:	f7f9 ff93 	bl	801a84c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020926:	4621      	mov	r1, r4
 8020928:	a80e      	add	r0, sp, #56	; 0x38
 802092a:	f7f9 ffb7 	bl	801a89c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802092e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8020932:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8020936:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 802093a:	f8d9 0000 	ldr.w	r0, [r9]
 802093e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020942:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 8020946:	eb08 0401 	add.w	r4, r8, r1
 802094a:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 802094e:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8020952:	440a      	add	r2, r1
 8020954:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8020958:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 802095c:	4413      	add	r3, r2
 802095e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8020962:	6803      	ldr	r3, [r0, #0]
 8020964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020966:	4798      	blx	r3
 8020968:	f010 0f80 	tst.w	r0, #128	; 0x80
 802096c:	f8d9 0000 	ldr.w	r0, [r9]
 8020970:	d022      	beq.n	80209b8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 8020972:	2200      	movs	r2, #0
 8020974:	f04f 0c01 	mov.w	ip, #1
 8020978:	6801      	ldr	r1, [r0, #0]
 802097a:	b2ad      	uxth	r5, r5
 802097c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8020980:	e9cd c208 	strd	ip, r2, [sp, #32]
 8020984:	f04f 0c0b 	mov.w	ip, #11
 8020988:	f8cd c01c 	str.w	ip, [sp, #28]
 802098c:	f8ba c000 	ldrh.w	ip, [sl]
 8020990:	9704      	str	r7, [sp, #16]
 8020992:	9502      	str	r5, [sp, #8]
 8020994:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 8020998:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 802099c:	9203      	str	r2, [sp, #12]
 802099e:	fa1f f288 	uxth.w	r2, r8
 80209a2:	9201      	str	r2, [sp, #4]
 80209a4:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80209a8:	9200      	str	r2, [sp, #0]
 80209aa:	4632      	mov	r2, r6
 80209ac:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 80209ae:	4621      	mov	r1, r4
 80209b0:	47a8      	blx	r5
 80209b2:	b011      	add	sp, #68	; 0x44
 80209b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80209b8:	6803      	ldr	r3, [r0, #0]
 80209ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80209bc:	4798      	blx	r3
 80209be:	f8ba 2000 	ldrh.w	r2, [sl]
 80209c2:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80209c6:	f04f 0e03 	mov.w	lr, #3
 80209ca:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 80209ce:	4355      	muls	r5, r2
 80209d0:	fa1f fc87 	uxth.w	ip, r7
 80209d4:	fb02 1303 	mla	r3, r2, r3, r1
 80209d8:	eba2 0208 	sub.w	r2, r2, r8
 80209dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80209e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80209e4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80209e8:	4418      	add	r0, r3
 80209ea:	920b      	str	r2, [sp, #44]	; 0x2c
 80209ec:	1943      	adds	r3, r0, r5
 80209ee:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 80209f2:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 80209f6:	eba2 0208 	sub.w	r2, r2, r8
 80209fa:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80209fe:	b2ad      	uxth	r5, r5
 8020a00:	4298      	cmp	r0, r3
 8020a02:	d24a      	bcs.n	8020a9a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 8020a04:	eb00 0908 	add.w	r9, r0, r8
 8020a08:	4621      	mov	r1, r4
 8020a0a:	4548      	cmp	r0, r9
 8020a0c:	460c      	mov	r4, r1
 8020a0e:	d240      	bcs.n	8020a92 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 8020a10:	f04f 0a04 	mov.w	sl, #4
 8020a14:	7824      	ldrb	r4, [r4, #0]
 8020a16:	2fff      	cmp	r7, #255	; 0xff
 8020a18:	f101 0101 	add.w	r1, r1, #1
 8020a1c:	fb1e a404 	smlabb	r4, lr, r4, sl
 8020a20:	eb06 0a04 	add.w	sl, r6, r4
 8020a24:	f816 b004 	ldrb.w	fp, [r6, r4]
 8020a28:	d02b      	beq.n	8020a82 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 8020a2a:	7804      	ldrb	r4, [r0, #0]
 8020a2c:	fb14 f405 	smulbb	r4, r4, r5
 8020a30:	fb0b 440c 	mla	r4, fp, ip, r4
 8020a34:	b2a4      	uxth	r4, r4
 8020a36:	f104 0b01 	add.w	fp, r4, #1
 8020a3a:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8020a3e:	f890 b001 	ldrb.w	fp, [r0, #1]
 8020a42:	fb1b fb05 	smulbb	fp, fp, r5
 8020a46:	1224      	asrs	r4, r4, #8
 8020a48:	7004      	strb	r4, [r0, #0]
 8020a4a:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8020a4e:	fb04 b40c 	mla	r4, r4, ip, fp
 8020a52:	b2a4      	uxth	r4, r4
 8020a54:	f104 0b01 	add.w	fp, r4, #1
 8020a58:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8020a5c:	1224      	asrs	r4, r4, #8
 8020a5e:	7044      	strb	r4, [r0, #1]
 8020a60:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8020a64:	f890 a002 	ldrb.w	sl, [r0, #2]
 8020a68:	fb1a fa05 	smulbb	sl, sl, r5
 8020a6c:	fb04 a40c 	mla	r4, r4, ip, sl
 8020a70:	b2a4      	uxth	r4, r4
 8020a72:	f104 0a01 	add.w	sl, r4, #1
 8020a76:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8020a7a:	1224      	asrs	r4, r4, #8
 8020a7c:	7084      	strb	r4, [r0, #2]
 8020a7e:	3003      	adds	r0, #3
 8020a80:	e7c3      	b.n	8020a0a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 8020a82:	f880 b000 	strb.w	fp, [r0]
 8020a86:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8020a8a:	7044      	strb	r4, [r0, #1]
 8020a8c:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8020a90:	e7f4      	b.n	8020a7c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 8020a92:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020a94:	4420      	add	r0, r4
 8020a96:	188c      	adds	r4, r1, r2
 8020a98:	e7b2      	b.n	8020a00 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 8020a9a:	4b03      	ldr	r3, [pc, #12]	; (8020aa8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 8020a9c:	6818      	ldr	r0, [r3, #0]
 8020a9e:	6803      	ldr	r3, [r0, #0]
 8020aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020aa2:	4798      	blx	r3
 8020aa4:	e785      	b.n	80209b2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 8020aa6:	bf00      	nop
 8020aa8:	24006d38 	.word	0x24006d38
 8020aac:	24006d32 	.word	0x24006d32

08020ab0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8020ab0:	b4f0      	push	{r4, r5, r6, r7}
 8020ab2:	460c      	mov	r4, r1
 8020ab4:	4611      	mov	r1, r2
 8020ab6:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8020aba:	461a      	mov	r2, r3
 8020abc:	780f      	ldrb	r7, [r1, #0]
 8020abe:	9b04      	ldr	r3, [sp, #16]
 8020ac0:	784e      	ldrb	r6, [r1, #1]
 8020ac2:	b11f      	cbz	r7, 8020acc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1c>
 8020ac4:	2f01      	cmp	r7, #1
 8020ac6:	d01d      	beq.n	8020b04 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x54>
 8020ac8:	bcf0      	pop	{r4, r5, r6, r7}
 8020aca:	4770      	bx	lr
 8020acc:	2e03      	cmp	r6, #3
 8020ace:	d8fb      	bhi.n	8020ac8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 8020ad0:	e8df f006 	tbb	[pc, r6]
 8020ad4:	16140702 	.word	0x16140702
 8020ad8:	9504      	str	r5, [sp, #16]
 8020ada:	4620      	mov	r0, r4
 8020adc:	bcf0      	pop	{r4, r5, r6, r7}
 8020ade:	f7ff be33 	b.w	8020748 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8020ae2:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8020ae4:	2800      	cmp	r0, #0
 8020ae6:	d0ef      	beq.n	8020ac8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 8020ae8:	6806      	ldr	r6, [r0, #0]
 8020aea:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8020aee:	68f5      	ldr	r5, [r6, #12]
 8020af0:	4613      	mov	r3, r2
 8020af2:	46ac      	mov	ip, r5
 8020af4:	460a      	mov	r2, r1
 8020af6:	4621      	mov	r1, r4
 8020af8:	bcf0      	pop	{r4, r5, r6, r7}
 8020afa:	4760      	bx	ip
 8020afc:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8020afe:	e7f1      	b.n	8020ae4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 8020b00:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8020b02:	e7ef      	b.n	8020ae4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 8020b04:	2e03      	cmp	r6, #3
 8020b06:	d8df      	bhi.n	8020ac8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 8020b08:	e8df f006 	tbb	[pc, r6]
 8020b0c:	110f0702 	.word	0x110f0702
 8020b10:	9504      	str	r5, [sp, #16]
 8020b12:	4620      	mov	r0, r4
 8020b14:	bcf0      	pop	{r4, r5, r6, r7}
 8020b16:	f7ff beef 	b.w	80208f8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8020b1a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8020b1c:	2800      	cmp	r0, #0
 8020b1e:	d0d3      	beq.n	8020ac8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 8020b20:	6806      	ldr	r6, [r0, #0]
 8020b22:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8020b26:	68b5      	ldr	r5, [r6, #8]
 8020b28:	e7e2      	b.n	8020af0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 8020b2a:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8020b2c:	e7f6      	b.n	8020b1c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
 8020b2e:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8020b30:	e7f4      	b.n	8020b1c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
	...

08020b34 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 8020b34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020b38:	4605      	mov	r5, r0
 8020b3a:	b08f      	sub	sp, #60	; 0x3c
 8020b3c:	460c      	mov	r4, r1
 8020b3e:	461f      	mov	r7, r3
 8020b40:	2b00      	cmp	r3, #0
 8020b42:	d052      	beq.n	8020bea <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8020b44:	6808      	ldr	r0, [r1, #0]
 8020b46:	ab0a      	add	r3, sp, #40	; 0x28
 8020b48:	6849      	ldr	r1, [r1, #4]
 8020b4a:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8020d14 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 8020b4e:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8020d18 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 8020b52:	c303      	stmia	r3!, {r0, r1}
 8020b54:	6810      	ldr	r0, [r2, #0]
 8020b56:	ab0c      	add	r3, sp, #48	; 0x30
 8020b58:	6851      	ldr	r1, [r2, #4]
 8020b5a:	c303      	stmia	r3!, {r0, r1}
 8020b5c:	a80a      	add	r0, sp, #40	; 0x28
 8020b5e:	f7f9 fe75 	bl	801a84c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020b62:	4621      	mov	r1, r4
 8020b64:	a80c      	add	r0, sp, #48	; 0x30
 8020b66:	f7f9 fe99 	bl	801a89c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020b6a:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8020b6e:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8020b72:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8020b76:	f8d8 0000 	ldr.w	r0, [r8]
 8020b7a:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020b7e:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	; 0x34
 8020b82:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	; 0x36
 8020b86:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 8020b8a:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8020b8e:	440a      	add	r2, r1
 8020b90:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8020b94:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8020b98:	4413      	add	r3, r2
 8020b9a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8020b9e:	6803      	ldr	r3, [r0, #0]
 8020ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020ba2:	4798      	blx	r3
 8020ba4:	2fff      	cmp	r7, #255	; 0xff
 8020ba6:	d023      	beq.n	8020bf0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 8020ba8:	f010 0f04 	tst.w	r0, #4
 8020bac:	f8d8 0000 	ldr.w	r0, [r8]
 8020bb0:	d021      	beq.n	8020bf6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 8020bb2:	2100      	movs	r1, #0
 8020bb4:	f04f 0e01 	mov.w	lr, #1
 8020bb8:	f8d0 c000 	ldr.w	ip, [r0]
 8020bbc:	b2a4      	uxth	r4, r4
 8020bbe:	9106      	str	r1, [sp, #24]
 8020bc0:	b2b6      	uxth	r6, r6
 8020bc2:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8020bc6:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8020bca:	e9cd e107 	strd	lr, r1, [sp, #28]
 8020bce:	f8b9 e000 	ldrh.w	lr, [r9]
 8020bd2:	9703      	str	r7, [sp, #12]
 8020bd4:	9401      	str	r4, [sp, #4]
 8020bd6:	9600      	str	r6, [sp, #0]
 8020bd8:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8020bdc:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8020be0:	9102      	str	r1, [sp, #8]
 8020be2:	4629      	mov	r1, r5
 8020be4:	f8dc 4040 	ldr.w	r4, [ip, #64]	; 0x40
 8020be8:	47a0      	blx	r4
 8020bea:	b00f      	add	sp, #60	; 0x3c
 8020bec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020bf0:	f010 0f01 	tst.w	r0, #1
 8020bf4:	e7da      	b.n	8020bac <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 8020bf6:	6803      	ldr	r3, [r0, #0]
 8020bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020bfa:	4798      	blx	r3
 8020bfc:	f8b9 1000 	ldrh.w	r1, [r9]
 8020c00:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8020c04:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 8020c08:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8020c0c:	434c      	muls	r4, r1
 8020c0e:	2fff      	cmp	r7, #255	; 0xff
 8020c10:	fb01 2303 	mla	r3, r1, r3, r2
 8020c14:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020c18:	eba1 0106 	sub.w	r1, r1, r6
 8020c1c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020c20:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020c24:	4418      	add	r0, r3
 8020c26:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8020c2a:	eba3 0606 	sub.w	r6, r3, r6
 8020c2e:	4404      	add	r4, r0
 8020c30:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8020c34:	d04a      	beq.n	8020ccc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 8020c36:	43fa      	mvns	r2, r7
 8020c38:	b2bb      	uxth	r3, r7
 8020c3a:	b2d7      	uxtb	r7, r2
 8020c3c:	42a0      	cmp	r0, r4
 8020c3e:	d263      	bcs.n	8020d08 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 8020c40:	eb00 0e0c 	add.w	lr, r0, ip
 8020c44:	4586      	cmp	lr, r0
 8020c46:	f100 0803 	add.w	r8, r0, #3
 8020c4a:	d93a      	bls.n	8020cc2 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 8020c4c:	f835 2b02 	ldrh.w	r2, [r5], #2
 8020c50:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 8020c54:	00d0      	lsls	r0, r2, #3
 8020c56:	fb19 f907 	smulbb	r9, r9, r7
 8020c5a:	b2c0      	uxtb	r0, r0
 8020c5c:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8020c60:	fb00 9003 	mla	r0, r0, r3, r9
 8020c64:	b280      	uxth	r0, r0
 8020c66:	f100 0901 	add.w	r9, r0, #1
 8020c6a:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8020c6e:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 8020c72:	fb19 f907 	smulbb	r9, r9, r7
 8020c76:	1200      	asrs	r0, r0, #8
 8020c78:	f808 0c03 	strb.w	r0, [r8, #-3]
 8020c7c:	10d0      	asrs	r0, r2, #3
 8020c7e:	1212      	asrs	r2, r2, #8
 8020c80:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8020c84:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8020c88:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8020c8c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8020c90:	fb00 9003 	mla	r0, r0, r3, r9
 8020c94:	b280      	uxth	r0, r0
 8020c96:	f100 0901 	add.w	r9, r0, #1
 8020c9a:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8020c9e:	1200      	asrs	r0, r0, #8
 8020ca0:	f808 0c02 	strb.w	r0, [r8, #-2]
 8020ca4:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 8020ca8:	fb10 f007 	smulbb	r0, r0, r7
 8020cac:	fb02 0203 	mla	r2, r2, r3, r0
 8020cb0:	b292      	uxth	r2, r2
 8020cb2:	1c50      	adds	r0, r2, #1
 8020cb4:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8020cb8:	4640      	mov	r0, r8
 8020cba:	1212      	asrs	r2, r2, #8
 8020cbc:	f808 2c01 	strb.w	r2, [r8, #-1]
 8020cc0:	e7c0      	b.n	8020c44 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 8020cc2:	4408      	add	r0, r1
 8020cc4:	4435      	add	r5, r6
 8020cc6:	e7b9      	b.n	8020c3c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 8020cc8:	4408      	add	r0, r1
 8020cca:	4435      	add	r5, r6
 8020ccc:	42a0      	cmp	r0, r4
 8020cce:	d21b      	bcs.n	8020d08 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 8020cd0:	eb00 070c 	add.w	r7, r0, ip
 8020cd4:	42b8      	cmp	r0, r7
 8020cd6:	d2f7      	bcs.n	8020cc8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 8020cd8:	f835 3b02 	ldrh.w	r3, [r5], #2
 8020cdc:	3003      	adds	r0, #3
 8020cde:	00da      	lsls	r2, r3, #3
 8020ce0:	b2d2      	uxtb	r2, r2
 8020ce2:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8020ce6:	f800 2c03 	strb.w	r2, [r0, #-3]
 8020cea:	10da      	asrs	r2, r3, #3
 8020cec:	121b      	asrs	r3, r3, #8
 8020cee:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8020cf2:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8020cf6:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8020cfa:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8020cfe:	f800 2c02 	strb.w	r2, [r0, #-2]
 8020d02:	f800 3c01 	strb.w	r3, [r0, #-1]
 8020d06:	e7e5      	b.n	8020cd4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 8020d08:	4b02      	ldr	r3, [pc, #8]	; (8020d14 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 8020d0a:	6818      	ldr	r0, [r3, #0]
 8020d0c:	6803      	ldr	r3, [r0, #0]
 8020d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020d10:	4798      	blx	r3
 8020d12:	e76a      	b.n	8020bea <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8020d14:	24006d38 	.word	0x24006d38
 8020d18:	24006d32 	.word	0x24006d32

08020d1c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8020d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020d20:	b08a      	sub	sp, #40	; 0x28
 8020d22:	460d      	mov	r5, r1
 8020d24:	4604      	mov	r4, r0
 8020d26:	461e      	mov	r6, r3
 8020d28:	6808      	ldr	r0, [r1, #0]
 8020d2a:	ab06      	add	r3, sp, #24
 8020d2c:	6849      	ldr	r1, [r1, #4]
 8020d2e:	4f5d      	ldr	r7, [pc, #372]	; (8020ea4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 8020d30:	c303      	stmia	r3!, {r0, r1}
 8020d32:	6810      	ldr	r0, [r2, #0]
 8020d34:	ab08      	add	r3, sp, #32
 8020d36:	6851      	ldr	r1, [r2, #4]
 8020d38:	c303      	stmia	r3!, {r0, r1}
 8020d3a:	a806      	add	r0, sp, #24
 8020d3c:	f7f9 fd86 	bl	801a84c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020d40:	4629      	mov	r1, r5
 8020d42:	a808      	add	r0, sp, #32
 8020d44:	f7f9 fdaa 	bl	801a89c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020d48:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8020d4c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8020d50:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8020d54:	6838      	ldr	r0, [r7, #0]
 8020d56:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020d5a:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 8020d5e:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 8020d62:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8020d66:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8020d6a:	440a      	add	r2, r1
 8020d6c:	f8ad 2020 	strh.w	r2, [sp, #32]
 8020d70:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8020d74:	4413      	add	r3, r2
 8020d76:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8020d7a:	6803      	ldr	r3, [r0, #0]
 8020d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020d7e:	4798      	blx	r3
 8020d80:	2eff      	cmp	r6, #255	; 0xff
 8020d82:	d119      	bne.n	8020db8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 8020d84:	f010 0f20 	tst.w	r0, #32
 8020d88:	6838      	ldr	r0, [r7, #0]
 8020d8a:	d018      	beq.n	8020dbe <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 8020d8c:	b2ad      	uxth	r5, r5
 8020d8e:	2700      	movs	r7, #0
 8020d90:	6801      	ldr	r1, [r0, #0]
 8020d92:	9501      	str	r5, [sp, #4]
 8020d94:	fa1f f588 	uxth.w	r5, r8
 8020d98:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8020d9c:	9500      	str	r5, [sp, #0]
 8020d9e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8020da2:	e9cd 6703 	strd	r6, r7, [sp, #12]
 8020da6:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8020daa:	9602      	str	r6, [sp, #8]
 8020dac:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 8020dae:	4621      	mov	r1, r4
 8020db0:	47a8      	blx	r5
 8020db2:	b00a      	add	sp, #40	; 0x28
 8020db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020db8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8020dbc:	e7e4      	b.n	8020d88 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 8020dbe:	6803      	ldr	r3, [r0, #0]
 8020dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020dc2:	4798      	blx	r3
 8020dc4:	4b38      	ldr	r3, [pc, #224]	; (8020ea8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 8020dc6:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8020dca:	f8b3 c000 	ldrh.w	ip, [r3]
 8020dce:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8020dd2:	fb0c f505 	mul.w	r5, ip, r5
 8020dd6:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 8020dda:	fb0c 2303 	mla	r3, ip, r3, r2
 8020dde:	ebac 0c08 	sub.w	ip, ip, r8
 8020de2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020de6:	ebae 0e08 	sub.w	lr, lr, r8
 8020dea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020dee:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8020df2:	4418      	add	r0, r3
 8020df4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8020df8:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8020dfc:	4405      	add	r5, r0
 8020dfe:	42a8      	cmp	r0, r5
 8020e00:	d24a      	bcs.n	8020e98 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 8020e02:	eb00 0803 	add.w	r8, r0, r3
 8020e06:	4540      	cmp	r0, r8
 8020e08:	d243      	bcs.n	8020e92 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 8020e0a:	78e2      	ldrb	r2, [r4, #3]
 8020e0c:	b15a      	cbz	r2, 8020e26 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 8020e0e:	2aff      	cmp	r2, #255	; 0xff
 8020e10:	f894 9000 	ldrb.w	r9, [r4]
 8020e14:	d10a      	bne.n	8020e2c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8020e16:	2eff      	cmp	r6, #255	; 0xff
 8020e18:	d108      	bne.n	8020e2c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8020e1a:	f880 9000 	strb.w	r9, [r0]
 8020e1e:	7862      	ldrb	r2, [r4, #1]
 8020e20:	7042      	strb	r2, [r0, #1]
 8020e22:	78a2      	ldrb	r2, [r4, #2]
 8020e24:	7082      	strb	r2, [r0, #2]
 8020e26:	3003      	adds	r0, #3
 8020e28:	3404      	adds	r4, #4
 8020e2a:	e7ec      	b.n	8020e06 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 8020e2c:	4372      	muls	r2, r6
 8020e2e:	1c51      	adds	r1, r2, #1
 8020e30:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8020e34:	1209      	asrs	r1, r1, #8
 8020e36:	fa1f fa81 	uxth.w	sl, r1
 8020e3a:	43c9      	mvns	r1, r1
 8020e3c:	fb19 f90a 	smulbb	r9, r9, sl
 8020e40:	b2ca      	uxtb	r2, r1
 8020e42:	7801      	ldrb	r1, [r0, #0]
 8020e44:	fb01 9902 	mla	r9, r1, r2, r9
 8020e48:	fa1f f989 	uxth.w	r9, r9
 8020e4c:	f109 0101 	add.w	r1, r9, #1
 8020e50:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 8020e54:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020e58:	f880 9000 	strb.w	r9, [r0]
 8020e5c:	f890 9001 	ldrb.w	r9, [r0, #1]
 8020e60:	7861      	ldrb	r1, [r4, #1]
 8020e62:	fb19 f902 	smulbb	r9, r9, r2
 8020e66:	fb01 910a 	mla	r1, r1, sl, r9
 8020e6a:	b289      	uxth	r1, r1
 8020e6c:	f101 0901 	add.w	r9, r1, #1
 8020e70:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 8020e74:	1209      	asrs	r1, r1, #8
 8020e76:	7041      	strb	r1, [r0, #1]
 8020e78:	7881      	ldrb	r1, [r0, #2]
 8020e7a:	f894 9002 	ldrb.w	r9, [r4, #2]
 8020e7e:	fb11 f202 	smulbb	r2, r1, r2
 8020e82:	fb09 220a 	mla	r2, r9, sl, r2
 8020e86:	b292      	uxth	r2, r2
 8020e88:	1c51      	adds	r1, r2, #1
 8020e8a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8020e8e:	1212      	asrs	r2, r2, #8
 8020e90:	e7c8      	b.n	8020e24 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 8020e92:	4460      	add	r0, ip
 8020e94:	4474      	add	r4, lr
 8020e96:	e7b2      	b.n	8020dfe <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 8020e98:	6838      	ldr	r0, [r7, #0]
 8020e9a:	6803      	ldr	r3, [r0, #0]
 8020e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020e9e:	4798      	blx	r3
 8020ea0:	e787      	b.n	8020db2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 8020ea2:	bf00      	nop
 8020ea4:	24006d38 	.word	0x24006d38
 8020ea8:	24006d32 	.word	0x24006d32

08020eac <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8020eac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020eb0:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8020eb4:	4607      	mov	r7, r0
 8020eb6:	460c      	mov	r4, r1
 8020eb8:	4692      	mov	sl, r2
 8020eba:	4699      	mov	r9, r3
 8020ebc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8020ebe:	b31d      	cbz	r5, 8020f08 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8020ec0:	4608      	mov	r0, r1
 8020ec2:	f7fc fbdd 	bl	801d680 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8020ec6:	4680      	mov	r8, r0
 8020ec8:	4620      	mov	r0, r4
 8020eca:	f7fc fc0d 	bl	801d6e8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8020ece:	f8ad 000e 	strh.w	r0, [sp, #14]
 8020ed2:	4620      	mov	r0, r4
 8020ed4:	f8ad a008 	strh.w	sl, [sp, #8]
 8020ed8:	f8ad 900a 	strh.w	r9, [sp, #10]
 8020edc:	f8ad 800c 	strh.w	r8, [sp, #12]
 8020ee0:	f7fc fcba 	bl	801d858 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8020ee4:	280b      	cmp	r0, #11
 8020ee6:	d80f      	bhi.n	8020f08 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8020ee8:	e8df f000 	tbb	[pc, r0]
 8020eec:	0e062a21 	.word	0x0e062a21
 8020ef0:	0e0e0e0e 	.word	0x0e0e0e0e
 8020ef4:	110e0e0e 	.word	0x110e0e0e
 8020ef8:	4620      	mov	r0, r4
 8020efa:	f7fc fc29 	bl	801d750 <_ZNK8touchgfx6Bitmap7getDataEv>
 8020efe:	462b      	mov	r3, r5
 8020f00:	4632      	mov	r2, r6
 8020f02:	a902      	add	r1, sp, #8
 8020f04:	f7ff ff0a 	bl	8020d1c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8020f08:	b004      	add	sp, #16
 8020f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020f0e:	4620      	mov	r0, r4
 8020f10:	f7fc fc1e 	bl	801d750 <_ZNK8touchgfx6Bitmap7getDataEv>
 8020f14:	4680      	mov	r8, r0
 8020f16:	4620      	mov	r0, r4
 8020f18:	f7fc fc4a 	bl	801d7b0 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8020f1c:	ab02      	add	r3, sp, #8
 8020f1e:	4602      	mov	r2, r0
 8020f20:	4641      	mov	r1, r8
 8020f22:	4638      	mov	r0, r7
 8020f24:	e9cd 6500 	strd	r6, r5, [sp]
 8020f28:	f7ff fdc2 	bl	8020ab0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8020f2c:	e7ec      	b.n	8020f08 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8020f2e:	4620      	mov	r0, r4
 8020f30:	f7fc fc0e 	bl	801d750 <_ZNK8touchgfx6Bitmap7getDataEv>
 8020f34:	462b      	mov	r3, r5
 8020f36:	4632      	mov	r2, r6
 8020f38:	a902      	add	r1, sp, #8
 8020f3a:	f7ff fdfb 	bl	8020b34 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8020f3e:	e7e3      	b.n	8020f08 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8020f40:	683b      	ldr	r3, [r7, #0]
 8020f42:	4620      	mov	r0, r4
 8020f44:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8020f48:	f7fc fc02 	bl	801d750 <_ZNK8touchgfx6Bitmap7getDataEv>
 8020f4c:	2300      	movs	r3, #0
 8020f4e:	4601      	mov	r1, r0
 8020f50:	aa02      	add	r2, sp, #8
 8020f52:	4638      	mov	r0, r7
 8020f54:	e9cd 5300 	strd	r5, r3, [sp]
 8020f58:	4633      	mov	r3, r6
 8020f5a:	47c0      	blx	r8
 8020f5c:	e7d4      	b.n	8020f08 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>

08020f5e <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8020f5e:	b4f0      	push	{r4, r5, r6, r7}
 8020f60:	4616      	mov	r6, r2
 8020f62:	461c      	mov	r4, r3
 8020f64:	460d      	mov	r5, r1
 8020f66:	9a04      	ldr	r2, [sp, #16]
 8020f68:	2e01      	cmp	r6, #1
 8020f6a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8020f6e:	d00e      	beq.n	8020f8e <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 8020f70:	d303      	bcc.n	8020f7a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 8020f72:	2e02      	cmp	r6, #2
 8020f74:	d006      	beq.n	8020f84 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 8020f76:	bcf0      	pop	{r4, r5, r6, r7}
 8020f78:	4770      	bx	lr
 8020f7a:	4621      	mov	r1, r4
 8020f7c:	4628      	mov	r0, r5
 8020f7e:	bcf0      	pop	{r4, r5, r6, r7}
 8020f80:	f7ff bdd8 	b.w	8020b34 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8020f84:	4621      	mov	r1, r4
 8020f86:	4628      	mov	r0, r5
 8020f88:	bcf0      	pop	{r4, r5, r6, r7}
 8020f8a:	f7ff bec7 	b.w	8020d1c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8020f8e:	6805      	ldr	r5, [r0, #0]
 8020f90:	2600      	movs	r6, #0
 8020f92:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8020f96:	68ed      	ldr	r5, [r5, #12]
 8020f98:	4613      	mov	r3, r2
 8020f9a:	4622      	mov	r2, r4
 8020f9c:	46ac      	mov	ip, r5
 8020f9e:	bcf0      	pop	{r4, r5, r6, r7}
 8020fa0:	4760      	bx	ip
	...

08020fa4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 8020fa4:	b160      	cbz	r0, 8020fc0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 8020fa6:	2903      	cmp	r1, #3
 8020fa8:	d818      	bhi.n	8020fdc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 8020faa:	e8df f001 	tbb	[pc, r1]
 8020fae:	1902      	.short	0x1902
 8020fb0:	1b06      	.short	0x1b06
 8020fb2:	4b0e      	ldr	r3, [pc, #56]	; (8020fec <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8020fb4:	8818      	ldrh	r0, [r3, #0]
 8020fb6:	4240      	negs	r0, r0
 8020fb8:	4770      	bx	lr
 8020fba:	4b0c      	ldr	r3, [pc, #48]	; (8020fec <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8020fbc:	8818      	ldrh	r0, [r3, #0]
 8020fbe:	4770      	bx	lr
 8020fc0:	2903      	cmp	r1, #3
 8020fc2:	d80b      	bhi.n	8020fdc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 8020fc4:	a301      	add	r3, pc, #4	; (adr r3, 8020fcc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 8020fc6:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8020fca:	bf00      	nop
 8020fcc:	08020fe1 	.word	0x08020fe1
 8020fd0:	08020fbb 	.word	0x08020fbb
 8020fd4:	08020fe5 	.word	0x08020fe5
 8020fd8:	08020fb3 	.word	0x08020fb3
 8020fdc:	2000      	movs	r0, #0
 8020fde:	4770      	bx	lr
 8020fe0:	2001      	movs	r0, #1
 8020fe2:	4770      	bx	lr
 8020fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8020fe8:	4770      	bx	lr
 8020fea:	bf00      	nop
 8020fec:	24006d32 	.word	0x24006d32

08020ff0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 8020ff0:	b160      	cbz	r0, 802100c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 8020ff2:	2903      	cmp	r1, #3
 8020ff4:	d818      	bhi.n	8021028 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 8020ff6:	e8df f001 	tbb	[pc, r1]
 8020ffa:	0219      	.short	0x0219
 8020ffc:	051b      	.short	0x051b
 8020ffe:	4b0e      	ldr	r3, [pc, #56]	; (8021038 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 8021000:	8818      	ldrh	r0, [r3, #0]
 8021002:	4770      	bx	lr
 8021004:	4b0c      	ldr	r3, [pc, #48]	; (8021038 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 8021006:	8818      	ldrh	r0, [r3, #0]
 8021008:	4240      	negs	r0, r0
 802100a:	4770      	bx	lr
 802100c:	2903      	cmp	r1, #3
 802100e:	d80b      	bhi.n	8021028 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 8021010:	a301      	add	r3, pc, #4	; (adr r3, 8021018 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 8021012:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8021016:	bf00      	nop
 8021018:	08020fff 	.word	0x08020fff
 802101c:	08021031 	.word	0x08021031
 8021020:	08021005 	.word	0x08021005
 8021024:	0802102d 	.word	0x0802102d
 8021028:	2000      	movs	r0, #0
 802102a:	4770      	bx	lr
 802102c:	2001      	movs	r0, #1
 802102e:	4770      	bx	lr
 8021030:	f04f 30ff 	mov.w	r0, #4294967295
 8021034:	4770      	bx	lr
 8021036:	bf00      	nop
 8021038:	24006d32 	.word	0x24006d32

0802103c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 802103c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021040:	b097      	sub	sp, #92	; 0x5c
 8021042:	910b      	str	r1, [sp, #44]	; 0x2c
 8021044:	a912      	add	r1, sp, #72	; 0x48
 8021046:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 802104a:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 802104e:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 8021052:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 8021056:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 802105a:	e881 000c 	stmia.w	r1, {r2, r3}
 802105e:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 8021062:	930a      	str	r3, [sp, #40]	; 0x28
 8021064:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 8021068:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 802106c:	9311      	str	r3, [sp, #68]	; 0x44
 802106e:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 8021072:	798d      	ldrb	r5, [r1, #6]
 8021074:	930c      	str	r3, [sp, #48]	; 0x30
 8021076:	7b4b      	ldrb	r3, [r1, #13]
 8021078:	0158      	lsls	r0, r3, #5
 802107a:	f400 7080 	and.w	r0, r0, #256	; 0x100
 802107e:	4328      	orrs	r0, r5
 8021080:	9009      	str	r0, [sp, #36]	; 0x24
 8021082:	f000 817c 	beq.w	802137e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8021086:	011b      	lsls	r3, r3, #4
 8021088:	79c8      	ldrb	r0, [r1, #7]
 802108a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802108e:	4303      	orrs	r3, r0
 8021090:	930e      	str	r3, [sp, #56]	; 0x38
 8021092:	f000 8174 	beq.w	802137e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8021096:	f991 3009 	ldrsb.w	r3, [r1, #9]
 802109a:	b29b      	uxth	r3, r3
 802109c:	2f00      	cmp	r7, #0
 802109e:	f000 8116 	beq.w	80212ce <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 80210a2:	1aff      	subs	r7, r7, r3
 80210a4:	b2bf      	uxth	r7, r7
 80210a6:	043b      	lsls	r3, r7, #16
 80210a8:	d502      	bpl.n	80210b0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 80210aa:	1bf6      	subs	r6, r6, r7
 80210ac:	2700      	movs	r7, #0
 80210ae:	b236      	sxth	r6, r6
 80210b0:	f9b2 1000 	ldrsh.w	r1, [r2]
 80210b4:	a812      	add	r0, sp, #72	; 0x48
 80210b6:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 80210ba:	428e      	cmp	r6, r1
 80210bc:	b28b      	uxth	r3, r1
 80210be:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 80210c2:	bfbf      	itttt	lt
 80210c4:	18ff      	addlt	r7, r7, r3
 80210c6:	1bbe      	sublt	r6, r7, r6
 80210c8:	b2b7      	uxthlt	r7, r6
 80210ca:	460e      	movlt	r6, r1
 80210cc:	8891      	ldrh	r1, [r2, #4]
 80210ce:	440b      	add	r3, r1
 80210d0:	4631      	mov	r1, r6
 80210d2:	b21b      	sxth	r3, r3
 80210d4:	9310      	str	r3, [sp, #64]	; 0x40
 80210d6:	88d3      	ldrh	r3, [r2, #6]
 80210d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80210da:	449a      	add	sl, r3
 80210dc:	fa0f f38a 	sxth.w	r3, sl
 80210e0:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 80210e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80210e6:	4bb5      	ldr	r3, [pc, #724]	; (80213bc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 80210e8:	f893 b000 	ldrb.w	fp, [r3]
 80210ec:	f10b 3cff 	add.w	ip, fp, #4294967295
 80210f0:	f1dc 0300 	rsbs	r3, ip, #0
 80210f4:	eb43 030c 	adc.w	r3, r3, ip
 80210f8:	930d      	str	r3, [sp, #52]	; 0x34
 80210fa:	464b      	mov	r3, r9
 80210fc:	f7f9 fa1b 	bl	801a536 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8021100:	4631      	mov	r1, r6
 8021102:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 8021106:	464b      	mov	r3, r9
 8021108:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802110a:	a812      	add	r0, sp, #72	; 0x48
 802110c:	f7f9 fa30 	bl	801a570 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8021110:	a916      	add	r1, sp, #88	; 0x58
 8021112:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8021116:	a815      	add	r0, sp, #84	; 0x54
 8021118:	f7f9 fb56 	bl	801a7c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 802111c:	f1b9 0f00 	cmp.w	r9, #0
 8021120:	f040 80d8 	bne.w	80212d4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 8021124:	f1bb 0f01 	cmp.w	fp, #1
 8021128:	f040 80dc 	bne.w	80212e4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 802112c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802112e:	b153      	cbz	r3, 8021146 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 8021130:	2508      	movs	r5, #8
 8021132:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021134:	fb95 f3f8 	sdiv	r3, r5, r8
 8021138:	1e5d      	subs	r5, r3, #1
 802113a:	4415      	add	r5, r2
 802113c:	fb95 f5f3 	sdiv	r5, r5, r3
 8021140:	fb15 f503 	smulbb	r5, r5, r3
 8021144:	b2ad      	uxth	r5, r5
 8021146:	b907      	cbnz	r7, 802114a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 8021148:	b16c      	cbz	r4, 8021166 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 802114a:	fb04 7305 	mla	r3, r4, r5, r7
 802114e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8021150:	ebaa 0a04 	sub.w	sl, sl, r4
 8021154:	fb08 f303 	mul.w	r3, r8, r3
 8021158:	fa1f fa8a 	uxth.w	sl, sl
 802115c:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8021160:	f003 0407 	and.w	r4, r3, #7
 8021164:	9226      	str	r2, [sp, #152]	; 0x98
 8021166:	4649      	mov	r1, r9
 8021168:	980d      	ldr	r0, [sp, #52]	; 0x34
 802116a:	f7ff ff1b 	bl	8020fa4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 802116e:	4683      	mov	fp, r0
 8021170:	980d      	ldr	r0, [sp, #52]	; 0x34
 8021172:	f7ff ff3d 	bl	8020ff0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 8021176:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021178:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802117a:	4681      	mov	r9, r0
 802117c:	1a9b      	subs	r3, r3, r2
 802117e:	459a      	cmp	sl, r3
 8021180:	bfa8      	it	ge
 8021182:	469a      	movge	sl, r3
 8021184:	f1ba 0f00 	cmp.w	sl, #0
 8021188:	f340 80f9 	ble.w	802137e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 802118c:	1bf6      	subs	r6, r6, r7
 802118e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021190:	1b9e      	subs	r6, r3, r6
 8021192:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021194:	429e      	cmp	r6, r3
 8021196:	bfd4      	ite	le
 8021198:	ebc7 0706 	rsble	r7, r7, r6
 802119c:	ebc7 0703 	rsbgt	r7, r7, r3
 80211a0:	2f00      	cmp	r7, #0
 80211a2:	f340 80ec 	ble.w	802137e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80211a6:	1bed      	subs	r5, r5, r7
 80211a8:	fb08 f305 	mul.w	r3, r8, r5
 80211ac:	930d      	str	r3, [sp, #52]	; 0x34
 80211ae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80211b0:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80211b4:	930e      	str	r3, [sp, #56]	; 0x38
 80211b6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80211b8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80211bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80211be:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80211c0:	b2db      	uxtb	r3, r3
 80211c2:	9310      	str	r3, [sp, #64]	; 0x40
 80211c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80211c6:	2b00      	cmp	r3, #0
 80211c8:	f040 80de 	bne.w	8021388 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 80211cc:	4b7c      	ldr	r3, [pc, #496]	; (80213c0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 80211ce:	6818      	ldr	r0, [r3, #0]
 80211d0:	6803      	ldr	r3, [r0, #0]
 80211d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80211d4:	4798      	blx	r3
 80211d6:	2301      	movs	r3, #1
 80211d8:	4a7a      	ldr	r2, [pc, #488]	; (80213c4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 80211da:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 80211de:	fb07 9b1b 	mls	fp, r7, fp, r9
 80211e2:	fa03 f308 	lsl.w	r3, r3, r8
 80211e6:	8811      	ldrh	r1, [r2, #0]
 80211e8:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 80211ec:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 80211f0:	3b01      	subs	r3, #1
 80211f2:	fb06 bb07 	mla	fp, r6, r7, fp
 80211f6:	b2db      	uxtb	r3, r3
 80211f8:	930a      	str	r3, [sp, #40]	; 0x28
 80211fa:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 80211fe:	fb01 2303 	mla	r3, r1, r3, r2
 8021202:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021206:	18c3      	adds	r3, r0, r3
 8021208:	9309      	str	r3, [sp, #36]	; 0x24
 802120a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802120c:	781a      	ldrb	r2, [r3, #0]
 802120e:	4122      	asrs	r2, r4
 8021210:	b2d2      	uxtb	r2, r2
 8021212:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8021216:	f0c0 80d7 	bcc.w	80213c8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 802121a:	46be      	mov	lr, r7
 802121c:	9909      	ldr	r1, [sp, #36]	; 0x24
 802121e:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8021222:	f0c0 80ba 	bcc.w	802139a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 8021226:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021228:	4013      	ands	r3, r2
 802122a:	d041      	beq.n	80212b0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 802122c:	20ff      	movs	r0, #255	; 0xff
 802122e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8021230:	fb90 f5f5 	sdiv	r5, r0, r5
 8021234:	436b      	muls	r3, r5
 8021236:	2bfe      	cmp	r3, #254	; 0xfe
 8021238:	dd03      	ble.n	8021242 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 802123a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802123c:	4285      	cmp	r5, r0
 802123e:	f000 80a5 	beq.w	802138c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 8021242:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8021244:	9810      	ldr	r0, [sp, #64]	; 0x40
 8021246:	fb15 f303 	smulbb	r3, r5, r3
 802124a:	b29b      	uxth	r3, r3
 802124c:	1c5d      	adds	r5, r3, #1
 802124e:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 8021252:	780d      	ldrb	r5, [r1, #0]
 8021254:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021258:	fa1f fc83 	uxth.w	ip, r3
 802125c:	43db      	mvns	r3, r3
 802125e:	fb10 f90c 	smulbb	r9, r0, ip
 8021262:	b2db      	uxtb	r3, r3
 8021264:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8021266:	fb05 9503 	mla	r5, r5, r3, r9
 802126a:	b2ad      	uxth	r5, r5
 802126c:	f105 0901 	add.w	r9, r5, #1
 8021270:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8021274:	fb10 f90c 	smulbb	r9, r0, ip
 8021278:	980e      	ldr	r0, [sp, #56]	; 0x38
 802127a:	122d      	asrs	r5, r5, #8
 802127c:	fb10 fc0c 	smulbb	ip, r0, ip
 8021280:	700d      	strb	r5, [r1, #0]
 8021282:	784d      	ldrb	r5, [r1, #1]
 8021284:	fb05 9503 	mla	r5, r5, r3, r9
 8021288:	b2ad      	uxth	r5, r5
 802128a:	f105 0901 	add.w	r9, r5, #1
 802128e:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8021292:	122d      	asrs	r5, r5, #8
 8021294:	704d      	strb	r5, [r1, #1]
 8021296:	788d      	ldrb	r5, [r1, #2]
 8021298:	fb05 cc03 	mla	ip, r5, r3, ip
 802129c:	fa1f fc8c 	uxth.w	ip, ip
 80212a0:	f10c 0301 	add.w	r3, ip, #1
 80212a4:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80212a8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80212ac:	f881 c002 	strb.w	ip, [r1, #2]
 80212b0:	4444      	add	r4, r8
 80212b2:	4431      	add	r1, r6
 80212b4:	b2a4      	uxth	r4, r4
 80212b6:	2c07      	cmp	r4, #7
 80212b8:	bf89      	itett	hi
 80212ba:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 80212bc:	fa42 f208 	asrls.w	r2, r2, r8
 80212c0:	2400      	movhi	r4, #0
 80212c2:	785a      	ldrbhi	r2, [r3, #1]
 80212c4:	bf8a      	itet	hi
 80212c6:	3301      	addhi	r3, #1
 80212c8:	b2d2      	uxtbls	r2, r2
 80212ca:	9326      	strhi	r3, [sp, #152]	; 0x98
 80212cc:	e7a7      	b.n	802121e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 80212ce:	441e      	add	r6, r3
 80212d0:	b236      	sxth	r6, r6
 80212d2:	e6ed      	b.n	80210b0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 80212d4:	f1b9 0f01 	cmp.w	r9, #1
 80212d8:	f47f af28 	bne.w	802112c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80212dc:	f1bb 0f01 	cmp.w	fp, #1
 80212e0:	f47f af24 	bne.w	802112c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80212e4:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 80213c0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 80212e8:	f8db 0000 	ldr.w	r0, [fp]
 80212ec:	6803      	ldr	r3, [r0, #0]
 80212ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80212f0:	4798      	blx	r3
 80212f2:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 80212f6:	465a      	mov	r2, fp
 80212f8:	d006      	beq.n	8021308 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 80212fa:	f1b8 0f04 	cmp.w	r8, #4
 80212fe:	d141      	bne.n	8021384 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 8021300:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021302:	3300      	adds	r3, #0
 8021304:	bf18      	it	ne
 8021306:	2301      	movne	r3, #1
 8021308:	0580      	lsls	r0, r0, #22
 802130a:	d566      	bpl.n	80213da <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 802130c:	f1b8 0f08 	cmp.w	r8, #8
 8021310:	d163      	bne.n	80213da <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8021312:	2b00      	cmp	r3, #0
 8021314:	bf0c      	ite	eq
 8021316:	f44f 7100 	moveq.w	r1, #512	; 0x200
 802131a:	f44f 7180 	movne.w	r1, #256	; 0x100
 802131e:	2f00      	cmp	r7, #0
 8021320:	f47f af04 	bne.w	802112c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8021324:	2c00      	cmp	r4, #0
 8021326:	f47f af01 	bne.w	802112c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 802132a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802132c:	9810      	ldr	r0, [sp, #64]	; 0x40
 802132e:	18f3      	adds	r3, r6, r3
 8021330:	4283      	cmp	r3, r0
 8021332:	f73f aefb 	bgt.w	802112c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8021336:	980a      	ldr	r0, [sp, #40]	; 0x28
 8021338:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802133a:	4403      	add	r3, r0
 802133c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802133e:	4283      	cmp	r3, r0
 8021340:	f73f aef4 	bgt.w	802112c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8021344:	f1b8 0f08 	cmp.w	r8, #8
 8021348:	6810      	ldr	r0, [r2, #0]
 802134a:	f04f 0600 	mov.w	r6, #0
 802134e:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 8021352:	bf18      	it	ne
 8021354:	3501      	addne	r5, #1
 8021356:	6804      	ldr	r4, [r0, #0]
 8021358:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 802135c:	bf18      	it	ne
 802135e:	f025 0501 	bicne.w	r5, r5, #1
 8021362:	e9cd 1605 	strd	r1, r6, [sp, #20]
 8021366:	990c      	ldr	r1, [sp, #48]	; 0x30
 8021368:	bf18      	it	ne
 802136a:	b2ad      	uxthne	r5, r5
 802136c:	9104      	str	r1, [sp, #16]
 802136e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8021370:	e9cd 5a00 	strd	r5, sl, [sp]
 8021374:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8021378:	9926      	ldr	r1, [sp, #152]	; 0x98
 802137a:	6d64      	ldr	r4, [r4, #84]	; 0x54
 802137c:	47a0      	blx	r4
 802137e:	b017      	add	sp, #92	; 0x5c
 8021380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021384:	2300      	movs	r3, #0
 8021386:	e7bf      	b.n	8021308 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 8021388:	980b      	ldr	r0, [sp, #44]	; 0x2c
 802138a:	e724      	b.n	80211d6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 802138c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802138e:	700b      	strb	r3, [r1, #0]
 8021390:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021392:	704b      	strb	r3, [r1, #1]
 8021394:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021396:	708b      	strb	r3, [r1, #2]
 8021398:	e78a      	b.n	80212b0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 802139a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802139c:	b153      	cbz	r3, 80213b4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 802139e:	441c      	add	r4, r3
 80213a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80213a2:	b2a4      	uxth	r4, r4
 80213a4:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 80213a8:	f004 0407 	and.w	r4, r4, #7
 80213ac:	781a      	ldrb	r2, [r3, #0]
 80213ae:	9326      	str	r3, [sp, #152]	; 0x98
 80213b0:	4122      	asrs	r2, r4
 80213b2:	b2d2      	uxtb	r2, r2
 80213b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80213b6:	445b      	add	r3, fp
 80213b8:	9309      	str	r3, [sp, #36]	; 0x24
 80213ba:	e72a      	b.n	8021212 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 80213bc:	24006d30 	.word	0x24006d30
 80213c0:	24006d38 	.word	0x24006d38
 80213c4:	24006d32 	.word	0x24006d32
 80213c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80213ca:	2b00      	cmp	r3, #0
 80213cc:	d1d7      	bne.n	802137e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80213ce:	4b06      	ldr	r3, [pc, #24]	; (80213e8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 80213d0:	6818      	ldr	r0, [r3, #0]
 80213d2:	6803      	ldr	r3, [r0, #0]
 80213d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80213d6:	4798      	blx	r3
 80213d8:	e7d1      	b.n	802137e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80213da:	2b00      	cmp	r3, #0
 80213dc:	f43f aea6 	beq.w	802112c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80213e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80213e4:	e79b      	b.n	802131e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 80213e6:	bf00      	nop
 80213e8:	24006d38 	.word	0x24006d38

080213ec <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 80213ec:	b538      	push	{r3, r4, r5, lr}
 80213ee:	4c15      	ldr	r4, [pc, #84]	; (8021444 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 80213f0:	4605      	mov	r5, r0
 80213f2:	7823      	ldrb	r3, [r4, #0]
 80213f4:	f3bf 8f5b 	dmb	ish
 80213f8:	07da      	lsls	r2, r3, #31
 80213fa:	d40b      	bmi.n	8021414 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80213fc:	4620      	mov	r0, r4
 80213fe:	f005 fb4c 	bl	8026a9a <__cxa_guard_acquire>
 8021402:	b138      	cbz	r0, 8021414 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8021404:	4620      	mov	r0, r4
 8021406:	f005 fb54 	bl	8026ab2 <__cxa_guard_release>
 802140a:	4a0f      	ldr	r2, [pc, #60]	; (8021448 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 802140c:	490f      	ldr	r1, [pc, #60]	; (802144c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 802140e:	4810      	ldr	r0, [pc, #64]	; (8021450 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8021410:	f005 fb3c 	bl	8026a8c <__aeabi_atexit>
 8021414:	4c0f      	ldr	r4, [pc, #60]	; (8021454 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8021416:	7823      	ldrb	r3, [r4, #0]
 8021418:	f3bf 8f5b 	dmb	ish
 802141c:	07db      	lsls	r3, r3, #31
 802141e:	d40b      	bmi.n	8021438 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8021420:	4620      	mov	r0, r4
 8021422:	f005 fb3a 	bl	8026a9a <__cxa_guard_acquire>
 8021426:	b138      	cbz	r0, 8021438 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8021428:	4620      	mov	r0, r4
 802142a:	f005 fb42 	bl	8026ab2 <__cxa_guard_release>
 802142e:	4a06      	ldr	r2, [pc, #24]	; (8021448 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8021430:	4909      	ldr	r1, [pc, #36]	; (8021458 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8021432:	480a      	ldr	r0, [pc, #40]	; (802145c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8021434:	f005 fb2a 	bl	8026a8c <__aeabi_atexit>
 8021438:	4b05      	ldr	r3, [pc, #20]	; (8021450 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 802143a:	612b      	str	r3, [r5, #16]
 802143c:	4b07      	ldr	r3, [pc, #28]	; (802145c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 802143e:	616b      	str	r3, [r5, #20]
 8021440:	bd38      	pop	{r3, r4, r5, pc}
 8021442:	bf00      	nop
 8021444:	24006e10 	.word	0x24006e10
 8021448:	24000000 	.word	0x24000000
 802144c:	0801f235 	.word	0x0801f235
 8021450:	240000a0 	.word	0x240000a0
 8021454:	24006e14 	.word	0x24006e14
 8021458:	0801f233 	.word	0x0801f233
 802145c:	240000a4 	.word	0x240000a4

08021460 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8021460:	b538      	push	{r3, r4, r5, lr}
 8021462:	4c15      	ldr	r4, [pc, #84]	; (80214b8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8021464:	4605      	mov	r5, r0
 8021466:	7823      	ldrb	r3, [r4, #0]
 8021468:	f3bf 8f5b 	dmb	ish
 802146c:	07da      	lsls	r2, r3, #31
 802146e:	d40b      	bmi.n	8021488 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8021470:	4620      	mov	r0, r4
 8021472:	f005 fb12 	bl	8026a9a <__cxa_guard_acquire>
 8021476:	b138      	cbz	r0, 8021488 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8021478:	4620      	mov	r0, r4
 802147a:	f005 fb1a 	bl	8026ab2 <__cxa_guard_release>
 802147e:	4a0f      	ldr	r2, [pc, #60]	; (80214bc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8021480:	490f      	ldr	r1, [pc, #60]	; (80214c0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8021482:	4810      	ldr	r0, [pc, #64]	; (80214c4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8021484:	f005 fb02 	bl	8026a8c <__aeabi_atexit>
 8021488:	4c0f      	ldr	r4, [pc, #60]	; (80214c8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 802148a:	7823      	ldrb	r3, [r4, #0]
 802148c:	f3bf 8f5b 	dmb	ish
 8021490:	07db      	lsls	r3, r3, #31
 8021492:	d40b      	bmi.n	80214ac <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8021494:	4620      	mov	r0, r4
 8021496:	f005 fb00 	bl	8026a9a <__cxa_guard_acquire>
 802149a:	b138      	cbz	r0, 80214ac <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 802149c:	4620      	mov	r0, r4
 802149e:	f005 fb08 	bl	8026ab2 <__cxa_guard_release>
 80214a2:	4a06      	ldr	r2, [pc, #24]	; (80214bc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80214a4:	4909      	ldr	r1, [pc, #36]	; (80214cc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 80214a6:	480a      	ldr	r0, [pc, #40]	; (80214d0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80214a8:	f005 faf0 	bl	8026a8c <__aeabi_atexit>
 80214ac:	4b05      	ldr	r3, [pc, #20]	; (80214c4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80214ae:	60ab      	str	r3, [r5, #8]
 80214b0:	4b07      	ldr	r3, [pc, #28]	; (80214d0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80214b2:	60eb      	str	r3, [r5, #12]
 80214b4:	bd38      	pop	{r3, r4, r5, pc}
 80214b6:	bf00      	nop
 80214b8:	24006df0 	.word	0x24006df0
 80214bc:	24000000 	.word	0x24000000
 80214c0:	0801f239 	.word	0x0801f239
 80214c4:	24000080 	.word	0x24000080
 80214c8:	24006df4 	.word	0x24006df4
 80214cc:	0801f237 	.word	0x0801f237
 80214d0:	24000084 	.word	0x24000084

080214d4 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 80214d4:	b510      	push	{r4, lr}
 80214d6:	4604      	mov	r4, r0
 80214d8:	f7ff ff88 	bl	80213ec <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 80214dc:	4620      	mov	r0, r4
 80214de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80214e2:	f7ff bfbd 	b.w	8021460 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

080214e8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 80214e8:	b538      	push	{r3, r4, r5, lr}
 80214ea:	4c15      	ldr	r4, [pc, #84]	; (8021540 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 80214ec:	4605      	mov	r5, r0
 80214ee:	7823      	ldrb	r3, [r4, #0]
 80214f0:	f3bf 8f5b 	dmb	ish
 80214f4:	07da      	lsls	r2, r3, #31
 80214f6:	d40b      	bmi.n	8021510 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80214f8:	4620      	mov	r0, r4
 80214fa:	f005 face 	bl	8026a9a <__cxa_guard_acquire>
 80214fe:	b138      	cbz	r0, 8021510 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8021500:	4620      	mov	r0, r4
 8021502:	f005 fad6 	bl	8026ab2 <__cxa_guard_release>
 8021506:	4a0f      	ldr	r2, [pc, #60]	; (8021544 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8021508:	490f      	ldr	r1, [pc, #60]	; (8021548 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 802150a:	4810      	ldr	r0, [pc, #64]	; (802154c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 802150c:	f005 fabe 	bl	8026a8c <__aeabi_atexit>
 8021510:	4c0f      	ldr	r4, [pc, #60]	; (8021550 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8021512:	7823      	ldrb	r3, [r4, #0]
 8021514:	f3bf 8f5b 	dmb	ish
 8021518:	07db      	lsls	r3, r3, #31
 802151a:	d40b      	bmi.n	8021534 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 802151c:	4620      	mov	r0, r4
 802151e:	f005 fabc 	bl	8026a9a <__cxa_guard_acquire>
 8021522:	b138      	cbz	r0, 8021534 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8021524:	4620      	mov	r0, r4
 8021526:	f005 fac4 	bl	8026ab2 <__cxa_guard_release>
 802152a:	4a06      	ldr	r2, [pc, #24]	; (8021544 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 802152c:	4909      	ldr	r1, [pc, #36]	; (8021554 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 802152e:	480a      	ldr	r0, [pc, #40]	; (8021558 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8021530:	f005 faac 	bl	8026a8c <__aeabi_atexit>
 8021534:	4b05      	ldr	r3, [pc, #20]	; (802154c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8021536:	622b      	str	r3, [r5, #32]
 8021538:	4b07      	ldr	r3, [pc, #28]	; (8021558 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 802153a:	626b      	str	r3, [r5, #36]	; 0x24
 802153c:	bd38      	pop	{r3, r4, r5, pc}
 802153e:	bf00      	nop
 8021540:	24006e18 	.word	0x24006e18
 8021544:	24000000 	.word	0x24000000
 8021548:	0801f22d 	.word	0x0801f22d
 802154c:	240000a8 	.word	0x240000a8
 8021550:	24006e1c 	.word	0x24006e1c
 8021554:	0801f22b 	.word	0x0801f22b
 8021558:	240000ac 	.word	0x240000ac

0802155c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 802155c:	b538      	push	{r3, r4, r5, lr}
 802155e:	4c15      	ldr	r4, [pc, #84]	; (80215b4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8021560:	4605      	mov	r5, r0
 8021562:	7823      	ldrb	r3, [r4, #0]
 8021564:	f3bf 8f5b 	dmb	ish
 8021568:	07da      	lsls	r2, r3, #31
 802156a:	d40b      	bmi.n	8021584 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 802156c:	4620      	mov	r0, r4
 802156e:	f005 fa94 	bl	8026a9a <__cxa_guard_acquire>
 8021572:	b138      	cbz	r0, 8021584 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8021574:	4620      	mov	r0, r4
 8021576:	f005 fa9c 	bl	8026ab2 <__cxa_guard_release>
 802157a:	4a0f      	ldr	r2, [pc, #60]	; (80215b8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 802157c:	490f      	ldr	r1, [pc, #60]	; (80215bc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 802157e:	4810      	ldr	r0, [pc, #64]	; (80215c0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8021580:	f005 fa84 	bl	8026a8c <__aeabi_atexit>
 8021584:	4c0f      	ldr	r4, [pc, #60]	; (80215c4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8021586:	7823      	ldrb	r3, [r4, #0]
 8021588:	f3bf 8f5b 	dmb	ish
 802158c:	07db      	lsls	r3, r3, #31
 802158e:	d40b      	bmi.n	80215a8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8021590:	4620      	mov	r0, r4
 8021592:	f005 fa82 	bl	8026a9a <__cxa_guard_acquire>
 8021596:	b138      	cbz	r0, 80215a8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8021598:	4620      	mov	r0, r4
 802159a:	f005 fa8a 	bl	8026ab2 <__cxa_guard_release>
 802159e:	4a06      	ldr	r2, [pc, #24]	; (80215b8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80215a0:	4909      	ldr	r1, [pc, #36]	; (80215c8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 80215a2:	480a      	ldr	r0, [pc, #40]	; (80215cc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80215a4:	f005 fa72 	bl	8026a8c <__aeabi_atexit>
 80215a8:	4b05      	ldr	r3, [pc, #20]	; (80215c0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80215aa:	61ab      	str	r3, [r5, #24]
 80215ac:	4b07      	ldr	r3, [pc, #28]	; (80215cc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80215ae:	61eb      	str	r3, [r5, #28]
 80215b0:	bd38      	pop	{r3, r4, r5, pc}
 80215b2:	bf00      	nop
 80215b4:	24006df8 	.word	0x24006df8
 80215b8:	24000000 	.word	0x24000000
 80215bc:	0801f231 	.word	0x0801f231
 80215c0:	24000088 	.word	0x24000088
 80215c4:	24006dfc 	.word	0x24006dfc
 80215c8:	0801f22f 	.word	0x0801f22f
 80215cc:	2400008c 	.word	0x2400008c

080215d0 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 80215d0:	b510      	push	{r4, lr}
 80215d2:	4604      	mov	r4, r0
 80215d4:	f7ff ff88 	bl	80214e8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 80215d8:	4620      	mov	r0, r4
 80215da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80215de:	f7ff bfbd 	b.w	802155c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

080215e4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 80215e4:	b538      	push	{r3, r4, r5, lr}
 80215e6:	4c15      	ldr	r4, [pc, #84]	; (802163c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 80215e8:	4605      	mov	r5, r0
 80215ea:	7823      	ldrb	r3, [r4, #0]
 80215ec:	f3bf 8f5b 	dmb	ish
 80215f0:	07da      	lsls	r2, r3, #31
 80215f2:	d40b      	bmi.n	802160c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 80215f4:	4620      	mov	r0, r4
 80215f6:	f005 fa50 	bl	8026a9a <__cxa_guard_acquire>
 80215fa:	b138      	cbz	r0, 802160c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 80215fc:	4620      	mov	r0, r4
 80215fe:	f005 fa58 	bl	8026ab2 <__cxa_guard_release>
 8021602:	4a0f      	ldr	r2, [pc, #60]	; (8021640 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8021604:	490f      	ldr	r1, [pc, #60]	; (8021644 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 8021606:	4810      	ldr	r0, [pc, #64]	; (8021648 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8021608:	f005 fa40 	bl	8026a8c <__aeabi_atexit>
 802160c:	4c0f      	ldr	r4, [pc, #60]	; (802164c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 802160e:	7823      	ldrb	r3, [r4, #0]
 8021610:	f3bf 8f5b 	dmb	ish
 8021614:	07db      	lsls	r3, r3, #31
 8021616:	d40b      	bmi.n	8021630 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8021618:	4620      	mov	r0, r4
 802161a:	f005 fa3e 	bl	8026a9a <__cxa_guard_acquire>
 802161e:	b138      	cbz	r0, 8021630 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8021620:	4620      	mov	r0, r4
 8021622:	f005 fa46 	bl	8026ab2 <__cxa_guard_release>
 8021626:	4a06      	ldr	r2, [pc, #24]	; (8021640 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8021628:	4909      	ldr	r1, [pc, #36]	; (8021650 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 802162a:	480a      	ldr	r0, [pc, #40]	; (8021654 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 802162c:	f005 fa2e 	bl	8026a8c <__aeabi_atexit>
 8021630:	4b05      	ldr	r3, [pc, #20]	; (8021648 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8021632:	632b      	str	r3, [r5, #48]	; 0x30
 8021634:	4b07      	ldr	r3, [pc, #28]	; (8021654 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8021636:	636b      	str	r3, [r5, #52]	; 0x34
 8021638:	bd38      	pop	{r3, r4, r5, pc}
 802163a:	bf00      	nop
 802163c:	24006e00 	.word	0x24006e00
 8021640:	24000000 	.word	0x24000000
 8021644:	0801f225 	.word	0x0801f225
 8021648:	24000090 	.word	0x24000090
 802164c:	24006e04 	.word	0x24006e04
 8021650:	0801f223 	.word	0x0801f223
 8021654:	24000094 	.word	0x24000094

08021658 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8021658:	b538      	push	{r3, r4, r5, lr}
 802165a:	4c15      	ldr	r4, [pc, #84]	; (80216b0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 802165c:	4605      	mov	r5, r0
 802165e:	7823      	ldrb	r3, [r4, #0]
 8021660:	f3bf 8f5b 	dmb	ish
 8021664:	07da      	lsls	r2, r3, #31
 8021666:	d40b      	bmi.n	8021680 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8021668:	4620      	mov	r0, r4
 802166a:	f005 fa16 	bl	8026a9a <__cxa_guard_acquire>
 802166e:	b138      	cbz	r0, 8021680 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8021670:	4620      	mov	r0, r4
 8021672:	f005 fa1e 	bl	8026ab2 <__cxa_guard_release>
 8021676:	4a0f      	ldr	r2, [pc, #60]	; (80216b4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8021678:	490f      	ldr	r1, [pc, #60]	; (80216b8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 802167a:	4810      	ldr	r0, [pc, #64]	; (80216bc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 802167c:	f005 fa06 	bl	8026a8c <__aeabi_atexit>
 8021680:	4c0f      	ldr	r4, [pc, #60]	; (80216c0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 8021682:	7823      	ldrb	r3, [r4, #0]
 8021684:	f3bf 8f5b 	dmb	ish
 8021688:	07db      	lsls	r3, r3, #31
 802168a:	d40b      	bmi.n	80216a4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 802168c:	4620      	mov	r0, r4
 802168e:	f005 fa04 	bl	8026a9a <__cxa_guard_acquire>
 8021692:	b138      	cbz	r0, 80216a4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8021694:	4620      	mov	r0, r4
 8021696:	f005 fa0c 	bl	8026ab2 <__cxa_guard_release>
 802169a:	4a06      	ldr	r2, [pc, #24]	; (80216b4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 802169c:	4909      	ldr	r1, [pc, #36]	; (80216c4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 802169e:	480a      	ldr	r0, [pc, #40]	; (80216c8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 80216a0:	f005 f9f4 	bl	8026a8c <__aeabi_atexit>
 80216a4:	4b05      	ldr	r3, [pc, #20]	; (80216bc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 80216a6:	62ab      	str	r3, [r5, #40]	; 0x28
 80216a8:	4b07      	ldr	r3, [pc, #28]	; (80216c8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 80216aa:	62eb      	str	r3, [r5, #44]	; 0x2c
 80216ac:	bd38      	pop	{r3, r4, r5, pc}
 80216ae:	bf00      	nop
 80216b0:	24006dd8 	.word	0x24006dd8
 80216b4:	24000000 	.word	0x24000000
 80216b8:	0801f229 	.word	0x0801f229
 80216bc:	24000068 	.word	0x24000068
 80216c0:	24006ddc 	.word	0x24006ddc
 80216c4:	0801f227 	.word	0x0801f227
 80216c8:	2400006c 	.word	0x2400006c

080216cc <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 80216cc:	b510      	push	{r4, lr}
 80216ce:	4604      	mov	r4, r0
 80216d0:	f7ff ff88 	bl	80215e4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 80216d4:	4620      	mov	r0, r4
 80216d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80216da:	f7ff bfbd 	b.w	8021658 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

080216e0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 80216e0:	b538      	push	{r3, r4, r5, lr}
 80216e2:	4c15      	ldr	r4, [pc, #84]	; (8021738 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 80216e4:	4605      	mov	r5, r0
 80216e6:	7823      	ldrb	r3, [r4, #0]
 80216e8:	f3bf 8f5b 	dmb	ish
 80216ec:	07da      	lsls	r2, r3, #31
 80216ee:	d40b      	bmi.n	8021708 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80216f0:	4620      	mov	r0, r4
 80216f2:	f005 f9d2 	bl	8026a9a <__cxa_guard_acquire>
 80216f6:	b138      	cbz	r0, 8021708 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80216f8:	4620      	mov	r0, r4
 80216fa:	f005 f9da 	bl	8026ab2 <__cxa_guard_release>
 80216fe:	4a0f      	ldr	r2, [pc, #60]	; (802173c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8021700:	490f      	ldr	r1, [pc, #60]	; (8021740 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8021702:	4810      	ldr	r0, [pc, #64]	; (8021744 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8021704:	f005 f9c2 	bl	8026a8c <__aeabi_atexit>
 8021708:	4c0f      	ldr	r4, [pc, #60]	; (8021748 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 802170a:	7823      	ldrb	r3, [r4, #0]
 802170c:	f3bf 8f5b 	dmb	ish
 8021710:	07db      	lsls	r3, r3, #31
 8021712:	d40b      	bmi.n	802172c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8021714:	4620      	mov	r0, r4
 8021716:	f005 f9c0 	bl	8026a9a <__cxa_guard_acquire>
 802171a:	b138      	cbz	r0, 802172c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 802171c:	4620      	mov	r0, r4
 802171e:	f005 f9c8 	bl	8026ab2 <__cxa_guard_release>
 8021722:	4a06      	ldr	r2, [pc, #24]	; (802173c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8021724:	4909      	ldr	r1, [pc, #36]	; (802174c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8021726:	480a      	ldr	r0, [pc, #40]	; (8021750 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8021728:	f005 f9b0 	bl	8026a8c <__aeabi_atexit>
 802172c:	4b05      	ldr	r3, [pc, #20]	; (8021744 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 802172e:	642b      	str	r3, [r5, #64]	; 0x40
 8021730:	4b07      	ldr	r3, [pc, #28]	; (8021750 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8021732:	646b      	str	r3, [r5, #68]	; 0x44
 8021734:	bd38      	pop	{r3, r4, r5, pc}
 8021736:	bf00      	nop
 8021738:	24006e08 	.word	0x24006e08
 802173c:	24000000 	.word	0x24000000
 8021740:	0801f21d 	.word	0x0801f21d
 8021744:	24000098 	.word	0x24000098
 8021748:	24006e0c 	.word	0x24006e0c
 802174c:	0801f21b 	.word	0x0801f21b
 8021750:	2400009c 	.word	0x2400009c

08021754 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8021754:	b538      	push	{r3, r4, r5, lr}
 8021756:	4c15      	ldr	r4, [pc, #84]	; (80217ac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8021758:	4605      	mov	r5, r0
 802175a:	7823      	ldrb	r3, [r4, #0]
 802175c:	f3bf 8f5b 	dmb	ish
 8021760:	07da      	lsls	r2, r3, #31
 8021762:	d40b      	bmi.n	802177c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8021764:	4620      	mov	r0, r4
 8021766:	f005 f998 	bl	8026a9a <__cxa_guard_acquire>
 802176a:	b138      	cbz	r0, 802177c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 802176c:	4620      	mov	r0, r4
 802176e:	f005 f9a0 	bl	8026ab2 <__cxa_guard_release>
 8021772:	4a0f      	ldr	r2, [pc, #60]	; (80217b0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8021774:	490f      	ldr	r1, [pc, #60]	; (80217b4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8021776:	4810      	ldr	r0, [pc, #64]	; (80217b8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8021778:	f005 f988 	bl	8026a8c <__aeabi_atexit>
 802177c:	4c0f      	ldr	r4, [pc, #60]	; (80217bc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 802177e:	7823      	ldrb	r3, [r4, #0]
 8021780:	f3bf 8f5b 	dmb	ish
 8021784:	07db      	lsls	r3, r3, #31
 8021786:	d40b      	bmi.n	80217a0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8021788:	4620      	mov	r0, r4
 802178a:	f005 f986 	bl	8026a9a <__cxa_guard_acquire>
 802178e:	b138      	cbz	r0, 80217a0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8021790:	4620      	mov	r0, r4
 8021792:	f005 f98e 	bl	8026ab2 <__cxa_guard_release>
 8021796:	4a06      	ldr	r2, [pc, #24]	; (80217b0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8021798:	4909      	ldr	r1, [pc, #36]	; (80217c0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 802179a:	480a      	ldr	r0, [pc, #40]	; (80217c4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 802179c:	f005 f976 	bl	8026a8c <__aeabi_atexit>
 80217a0:	4b05      	ldr	r3, [pc, #20]	; (80217b8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 80217a2:	63ab      	str	r3, [r5, #56]	; 0x38
 80217a4:	4b07      	ldr	r3, [pc, #28]	; (80217c4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 80217a6:	63eb      	str	r3, [r5, #60]	; 0x3c
 80217a8:	bd38      	pop	{r3, r4, r5, pc}
 80217aa:	bf00      	nop
 80217ac:	24006de8 	.word	0x24006de8
 80217b0:	24000000 	.word	0x24000000
 80217b4:	0801f221 	.word	0x0801f221
 80217b8:	24000078 	.word	0x24000078
 80217bc:	24006dec 	.word	0x24006dec
 80217c0:	0801f21f 	.word	0x0801f21f
 80217c4:	2400007c 	.word	0x2400007c

080217c8 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 80217c8:	b510      	push	{r4, lr}
 80217ca:	4604      	mov	r4, r0
 80217cc:	f7ff ff88 	bl	80216e0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 80217d0:	4620      	mov	r0, r4
 80217d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80217d6:	f7ff bfbd 	b.w	8021754 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

080217dc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 80217dc:	b538      	push	{r3, r4, r5, lr}
 80217de:	4c15      	ldr	r4, [pc, #84]	; (8021834 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 80217e0:	4605      	mov	r5, r0
 80217e2:	7823      	ldrb	r3, [r4, #0]
 80217e4:	f3bf 8f5b 	dmb	ish
 80217e8:	07da      	lsls	r2, r3, #31
 80217ea:	d40b      	bmi.n	8021804 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80217ec:	4620      	mov	r0, r4
 80217ee:	f005 f954 	bl	8026a9a <__cxa_guard_acquire>
 80217f2:	b138      	cbz	r0, 8021804 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80217f4:	4620      	mov	r0, r4
 80217f6:	f005 f95c 	bl	8026ab2 <__cxa_guard_release>
 80217fa:	4a0f      	ldr	r2, [pc, #60]	; (8021838 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80217fc:	490f      	ldr	r1, [pc, #60]	; (802183c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 80217fe:	4810      	ldr	r0, [pc, #64]	; (8021840 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8021800:	f005 f944 	bl	8026a8c <__aeabi_atexit>
 8021804:	4c0f      	ldr	r4, [pc, #60]	; (8021844 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8021806:	7823      	ldrb	r3, [r4, #0]
 8021808:	f3bf 8f5b 	dmb	ish
 802180c:	07db      	lsls	r3, r3, #31
 802180e:	d40b      	bmi.n	8021828 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8021810:	4620      	mov	r0, r4
 8021812:	f005 f942 	bl	8026a9a <__cxa_guard_acquire>
 8021816:	b138      	cbz	r0, 8021828 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8021818:	4620      	mov	r0, r4
 802181a:	f005 f94a 	bl	8026ab2 <__cxa_guard_release>
 802181e:	4a06      	ldr	r2, [pc, #24]	; (8021838 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8021820:	4909      	ldr	r1, [pc, #36]	; (8021848 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8021822:	480a      	ldr	r0, [pc, #40]	; (802184c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8021824:	f005 f932 	bl	8026a8c <__aeabi_atexit>
 8021828:	4b05      	ldr	r3, [pc, #20]	; (8021840 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 802182a:	652b      	str	r3, [r5, #80]	; 0x50
 802182c:	4b07      	ldr	r3, [pc, #28]	; (802184c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 802182e:	656b      	str	r3, [r5, #84]	; 0x54
 8021830:	bd38      	pop	{r3, r4, r5, pc}
 8021832:	bf00      	nop
 8021834:	24006de0 	.word	0x24006de0
 8021838:	24000000 	.word	0x24000000
 802183c:	0801f215 	.word	0x0801f215
 8021840:	24000070 	.word	0x24000070
 8021844:	24006de4 	.word	0x24006de4
 8021848:	0801f213 	.word	0x0801f213
 802184c:	24000074 	.word	0x24000074

08021850 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8021850:	b538      	push	{r3, r4, r5, lr}
 8021852:	4c15      	ldr	r4, [pc, #84]	; (80218a8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8021854:	4605      	mov	r5, r0
 8021856:	7823      	ldrb	r3, [r4, #0]
 8021858:	f3bf 8f5b 	dmb	ish
 802185c:	07da      	lsls	r2, r3, #31
 802185e:	d40b      	bmi.n	8021878 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8021860:	4620      	mov	r0, r4
 8021862:	f005 f91a 	bl	8026a9a <__cxa_guard_acquire>
 8021866:	b138      	cbz	r0, 8021878 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8021868:	4620      	mov	r0, r4
 802186a:	f005 f922 	bl	8026ab2 <__cxa_guard_release>
 802186e:	4a0f      	ldr	r2, [pc, #60]	; (80218ac <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8021870:	490f      	ldr	r1, [pc, #60]	; (80218b0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8021872:	4810      	ldr	r0, [pc, #64]	; (80218b4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8021874:	f005 f90a 	bl	8026a8c <__aeabi_atexit>
 8021878:	4c0f      	ldr	r4, [pc, #60]	; (80218b8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 802187a:	7823      	ldrb	r3, [r4, #0]
 802187c:	f3bf 8f5b 	dmb	ish
 8021880:	07db      	lsls	r3, r3, #31
 8021882:	d40b      	bmi.n	802189c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8021884:	4620      	mov	r0, r4
 8021886:	f005 f908 	bl	8026a9a <__cxa_guard_acquire>
 802188a:	b138      	cbz	r0, 802189c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 802188c:	4620      	mov	r0, r4
 802188e:	f005 f910 	bl	8026ab2 <__cxa_guard_release>
 8021892:	4a06      	ldr	r2, [pc, #24]	; (80218ac <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8021894:	4909      	ldr	r1, [pc, #36]	; (80218bc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8021896:	480a      	ldr	r0, [pc, #40]	; (80218c0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8021898:	f005 f8f8 	bl	8026a8c <__aeabi_atexit>
 802189c:	4b05      	ldr	r3, [pc, #20]	; (80218b4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 802189e:	64ab      	str	r3, [r5, #72]	; 0x48
 80218a0:	4b07      	ldr	r3, [pc, #28]	; (80218c0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 80218a2:	64eb      	str	r3, [r5, #76]	; 0x4c
 80218a4:	bd38      	pop	{r3, r4, r5, pc}
 80218a6:	bf00      	nop
 80218a8:	24006dd0 	.word	0x24006dd0
 80218ac:	24000000 	.word	0x24000000
 80218b0:	0801f219 	.word	0x0801f219
 80218b4:	24000060 	.word	0x24000060
 80218b8:	24006dd4 	.word	0x24006dd4
 80218bc:	0801f217 	.word	0x0801f217
 80218c0:	24000064 	.word	0x24000064

080218c4 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 80218c4:	b510      	push	{r4, lr}
 80218c6:	4604      	mov	r4, r0
 80218c8:	f7ff ff88 	bl	80217dc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 80218cc:	4620      	mov	r0, r4
 80218ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80218d2:	f7ff bfbd 	b.w	8021850 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

080218d6 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 80218d6:	b510      	push	{r4, lr}
 80218d8:	4604      	mov	r4, r0
 80218da:	f7ff fff3 	bl	80218c4 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 80218de:	4620      	mov	r0, r4
 80218e0:	f7ff ff72 	bl	80217c8 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 80218e4:	4620      	mov	r0, r4
 80218e6:	f7ff fe73 	bl	80215d0 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 80218ea:	4620      	mov	r0, r4
 80218ec:	f7ff fdf2 	bl	80214d4 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 80218f0:	4620      	mov	r0, r4
 80218f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80218f6:	f7ff bee9 	b.w	80216cc <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

080218fc <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>:
 80218fc:	b538      	push	{r3, r4, r5, lr}
 80218fe:	4c0b      	ldr	r4, [pc, #44]	; (802192c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x30>)
 8021900:	4605      	mov	r5, r0
 8021902:	7823      	ldrb	r3, [r4, #0]
 8021904:	f3bf 8f5b 	dmb	ish
 8021908:	07db      	lsls	r3, r3, #31
 802190a:	d40b      	bmi.n	8021924 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 802190c:	4620      	mov	r0, r4
 802190e:	f005 f8c4 	bl	8026a9a <__cxa_guard_acquire>
 8021912:	b138      	cbz	r0, 8021924 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 8021914:	4620      	mov	r0, r4
 8021916:	f005 f8cc 	bl	8026ab2 <__cxa_guard_release>
 802191a:	4a05      	ldr	r2, [pc, #20]	; (8021930 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x34>)
 802191c:	4905      	ldr	r1, [pc, #20]	; (8021934 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x38>)
 802191e:	4806      	ldr	r0, [pc, #24]	; (8021938 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 8021920:	f005 f8b4 	bl	8026a8c <__aeabi_atexit>
 8021924:	4b04      	ldr	r3, [pc, #16]	; (8021938 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 8021926:	65ab      	str	r3, [r5, #88]	; 0x58
 8021928:	bd38      	pop	{r3, r4, r5, pc}
 802192a:	bf00      	nop
 802192c:	24006dc4 	.word	0x24006dc4
 8021930:	24000000 	.word	0x24000000
 8021934:	0801f211 	.word	0x0801f211
 8021938:	24000058 	.word	0x24000058

0802193c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>:
 802193c:	b538      	push	{r3, r4, r5, lr}
 802193e:	4c0b      	ldr	r4, [pc, #44]	; (802196c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x30>)
 8021940:	4605      	mov	r5, r0
 8021942:	7823      	ldrb	r3, [r4, #0]
 8021944:	f3bf 8f5b 	dmb	ish
 8021948:	07db      	lsls	r3, r3, #31
 802194a:	d40b      	bmi.n	8021964 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 802194c:	4620      	mov	r0, r4
 802194e:	f005 f8a4 	bl	8026a9a <__cxa_guard_acquire>
 8021952:	b138      	cbz	r0, 8021964 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 8021954:	4620      	mov	r0, r4
 8021956:	f005 f8ac 	bl	8026ab2 <__cxa_guard_release>
 802195a:	4a05      	ldr	r2, [pc, #20]	; (8021970 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x34>)
 802195c:	4905      	ldr	r1, [pc, #20]	; (8021974 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x38>)
 802195e:	4806      	ldr	r0, [pc, #24]	; (8021978 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 8021960:	f005 f894 	bl	8026a8c <__aeabi_atexit>
 8021964:	4b04      	ldr	r3, [pc, #16]	; (8021978 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 8021966:	65eb      	str	r3, [r5, #92]	; 0x5c
 8021968:	bd38      	pop	{r3, r4, r5, pc}
 802196a:	bf00      	nop
 802196c:	24006dc8 	.word	0x24006dc8
 8021970:	24000000 	.word	0x24000000
 8021974:	0801f20f 	.word	0x0801f20f
 8021978:	2400005c 	.word	0x2400005c

0802197c <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>:
 802197c:	b570      	push	{r4, r5, r6, lr}
 802197e:	4d0c      	ldr	r5, [pc, #48]	; (80219b0 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x34>)
 8021980:	4606      	mov	r6, r0
 8021982:	4c0c      	ldr	r4, [pc, #48]	; (80219b4 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x38>)
 8021984:	782b      	ldrb	r3, [r5, #0]
 8021986:	f3bf 8f5b 	dmb	ish
 802198a:	f013 0f01 	tst.w	r3, #1
 802198e:	d10d      	bne.n	80219ac <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 8021990:	4628      	mov	r0, r5
 8021992:	f005 f882 	bl	8026a9a <__cxa_guard_acquire>
 8021996:	b148      	cbz	r0, 80219ac <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 8021998:	4b07      	ldr	r3, [pc, #28]	; (80219b8 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 802199a:	4628      	mov	r0, r5
 802199c:	6023      	str	r3, [r4, #0]
 802199e:	f005 f888 	bl	8026ab2 <__cxa_guard_release>
 80219a2:	4a06      	ldr	r2, [pc, #24]	; (80219bc <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x40>)
 80219a4:	4620      	mov	r0, r4
 80219a6:	4906      	ldr	r1, [pc, #24]	; (80219c0 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x44>)
 80219a8:	f005 f870 	bl	8026a8c <__aeabi_atexit>
 80219ac:	6634      	str	r4, [r6, #96]	; 0x60
 80219ae:	bd70      	pop	{r4, r5, r6, pc}
 80219b0:	24006dcc 	.word	0x24006dcc
 80219b4:	24006e20 	.word	0x24006e20
 80219b8:	0802945c 	.word	0x0802945c
 80219bc:	24000000 	.word	0x24000000
 80219c0:	0801f20d 	.word	0x0801f20d

080219c4 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>:
 80219c4:	b510      	push	{r4, lr}
 80219c6:	4604      	mov	r4, r0
 80219c8:	f7ff ff98 	bl	80218fc <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>
 80219cc:	4620      	mov	r0, r4
 80219ce:	f7ff ffb5 	bl	802193c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>
 80219d2:	4620      	mov	r0, r4
 80219d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80219d8:	f7ff bfd0 	b.w	802197c <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>

080219dc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 80219dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80219e0:	b087      	sub	sp, #28
 80219e2:	788d      	ldrb	r5, [r1, #2]
 80219e4:	f891 9000 	ldrb.w	r9, [r1]
 80219e8:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 80219ec:	9501      	str	r5, [sp, #4]
 80219ee:	784d      	ldrb	r5, [r1, #1]
 80219f0:	9203      	str	r2, [sp, #12]
 80219f2:	9502      	str	r5, [sp, #8]
 80219f4:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 80219f8:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 80219fc:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8021a00:	f89d e058 	ldrb.w	lr, [sp, #88]	; 0x58
 8021a04:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 8021a08:	fb06 0708 	mla	r7, r6, r8, r0
 8021a0c:	2e00      	cmp	r6, #0
 8021a0e:	eb02 0a07 	add.w	sl, r2, r7
 8021a12:	ea4f 2205 	mov.w	r2, r5, lsl #8
 8021a16:	9d01      	ldr	r5, [sp, #4]
 8021a18:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8021a1c:	ea45 0509 	orr.w	r5, r5, r9
 8021a20:	9505      	str	r5, [sp, #20]
 8021a22:	f2c0 80b2 	blt.w	8021b8a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8021a26:	45b3      	cmp	fp, r6
 8021a28:	f340 80af 	ble.w	8021b8a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8021a2c:	2800      	cmp	r0, #0
 8021a2e:	f2c0 80aa 	blt.w	8021b86 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8021a32:	4580      	cmp	r8, r0
 8021a34:	f340 80a7 	ble.w	8021b86 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8021a38:	9a03      	ldr	r2, [sp, #12]
 8021a3a:	5dd7      	ldrb	r7, [r2, r7]
 8021a3c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8021a40:	441f      	add	r7, r3
 8021a42:	1c42      	adds	r2, r0, #1
 8021a44:	f100 80a4 	bmi.w	8021b90 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8021a48:	4590      	cmp	r8, r2
 8021a4a:	f340 80a1 	ble.w	8021b90 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8021a4e:	2c00      	cmp	r4, #0
 8021a50:	f000 809e 	beq.w	8021b90 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8021a54:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8021a58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021a5c:	441d      	add	r5, r3
 8021a5e:	3601      	adds	r6, #1
 8021a60:	f100 809a 	bmi.w	8021b98 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8021a64:	45b3      	cmp	fp, r6
 8021a66:	f340 8097 	ble.w	8021b98 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8021a6a:	f1bc 0f00 	cmp.w	ip, #0
 8021a6e:	f000 8093 	beq.w	8021b98 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8021a72:	2800      	cmp	r0, #0
 8021a74:	f2c0 808e 	blt.w	8021b94 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 8021a78:	4580      	cmp	r8, r0
 8021a7a:	f340 808b 	ble.w	8021b94 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 8021a7e:	f81a 6008 	ldrb.w	r6, [sl, r8]
 8021a82:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8021a86:	441e      	add	r6, r3
 8021a88:	3001      	adds	r0, #1
 8021a8a:	f100 8088 	bmi.w	8021b9e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8021a8e:	4580      	cmp	r8, r0
 8021a90:	f340 8085 	ble.w	8021b9e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8021a94:	2c00      	cmp	r4, #0
 8021a96:	f000 8082 	beq.w	8021b9e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8021a9a:	44d0      	add	r8, sl
 8021a9c:	f898 2001 	ldrb.w	r2, [r8, #1]
 8021aa0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021aa4:	4413      	add	r3, r2
 8021aa6:	b2a4      	uxth	r4, r4
 8021aa8:	f895 a000 	ldrb.w	sl, [r5]
 8021aac:	fa1f fc8c 	uxth.w	ip, ip
 8021ab0:	fb04 fb0c 	mul.w	fp, r4, ip
 8021ab4:	0124      	lsls	r4, r4, #4
 8021ab6:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 8021aba:	f5c4 7880 	rsb	r8, r4, #256	; 0x100
 8021abe:	eba4 040b 	sub.w	r4, r4, fp
 8021ac2:	fa1f f08c 	uxth.w	r0, ip
 8021ac6:	b2a2      	uxth	r2, r4
 8021ac8:	783c      	ldrb	r4, [r7, #0]
 8021aca:	eba8 0800 	sub.w	r8, r8, r0
 8021ace:	fa1f fc8e 	uxth.w	ip, lr
 8021ad2:	fb02 fa0a 	mul.w	sl, r2, sl
 8021ad6:	ea6f 0e0e 	mvn.w	lr, lr
 8021ada:	fa1f f888 	uxth.w	r8, r8
 8021ade:	fa5f fe8e 	uxtb.w	lr, lr
 8021ae2:	fb08 aa04 	mla	sl, r8, r4, sl
 8021ae6:	7834      	ldrb	r4, [r6, #0]
 8021ae8:	fb19 f90e 	smulbb	r9, r9, lr
 8021aec:	fb00 aa04 	mla	sl, r0, r4, sl
 8021af0:	781c      	ldrb	r4, [r3, #0]
 8021af2:	fb0b a404 	mla	r4, fp, r4, sl
 8021af6:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8021afa:	fb04 990c 	mla	r9, r4, ip, r9
 8021afe:	fa1f f989 	uxth.w	r9, r9
 8021b02:	f109 0401 	add.w	r4, r9, #1
 8021b06:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8021b0a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021b0e:	f881 9000 	strb.w	r9, [r1]
 8021b12:	f895 9001 	ldrb.w	r9, [r5, #1]
 8021b16:	787c      	ldrb	r4, [r7, #1]
 8021b18:	fb02 f909 	mul.w	r9, r2, r9
 8021b1c:	fb08 9904 	mla	r9, r8, r4, r9
 8021b20:	7874      	ldrb	r4, [r6, #1]
 8021b22:	fb00 9904 	mla	r9, r0, r4, r9
 8021b26:	785c      	ldrb	r4, [r3, #1]
 8021b28:	fb0b 9404 	mla	r4, fp, r4, r9
 8021b2c:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 8021b30:	9c02      	ldr	r4, [sp, #8]
 8021b32:	fb14 f90e 	smulbb	r9, r4, lr
 8021b36:	fb0a 940c 	mla	r4, sl, ip, r9
 8021b3a:	b2a4      	uxth	r4, r4
 8021b3c:	f104 0901 	add.w	r9, r4, #1
 8021b40:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 8021b44:	1224      	asrs	r4, r4, #8
 8021b46:	704c      	strb	r4, [r1, #1]
 8021b48:	78ad      	ldrb	r5, [r5, #2]
 8021b4a:	78bc      	ldrb	r4, [r7, #2]
 8021b4c:	436a      	muls	r2, r5
 8021b4e:	789b      	ldrb	r3, [r3, #2]
 8021b50:	fb08 2204 	mla	r2, r8, r4, r2
 8021b54:	78b4      	ldrb	r4, [r6, #2]
 8021b56:	fb00 2004 	mla	r0, r0, r4, r2
 8021b5a:	fb0b 0b03 	mla	fp, fp, r3, r0
 8021b5e:	9b01      	ldr	r3, [sp, #4]
 8021b60:	fb13 fe0e 	smulbb	lr, r3, lr
 8021b64:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8021b68:	fb0b ec0c 	mla	ip, fp, ip, lr
 8021b6c:	fa1f fc8c 	uxth.w	ip, ip
 8021b70:	f10c 0e01 	add.w	lr, ip, #1
 8021b74:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 8021b78:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8021b7c:	f881 c002 	strb.w	ip, [r1, #2]
 8021b80:	b007      	add	sp, #28
 8021b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021b86:	af05      	add	r7, sp, #20
 8021b88:	e75b      	b.n	8021a42 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 8021b8a:	ad05      	add	r5, sp, #20
 8021b8c:	462f      	mov	r7, r5
 8021b8e:	e766      	b.n	8021a5e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 8021b90:	ad05      	add	r5, sp, #20
 8021b92:	e764      	b.n	8021a5e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 8021b94:	ae05      	add	r6, sp, #20
 8021b96:	e777      	b.n	8021a88 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 8021b98:	ab05      	add	r3, sp, #20
 8021b9a:	461e      	mov	r6, r3
 8021b9c:	e783      	b.n	8021aa6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 8021b9e:	ab05      	add	r3, sp, #20
 8021ba0:	e781      	b.n	8021aa6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

08021ba2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021ba2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ba6:	b093      	sub	sp, #76	; 0x4c
 8021ba8:	9210      	str	r2, [sp, #64]	; 0x40
 8021baa:	9309      	str	r3, [sp, #36]	; 0x24
 8021bac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8021bae:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8021bb2:	9011      	str	r0, [sp, #68]	; 0x44
 8021bb4:	930e      	str	r3, [sp, #56]	; 0x38
 8021bb6:	6850      	ldr	r0, [r2, #4]
 8021bb8:	910d      	str	r1, [sp, #52]	; 0x34
 8021bba:	6812      	ldr	r2, [r2, #0]
 8021bbc:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8021bc0:	fb00 1303 	mla	r3, r0, r3, r1
 8021bc4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021bc8:	18d3      	adds	r3, r2, r3
 8021bca:	930a      	str	r3, [sp, #40]	; 0x28
 8021bcc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021bce:	681b      	ldr	r3, [r3, #0]
 8021bd0:	930c      	str	r3, [sp, #48]	; 0x30
 8021bd2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021bd4:	685c      	ldr	r4, [r3, #4]
 8021bd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021bd8:	3404      	adds	r4, #4
 8021bda:	43db      	mvns	r3, r3
 8021bdc:	b2db      	uxtb	r3, r3
 8021bde:	930b      	str	r3, [sp, #44]	; 0x2c
 8021be0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021be2:	2b00      	cmp	r3, #0
 8021be4:	dc03      	bgt.n	8021bee <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8021be6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021be8:	2b00      	cmp	r3, #0
 8021bea:	f340 8250 	ble.w	802208e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 8021bee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021bf0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021bf4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021bf8:	1e48      	subs	r0, r1, #1
 8021bfa:	1e55      	subs	r5, r2, #1
 8021bfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021bfe:	2b00      	cmp	r3, #0
 8021c00:	f340 80ee 	ble.w	8021de0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8021c04:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8021c06:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8021c08:	1436      	asrs	r6, r6, #16
 8021c0a:	ea4f 4323 	mov.w	r3, r3, asr #16
 8021c0e:	d406      	bmi.n	8021c1e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8021c10:	4286      	cmp	r6, r0
 8021c12:	da04      	bge.n	8021c1e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8021c14:	2b00      	cmp	r3, #0
 8021c16:	db02      	blt.n	8021c1e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8021c18:	42ab      	cmp	r3, r5
 8021c1a:	f2c0 80e2 	blt.w	8021de2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8021c1e:	3601      	adds	r6, #1
 8021c20:	f100 80cf 	bmi.w	8021dc2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8021c24:	42b1      	cmp	r1, r6
 8021c26:	f2c0 80cc 	blt.w	8021dc2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8021c2a:	3301      	adds	r3, #1
 8021c2c:	f100 80c9 	bmi.w	8021dc2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8021c30:	429a      	cmp	r2, r3
 8021c32:	f2c0 80c6 	blt.w	8021dc2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8021c36:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 8021c3a:	f1bb 0f00 	cmp.w	fp, #0
 8021c3e:	f340 80f1 	ble.w	8021e24 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8021c42:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8021c44:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8021c46:	9824      	ldr	r0, [sp, #144]	; 0x90
 8021c48:	141d      	asrs	r5, r3, #16
 8021c4a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8021c4c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8021c50:	68c7      	ldr	r7, [r0, #12]
 8021c52:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8021c54:	1418      	asrs	r0, r3, #16
 8021c56:	f3c3 3803 	ubfx	r8, r3, #12, #4
 8021c5a:	6892      	ldr	r2, [r2, #8]
 8021c5c:	f100 8137 	bmi.w	8021ece <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8021c60:	f102 3cff 	add.w	ip, r2, #4294967295
 8021c64:	4560      	cmp	r0, ip
 8021c66:	f280 8132 	bge.w	8021ece <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8021c6a:	2d00      	cmp	r5, #0
 8021c6c:	f2c0 812f 	blt.w	8021ece <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8021c70:	f107 3cff 	add.w	ip, r7, #4294967295
 8021c74:	4565      	cmp	r5, ip
 8021c76:	f280 812a 	bge.w	8021ece <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8021c7a:	b212      	sxth	r2, r2
 8021c7c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8021c7e:	fb05 0002 	mla	r0, r5, r2, r0
 8021c82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8021c84:	f817 c000 	ldrb.w	ip, [r7, r0]
 8021c88:	4405      	add	r5, r0
 8021c8a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8021c8e:	eb04 0e0c 	add.w	lr, r4, ip
 8021c92:	f1b8 0f00 	cmp.w	r8, #0
 8021c96:	f000 810c 	beq.w	8021eb2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 8021c9a:	786f      	ldrb	r7, [r5, #1]
 8021c9c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8021ca0:	4427      	add	r7, r4
 8021ca2:	2900      	cmp	r1, #0
 8021ca4:	f000 810d 	beq.w	8021ec2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8021ca8:	18a8      	adds	r0, r5, r2
 8021caa:	5caa      	ldrb	r2, [r5, r2]
 8021cac:	7840      	ldrb	r0, [r0, #1]
 8021cae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021cb2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021cb6:	4422      	add	r2, r4
 8021cb8:	4420      	add	r0, r4
 8021cba:	fa1f f388 	uxth.w	r3, r8
 8021cbe:	f814 a00c 	ldrb.w	sl, [r4, ip]
 8021cc2:	b289      	uxth	r1, r1
 8021cc4:	f897 c000 	ldrb.w	ip, [r7]
 8021cc8:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8021ccc:	fb03 f901 	mul.w	r9, r3, r1
 8021cd0:	011b      	lsls	r3, r3, #4
 8021cd2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8021cd6:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 8021cda:	eba3 0309 	sub.w	r3, r3, r9
 8021cde:	b289      	uxth	r1, r1
 8021ce0:	b29b      	uxth	r3, r3
 8021ce2:	eba8 0801 	sub.w	r8, r8, r1
 8021ce6:	fb03 fc0c 	mul.w	ip, r3, ip
 8021cea:	fa1f f888 	uxth.w	r8, r8
 8021cee:	930f      	str	r3, [sp, #60]	; 0x3c
 8021cf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021cf2:	fb08 cc0a 	mla	ip, r8, sl, ip
 8021cf6:	f892 a000 	ldrb.w	sl, [r2]
 8021cfa:	fb01 cc0a 	mla	ip, r1, sl, ip
 8021cfe:	f890 a000 	ldrb.w	sl, [r0]
 8021d02:	fb09 cc0a 	mla	ip, r9, sl, ip
 8021d06:	f896 a000 	ldrb.w	sl, [r6]
 8021d0a:	fb1a fa03 	smulbb	sl, sl, r3
 8021d0e:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8021d12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021d14:	fb0c ac05 	mla	ip, ip, r5, sl
 8021d18:	fa1f fc8c 	uxth.w	ip, ip
 8021d1c:	f10c 0a01 	add.w	sl, ip, #1
 8021d20:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 8021d24:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021d28:	f886 a000 	strb.w	sl, [r6]
 8021d2c:	f897 c001 	ldrb.w	ip, [r7, #1]
 8021d30:	f89e a001 	ldrb.w	sl, [lr, #1]
 8021d34:	fb03 fc0c 	mul.w	ip, r3, ip
 8021d38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021d3a:	fb08 cc0a 	mla	ip, r8, sl, ip
 8021d3e:	f892 a001 	ldrb.w	sl, [r2, #1]
 8021d42:	fb01 cc0a 	mla	ip, r1, sl, ip
 8021d46:	f890 a001 	ldrb.w	sl, [r0, #1]
 8021d4a:	fb09 cc0a 	mla	ip, r9, sl, ip
 8021d4e:	f896 a001 	ldrb.w	sl, [r6, #1]
 8021d52:	fb1a fa03 	smulbb	sl, sl, r3
 8021d56:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8021d5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021d5c:	fb0c ac05 	mla	ip, ip, r5, sl
 8021d60:	fa1f fc8c 	uxth.w	ip, ip
 8021d64:	f10c 0a01 	add.w	sl, ip, #1
 8021d68:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 8021d6c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8021d70:	f886 c001 	strb.w	ip, [r6, #1]
 8021d74:	78bf      	ldrb	r7, [r7, #2]
 8021d76:	f89e c002 	ldrb.w	ip, [lr, #2]
 8021d7a:	437b      	muls	r3, r7
 8021d7c:	fb08 330c 	mla	r3, r8, ip, r3
 8021d80:	f892 c002 	ldrb.w	ip, [r2, #2]
 8021d84:	7882      	ldrb	r2, [r0, #2]
 8021d86:	fb01 310c 	mla	r1, r1, ip, r3
 8021d8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021d8c:	fb09 1902 	mla	r9, r9, r2, r1
 8021d90:	78b1      	ldrb	r1, [r6, #2]
 8021d92:	fb11 f103 	smulbb	r1, r1, r3
 8021d96:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8021d9a:	fb09 1505 	mla	r5, r9, r5, r1
 8021d9e:	b2ad      	uxth	r5, r5
 8021da0:	1c6b      	adds	r3, r5, #1
 8021da2:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8021da6:	122d      	asrs	r5, r5, #8
 8021da8:	70b5      	strb	r5, [r6, #2]
 8021daa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8021dac:	3603      	adds	r6, #3
 8021dae:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8021db0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021db4:	4413      	add	r3, r2
 8021db6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8021db8:	931d      	str	r3, [sp, #116]	; 0x74
 8021dba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8021dbc:	4413      	add	r3, r2
 8021dbe:	931e      	str	r3, [sp, #120]	; 0x78
 8021dc0:	e73b      	b.n	8021c3a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8021dc2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8021dc4:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8021dc6:	4433      	add	r3, r6
 8021dc8:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8021dca:	931d      	str	r3, [sp, #116]	; 0x74
 8021dcc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8021dce:	4433      	add	r3, r6
 8021dd0:	931e      	str	r3, [sp, #120]	; 0x78
 8021dd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021dd4:	3b01      	subs	r3, #1
 8021dd6:	9309      	str	r3, [sp, #36]	; 0x24
 8021dd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021dda:	3303      	adds	r3, #3
 8021ddc:	930a      	str	r3, [sp, #40]	; 0x28
 8021dde:	e70d      	b.n	8021bfc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8021de0:	d028      	beq.n	8021e34 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8021de2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021de4:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8021de6:	3b01      	subs	r3, #1
 8021de8:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8021dea:	fb00 5003 	mla	r0, r0, r3, r5
 8021dee:	1400      	asrs	r0, r0, #16
 8021df0:	f53f af21 	bmi.w	8021c36 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8021df4:	3901      	subs	r1, #1
 8021df6:	4288      	cmp	r0, r1
 8021df8:	f6bf af1d 	bge.w	8021c36 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8021dfc:	9920      	ldr	r1, [sp, #128]	; 0x80
 8021dfe:	981e      	ldr	r0, [sp, #120]	; 0x78
 8021e00:	fb01 0303 	mla	r3, r1, r3, r0
 8021e04:	141b      	asrs	r3, r3, #16
 8021e06:	f53f af16 	bmi.w	8021c36 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8021e0a:	3a01      	subs	r2, #1
 8021e0c:	4293      	cmp	r3, r2
 8021e0e:	f6bf af12 	bge.w	8021c36 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8021e12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021e14:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8021e18:	1cdf      	adds	r7, r3, #3
 8021e1a:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 8021e1e:	f1b9 0f00 	cmp.w	r9, #0
 8021e22:	dc73      	bgt.n	8021f0c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8021e24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021e26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021e28:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021e2c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021e30:	441a      	add	r2, r3
 8021e32:	920a      	str	r2, [sp, #40]	; 0x28
 8021e34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021e36:	2b00      	cmp	r3, #0
 8021e38:	f340 8129 	ble.w	802208e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 8021e3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021e40:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8021e42:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021e46:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021e4a:	eef0 6a62 	vmov.f32	s13, s5
 8021e4e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021e52:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021e56:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021e5a:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 8021e5e:	eef0 6a43 	vmov.f32	s13, s6
 8021e62:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021e66:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 8021e6a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021e6e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021e72:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021e76:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021e7a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021e7e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021e82:	ee12 2a90 	vmov	r2, s5
 8021e86:	eef0 2a47 	vmov.f32	s5, s14
 8021e8a:	fb92 f3f3 	sdiv	r3, r2, r3
 8021e8e:	ee13 2a10 	vmov	r2, s6
 8021e92:	931f      	str	r3, [sp, #124]	; 0x7c
 8021e94:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8021e96:	eeb0 3a67 	vmov.f32	s6, s15
 8021e9a:	fb92 f3f3 	sdiv	r3, r2, r3
 8021e9e:	9320      	str	r3, [sp, #128]	; 0x80
 8021ea0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021ea2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021ea4:	3b01      	subs	r3, #1
 8021ea6:	930d      	str	r3, [sp, #52]	; 0x34
 8021ea8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8021eaa:	bf08      	it	eq
 8021eac:	4613      	moveq	r3, r2
 8021eae:	9309      	str	r3, [sp, #36]	; 0x24
 8021eb0:	e696      	b.n	8021be0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8021eb2:	b149      	cbz	r1, 8021ec8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8021eb4:	5caa      	ldrb	r2, [r5, r2]
 8021eb6:	4670      	mov	r0, lr
 8021eb8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021ebc:	4422      	add	r2, r4
 8021ebe:	4677      	mov	r7, lr
 8021ec0:	e6fb      	b.n	8021cba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8021ec2:	4670      	mov	r0, lr
 8021ec4:	4672      	mov	r2, lr
 8021ec6:	e6f8      	b.n	8021cba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8021ec8:	4670      	mov	r0, lr
 8021eca:	4672      	mov	r2, lr
 8021ecc:	e7f7      	b.n	8021ebe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8021ece:	f110 0c01 	adds.w	ip, r0, #1
 8021ed2:	f53f af6a 	bmi.w	8021daa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8021ed6:	4562      	cmp	r2, ip
 8021ed8:	f6ff af67 	blt.w	8021daa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8021edc:	f115 0c01 	adds.w	ip, r5, #1
 8021ee0:	f53f af63 	bmi.w	8021daa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8021ee4:	4567      	cmp	r7, ip
 8021ee6:	f6ff af60 	blt.w	8021daa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8021eea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021eec:	b23f      	sxth	r7, r7
 8021eee:	b212      	sxth	r2, r2
 8021ef0:	9002      	str	r0, [sp, #8]
 8021ef2:	9701      	str	r7, [sp, #4]
 8021ef4:	9200      	str	r2, [sp, #0]
 8021ef6:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021ef8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021efa:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8021efe:	e9cd 5803 	strd	r5, r8, [sp, #12]
 8021f02:	4623      	mov	r3, r4
 8021f04:	4631      	mov	r1, r6
 8021f06:	f7ff fd69 	bl	80219dc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 8021f0a:	e74e      	b.n	8021daa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8021f0c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8021f0e:	981e      	ldr	r0, [sp, #120]	; 0x78
 8021f10:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8021f14:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8021f16:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8021f18:	1400      	asrs	r0, r0, #16
 8021f1a:	142d      	asrs	r5, r5, #16
 8021f1c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8021f1e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8021f22:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8021f26:	fb02 5000 	mla	r0, r2, r0, r5
 8021f2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8021f2c:	f815 e000 	ldrb.w	lr, [r5, r0]
 8021f30:	eb05 0c00 	add.w	ip, r5, r0
 8021f34:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8021f38:	eb04 060e 	add.w	r6, r4, lr
 8021f3c:	2b00      	cmp	r3, #0
 8021f3e:	f000 8097 	beq.w	8022070 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 8021f42:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8021f46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021f4a:	4425      	add	r5, r4
 8021f4c:	2900      	cmp	r1, #0
 8021f4e:	f000 8098 	beq.w	8022082 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 8021f52:	eb0c 0002 	add.w	r0, ip, r2
 8021f56:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8021f5a:	7840      	ldrb	r0, [r0, #1]
 8021f5c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021f60:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021f64:	4422      	add	r2, r4
 8021f66:	4420      	add	r0, r4
 8021f68:	b29b      	uxth	r3, r3
 8021f6a:	f814 b00e 	ldrb.w	fp, [r4, lr]
 8021f6e:	b289      	uxth	r1, r1
 8021f70:	f895 e000 	ldrb.w	lr, [r5]
 8021f74:	3703      	adds	r7, #3
 8021f76:	f109 39ff 	add.w	r9, r9, #4294967295
 8021f7a:	fb03 f801 	mul.w	r8, r3, r1
 8021f7e:	011b      	lsls	r3, r3, #4
 8021f80:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8021f84:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8021f88:	eba3 0308 	sub.w	r3, r3, r8
 8021f8c:	b289      	uxth	r1, r1
 8021f8e:	b29b      	uxth	r3, r3
 8021f90:	ebac 0c01 	sub.w	ip, ip, r1
 8021f94:	fb03 fe0e 	mul.w	lr, r3, lr
 8021f98:	fa1f fc8c 	uxth.w	ip, ip
 8021f9c:	930f      	str	r3, [sp, #60]	; 0x3c
 8021f9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021fa0:	fb0c ee0b 	mla	lr, ip, fp, lr
 8021fa4:	f892 b000 	ldrb.w	fp, [r2]
 8021fa8:	fb01 ee0b 	mla	lr, r1, fp, lr
 8021fac:	f890 b000 	ldrb.w	fp, [r0]
 8021fb0:	fb08 ee0b 	mla	lr, r8, fp, lr
 8021fb4:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 8021fb8:	fb1b fb03 	smulbb	fp, fp, r3
 8021fbc:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8021fc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021fc2:	fb0e be0a 	mla	lr, lr, sl, fp
 8021fc6:	fa1f fe8e 	uxth.w	lr, lr
 8021fca:	f10e 0b01 	add.w	fp, lr, #1
 8021fce:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8021fd2:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8021fd6:	f807 ec06 	strb.w	lr, [r7, #-6]
 8021fda:	f895 e001 	ldrb.w	lr, [r5, #1]
 8021fde:	f896 b001 	ldrb.w	fp, [r6, #1]
 8021fe2:	fb03 fe0e 	mul.w	lr, r3, lr
 8021fe6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021fe8:	fb0c ee0b 	mla	lr, ip, fp, lr
 8021fec:	f892 b001 	ldrb.w	fp, [r2, #1]
 8021ff0:	fb01 ee0b 	mla	lr, r1, fp, lr
 8021ff4:	f890 b001 	ldrb.w	fp, [r0, #1]
 8021ff8:	fb08 ee0b 	mla	lr, r8, fp, lr
 8021ffc:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 8022000:	fb1b fb03 	smulbb	fp, fp, r3
 8022004:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8022008:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802200a:	fb0e be0a 	mla	lr, lr, sl, fp
 802200e:	fa1f fe8e 	uxth.w	lr, lr
 8022012:	f10e 0b01 	add.w	fp, lr, #1
 8022016:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 802201a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802201e:	f807 ec05 	strb.w	lr, [r7, #-5]
 8022022:	78ad      	ldrb	r5, [r5, #2]
 8022024:	78b6      	ldrb	r6, [r6, #2]
 8022026:	436b      	muls	r3, r5
 8022028:	7895      	ldrb	r5, [r2, #2]
 802202a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802202c:	fb0c 3306 	mla	r3, ip, r6, r3
 8022030:	fb01 3305 	mla	r3, r1, r5, r3
 8022034:	7885      	ldrb	r5, [r0, #2]
 8022036:	fb08 3805 	mla	r8, r8, r5, r3
 802203a:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 802203e:	fb13 f302 	smulbb	r3, r3, r2
 8022042:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8022046:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8022048:	fb08 380a 	mla	r8, r8, sl, r3
 802204c:	fa1f f888 	uxth.w	r8, r8
 8022050:	f108 0301 	add.w	r3, r8, #1
 8022054:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 8022058:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802205a:	4413      	add	r3, r2
 802205c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802205e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8022062:	931d      	str	r3, [sp, #116]	; 0x74
 8022064:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022066:	f807 8c04 	strb.w	r8, [r7, #-4]
 802206a:	4413      	add	r3, r2
 802206c:	931e      	str	r3, [sp, #120]	; 0x78
 802206e:	e6d6      	b.n	8021e1e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8022070:	b151      	cbz	r1, 8022088 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8022072:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8022076:	4630      	mov	r0, r6
 8022078:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802207c:	4422      	add	r2, r4
 802207e:	4635      	mov	r5, r6
 8022080:	e772      	b.n	8021f68 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8022082:	4630      	mov	r0, r6
 8022084:	4632      	mov	r2, r6
 8022086:	e76f      	b.n	8021f68 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8022088:	4630      	mov	r0, r6
 802208a:	4632      	mov	r2, r6
 802208c:	e7f7      	b.n	802207e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 802208e:	b013      	add	sp, #76	; 0x4c
 8022090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022094 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 8022094:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8022098:	784c      	ldrb	r4, [r1, #1]
 802209a:	f891 a002 	ldrb.w	sl, [r1, #2]
 802209e:	0224      	lsls	r4, r4, #8
 80220a0:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 80220a4:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 80220a8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80220ac:	f891 a000 	ldrb.w	sl, [r1]
 80220b0:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 80220b4:	ea44 040a 	orr.w	r4, r4, sl
 80220b8:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 80220bc:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	; 0x30
 80220c0:	9401      	str	r4, [sp, #4]
 80220c2:	fb05 c70e 	mla	r7, r5, lr, ip
 80220c6:	2d00      	cmp	r5, #0
 80220c8:	eb02 0807 	add.w	r8, r2, r7
 80220cc:	db72      	blt.n	80221b4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 80220ce:	45a9      	cmp	r9, r5
 80220d0:	dd70      	ble.n	80221b4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 80220d2:	f1bc 0f00 	cmp.w	ip, #0
 80220d6:	db6b      	blt.n	80221b0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 80220d8:	45e6      	cmp	lr, ip
 80220da:	dd69      	ble.n	80221b0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 80220dc:	5dd7      	ldrb	r7, [r2, r7]
 80220de:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80220e2:	441f      	add	r7, r3
 80220e4:	f11c 0201 	adds.w	r2, ip, #1
 80220e8:	d467      	bmi.n	80221ba <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 80220ea:	4596      	cmp	lr, r2
 80220ec:	dd65      	ble.n	80221ba <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 80220ee:	2800      	cmp	r0, #0
 80220f0:	d063      	beq.n	80221ba <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 80220f2:	f898 4001 	ldrb.w	r4, [r8, #1]
 80220f6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80220fa:	441c      	add	r4, r3
 80220fc:	3501      	adds	r5, #1
 80220fe:	d460      	bmi.n	80221c2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8022100:	45a9      	cmp	r9, r5
 8022102:	dd5e      	ble.n	80221c2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8022104:	2e00      	cmp	r6, #0
 8022106:	d05c      	beq.n	80221c2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8022108:	f1bc 0f00 	cmp.w	ip, #0
 802210c:	db57      	blt.n	80221be <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 802210e:	45e6      	cmp	lr, ip
 8022110:	dd55      	ble.n	80221be <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 8022112:	f818 500e 	ldrb.w	r5, [r8, lr]
 8022116:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802211a:	441d      	add	r5, r3
 802211c:	f11c 0201 	adds.w	r2, ip, #1
 8022120:	d452      	bmi.n	80221c8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8022122:	4596      	cmp	lr, r2
 8022124:	dd50      	ble.n	80221c8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8022126:	2800      	cmp	r0, #0
 8022128:	d04e      	beq.n	80221c8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 802212a:	44c6      	add	lr, r8
 802212c:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8022130:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022134:	4413      	add	r3, r2
 8022136:	b280      	uxth	r0, r0
 8022138:	f897 8000 	ldrb.w	r8, [r7]
 802213c:	b2b2      	uxth	r2, r6
 802213e:	fb00 f602 	mul.w	r6, r0, r2
 8022142:	0100      	lsls	r0, r0, #4
 8022144:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8022148:	f5c0 7e80 	rsb	lr, r0, #256	; 0x100
 802214c:	1b80      	subs	r0, r0, r6
 802214e:	fa1f fc82 	uxth.w	ip, r2
 8022152:	b282      	uxth	r2, r0
 8022154:	7820      	ldrb	r0, [r4, #0]
 8022156:	ebae 0e0c 	sub.w	lr, lr, ip
 802215a:	4350      	muls	r0, r2
 802215c:	fa1f fe8e 	uxth.w	lr, lr
 8022160:	fb0e 0808 	mla	r8, lr, r8, r0
 8022164:	7828      	ldrb	r0, [r5, #0]
 8022166:	fb0c 8800 	mla	r8, ip, r0, r8
 802216a:	7818      	ldrb	r0, [r3, #0]
 802216c:	fb06 8000 	mla	r0, r6, r0, r8
 8022170:	1200      	asrs	r0, r0, #8
 8022172:	7008      	strb	r0, [r1, #0]
 8022174:	7860      	ldrb	r0, [r4, #1]
 8022176:	f897 8001 	ldrb.w	r8, [r7, #1]
 802217a:	4350      	muls	r0, r2
 802217c:	fb0e 0808 	mla	r8, lr, r8, r0
 8022180:	7868      	ldrb	r0, [r5, #1]
 8022182:	fb0c 8800 	mla	r8, ip, r0, r8
 8022186:	7858      	ldrb	r0, [r3, #1]
 8022188:	fb06 8000 	mla	r0, r6, r0, r8
 802218c:	1200      	asrs	r0, r0, #8
 802218e:	7048      	strb	r0, [r1, #1]
 8022190:	78a0      	ldrb	r0, [r4, #2]
 8022192:	78bf      	ldrb	r7, [r7, #2]
 8022194:	4350      	muls	r0, r2
 8022196:	78aa      	ldrb	r2, [r5, #2]
 8022198:	fb0e 0007 	mla	r0, lr, r7, r0
 802219c:	fb0c 0c02 	mla	ip, ip, r2, r0
 80221a0:	789a      	ldrb	r2, [r3, #2]
 80221a2:	fb06 c202 	mla	r2, r6, r2, ip
 80221a6:	1212      	asrs	r2, r2, #8
 80221a8:	708a      	strb	r2, [r1, #2]
 80221aa:	b002      	add	sp, #8
 80221ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80221b0:	af01      	add	r7, sp, #4
 80221b2:	e797      	b.n	80220e4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 80221b4:	ac01      	add	r4, sp, #4
 80221b6:	4627      	mov	r7, r4
 80221b8:	e7a0      	b.n	80220fc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 80221ba:	ac01      	add	r4, sp, #4
 80221bc:	e79e      	b.n	80220fc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 80221be:	ad01      	add	r5, sp, #4
 80221c0:	e7ac      	b.n	802211c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 80221c2:	ab01      	add	r3, sp, #4
 80221c4:	461d      	mov	r5, r3
 80221c6:	e7b6      	b.n	8022136 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 80221c8:	ab01      	add	r3, sp, #4
 80221ca:	e7b4      	b.n	8022136 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

080221cc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80221cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80221d0:	b08d      	sub	sp, #52	; 0x34
 80221d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80221d6:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 80221da:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80221dc:	900b      	str	r0, [sp, #44]	; 0x2c
 80221de:	9306      	str	r3, [sp, #24]
 80221e0:	6850      	ldr	r0, [r2, #4]
 80221e2:	6812      	ldr	r2, [r2, #0]
 80221e4:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80221e6:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	; 0x70
 80221ea:	fb00 1303 	mla	r3, r0, r3, r1
 80221ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80221f2:	18d3      	adds	r3, r2, r3
 80221f4:	9307      	str	r3, [sp, #28]
 80221f6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80221f8:	681b      	ldr	r3, [r3, #0]
 80221fa:	9308      	str	r3, [sp, #32]
 80221fc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80221fe:	685d      	ldr	r5, [r3, #4]
 8022200:	3504      	adds	r5, #4
 8022202:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022204:	2b00      	cmp	r3, #0
 8022206:	dc03      	bgt.n	8022210 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8022208:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802220a:	2b00      	cmp	r3, #0
 802220c:	f340 81e6 	ble.w	80225dc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8022210:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022212:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022216:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802221a:	1e48      	subs	r0, r1, #1
 802221c:	1e56      	subs	r6, r2, #1
 802221e:	9b06      	ldr	r3, [sp, #24]
 8022220:	2b00      	cmp	r3, #0
 8022222:	f340 80bd 	ble.w	80223a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8022226:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022228:	1427      	asrs	r7, r4, #16
 802222a:	ea4f 4323 	mov.w	r3, r3, asr #16
 802222e:	d406      	bmi.n	802223e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8022230:	4287      	cmp	r7, r0
 8022232:	da04      	bge.n	802223e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8022234:	2b00      	cmp	r3, #0
 8022236:	db02      	blt.n	802223e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8022238:	42b3      	cmp	r3, r6
 802223a:	f2c0 80b2 	blt.w	80223a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 802223e:	3701      	adds	r7, #1
 8022240:	f100 80a1 	bmi.w	8022386 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8022244:	42b9      	cmp	r1, r7
 8022246:	f2c0 809e 	blt.w	8022386 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 802224a:	3301      	adds	r3, #1
 802224c:	f100 809b 	bmi.w	8022386 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8022250:	429a      	cmp	r2, r3
 8022252:	f2c0 8098 	blt.w	8022386 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8022256:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 802225a:	f1bb 0f00 	cmp.w	fp, #0
 802225e:	f340 80bf 	ble.w	80223e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8022262:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8022264:	981e      	ldr	r0, [sp, #120]	; 0x78
 8022266:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022268:	f3c2 3103 	ubfx	r1, r2, #12, #4
 802226c:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8022270:	1420      	asrs	r0, r4, #16
 8022272:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8022274:	ea4f 4723 	mov.w	r7, r3, asr #16
 8022278:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802227c:	6892      	ldr	r2, [r2, #8]
 802227e:	f100 8103 	bmi.w	8022488 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8022282:	f102 3eff 	add.w	lr, r2, #4294967295
 8022286:	4570      	cmp	r0, lr
 8022288:	f280 80fe 	bge.w	8022488 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 802228c:	2f00      	cmp	r7, #0
 802228e:	f2c0 80fb 	blt.w	8022488 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8022292:	f10c 3eff 	add.w	lr, ip, #4294967295
 8022296:	4577      	cmp	r7, lr
 8022298:	f280 80f6 	bge.w	8022488 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 802229c:	b212      	sxth	r2, r2
 802229e:	fb07 0002 	mla	r0, r7, r2, r0
 80222a2:	9f08      	ldr	r7, [sp, #32]
 80222a4:	f817 8000 	ldrb.w	r8, [r7, r0]
 80222a8:	eb07 0e00 	add.w	lr, r7, r0
 80222ac:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80222b0:	eb05 0c08 	add.w	ip, r5, r8
 80222b4:	2b00      	cmp	r3, #0
 80222b6:	f000 80d8 	beq.w	802246a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 80222ba:	f89e 7001 	ldrb.w	r7, [lr, #1]
 80222be:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80222c2:	442f      	add	r7, r5
 80222c4:	2900      	cmp	r1, #0
 80222c6:	f000 80d9 	beq.w	802247c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80222ca:	eb0e 0002 	add.w	r0, lr, r2
 80222ce:	f81e 2002 	ldrb.w	r2, [lr, r2]
 80222d2:	7840      	ldrb	r0, [r0, #1]
 80222d4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80222d8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80222dc:	442a      	add	r2, r5
 80222de:	4428      	add	r0, r5
 80222e0:	b29b      	uxth	r3, r3
 80222e2:	f815 a008 	ldrb.w	sl, [r5, r8]
 80222e6:	b289      	uxth	r1, r1
 80222e8:	f897 8000 	ldrb.w	r8, [r7]
 80222ec:	fb03 f901 	mul.w	r9, r3, r1
 80222f0:	011b      	lsls	r3, r3, #4
 80222f2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80222f6:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80222fa:	eba3 0309 	sub.w	r3, r3, r9
 80222fe:	b289      	uxth	r1, r1
 8022300:	b29b      	uxth	r3, r3
 8022302:	ebae 0e01 	sub.w	lr, lr, r1
 8022306:	fb03 f808 	mul.w	r8, r3, r8
 802230a:	fa1f fe8e 	uxth.w	lr, lr
 802230e:	fb0e 880a 	mla	r8, lr, sl, r8
 8022312:	f892 a000 	ldrb.w	sl, [r2]
 8022316:	fb01 880a 	mla	r8, r1, sl, r8
 802231a:	f890 a000 	ldrb.w	sl, [r0]
 802231e:	fb09 880a 	mla	r8, r9, sl, r8
 8022322:	ea4f 2828 	mov.w	r8, r8, asr #8
 8022326:	f886 8000 	strb.w	r8, [r6]
 802232a:	f897 8001 	ldrb.w	r8, [r7, #1]
 802232e:	f89c a001 	ldrb.w	sl, [ip, #1]
 8022332:	fb03 f808 	mul.w	r8, r3, r8
 8022336:	fb0e 880a 	mla	r8, lr, sl, r8
 802233a:	f892 a001 	ldrb.w	sl, [r2, #1]
 802233e:	fb01 880a 	mla	r8, r1, sl, r8
 8022342:	f890 a001 	ldrb.w	sl, [r0, #1]
 8022346:	fb09 880a 	mla	r8, r9, sl, r8
 802234a:	ea4f 2828 	mov.w	r8, r8, asr #8
 802234e:	f886 8001 	strb.w	r8, [r6, #1]
 8022352:	78bf      	ldrb	r7, [r7, #2]
 8022354:	f89c c002 	ldrb.w	ip, [ip, #2]
 8022358:	437b      	muls	r3, r7
 802235a:	7892      	ldrb	r2, [r2, #2]
 802235c:	fb0e 330c 	mla	r3, lr, ip, r3
 8022360:	fb01 3102 	mla	r1, r1, r2, r3
 8022364:	7882      	ldrb	r2, [r0, #2]
 8022366:	fb09 1902 	mla	r9, r9, r2, r1
 802236a:	ea4f 2929 	mov.w	r9, r9, asr #8
 802236e:	f886 9002 	strb.w	r9, [r6, #2]
 8022372:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8022374:	3603      	adds	r6, #3
 8022376:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8022378:	f10b 3bff 	add.w	fp, fp, #4294967295
 802237c:	441c      	add	r4, r3
 802237e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022380:	4413      	add	r3, r2
 8022382:	9318      	str	r3, [sp, #96]	; 0x60
 8022384:	e769      	b.n	802225a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8022386:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8022388:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 802238a:	441c      	add	r4, r3
 802238c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802238e:	443b      	add	r3, r7
 8022390:	9318      	str	r3, [sp, #96]	; 0x60
 8022392:	9b06      	ldr	r3, [sp, #24]
 8022394:	3b01      	subs	r3, #1
 8022396:	9306      	str	r3, [sp, #24]
 8022398:	9b07      	ldr	r3, [sp, #28]
 802239a:	3303      	adds	r3, #3
 802239c:	9307      	str	r3, [sp, #28]
 802239e:	e73e      	b.n	802221e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80223a0:	d026      	beq.n	80223f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 80223a2:	9b06      	ldr	r3, [sp, #24]
 80223a4:	9819      	ldr	r0, [sp, #100]	; 0x64
 80223a6:	3b01      	subs	r3, #1
 80223a8:	fb00 4003 	mla	r0, r0, r3, r4
 80223ac:	1400      	asrs	r0, r0, #16
 80223ae:	f53f af52 	bmi.w	8022256 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80223b2:	3901      	subs	r1, #1
 80223b4:	4288      	cmp	r0, r1
 80223b6:	f6bf af4e 	bge.w	8022256 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80223ba:	991a      	ldr	r1, [sp, #104]	; 0x68
 80223bc:	9818      	ldr	r0, [sp, #96]	; 0x60
 80223be:	fb01 0303 	mla	r3, r1, r3, r0
 80223c2:	141b      	asrs	r3, r3, #16
 80223c4:	f53f af47 	bmi.w	8022256 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80223c8:	3a01      	subs	r2, #1
 80223ca:	4293      	cmp	r3, r2
 80223cc:	f6bf af43 	bge.w	8022256 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80223d0:	9b07      	ldr	r3, [sp, #28]
 80223d2:	f8dd a018 	ldr.w	sl, [sp, #24]
 80223d6:	f103 0803 	add.w	r8, r3, #3
 80223da:	f1ba 0f00 	cmp.w	sl, #0
 80223de:	dc71      	bgt.n	80224c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 80223e0:	9b06      	ldr	r3, [sp, #24]
 80223e2:	9a07      	ldr	r2, [sp, #28]
 80223e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80223e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80223ec:	441a      	add	r2, r3
 80223ee:	9207      	str	r2, [sp, #28]
 80223f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80223f2:	2b00      	cmp	r3, #0
 80223f4:	f340 80f2 	ble.w	80225dc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 80223f8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80223fc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80223fe:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022402:	eeb0 6a62 	vmov.f32	s12, s5
 8022406:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802240a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802240e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022412:	ee16 4a10 	vmov	r4, s12
 8022416:	eeb0 6a43 	vmov.f32	s12, s6
 802241a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802241e:	ed8d 6a18 	vstr	s12, [sp, #96]	; 0x60
 8022422:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022426:	ee61 7a27 	vmul.f32	s15, s2, s15
 802242a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802242e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022432:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022436:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802243a:	ee12 2a90 	vmov	r2, s5
 802243e:	eef0 2a47 	vmov.f32	s5, s14
 8022442:	fb92 f3f3 	sdiv	r3, r2, r3
 8022446:	ee13 2a10 	vmov	r2, s6
 802244a:	9319      	str	r3, [sp, #100]	; 0x64
 802244c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802244e:	eeb0 3a67 	vmov.f32	s6, s15
 8022452:	fb92 f3f3 	sdiv	r3, r2, r3
 8022456:	931a      	str	r3, [sp, #104]	; 0x68
 8022458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802245a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802245c:	3b01      	subs	r3, #1
 802245e:	9309      	str	r3, [sp, #36]	; 0x24
 8022460:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8022462:	bf08      	it	eq
 8022464:	4613      	moveq	r3, r2
 8022466:	9306      	str	r3, [sp, #24]
 8022468:	e6cb      	b.n	8022202 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 802246a:	b151      	cbz	r1, 8022482 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 802246c:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8022470:	4660      	mov	r0, ip
 8022472:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022476:	442a      	add	r2, r5
 8022478:	4667      	mov	r7, ip
 802247a:	e731      	b.n	80222e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 802247c:	4660      	mov	r0, ip
 802247e:	4662      	mov	r2, ip
 8022480:	e72e      	b.n	80222e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8022482:	4660      	mov	r0, ip
 8022484:	4662      	mov	r2, ip
 8022486:	e7f7      	b.n	8022478 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 8022488:	f110 0e01 	adds.w	lr, r0, #1
 802248c:	f53f af71 	bmi.w	8022372 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8022490:	4572      	cmp	r2, lr
 8022492:	f6ff af6e 	blt.w	8022372 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8022496:	f117 0e01 	adds.w	lr, r7, #1
 802249a:	f53f af6a 	bmi.w	8022372 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 802249e:	45f4      	cmp	ip, lr
 80224a0:	f6ff af67 	blt.w	8022372 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80224a4:	b212      	sxth	r2, r2
 80224a6:	e9cd 3104 	strd	r3, r1, [sp, #16]
 80224aa:	fa0f f38c 	sxth.w	r3, ip
 80224ae:	9200      	str	r2, [sp, #0]
 80224b0:	4631      	mov	r1, r6
 80224b2:	9a08      	ldr	r2, [sp, #32]
 80224b4:	9301      	str	r3, [sp, #4]
 80224b6:	462b      	mov	r3, r5
 80224b8:	e9cd 0702 	strd	r0, r7, [sp, #8]
 80224bc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80224be:	f7ff fde9 	bl	8022094 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 80224c2:	e756      	b.n	8022372 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80224c4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80224c6:	1426      	asrs	r6, r4, #16
 80224c8:	9818      	ldr	r0, [sp, #96]	; 0x60
 80224ca:	f3c4 3303 	ubfx	r3, r4, #12, #4
 80224ce:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80224d2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80224d4:	1400      	asrs	r0, r0, #16
 80224d6:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80224da:	fb02 6000 	mla	r0, r2, r0, r6
 80224de:	9e08      	ldr	r6, [sp, #32]
 80224e0:	f816 e000 	ldrb.w	lr, [r6, r0]
 80224e4:	eb06 0c00 	add.w	ip, r6, r0
 80224e8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80224ec:	eb05 070e 	add.w	r7, r5, lr
 80224f0:	2b00      	cmp	r3, #0
 80224f2:	d064      	beq.n	80225be <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 80224f4:	f89c 6001 	ldrb.w	r6, [ip, #1]
 80224f8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80224fc:	442e      	add	r6, r5
 80224fe:	2900      	cmp	r1, #0
 8022500:	d066      	beq.n	80225d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 8022502:	eb0c 0002 	add.w	r0, ip, r2
 8022506:	f81c 2002 	ldrb.w	r2, [ip, r2]
 802250a:	7840      	ldrb	r0, [r0, #1]
 802250c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022510:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022514:	442a      	add	r2, r5
 8022516:	4428      	add	r0, r5
 8022518:	b29b      	uxth	r3, r3
 802251a:	f815 b00e 	ldrb.w	fp, [r5, lr]
 802251e:	b289      	uxth	r1, r1
 8022520:	f896 e000 	ldrb.w	lr, [r6]
 8022524:	f108 0803 	add.w	r8, r8, #3
 8022528:	f10a 3aff 	add.w	sl, sl, #4294967295
 802252c:	fb03 f901 	mul.w	r9, r3, r1
 8022530:	011b      	lsls	r3, r3, #4
 8022532:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8022536:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 802253a:	eba3 0309 	sub.w	r3, r3, r9
 802253e:	b289      	uxth	r1, r1
 8022540:	b29b      	uxth	r3, r3
 8022542:	ebac 0c01 	sub.w	ip, ip, r1
 8022546:	fb03 fe0e 	mul.w	lr, r3, lr
 802254a:	fa1f fc8c 	uxth.w	ip, ip
 802254e:	fb0c ee0b 	mla	lr, ip, fp, lr
 8022552:	f892 b000 	ldrb.w	fp, [r2]
 8022556:	fb01 ee0b 	mla	lr, r1, fp, lr
 802255a:	f890 b000 	ldrb.w	fp, [r0]
 802255e:	fb09 ee0b 	mla	lr, r9, fp, lr
 8022562:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8022566:	f808 ec06 	strb.w	lr, [r8, #-6]
 802256a:	f896 e001 	ldrb.w	lr, [r6, #1]
 802256e:	f897 b001 	ldrb.w	fp, [r7, #1]
 8022572:	fb03 fe0e 	mul.w	lr, r3, lr
 8022576:	fb0c ee0b 	mla	lr, ip, fp, lr
 802257a:	f892 b001 	ldrb.w	fp, [r2, #1]
 802257e:	fb01 ee0b 	mla	lr, r1, fp, lr
 8022582:	f890 b001 	ldrb.w	fp, [r0, #1]
 8022586:	fb09 ee0b 	mla	lr, r9, fp, lr
 802258a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802258e:	f808 ec05 	strb.w	lr, [r8, #-5]
 8022592:	78b6      	ldrb	r6, [r6, #2]
 8022594:	78bf      	ldrb	r7, [r7, #2]
 8022596:	4373      	muls	r3, r6
 8022598:	7896      	ldrb	r6, [r2, #2]
 802259a:	7882      	ldrb	r2, [r0, #2]
 802259c:	fb0c 3307 	mla	r3, ip, r7, r3
 80225a0:	fb01 3306 	mla	r3, r1, r6, r3
 80225a4:	fb09 3902 	mla	r9, r9, r2, r3
 80225a8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80225aa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80225ac:	441c      	add	r4, r3
 80225ae:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80225b0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80225b4:	4413      	add	r3, r2
 80225b6:	f808 9c04 	strb.w	r9, [r8, #-4]
 80225ba:	9318      	str	r3, [sp, #96]	; 0x60
 80225bc:	e70d      	b.n	80223da <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 80225be:	b151      	cbz	r1, 80225d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 80225c0:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80225c4:	4638      	mov	r0, r7
 80225c6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80225ca:	442a      	add	r2, r5
 80225cc:	463e      	mov	r6, r7
 80225ce:	e7a3      	b.n	8022518 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 80225d0:	4638      	mov	r0, r7
 80225d2:	463a      	mov	r2, r7
 80225d4:	e7a0      	b.n	8022518 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 80225d6:	4638      	mov	r0, r7
 80225d8:	463a      	mov	r2, r7
 80225da:	e7f7      	b.n	80225cc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 80225dc:	b00d      	add	sp, #52	; 0x34
 80225de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080225e2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 80225e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80225e6:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 80225ea:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 80225ee:	2d00      	cmp	r5, #0
 80225f0:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 80225f4:	fb05 700c 	mla	r0, r5, ip, r7
 80225f8:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 80225fc:	f89d e044 	ldrb.w	lr, [sp, #68]	; 0x44
 8022600:	eb02 0800 	add.w	r8, r2, r0
 8022604:	f2c0 8118 	blt.w	8022838 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 8022608:	45a9      	cmp	r9, r5
 802260a:	f340 8115 	ble.w	8022838 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 802260e:	2f00      	cmp	r7, #0
 8022610:	f2c0 8110 	blt.w	8022834 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 8022614:	45bc      	cmp	ip, r7
 8022616:	f340 810d 	ble.w	8022834 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 802261a:	5c12      	ldrb	r2, [r2, r0]
 802261c:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8022620:	1c7a      	adds	r2, r7, #1
 8022622:	f100 810c 	bmi.w	802283e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8022626:	4594      	cmp	ip, r2
 8022628:	f340 8109 	ble.w	802283e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 802262c:	2c00      	cmp	r4, #0
 802262e:	f000 8108 	beq.w	8022842 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 8022632:	f898 2001 	ldrb.w	r2, [r8, #1]
 8022636:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 802263a:	3501      	adds	r5, #1
 802263c:	f100 8105 	bmi.w	802284a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8022640:	45a9      	cmp	r9, r5
 8022642:	f340 8102 	ble.w	802284a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8022646:	f1be 0f00 	cmp.w	lr, #0
 802264a:	f000 8101 	beq.w	8022850 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 802264e:	2f00      	cmp	r7, #0
 8022650:	f2c0 80f9 	blt.w	8022846 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8022654:	45bc      	cmp	ip, r7
 8022656:	f340 80f6 	ble.w	8022846 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 802265a:	f818 200c 	ldrb.w	r2, [r8, ip]
 802265e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8022662:	3701      	adds	r7, #1
 8022664:	f100 80f7 	bmi.w	8022856 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8022668:	45bc      	cmp	ip, r7
 802266a:	f340 80f4 	ble.w	8022856 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 802266e:	2c00      	cmp	r4, #0
 8022670:	f000 80f3 	beq.w	802285a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 8022674:	44c4      	add	ip, r8
 8022676:	f89c 2001 	ldrb.w	r2, [ip, #1]
 802267a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802267e:	fa1f fc84 	uxth.w	ip, r4
 8022682:	fa1f f48e 	uxth.w	r4, lr
 8022686:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 802268a:	fb04 fe0c 	mul.w	lr, r4, ip
 802268e:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8022692:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8022696:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 802269a:	ebac 070e 	sub.w	r7, ip, lr
 802269e:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 80226a2:	ea4f 6915 	mov.w	r9, r5, lsr #24
 80226a6:	b2a4      	uxth	r4, r4
 80226a8:	b2bf      	uxth	r7, r7
 80226aa:	1b1b      	subs	r3, r3, r4
 80226ac:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80226b0:	fb07 fc0a 	mul.w	ip, r7, sl
 80226b4:	b29b      	uxth	r3, r3
 80226b6:	fb03 cc0b 	mla	ip, r3, fp, ip
 80226ba:	9300      	str	r3, [sp, #0]
 80226bc:	fb04 cc09 	mla	ip, r4, r9, ip
 80226c0:	fb0e cc08 	mla	ip, lr, r8, ip
 80226c4:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80226c8:	9301      	str	r3, [sp, #4]
 80226ca:	2b00      	cmp	r3, #0
 80226cc:	f000 80af 	beq.w	802282e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 80226d0:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80226d4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80226d8:	fb0b fc0c 	mul.w	ip, fp, ip
 80226dc:	fb0b f606 	mul.w	r6, fp, r6
 80226e0:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80226e4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80226e8:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80226ec:	44dc      	add	ip, fp
 80226ee:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 80226f2:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80226f6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80226fa:	fb0a fb0b 	mul.w	fp, sl, fp
 80226fe:	fb0a fa00 	mul.w	sl, sl, r0
 8022702:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8022706:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 802270a:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 802270e:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8022712:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8022716:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802271a:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 802271e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022722:	0a36      	lsrs	r6, r6, #8
 8022724:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022728:	44dc      	add	ip, fp
 802272a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802272e:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8022732:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022736:	fb09 fb0b 	mul.w	fp, r9, fp
 802273a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802273e:	fb09 f905 	mul.w	r9, r9, r5
 8022742:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8022746:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802274a:	f509 7580 	add.w	r5, r9, #256	; 0x100
 802274e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022752:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8022756:	fb0c fc07 	mul.w	ip, ip, r7
 802275a:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 802275e:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 8022762:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022766:	4458      	add	r0, fp
 8022768:	fb08 f505 	mul.w	r5, r8, r5
 802276c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022770:	fb08 f802 	mul.w	r8, r8, r2
 8022774:	0a00      	lsrs	r0, r0, #8
 8022776:	0a2a      	lsrs	r2, r5, #8
 8022778:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 802277c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8022780:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022784:	4415      	add	r5, r2
 8022786:	f508 7280 	add.w	r2, r8, #256	; 0x100
 802278a:	0a2d      	lsrs	r5, r5, #8
 802278c:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8022790:	9a00      	ldr	r2, [sp, #0]
 8022792:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8022796:	fb03 cc02 	mla	ip, r3, r2, ip
 802279a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802279e:	9b01      	ldr	r3, [sp, #4]
 80227a0:	fb05 c50e 	mla	r5, r5, lr, ip
 80227a4:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80227a8:	fb00 5004 	mla	r0, r0, r4, r5
 80227ac:	0a00      	lsrs	r0, r0, #8
 80227ae:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 80227b2:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 80227b6:	4378      	muls	r0, r7
 80227b8:	fb02 0006 	mla	r0, r2, r6, r0
 80227bc:	fb0e 0e08 	mla	lr, lr, r8, r0
 80227c0:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 80227c4:	fb04 e000 	mla	r0, r4, r0, lr
 80227c8:	0a00      	lsrs	r0, r0, #8
 80227ca:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80227ce:	4328      	orrs	r0, r5
 80227d0:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 80227d4:	b2ad      	uxth	r5, r5
 80227d6:	b2c4      	uxtb	r4, r0
 80227d8:	436b      	muls	r3, r5
 80227da:	fb14 f405 	smulbb	r4, r4, r5
 80227de:	1c5a      	adds	r2, r3, #1
 80227e0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80227e4:	780b      	ldrb	r3, [r1, #0]
 80227e6:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 80227ea:	b2d2      	uxtb	r2, r2
 80227ec:	fb03 4302 	mla	r3, r3, r2, r4
 80227f0:	b29b      	uxth	r3, r3
 80227f2:	1c5c      	adds	r4, r3, #1
 80227f4:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 80227f8:	784c      	ldrb	r4, [r1, #1]
 80227fa:	fb14 f402 	smulbb	r4, r4, r2
 80227fe:	121b      	asrs	r3, r3, #8
 8022800:	700b      	strb	r3, [r1, #0]
 8022802:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8022806:	fb03 4305 	mla	r3, r3, r5, r4
 802280a:	b29b      	uxth	r3, r3
 802280c:	1c5c      	adds	r4, r3, #1
 802280e:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8022812:	0c04      	lsrs	r4, r0, #16
 8022814:	7888      	ldrb	r0, [r1, #2]
 8022816:	121b      	asrs	r3, r3, #8
 8022818:	fb10 f002 	smulbb	r0, r0, r2
 802281c:	704b      	strb	r3, [r1, #1]
 802281e:	fb04 0005 	mla	r0, r4, r5, r0
 8022822:	b280      	uxth	r0, r0
 8022824:	1c43      	adds	r3, r0, #1
 8022826:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802282a:	1200      	asrs	r0, r0, #8
 802282c:	7088      	strb	r0, [r1, #2]
 802282e:	b003      	add	sp, #12
 8022830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022834:	2600      	movs	r6, #0
 8022836:	e6f3      	b.n	8022620 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 8022838:	2000      	movs	r0, #0
 802283a:	4606      	mov	r6, r0
 802283c:	e6fd      	b.n	802263a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 802283e:	2000      	movs	r0, #0
 8022840:	e6fb      	b.n	802263a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8022842:	4620      	mov	r0, r4
 8022844:	e6f9      	b.n	802263a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8022846:	2500      	movs	r5, #0
 8022848:	e70b      	b.n	8022662 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 802284a:	2200      	movs	r2, #0
 802284c:	4615      	mov	r5, r2
 802284e:	e716      	b.n	802267e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8022850:	4672      	mov	r2, lr
 8022852:	4675      	mov	r5, lr
 8022854:	e713      	b.n	802267e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8022856:	2200      	movs	r2, #0
 8022858:	e711      	b.n	802267e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 802285a:	4622      	mov	r2, r4
 802285c:	e70f      	b.n	802267e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

0802285e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802285e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022862:	b09f      	sub	sp, #124	; 0x7c
 8022864:	921b      	str	r2, [sp, #108]	; 0x6c
 8022866:	9309      	str	r3, [sp, #36]	; 0x24
 8022868:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802286a:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 802286e:	901d      	str	r0, [sp, #116]	; 0x74
 8022870:	931c      	str	r3, [sp, #112]	; 0x70
 8022872:	6850      	ldr	r0, [r2, #4]
 8022874:	9119      	str	r1, [sp, #100]	; 0x64
 8022876:	6812      	ldr	r2, [r2, #0]
 8022878:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 802287a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 802287e:	fb00 1303 	mla	r3, r0, r3, r1
 8022882:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022886:	18d3      	adds	r3, r2, r3
 8022888:	930c      	str	r3, [sp, #48]	; 0x30
 802288a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802288c:	681b      	ldr	r3, [r3, #0]
 802288e:	9312      	str	r3, [sp, #72]	; 0x48
 8022890:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022892:	685e      	ldr	r6, [r3, #4]
 8022894:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8022898:	3604      	adds	r6, #4
 802289a:	930d      	str	r3, [sp, #52]	; 0x34
 802289c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802289e:	2b00      	cmp	r3, #0
 80228a0:	dc03      	bgt.n	80228aa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80228a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80228a4:	2b00      	cmp	r3, #0
 80228a6:	f340 8378 	ble.w	8022f9a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 80228aa:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80228ac:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80228b0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80228b4:	1e48      	subs	r0, r1, #1
 80228b6:	1e57      	subs	r7, r2, #1
 80228b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80228ba:	2b00      	cmp	r3, #0
 80228bc:	f340 818c 	ble.w	8022bd8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 80228c0:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80228c2:	142b      	asrs	r3, r5, #16
 80228c4:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80228c8:	d406      	bmi.n	80228d8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80228ca:	4584      	cmp	ip, r0
 80228cc:	da04      	bge.n	80228d8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80228ce:	2b00      	cmp	r3, #0
 80228d0:	db02      	blt.n	80228d8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80228d2:	42bb      	cmp	r3, r7
 80228d4:	f2c0 8181 	blt.w	8022bda <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 80228d8:	f11c 0c01 	adds.w	ip, ip, #1
 80228dc:	f100 816f 	bmi.w	8022bbe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 80228e0:	4561      	cmp	r1, ip
 80228e2:	f2c0 816c 	blt.w	8022bbe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 80228e6:	3301      	adds	r3, #1
 80228e8:	f100 8169 	bmi.w	8022bbe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 80228ec:	429a      	cmp	r2, r3
 80228ee:	f2c0 8166 	blt.w	8022bbe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 80228f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80228f4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80228f6:	931a      	str	r3, [sp, #104]	; 0x68
 80228f8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80228fa:	2b00      	cmp	r3, #0
 80228fc:	f340 818c 	ble.w	8022c18 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8022900:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022902:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8022906:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802290a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802290e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022910:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8022914:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022916:	141b      	asrs	r3, r3, #16
 8022918:	f100 81d0 	bmi.w	8022cbc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 802291c:	f100 38ff 	add.w	r8, r0, #4294967295
 8022920:	4543      	cmp	r3, r8
 8022922:	f280 81cb 	bge.w	8022cbc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8022926:	f1bc 0f00 	cmp.w	ip, #0
 802292a:	f2c0 81c7 	blt.w	8022cbc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 802292e:	f10e 38ff 	add.w	r8, lr, #4294967295
 8022932:	45c4      	cmp	ip, r8
 8022934:	f280 81c2 	bge.w	8022cbc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8022938:	b200      	sxth	r0, r0
 802293a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802293c:	fb0c 3300 	mla	r3, ip, r0, r3
 8022940:	eb04 0803 	add.w	r8, r4, r3
 8022944:	5ce3      	ldrb	r3, [r4, r3]
 8022946:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802294a:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 802294e:	2a00      	cmp	r2, #0
 8022950:	f000 81a9 	beq.w	8022ca6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 8022954:	f898 c001 	ldrb.w	ip, [r8, #1]
 8022958:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 802295c:	940e      	str	r4, [sp, #56]	; 0x38
 802295e:	0e24      	lsrs	r4, r4, #24
 8022960:	9415      	str	r4, [sp, #84]	; 0x54
 8022962:	b179      	cbz	r1, 8022984 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8022964:	eb08 0c00 	add.w	ip, r8, r0
 8022968:	f818 0000 	ldrb.w	r0, [r8, r0]
 802296c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8022970:	900a      	str	r0, [sp, #40]	; 0x28
 8022972:	0e00      	lsrs	r0, r0, #24
 8022974:	9013      	str	r0, [sp, #76]	; 0x4c
 8022976:	f89c 0001 	ldrb.w	r0, [ip, #1]
 802297a:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 802297e:	900f      	str	r0, [sp, #60]	; 0x3c
 8022980:	0e00      	lsrs	r0, r0, #24
 8022982:	9016      	str	r0, [sp, #88]	; 0x58
 8022984:	b292      	uxth	r2, r2
 8022986:	9815      	ldr	r0, [sp, #84]	; 0x54
 8022988:	b289      	uxth	r1, r1
 802298a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802298c:	fb02 f901 	mul.w	r9, r2, r1
 8022990:	0112      	lsls	r2, r2, #4
 8022992:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8022996:	eba2 0809 	sub.w	r8, r2, r9
 802299a:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802299e:	b289      	uxth	r1, r1
 80229a0:	fa1f f888 	uxth.w	r8, r8
 80229a4:	1a52      	subs	r2, r2, r1
 80229a6:	fb08 f000 	mul.w	r0, r8, r0
 80229aa:	b292      	uxth	r2, r2
 80229ac:	fb02 000e 	mla	r0, r2, lr, r0
 80229b0:	fb01 0004 	mla	r0, r1, r4, r0
 80229b4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80229b6:	fb09 0004 	mla	r0, r9, r4, r0
 80229ba:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80229be:	2800      	cmp	r0, #0
 80229c0:	f000 80f2 	beq.w	8022ba8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80229c4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80229c8:	d01b      	beq.n	8022a02 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 80229ca:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80229ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80229d2:	fb0e fa0a 	mul.w	sl, lr, sl
 80229d6:	fb0e fe03 	mul.w	lr, lr, r3
 80229da:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80229de:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80229e2:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80229e6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80229ea:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80229ee:	4453      	add	r3, sl
 80229f0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80229f4:	0a1b      	lsrs	r3, r3, #8
 80229f6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80229fa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80229fe:	ea43 030c 	orr.w	r3, r3, ip
 8022a02:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8022a04:	2cff      	cmp	r4, #255	; 0xff
 8022a06:	d021      	beq.n	8022a4c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8022a08:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022a0a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8022a0e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8022a10:	fb04 fb0b 	mul.w	fp, r4, fp
 8022a14:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022a16:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022a1a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8022a1c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8022a20:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022a24:	fb04 fa0a 	mul.w	sl, r4, sl
 8022a28:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022a2c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022a30:	44de      	add	lr, fp
 8022a32:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022a36:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022a3a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022a3e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022a42:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022a46:	ea4e 040a 	orr.w	r4, lr, sl
 8022a4a:	940e      	str	r4, [sp, #56]	; 0x38
 8022a4c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022a4e:	2cff      	cmp	r4, #255	; 0xff
 8022a50:	d021      	beq.n	8022a96 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8022a52:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022a54:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8022a58:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022a5a:	fb04 fb0b 	mul.w	fp, r4, fp
 8022a5e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022a60:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022a64:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022a66:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8022a6a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022a6e:	fb04 fa0a 	mul.w	sl, r4, sl
 8022a72:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022a76:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022a7a:	44de      	add	lr, fp
 8022a7c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022a80:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022a84:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022a88:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022a8c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022a90:	ea4e 040a 	orr.w	r4, lr, sl
 8022a94:	940a      	str	r4, [sp, #40]	; 0x28
 8022a96:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8022a98:	2cff      	cmp	r4, #255	; 0xff
 8022a9a:	d021      	beq.n	8022ae0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8022a9c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022a9e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8022aa2:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8022aa4:	fb04 fb0b 	mul.w	fp, r4, fp
 8022aa8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022aaa:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022aae:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8022ab0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8022ab4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022ab8:	fb04 fa0a 	mul.w	sl, r4, sl
 8022abc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022ac0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022ac4:	44de      	add	lr, fp
 8022ac6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022aca:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022ace:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022ad2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022ad6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022ada:	ea4e 040a 	orr.w	r4, lr, sl
 8022ade:	940f      	str	r4, [sp, #60]	; 0x3c
 8022ae0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022ae2:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8022ae6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022aea:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022aee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022af0:	fb08 fc0c 	mul.w	ip, r8, ip
 8022af4:	fb02 cc0e 	mla	ip, r2, lr, ip
 8022af8:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8022afc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022afe:	fb01 cc0e 	mla	ip, r1, lr, ip
 8022b02:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8022b06:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022b08:	fb09 cc0e 	mla	ip, r9, lr, ip
 8022b0c:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8022b10:	fb08 f80e 	mul.w	r8, r8, lr
 8022b14:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022b18:	fb02 8303 	mla	r3, r2, r3, r8
 8022b1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022b1e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022b22:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8022b26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022b28:	fb01 330a 	mla	r3, r1, sl, r3
 8022b2c:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8022b30:	fb09 3901 	mla	r9, r9, r1, r3
 8022b34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022b36:	990d      	ldr	r1, [sp, #52]	; 0x34
 8022b38:	4343      	muls	r3, r0
 8022b3a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022b3e:	1c58      	adds	r0, r3, #1
 8022b40:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8022b44:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8022b48:	ea4c 0c09 	orr.w	ip, ip, r9
 8022b4c:	783b      	ldrb	r3, [r7, #0]
 8022b4e:	fa5f f28c 	uxtb.w	r2, ip
 8022b52:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8022b56:	fb12 f201 	smulbb	r2, r2, r1
 8022b5a:	b2c0      	uxtb	r0, r0
 8022b5c:	fb03 2300 	mla	r3, r3, r0, r2
 8022b60:	b29b      	uxth	r3, r3
 8022b62:	1c5a      	adds	r2, r3, #1
 8022b64:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022b68:	787a      	ldrb	r2, [r7, #1]
 8022b6a:	fb12 f200 	smulbb	r2, r2, r0
 8022b6e:	121b      	asrs	r3, r3, #8
 8022b70:	703b      	strb	r3, [r7, #0]
 8022b72:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8022b76:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8022b7a:	fb03 2301 	mla	r3, r3, r1, r2
 8022b7e:	b29b      	uxth	r3, r3
 8022b80:	1c5a      	adds	r2, r3, #1
 8022b82:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022b86:	121b      	asrs	r3, r3, #8
 8022b88:	707b      	strb	r3, [r7, #1]
 8022b8a:	78bb      	ldrb	r3, [r7, #2]
 8022b8c:	fb13 f000 	smulbb	r0, r3, r0
 8022b90:	fb0c 0c01 	mla	ip, ip, r1, r0
 8022b94:	fa1f fc8c 	uxth.w	ip, ip
 8022b98:	f10c 0301 	add.w	r3, ip, #1
 8022b9c:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8022ba0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8022ba4:	f887 c002 	strb.w	ip, [r7, #2]
 8022ba8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022baa:	3703      	adds	r7, #3
 8022bac:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8022bae:	441a      	add	r2, r3
 8022bb0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022bb2:	441d      	add	r5, r3
 8022bb4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8022bb6:	9229      	str	r2, [sp, #164]	; 0xa4
 8022bb8:	3b01      	subs	r3, #1
 8022bba:	931a      	str	r3, [sp, #104]	; 0x68
 8022bbc:	e69c      	b.n	80228f8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8022bbe:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022bc0:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8022bc2:	441c      	add	r4, r3
 8022bc4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022bc6:	441d      	add	r5, r3
 8022bc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022bca:	9429      	str	r4, [sp, #164]	; 0xa4
 8022bcc:	3b01      	subs	r3, #1
 8022bce:	9309      	str	r3, [sp, #36]	; 0x24
 8022bd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022bd2:	3303      	adds	r3, #3
 8022bd4:	930c      	str	r3, [sp, #48]	; 0x30
 8022bd6:	e66f      	b.n	80228b8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8022bd8:	d026      	beq.n	8022c28 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8022bda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022bdc:	982b      	ldr	r0, [sp, #172]	; 0xac
 8022bde:	3b01      	subs	r3, #1
 8022be0:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8022be2:	fb00 4003 	mla	r0, r0, r3, r4
 8022be6:	1400      	asrs	r0, r0, #16
 8022be8:	f53f ae83 	bmi.w	80228f2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022bec:	3901      	subs	r1, #1
 8022bee:	4288      	cmp	r0, r1
 8022bf0:	f6bf ae7f 	bge.w	80228f2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022bf4:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8022bf6:	fb01 5303 	mla	r3, r1, r3, r5
 8022bfa:	141b      	asrs	r3, r3, #16
 8022bfc:	f53f ae79 	bmi.w	80228f2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022c00:	3a01      	subs	r2, #1
 8022c02:	4293      	cmp	r3, r2
 8022c04:	f6bf ae75 	bge.w	80228f2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022c08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022c0a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8022c0e:	f103 0e03 	add.w	lr, r3, #3
 8022c12:	f1bb 0f00 	cmp.w	fp, #0
 8022c16:	dc71      	bgt.n	8022cfc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8022c18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022c1a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022c1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022c20:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022c24:	4423      	add	r3, r4
 8022c26:	930c      	str	r3, [sp, #48]	; 0x30
 8022c28:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8022c2a:	2b00      	cmp	r3, #0
 8022c2c:	f340 81b5 	ble.w	8022f9a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8022c30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022c34:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022c36:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022c3a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022c3e:	eef0 6a62 	vmov.f32	s13, s5
 8022c42:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022c46:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022c4a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022c4e:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8022c52:	eef0 6a43 	vmov.f32	s13, s6
 8022c56:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022c5a:	ee16 5a90 	vmov	r5, s13
 8022c5e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022c62:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022c66:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022c6a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022c6e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022c72:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022c76:	ee12 2a90 	vmov	r2, s5
 8022c7a:	eef0 2a47 	vmov.f32	s5, s14
 8022c7e:	fb92 f3f3 	sdiv	r3, r2, r3
 8022c82:	ee13 2a10 	vmov	r2, s6
 8022c86:	932b      	str	r3, [sp, #172]	; 0xac
 8022c88:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022c8a:	eeb0 3a67 	vmov.f32	s6, s15
 8022c8e:	fb92 f3f3 	sdiv	r3, r2, r3
 8022c92:	932c      	str	r3, [sp, #176]	; 0xb0
 8022c94:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8022c96:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8022c98:	3b01      	subs	r3, #1
 8022c9a:	9319      	str	r3, [sp, #100]	; 0x64
 8022c9c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022c9e:	bf08      	it	eq
 8022ca0:	4613      	moveq	r3, r2
 8022ca2:	9309      	str	r3, [sp, #36]	; 0x24
 8022ca4:	e5fa      	b.n	802289c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8022ca6:	2900      	cmp	r1, #0
 8022ca8:	f43f ae6c 	beq.w	8022984 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8022cac:	f818 0000 	ldrb.w	r0, [r8, r0]
 8022cb0:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8022cb4:	900a      	str	r0, [sp, #40]	; 0x28
 8022cb6:	0e00      	lsrs	r0, r0, #24
 8022cb8:	9013      	str	r0, [sp, #76]	; 0x4c
 8022cba:	e663      	b.n	8022984 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8022cbc:	f113 0801 	adds.w	r8, r3, #1
 8022cc0:	f53f af72 	bmi.w	8022ba8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8022cc4:	4540      	cmp	r0, r8
 8022cc6:	f6ff af6f 	blt.w	8022ba8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8022cca:	f11c 0801 	adds.w	r8, ip, #1
 8022cce:	f53f af6b 	bmi.w	8022ba8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8022cd2:	45c6      	cmp	lr, r8
 8022cd4:	f6ff af68 	blt.w	8022ba8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8022cd8:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8022cda:	b200      	sxth	r0, r0
 8022cdc:	9302      	str	r3, [sp, #8]
 8022cde:	fa0f f38e 	sxth.w	r3, lr
 8022ce2:	9000      	str	r0, [sp, #0]
 8022ce4:	9301      	str	r3, [sp, #4]
 8022ce6:	4633      	mov	r3, r6
 8022ce8:	981d      	ldr	r0, [sp, #116]	; 0x74
 8022cea:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8022cee:	e9cd c203 	strd	ip, r2, [sp, #12]
 8022cf2:	4639      	mov	r1, r7
 8022cf4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022cf6:	f7ff fc74 	bl	80225e2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 8022cfa:	e755      	b.n	8022ba8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8022cfc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022cfe:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8022d02:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8022d04:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8022d08:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022d0a:	1427      	asrs	r7, r4, #16
 8022d0c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022d0e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022d12:	142b      	asrs	r3, r5, #16
 8022d14:	fb01 7303 	mla	r3, r1, r3, r7
 8022d18:	18e7      	adds	r7, r4, r3
 8022d1a:	5ce3      	ldrb	r3, [r4, r3]
 8022d1c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8022d20:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8022d24:	2a00      	cmp	r2, #0
 8022d26:	f000 812e 	beq.w	8022f86 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 8022d2a:	f897 8001 	ldrb.w	r8, [r7, #1]
 8022d2e:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8022d32:	9410      	str	r4, [sp, #64]	; 0x40
 8022d34:	0e24      	lsrs	r4, r4, #24
 8022d36:	9417      	str	r4, [sp, #92]	; 0x5c
 8022d38:	b170      	cbz	r0, 8022d58 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8022d3a:	eb07 0801 	add.w	r8, r7, r1
 8022d3e:	5c79      	ldrb	r1, [r7, r1]
 8022d40:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8022d44:	910b      	str	r1, [sp, #44]	; 0x2c
 8022d46:	0e09      	lsrs	r1, r1, #24
 8022d48:	9114      	str	r1, [sp, #80]	; 0x50
 8022d4a:	f898 1001 	ldrb.w	r1, [r8, #1]
 8022d4e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8022d52:	9111      	str	r1, [sp, #68]	; 0x44
 8022d54:	0e09      	lsrs	r1, r1, #24
 8022d56:	9118      	str	r1, [sp, #96]	; 0x60
 8022d58:	b292      	uxth	r2, r2
 8022d5a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8022d5c:	b280      	uxth	r0, r0
 8022d5e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022d60:	fb02 f900 	mul.w	r9, r2, r0
 8022d64:	0112      	lsls	r2, r2, #4
 8022d66:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8022d6a:	eba2 0809 	sub.w	r8, r2, r9
 8022d6e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8022d72:	b280      	uxth	r0, r0
 8022d74:	fa1f f888 	uxth.w	r8, r8
 8022d78:	1a12      	subs	r2, r2, r0
 8022d7a:	fb08 f101 	mul.w	r1, r8, r1
 8022d7e:	b292      	uxth	r2, r2
 8022d80:	fb02 110c 	mla	r1, r2, ip, r1
 8022d84:	fb00 1104 	mla	r1, r0, r4, r1
 8022d88:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8022d8a:	fb09 1104 	mla	r1, r9, r4, r1
 8022d8e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8022d92:	2900      	cmp	r1, #0
 8022d94:	f000 80ec 	beq.w	8022f70 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 8022d98:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8022d9c:	d019      	beq.n	8022dd2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 8022d9e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8022da2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022da6:	fb0c fa0a 	mul.w	sl, ip, sl
 8022daa:	fb0c fc03 	mul.w	ip, ip, r3
 8022dae:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8022db2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8022db6:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8022dba:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022dbe:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8022dc2:	4453      	add	r3, sl
 8022dc4:	0a3f      	lsrs	r7, r7, #8
 8022dc6:	0a1b      	lsrs	r3, r3, #8
 8022dc8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022dcc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022dd0:	433b      	orrs	r3, r7
 8022dd2:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8022dd4:	2cff      	cmp	r4, #255	; 0xff
 8022dd6:	d020      	beq.n	8022e1a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 8022dd8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022dda:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8022dde:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8022de0:	4367      	muls	r7, r4
 8022de2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022de4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022de8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022dec:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8022dee:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022df2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022df6:	fb04 fa0a 	mul.w	sl, r4, sl
 8022dfa:	44bc      	add	ip, r7
 8022dfc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8022e00:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022e04:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022e08:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022e0c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022e10:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022e14:	ea4c 040a 	orr.w	r4, ip, sl
 8022e18:	9410      	str	r4, [sp, #64]	; 0x40
 8022e1a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022e1c:	2cff      	cmp	r4, #255	; 0xff
 8022e1e:	d020      	beq.n	8022e62 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 8022e20:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022e22:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8022e26:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022e28:	4367      	muls	r7, r4
 8022e2a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022e2c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022e30:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022e34:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022e36:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022e3a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022e3e:	fb04 fa0a 	mul.w	sl, r4, sl
 8022e42:	44bc      	add	ip, r7
 8022e44:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8022e48:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022e4c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022e50:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022e54:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022e58:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022e5c:	ea4c 040a 	orr.w	r4, ip, sl
 8022e60:	940b      	str	r4, [sp, #44]	; 0x2c
 8022e62:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8022e64:	2cff      	cmp	r4, #255	; 0xff
 8022e66:	d020      	beq.n	8022eaa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 8022e68:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022e6a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8022e6e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8022e70:	4367      	muls	r7, r4
 8022e72:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022e74:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022e78:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022e7c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8022e7e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022e82:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022e86:	fb04 fa0a 	mul.w	sl, r4, sl
 8022e8a:	44bc      	add	ip, r7
 8022e8c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8022e90:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022e94:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022e98:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022e9c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022ea0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022ea4:	ea4c 040a 	orr.w	r4, ip, sl
 8022ea8:	9411      	str	r4, [sp, #68]	; 0x44
 8022eaa:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022eac:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8022eb0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022eb4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8022eb8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022eba:	fb08 f707 	mul.w	r7, r8, r7
 8022ebe:	fb02 770c 	mla	r7, r2, ip, r7
 8022ec2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022ec6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022ec8:	fb00 770c 	mla	r7, r0, ip, r7
 8022ecc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022ed0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022ed2:	fb09 770c 	mla	r7, r9, ip, r7
 8022ed6:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8022eda:	fb08 f80c 	mul.w	r8, r8, ip
 8022ede:	0a3f      	lsrs	r7, r7, #8
 8022ee0:	fb02 8303 	mla	r3, r2, r3, r8
 8022ee4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022ee6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022eea:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8022eee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022ef0:	fb00 330a 	mla	r3, r0, sl, r3
 8022ef4:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8022ef8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8022efa:	fb09 3c0c 	mla	ip, r9, ip, r3
 8022efe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022f00:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022f04:	434b      	muls	r3, r1
 8022f06:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022f0a:	1c59      	adds	r1, r3, #1
 8022f0c:	ea47 070c 	orr.w	r7, r7, ip
 8022f10:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8022f14:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8022f18:	b2fa      	uxtb	r2, r7
 8022f1a:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8022f1e:	fb12 f200 	smulbb	r2, r2, r0
 8022f22:	b2c9      	uxtb	r1, r1
 8022f24:	fb03 2301 	mla	r3, r3, r1, r2
 8022f28:	b29b      	uxth	r3, r3
 8022f2a:	1c5a      	adds	r2, r3, #1
 8022f2c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022f30:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8022f34:	fb12 f201 	smulbb	r2, r2, r1
 8022f38:	121b      	asrs	r3, r3, #8
 8022f3a:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8022f3e:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8022f42:	0c3f      	lsrs	r7, r7, #16
 8022f44:	fb03 2300 	mla	r3, r3, r0, r2
 8022f48:	b29b      	uxth	r3, r3
 8022f4a:	1c5a      	adds	r2, r3, #1
 8022f4c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022f50:	121b      	asrs	r3, r3, #8
 8022f52:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8022f56:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8022f5a:	fb13 f101 	smulbb	r1, r3, r1
 8022f5e:	fb07 1700 	mla	r7, r7, r0, r1
 8022f62:	b2bf      	uxth	r7, r7
 8022f64:	1c7b      	adds	r3, r7, #1
 8022f66:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8022f6a:	123f      	asrs	r7, r7, #8
 8022f6c:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8022f70:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022f72:	f10e 0e03 	add.w	lr, lr, #3
 8022f76:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8022f78:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022f7c:	441a      	add	r2, r3
 8022f7e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022f80:	9229      	str	r2, [sp, #164]	; 0xa4
 8022f82:	441d      	add	r5, r3
 8022f84:	e645      	b.n	8022c12 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 8022f86:	2800      	cmp	r0, #0
 8022f88:	f43f aee6 	beq.w	8022d58 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8022f8c:	5c79      	ldrb	r1, [r7, r1]
 8022f8e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8022f92:	910b      	str	r1, [sp, #44]	; 0x2c
 8022f94:	0e09      	lsrs	r1, r1, #24
 8022f96:	9114      	str	r1, [sp, #80]	; 0x50
 8022f98:	e6de      	b.n	8022d58 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8022f9a:	b01f      	add	sp, #124	; 0x7c
 8022f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022fa0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8022fa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022fa4:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 8022fa8:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8022fac:	2d00      	cmp	r5, #0
 8022fae:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8022fb2:	fb05 700e 	mla	r0, r5, lr, r7
 8022fb6:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8022fba:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 8022fbe:	eb02 0800 	add.w	r8, r2, r0
 8022fc2:	f2c0 8105 	blt.w	80231d0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 8022fc6:	45a9      	cmp	r9, r5
 8022fc8:	f340 8102 	ble.w	80231d0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 8022fcc:	2f00      	cmp	r7, #0
 8022fce:	f2c0 80fd 	blt.w	80231cc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 8022fd2:	45be      	cmp	lr, r7
 8022fd4:	f340 80fa 	ble.w	80231cc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 8022fd8:	5c12      	ldrb	r2, [r2, r0]
 8022fda:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8022fde:	1c7a      	adds	r2, r7, #1
 8022fe0:	f100 80f9 	bmi.w	80231d6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 8022fe4:	4596      	cmp	lr, r2
 8022fe6:	f340 80f6 	ble.w	80231d6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 8022fea:	2c00      	cmp	r4, #0
 8022fec:	f000 80f5 	beq.w	80231da <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 8022ff0:	f898 2001 	ldrb.w	r2, [r8, #1]
 8022ff4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8022ff8:	3501      	adds	r5, #1
 8022ffa:	f100 80f2 	bmi.w	80231e2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 8022ffe:	45a9      	cmp	r9, r5
 8023000:	f340 80ef 	ble.w	80231e2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 8023004:	f1bc 0f00 	cmp.w	ip, #0
 8023008:	f000 80ee 	beq.w	80231e8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 802300c:	2f00      	cmp	r7, #0
 802300e:	f2c0 80e6 	blt.w	80231de <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 8023012:	45be      	cmp	lr, r7
 8023014:	f340 80e3 	ble.w	80231de <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 8023018:	f818 200e 	ldrb.w	r2, [r8, lr]
 802301c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8023020:	3701      	adds	r7, #1
 8023022:	f100 80e4 	bmi.w	80231ee <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 8023026:	45be      	cmp	lr, r7
 8023028:	f340 80e1 	ble.w	80231ee <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 802302c:	2c00      	cmp	r4, #0
 802302e:	f000 80e0 	beq.w	80231f2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 8023032:	44c6      	add	lr, r8
 8023034:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8023038:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802303c:	b2a3      	uxth	r3, r4
 802303e:	fa1f fc8c 	uxth.w	ip, ip
 8023042:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8023046:	fb0c fe03 	mul.w	lr, ip, r3
 802304a:	011b      	lsls	r3, r3, #4
 802304c:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8023050:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 8023054:	eba3 070e 	sub.w	r7, r3, lr
 8023058:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 802305c:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8023060:	fa1f f48c 	uxth.w	r4, ip
 8023064:	b2bf      	uxth	r7, r7
 8023066:	1b1b      	subs	r3, r3, r4
 8023068:	ea4f 6812 	mov.w	r8, r2, lsr #24
 802306c:	fb07 fc0a 	mul.w	ip, r7, sl
 8023070:	b29b      	uxth	r3, r3
 8023072:	fb03 cc0b 	mla	ip, r3, fp, ip
 8023076:	9300      	str	r3, [sp, #0]
 8023078:	fb04 cc09 	mla	ip, r4, r9, ip
 802307c:	fb0e cc08 	mla	ip, lr, r8, ip
 8023080:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8023084:	9301      	str	r3, [sp, #4]
 8023086:	2b00      	cmp	r3, #0
 8023088:	f000 809d 	beq.w	80231c6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 802308c:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8023090:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023094:	fb0b fc0c 	mul.w	ip, fp, ip
 8023098:	fb0b f606 	mul.w	r6, fp, r6
 802309c:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80230a0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80230a4:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80230a8:	44dc      	add	ip, fp
 80230aa:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 80230ae:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80230b2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80230b6:	fb0a fb0b 	mul.w	fp, sl, fp
 80230ba:	fb0a fa00 	mul.w	sl, sl, r0
 80230be:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 80230c2:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 80230c6:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80230ca:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80230ce:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 80230d2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80230d6:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 80230da:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80230de:	0a36      	lsrs	r6, r6, #8
 80230e0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80230e4:	44dc      	add	ip, fp
 80230e6:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80230ea:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80230ee:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80230f2:	fb09 fb0b 	mul.w	fp, r9, fp
 80230f6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80230fa:	fb09 f905 	mul.w	r9, r9, r5
 80230fe:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8023102:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023106:	f509 7580 	add.w	r5, r9, #256	; 0x100
 802310a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802310e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8023112:	fb0c fc07 	mul.w	ip, ip, r7
 8023116:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 802311a:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 802311e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023122:	4458      	add	r0, fp
 8023124:	fb08 f505 	mul.w	r5, r8, r5
 8023128:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802312c:	fb08 f802 	mul.w	r8, r8, r2
 8023130:	0a00      	lsrs	r0, r0, #8
 8023132:	0a2a      	lsrs	r2, r5, #8
 8023134:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8023138:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802313c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023140:	4415      	add	r5, r2
 8023142:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8023146:	0a2d      	lsrs	r5, r5, #8
 8023148:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 802314c:	9a00      	ldr	r2, [sp, #0]
 802314e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8023152:	fb03 cc02 	mla	ip, r3, r2, ip
 8023156:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802315a:	9b01      	ldr	r3, [sp, #4]
 802315c:	fb05 c50e 	mla	r5, r5, lr, ip
 8023160:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8023164:	43db      	mvns	r3, r3
 8023166:	fb00 5004 	mla	r0, r0, r4, r5
 802316a:	b2db      	uxtb	r3, r3
 802316c:	0a00      	lsrs	r0, r0, #8
 802316e:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8023172:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 8023176:	4378      	muls	r0, r7
 8023178:	fb02 0006 	mla	r0, r2, r6, r0
 802317c:	780a      	ldrb	r2, [r1, #0]
 802317e:	fb0e 0e08 	mla	lr, lr, r8, r0
 8023182:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 8023186:	fb04 e000 	mla	r0, r4, r0, lr
 802318a:	fb02 f403 	mul.w	r4, r2, r3
 802318e:	0a00      	lsrs	r0, r0, #8
 8023190:	1c62      	adds	r2, r4, #1
 8023192:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023196:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802319a:	4328      	orrs	r0, r5
 802319c:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80231a0:	700a      	strb	r2, [r1, #0]
 80231a2:	784a      	ldrb	r2, [r1, #1]
 80231a4:	435a      	muls	r2, r3
 80231a6:	1c54      	adds	r4, r2, #1
 80231a8:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 80231ac:	0a02      	lsrs	r2, r0, #8
 80231ae:	0c00      	lsrs	r0, r0, #16
 80231b0:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80231b4:	704a      	strb	r2, [r1, #1]
 80231b6:	788a      	ldrb	r2, [r1, #2]
 80231b8:	4353      	muls	r3, r2
 80231ba:	1c5a      	adds	r2, r3, #1
 80231bc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80231c0:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80231c4:	7088      	strb	r0, [r1, #2]
 80231c6:	b003      	add	sp, #12
 80231c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80231cc:	2600      	movs	r6, #0
 80231ce:	e706      	b.n	8022fde <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 80231d0:	2000      	movs	r0, #0
 80231d2:	4606      	mov	r6, r0
 80231d4:	e710      	b.n	8022ff8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 80231d6:	2000      	movs	r0, #0
 80231d8:	e70e      	b.n	8022ff8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 80231da:	4620      	mov	r0, r4
 80231dc:	e70c      	b.n	8022ff8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 80231de:	2500      	movs	r5, #0
 80231e0:	e71e      	b.n	8023020 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 80231e2:	2200      	movs	r2, #0
 80231e4:	4615      	mov	r5, r2
 80231e6:	e729      	b.n	802303c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 80231e8:	4662      	mov	r2, ip
 80231ea:	4665      	mov	r5, ip
 80231ec:	e726      	b.n	802303c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 80231ee:	2200      	movs	r2, #0
 80231f0:	e724      	b.n	802303c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 80231f2:	4622      	mov	r2, r4
 80231f4:	e722      	b.n	802303c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

080231f6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80231f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80231fa:	b09b      	sub	sp, #108	; 0x6c
 80231fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8023200:	9218      	str	r2, [sp, #96]	; 0x60
 8023202:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023204:	9019      	str	r0, [sp, #100]	; 0x64
 8023206:	9116      	str	r1, [sp, #88]	; 0x58
 8023208:	6850      	ldr	r0, [r2, #4]
 802320a:	9307      	str	r3, [sp, #28]
 802320c:	6812      	ldr	r2, [r2, #0]
 802320e:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8023210:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8023214:	fb00 1303 	mla	r3, r0, r3, r1
 8023218:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802321c:	18d3      	adds	r3, r2, r3
 802321e:	930a      	str	r3, [sp, #40]	; 0x28
 8023220:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023222:	681b      	ldr	r3, [r3, #0]
 8023224:	930f      	str	r3, [sp, #60]	; 0x3c
 8023226:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023228:	685e      	ldr	r6, [r3, #4]
 802322a:	3604      	adds	r6, #4
 802322c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802322e:	2b00      	cmp	r3, #0
 8023230:	dc03      	bgt.n	802323a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8023232:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023234:	2b00      	cmp	r3, #0
 8023236:	f340 834f 	ble.w	80238d8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 802323a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802323c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023240:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023244:	1e48      	subs	r0, r1, #1
 8023246:	1e57      	subs	r7, r2, #1
 8023248:	9b07      	ldr	r3, [sp, #28]
 802324a:	2b00      	cmp	r3, #0
 802324c:	f340 8178 	ble.w	8023540 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8023250:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8023252:	142b      	asrs	r3, r5, #16
 8023254:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8023258:	d406      	bmi.n	8023268 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802325a:	4584      	cmp	ip, r0
 802325c:	da04      	bge.n	8023268 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802325e:	2b00      	cmp	r3, #0
 8023260:	db02      	blt.n	8023268 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8023262:	42bb      	cmp	r3, r7
 8023264:	f2c0 816d 	blt.w	8023542 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8023268:	f11c 0c01 	adds.w	ip, ip, #1
 802326c:	f100 815b 	bmi.w	8023526 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8023270:	4561      	cmp	r1, ip
 8023272:	f2c0 8158 	blt.w	8023526 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8023276:	3301      	adds	r3, #1
 8023278:	f100 8155 	bmi.w	8023526 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802327c:	429a      	cmp	r2, r3
 802327e:	f2c0 8152 	blt.w	8023526 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8023282:	9b07      	ldr	r3, [sp, #28]
 8023284:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8023286:	9317      	str	r3, [sp, #92]	; 0x5c
 8023288:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802328a:	2b00      	cmp	r3, #0
 802328c:	f340 8178 	ble.w	8023580 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8023290:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8023292:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8023296:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802329a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802329e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80232a0:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 80232a4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80232a6:	141b      	asrs	r3, r3, #16
 80232a8:	f100 81ba 	bmi.w	8023620 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80232ac:	f101 38ff 	add.w	r8, r1, #4294967295
 80232b0:	4543      	cmp	r3, r8
 80232b2:	f280 81b5 	bge.w	8023620 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80232b6:	f1bc 0f00 	cmp.w	ip, #0
 80232ba:	f2c0 81b1 	blt.w	8023620 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80232be:	f10e 38ff 	add.w	r8, lr, #4294967295
 80232c2:	45c4      	cmp	ip, r8
 80232c4:	f280 81ac 	bge.w	8023620 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80232c8:	b209      	sxth	r1, r1
 80232ca:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80232cc:	fb0c 3301 	mla	r3, ip, r1, r3
 80232d0:	eb04 0803 	add.w	r8, r4, r3
 80232d4:	5ce3      	ldrb	r3, [r4, r3]
 80232d6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80232da:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80232de:	2a00      	cmp	r2, #0
 80232e0:	f000 8193 	beq.w	802360a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 80232e4:	f898 c001 	ldrb.w	ip, [r8, #1]
 80232e8:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80232ec:	940b      	str	r4, [sp, #44]	; 0x2c
 80232ee:	0e24      	lsrs	r4, r4, #24
 80232f0:	9412      	str	r4, [sp, #72]	; 0x48
 80232f2:	b178      	cbz	r0, 8023314 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 80232f4:	eb08 0c01 	add.w	ip, r8, r1
 80232f8:	f818 1001 	ldrb.w	r1, [r8, r1]
 80232fc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023300:	9108      	str	r1, [sp, #32]
 8023302:	0e09      	lsrs	r1, r1, #24
 8023304:	9110      	str	r1, [sp, #64]	; 0x40
 8023306:	f89c 1001 	ldrb.w	r1, [ip, #1]
 802330a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802330e:	910c      	str	r1, [sp, #48]	; 0x30
 8023310:	0e09      	lsrs	r1, r1, #24
 8023312:	9113      	str	r1, [sp, #76]	; 0x4c
 8023314:	b292      	uxth	r2, r2
 8023316:	9912      	ldr	r1, [sp, #72]	; 0x48
 8023318:	b280      	uxth	r0, r0
 802331a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802331c:	fb02 f900 	mul.w	r9, r2, r0
 8023320:	0112      	lsls	r2, r2, #4
 8023322:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8023326:	eba2 0809 	sub.w	r8, r2, r9
 802332a:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802332e:	b280      	uxth	r0, r0
 8023330:	fa1f f888 	uxth.w	r8, r8
 8023334:	1a12      	subs	r2, r2, r0
 8023336:	fb08 f101 	mul.w	r1, r8, r1
 802333a:	b292      	uxth	r2, r2
 802333c:	fb02 110e 	mla	r1, r2, lr, r1
 8023340:	fb00 1104 	mla	r1, r0, r4, r1
 8023344:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023346:	fb09 1104 	mla	r1, r9, r4, r1
 802334a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802334e:	2900      	cmp	r1, #0
 8023350:	f000 80de 	beq.w	8023510 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8023354:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023358:	d01b      	beq.n	8023392 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 802335a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802335e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023362:	fb0e fa0a 	mul.w	sl, lr, sl
 8023366:	fb0e fe03 	mul.w	lr, lr, r3
 802336a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802336e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023372:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8023376:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802337a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802337e:	4453      	add	r3, sl
 8023380:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023384:	0a1b      	lsrs	r3, r3, #8
 8023386:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802338a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802338e:	ea43 030c 	orr.w	r3, r3, ip
 8023392:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023394:	2cff      	cmp	r4, #255	; 0xff
 8023396:	d021      	beq.n	80233dc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8023398:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802339a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802339e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80233a0:	fb04 fb0b 	mul.w	fp, r4, fp
 80233a4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80233a6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80233aa:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80233ac:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80233b0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80233b4:	fb04 fa0a 	mul.w	sl, r4, sl
 80233b8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80233bc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80233c0:	44de      	add	lr, fp
 80233c2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80233c6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80233ca:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80233ce:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80233d2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80233d6:	ea4e 040a 	orr.w	r4, lr, sl
 80233da:	940b      	str	r4, [sp, #44]	; 0x2c
 80233dc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80233de:	2cff      	cmp	r4, #255	; 0xff
 80233e0:	d021      	beq.n	8023426 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 80233e2:	9c08      	ldr	r4, [sp, #32]
 80233e4:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80233e8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80233ea:	fb04 fb0b 	mul.w	fp, r4, fp
 80233ee:	9c08      	ldr	r4, [sp, #32]
 80233f0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80233f4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80233f6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80233fa:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80233fe:	fb04 fa0a 	mul.w	sl, r4, sl
 8023402:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023406:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802340a:	44de      	add	lr, fp
 802340c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023410:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023414:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023418:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802341c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023420:	ea4e 040a 	orr.w	r4, lr, sl
 8023424:	9408      	str	r4, [sp, #32]
 8023426:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023428:	2cff      	cmp	r4, #255	; 0xff
 802342a:	d021      	beq.n	8023470 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 802342c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802342e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8023432:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023434:	fb04 fb0b 	mul.w	fp, r4, fp
 8023438:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802343a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802343e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023440:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023444:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023448:	fb04 fa0a 	mul.w	sl, r4, sl
 802344c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023450:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023454:	44de      	add	lr, fp
 8023456:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802345a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802345e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023462:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023466:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802346a:	ea4e 040a 	orr.w	r4, lr, sl
 802346e:	940c      	str	r4, [sp, #48]	; 0x30
 8023470:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023472:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8023476:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802347a:	43c9      	mvns	r1, r1
 802347c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023480:	9c08      	ldr	r4, [sp, #32]
 8023482:	b2c9      	uxtb	r1, r1
 8023484:	fb08 fc0c 	mul.w	ip, r8, ip
 8023488:	fb02 cc0e 	mla	ip, r2, lr, ip
 802348c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8023490:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8023492:	fb00 cc0e 	mla	ip, r0, lr, ip
 8023496:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802349a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802349c:	fb09 cc0e 	mla	ip, r9, lr, ip
 80234a0:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80234a4:	fb08 f80e 	mul.w	r8, r8, lr
 80234a8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80234ac:	fb02 8303 	mla	r3, r2, r3, r8
 80234b0:	9a08      	ldr	r2, [sp, #32]
 80234b2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80234b6:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80234ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80234bc:	fb00 330a 	mla	r3, r0, sl, r3
 80234c0:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 80234c4:	fb09 3900 	mla	r9, r9, r0, r3
 80234c8:	783b      	ldrb	r3, [r7, #0]
 80234ca:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80234ce:	fb03 f201 	mul.w	r2, r3, r1
 80234d2:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80234d6:	1c53      	adds	r3, r2, #1
 80234d8:	ea4c 0c09 	orr.w	ip, ip, r9
 80234dc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80234e0:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 80234e4:	703b      	strb	r3, [r7, #0]
 80234e6:	787b      	ldrb	r3, [r7, #1]
 80234e8:	434b      	muls	r3, r1
 80234ea:	1c5a      	adds	r2, r3, #1
 80234ec:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80234f0:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80234f4:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80234f8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80234fc:	707b      	strb	r3, [r7, #1]
 80234fe:	78bb      	ldrb	r3, [r7, #2]
 8023500:	4359      	muls	r1, r3
 8023502:	1c4b      	adds	r3, r1, #1
 8023504:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8023508:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 802350c:	f887 c002 	strb.w	ip, [r7, #2]
 8023510:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023512:	3703      	adds	r7, #3
 8023514:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8023516:	441a      	add	r2, r3
 8023518:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802351a:	441d      	add	r5, r3
 802351c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802351e:	9225      	str	r2, [sp, #148]	; 0x94
 8023520:	3b01      	subs	r3, #1
 8023522:	9317      	str	r3, [sp, #92]	; 0x5c
 8023524:	e6b0      	b.n	8023288 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8023526:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023528:	9c25      	ldr	r4, [sp, #148]	; 0x94
 802352a:	441c      	add	r4, r3
 802352c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802352e:	441d      	add	r5, r3
 8023530:	9b07      	ldr	r3, [sp, #28]
 8023532:	9425      	str	r4, [sp, #148]	; 0x94
 8023534:	3b01      	subs	r3, #1
 8023536:	9307      	str	r3, [sp, #28]
 8023538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802353a:	3303      	adds	r3, #3
 802353c:	930a      	str	r3, [sp, #40]	; 0x28
 802353e:	e683      	b.n	8023248 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8023540:	d026      	beq.n	8023590 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 8023542:	9b07      	ldr	r3, [sp, #28]
 8023544:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8023546:	3b01      	subs	r3, #1
 8023548:	9c25      	ldr	r4, [sp, #148]	; 0x94
 802354a:	fb00 4003 	mla	r0, r0, r3, r4
 802354e:	1400      	asrs	r0, r0, #16
 8023550:	f53f ae97 	bmi.w	8023282 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8023554:	3901      	subs	r1, #1
 8023556:	4288      	cmp	r0, r1
 8023558:	f6bf ae93 	bge.w	8023282 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802355c:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802355e:	fb01 5303 	mla	r3, r1, r3, r5
 8023562:	141b      	asrs	r3, r3, #16
 8023564:	f53f ae8d 	bmi.w	8023282 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8023568:	3a01      	subs	r2, #1
 802356a:	4293      	cmp	r3, r2
 802356c:	f6bf ae89 	bge.w	8023282 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8023570:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023572:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8023576:	f103 0e03 	add.w	lr, r3, #3
 802357a:	f1bb 0f00 	cmp.w	fp, #0
 802357e:	dc6d      	bgt.n	802365c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 8023580:	9b07      	ldr	r3, [sp, #28]
 8023582:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023588:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802358c:	4423      	add	r3, r4
 802358e:	930a      	str	r3, [sp, #40]	; 0x28
 8023590:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8023592:	2b00      	cmp	r3, #0
 8023594:	f340 81a0 	ble.w	80238d8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 8023598:	ee30 0a04 	vadd.f32	s0, s0, s8
 802359c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802359e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80235a2:	eeb0 6a62 	vmov.f32	s12, s5
 80235a6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80235aa:	ee31 1a05 	vadd.f32	s2, s2, s10
 80235ae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80235b2:	ed8d 6a25 	vstr	s12, [sp, #148]	; 0x94
 80235b6:	eeb0 6a43 	vmov.f32	s12, s6
 80235ba:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80235be:	ee16 5a10 	vmov	r5, s12
 80235c2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80235c6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80235ca:	ee77 2a62 	vsub.f32	s5, s14, s5
 80235ce:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80235d2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80235d6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80235da:	ee12 2a90 	vmov	r2, s5
 80235de:	eef0 2a47 	vmov.f32	s5, s14
 80235e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80235e6:	ee13 2a10 	vmov	r2, s6
 80235ea:	9327      	str	r3, [sp, #156]	; 0x9c
 80235ec:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80235ee:	eeb0 3a67 	vmov.f32	s6, s15
 80235f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80235f6:	9328      	str	r3, [sp, #160]	; 0xa0
 80235f8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80235fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80235fc:	3b01      	subs	r3, #1
 80235fe:	9316      	str	r3, [sp, #88]	; 0x58
 8023600:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023602:	bf08      	it	eq
 8023604:	4613      	moveq	r3, r2
 8023606:	9307      	str	r3, [sp, #28]
 8023608:	e610      	b.n	802322c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 802360a:	2800      	cmp	r0, #0
 802360c:	f43f ae82 	beq.w	8023314 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8023610:	f818 1001 	ldrb.w	r1, [r8, r1]
 8023614:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023618:	9108      	str	r1, [sp, #32]
 802361a:	0e09      	lsrs	r1, r1, #24
 802361c:	9110      	str	r1, [sp, #64]	; 0x40
 802361e:	e679      	b.n	8023314 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8023620:	f113 0801 	adds.w	r8, r3, #1
 8023624:	f53f af74 	bmi.w	8023510 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8023628:	4541      	cmp	r1, r8
 802362a:	f6ff af71 	blt.w	8023510 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802362e:	f11c 0801 	adds.w	r8, ip, #1
 8023632:	f53f af6d 	bmi.w	8023510 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8023636:	45c6      	cmp	lr, r8
 8023638:	f6ff af6a 	blt.w	8023510 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802363c:	b209      	sxth	r1, r1
 802363e:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8023642:	fa0f f38e 	sxth.w	r3, lr
 8023646:	9100      	str	r1, [sp, #0]
 8023648:	4639      	mov	r1, r7
 802364a:	9301      	str	r3, [sp, #4]
 802364c:	4633      	mov	r3, r6
 802364e:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8023652:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023654:	9819      	ldr	r0, [sp, #100]	; 0x64
 8023656:	f7ff fca3 	bl	8022fa0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 802365a:	e759      	b.n	8023510 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802365c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802365e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8023662:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8023664:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8023668:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802366a:	1427      	asrs	r7, r4, #16
 802366c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802366e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023672:	142b      	asrs	r3, r5, #16
 8023674:	fb01 7303 	mla	r3, r1, r3, r7
 8023678:	18e7      	adds	r7, r4, r3
 802367a:	5ce3      	ldrb	r3, [r4, r3]
 802367c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8023680:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8023684:	2a00      	cmp	r2, #0
 8023686:	f000 811d 	beq.w	80238c4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 802368a:	f897 8001 	ldrb.w	r8, [r7, #1]
 802368e:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8023692:	940d      	str	r4, [sp, #52]	; 0x34
 8023694:	0e24      	lsrs	r4, r4, #24
 8023696:	9414      	str	r4, [sp, #80]	; 0x50
 8023698:	b170      	cbz	r0, 80236b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 802369a:	eb07 0801 	add.w	r8, r7, r1
 802369e:	5c79      	ldrb	r1, [r7, r1]
 80236a0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80236a4:	9109      	str	r1, [sp, #36]	; 0x24
 80236a6:	0e09      	lsrs	r1, r1, #24
 80236a8:	9111      	str	r1, [sp, #68]	; 0x44
 80236aa:	f898 1001 	ldrb.w	r1, [r8, #1]
 80236ae:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80236b2:	910e      	str	r1, [sp, #56]	; 0x38
 80236b4:	0e09      	lsrs	r1, r1, #24
 80236b6:	9115      	str	r1, [sp, #84]	; 0x54
 80236b8:	b292      	uxth	r2, r2
 80236ba:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80236bc:	b280      	uxth	r0, r0
 80236be:	fb02 f900 	mul.w	r9, r2, r0
 80236c2:	0112      	lsls	r2, r2, #4
 80236c4:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80236c8:	eba2 0809 	sub.w	r8, r2, r9
 80236cc:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80236d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80236d2:	b280      	uxth	r0, r0
 80236d4:	fa1f f888 	uxth.w	r8, r8
 80236d8:	1a09      	subs	r1, r1, r0
 80236da:	fb08 f202 	mul.w	r2, r8, r2
 80236de:	b289      	uxth	r1, r1
 80236e0:	fb01 220c 	mla	r2, r1, ip, r2
 80236e4:	fb00 2204 	mla	r2, r0, r4, r2
 80236e8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80236ea:	fb09 2204 	mla	r2, r9, r4, r2
 80236ee:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80236f2:	2a00      	cmp	r2, #0
 80236f4:	f000 80db 	beq.w	80238ae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 80236f8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80236fc:	d019      	beq.n	8023732 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 80236fe:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8023702:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023706:	fb0c fa0a 	mul.w	sl, ip, sl
 802370a:	fb0c fc03 	mul.w	ip, ip, r3
 802370e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023712:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023716:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802371a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802371e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8023722:	4453      	add	r3, sl
 8023724:	0a3f      	lsrs	r7, r7, #8
 8023726:	0a1b      	lsrs	r3, r3, #8
 8023728:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802372c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023730:	433b      	orrs	r3, r7
 8023732:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023734:	2cff      	cmp	r4, #255	; 0xff
 8023736:	d020      	beq.n	802377a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 8023738:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802373a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802373e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023740:	4367      	muls	r7, r4
 8023742:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023744:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023748:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802374c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802374e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023752:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023756:	fb04 fa0a 	mul.w	sl, r4, sl
 802375a:	44bc      	add	ip, r7
 802375c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023760:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023764:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023768:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802376c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023770:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023774:	ea4c 040a 	orr.w	r4, ip, sl
 8023778:	940d      	str	r4, [sp, #52]	; 0x34
 802377a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802377c:	2cff      	cmp	r4, #255	; 0xff
 802377e:	d020      	beq.n	80237c2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 8023780:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8023782:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8023786:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023788:	4367      	muls	r7, r4
 802378a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802378c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023790:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023794:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023796:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802379a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802379e:	fb04 fa0a 	mul.w	sl, r4, sl
 80237a2:	44bc      	add	ip, r7
 80237a4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80237a8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80237ac:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80237b0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80237b4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80237b8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80237bc:	ea4c 040a 	orr.w	r4, ip, sl
 80237c0:	9409      	str	r4, [sp, #36]	; 0x24
 80237c2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80237c4:	2cff      	cmp	r4, #255	; 0xff
 80237c6:	d020      	beq.n	802380a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 80237c8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80237ca:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80237ce:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80237d0:	4367      	muls	r7, r4
 80237d2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80237d4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80237d8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80237dc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80237de:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80237e2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80237e6:	fb04 fa0a 	mul.w	sl, r4, sl
 80237ea:	44bc      	add	ip, r7
 80237ec:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80237f0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80237f4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80237f8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80237fc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023800:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023804:	ea4c 040a 	orr.w	r4, ip, sl
 8023808:	940e      	str	r4, [sp, #56]	; 0x38
 802380a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802380c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8023810:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023814:	43d2      	mvns	r2, r2
 8023816:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802381a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802381c:	b2d2      	uxtb	r2, r2
 802381e:	fb08 f707 	mul.w	r7, r8, r7
 8023822:	fb01 770c 	mla	r7, r1, ip, r7
 8023826:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802382a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802382c:	fb00 770c 	mla	r7, r0, ip, r7
 8023830:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023834:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023836:	fb09 770c 	mla	r7, r9, ip, r7
 802383a:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 802383e:	fb08 f80c 	mul.w	r8, r8, ip
 8023842:	0a3f      	lsrs	r7, r7, #8
 8023844:	fb01 8303 	mla	r3, r1, r3, r8
 8023848:	9909      	ldr	r1, [sp, #36]	; 0x24
 802384a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802384e:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8023852:	990e      	ldr	r1, [sp, #56]	; 0x38
 8023854:	fb00 330a 	mla	r3, r0, sl, r3
 8023858:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 802385c:	fb09 3c0c 	mla	ip, r9, ip, r3
 8023860:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8023864:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023868:	fb03 f102 	mul.w	r1, r3, r2
 802386c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023870:	1c4b      	adds	r3, r1, #1
 8023872:	ea47 070c 	orr.w	r7, r7, ip
 8023876:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802387a:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 802387e:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8023882:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 8023886:	4353      	muls	r3, r2
 8023888:	1c59      	adds	r1, r3, #1
 802388a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802388e:	0a3b      	lsrs	r3, r7, #8
 8023890:	0c3f      	lsrs	r7, r7, #16
 8023892:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8023896:	f80e 3c02 	strb.w	r3, [lr, #-2]
 802389a:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 802389e:	435a      	muls	r2, r3
 80238a0:	1c53      	adds	r3, r2, #1
 80238a2:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80238a6:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80238aa:	f80e 7c01 	strb.w	r7, [lr, #-1]
 80238ae:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80238b0:	f10e 0e03 	add.w	lr, lr, #3
 80238b4:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80238b6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80238ba:	441a      	add	r2, r3
 80238bc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80238be:	9225      	str	r2, [sp, #148]	; 0x94
 80238c0:	441d      	add	r5, r3
 80238c2:	e65a      	b.n	802357a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 80238c4:	2800      	cmp	r0, #0
 80238c6:	f43f aef7 	beq.w	80236b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 80238ca:	5c79      	ldrb	r1, [r7, r1]
 80238cc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80238d0:	9109      	str	r1, [sp, #36]	; 0x24
 80238d2:	0e09      	lsrs	r1, r1, #24
 80238d4:	9111      	str	r1, [sp, #68]	; 0x44
 80238d6:	e6ef      	b.n	80236b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 80238d8:	b01b      	add	sp, #108	; 0x6c
 80238da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080238de <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 80238de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80238e2:	b08d      	sub	sp, #52	; 0x34
 80238e4:	468b      	mov	fp, r1
 80238e6:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	; 0x5c
 80238ea:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 80238ee:	fb0c 5703 	mla	r7, ip, r3, r5
 80238f2:	f1bc 0f00 	cmp.w	ip, #0
 80238f6:	910b      	str	r1, [sp, #44]	; 0x2c
 80238f8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80238fc:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8023900:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 8023904:	f89d a068 	ldrb.w	sl, [sp, #104]	; 0x68
 8023908:	eb02 0607 	add.w	r6, r2, r7
 802390c:	f89b 4000 	ldrb.w	r4, [fp]
 8023910:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8023914:	f89b 1002 	ldrb.w	r1, [fp, #2]
 8023918:	f2c0 80c1 	blt.w	8023a9e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 802391c:	45e6      	cmp	lr, ip
 802391e:	f340 80be 	ble.w	8023a9e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8023922:	2d00      	cmp	r5, #0
 8023924:	f2c0 80b7 	blt.w	8023a96 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8023928:	42ab      	cmp	r3, r5
 802392a:	f340 80b4 	ble.w	8023a96 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 802392e:	5dd2      	ldrb	r2, [r2, r7]
 8023930:	9205      	str	r2, [sp, #20]
 8023932:	7872      	ldrb	r2, [r6, #1]
 8023934:	9206      	str	r2, [sp, #24]
 8023936:	78b2      	ldrb	r2, [r6, #2]
 8023938:	9207      	str	r2, [sp, #28]
 802393a:	1c6a      	adds	r2, r5, #1
 802393c:	f100 80b6 	bmi.w	8023aac <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8023940:	4293      	cmp	r3, r2
 8023942:	f340 80b3 	ble.w	8023aac <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8023946:	f1b8 0f00 	cmp.w	r8, #0
 802394a:	f000 80af 	beq.w	8023aac <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 802394e:	78f2      	ldrb	r2, [r6, #3]
 8023950:	9201      	str	r2, [sp, #4]
 8023952:	7932      	ldrb	r2, [r6, #4]
 8023954:	9202      	str	r2, [sp, #8]
 8023956:	7972      	ldrb	r2, [r6, #5]
 8023958:	9203      	str	r2, [sp, #12]
 802395a:	f11c 0c01 	adds.w	ip, ip, #1
 802395e:	f100 80ad 	bmi.w	8023abc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8023962:	45e6      	cmp	lr, ip
 8023964:	f340 80aa 	ble.w	8023abc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8023968:	f1ba 0f00 	cmp.w	sl, #0
 802396c:	f000 80a6 	beq.w	8023abc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8023970:	2d00      	cmp	r5, #0
 8023972:	f2c0 809f 	blt.w	8023ab4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 8023976:	42ab      	cmp	r3, r5
 8023978:	f340 809c 	ble.w	8023ab4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 802397c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8023980:	f816 9002 	ldrb.w	r9, [r6, r2]
 8023984:	2203      	movs	r2, #3
 8023986:	fb03 6c02 	mla	ip, r3, r2, r6
 802398a:	f89c 7001 	ldrb.w	r7, [ip, #1]
 802398e:	f89c e002 	ldrb.w	lr, [ip, #2]
 8023992:	9704      	str	r7, [sp, #16]
 8023994:	3501      	adds	r5, #1
 8023996:	f100 8098 	bmi.w	8023aca <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 802399a:	42ab      	cmp	r3, r5
 802399c:	f340 8095 	ble.w	8023aca <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 80239a0:	f1b8 0f00 	cmp.w	r8, #0
 80239a4:	f000 8091 	beq.w	8023aca <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 80239a8:	f04f 0c03 	mov.w	ip, #3
 80239ac:	fb13 c20c 	smlabb	r2, r3, ip, ip
 80239b0:	5cb5      	ldrb	r5, [r6, r2]
 80239b2:	fb03 620c 	mla	r2, r3, ip, r6
 80239b6:	fb03 630c 	mla	r3, r3, ip, r6
 80239ba:	7912      	ldrb	r2, [r2, #4]
 80239bc:	795e      	ldrb	r6, [r3, #5]
 80239be:	fa1f f388 	uxth.w	r3, r8
 80239c2:	fa1f fc8a 	uxth.w	ip, sl
 80239c6:	fb03 f70c 	mul.w	r7, r3, ip
 80239ca:	011b      	lsls	r3, r3, #4
 80239cc:	9708      	str	r7, [sp, #32]
 80239ce:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 80239d2:	f5c3 7a80 	rsb	sl, r3, #256	; 0x100
 80239d6:	1bdb      	subs	r3, r3, r7
 80239d8:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 80239dc:	fa1f fc8c 	uxth.w	ip, ip
 80239e0:	b29b      	uxth	r3, r3
 80239e2:	9709      	str	r7, [sp, #36]	; 0x24
 80239e4:	ebaa 0a0c 	sub.w	sl, sl, ip
 80239e8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80239ea:	930a      	str	r3, [sp, #40]	; 0x28
 80239ec:	fa1f fa8a 	uxth.w	sl, sl
 80239f0:	ea6f 0807 	mvn.w	r8, r7
 80239f4:	9f01      	ldr	r7, [sp, #4]
 80239f6:	435f      	muls	r7, r3
 80239f8:	9b05      	ldr	r3, [sp, #20]
 80239fa:	fa5f f888 	uxtb.w	r8, r8
 80239fe:	fb0a 7703 	mla	r7, sl, r3, r7
 8023a02:	9b08      	ldr	r3, [sp, #32]
 8023a04:	fb14 f408 	smulbb	r4, r4, r8
 8023a08:	fb0c 7709 	mla	r7, ip, r9, r7
 8023a0c:	fb10 f008 	smulbb	r0, r0, r8
 8023a10:	fb11 f108 	smulbb	r1, r1, r8
 8023a14:	fb03 7705 	mla	r7, r3, r5, r7
 8023a18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023a1a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8023a1e:	fb07 4703 	mla	r7, r7, r3, r4
 8023a22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023a24:	b2bf      	uxth	r7, r7
 8023a26:	1c7c      	adds	r4, r7, #1
 8023a28:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 8023a2c:	1224      	asrs	r4, r4, #8
 8023a2e:	f88b 4000 	strb.w	r4, [fp]
 8023a32:	9c02      	ldr	r4, [sp, #8]
 8023a34:	435c      	muls	r4, r3
 8023a36:	9b06      	ldr	r3, [sp, #24]
 8023a38:	fb0a 4403 	mla	r4, sl, r3, r4
 8023a3c:	9b04      	ldr	r3, [sp, #16]
 8023a3e:	fb0c 4403 	mla	r4, ip, r3, r4
 8023a42:	9b08      	ldr	r3, [sp, #32]
 8023a44:	fb03 4402 	mla	r4, r3, r2, r4
 8023a48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023a4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023a4c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8023a50:	fb04 0403 	mla	r4, r4, r3, r0
 8023a54:	9b03      	ldr	r3, [sp, #12]
 8023a56:	435a      	muls	r2, r3
 8023a58:	b2a4      	uxth	r4, r4
 8023a5a:	4613      	mov	r3, r2
 8023a5c:	9a07      	ldr	r2, [sp, #28]
 8023a5e:	1c60      	adds	r0, r4, #1
 8023a60:	fb0a 3a02 	mla	sl, sl, r2, r3
 8023a64:	9b08      	ldr	r3, [sp, #32]
 8023a66:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8023a6a:	fb0c ac0e 	mla	ip, ip, lr, sl
 8023a6e:	1224      	asrs	r4, r4, #8
 8023a70:	fb03 c606 	mla	r6, r3, r6, ip
 8023a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023a76:	f88b 4001 	strb.w	r4, [fp, #1]
 8023a7a:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8023a7e:	fb06 1103 	mla	r1, r6, r3, r1
 8023a82:	b289      	uxth	r1, r1
 8023a84:	1c4e      	adds	r6, r1, #1
 8023a86:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 8023a8a:	1209      	asrs	r1, r1, #8
 8023a8c:	f88b 1002 	strb.w	r1, [fp, #2]
 8023a90:	b00d      	add	sp, #52	; 0x34
 8023a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023a96:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8023a9a:	9405      	str	r4, [sp, #20]
 8023a9c:	e74d      	b.n	802393a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 8023a9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8023aa2:	9401      	str	r4, [sp, #4]
 8023aa4:	9405      	str	r4, [sp, #20]
 8023aa6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8023aaa:	e756      	b.n	802395a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 8023aac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8023ab0:	9401      	str	r4, [sp, #4]
 8023ab2:	e752      	b.n	802395a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 8023ab4:	468e      	mov	lr, r1
 8023ab6:	9004      	str	r0, [sp, #16]
 8023ab8:	46a1      	mov	r9, r4
 8023aba:	e76b      	b.n	8023994 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 8023abc:	460e      	mov	r6, r1
 8023abe:	4602      	mov	r2, r0
 8023ac0:	4625      	mov	r5, r4
 8023ac2:	468e      	mov	lr, r1
 8023ac4:	9004      	str	r0, [sp, #16]
 8023ac6:	46a1      	mov	r9, r4
 8023ac8:	e779      	b.n	80239be <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 8023aca:	460e      	mov	r6, r1
 8023acc:	4602      	mov	r2, r0
 8023ace:	4625      	mov	r5, r4
 8023ad0:	e775      	b.n	80239be <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

08023ad2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023ad2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023ad6:	b09f      	sub	sp, #124	; 0x7c
 8023ad8:	920e      	str	r2, [sp, #56]	; 0x38
 8023ada:	9307      	str	r3, [sp, #28]
 8023adc:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8023ade:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8023ae2:	901d      	str	r0, [sp, #116]	; 0x74
 8023ae4:	930c      	str	r3, [sp, #48]	; 0x30
 8023ae6:	6850      	ldr	r0, [r2, #4]
 8023ae8:	910b      	str	r1, [sp, #44]	; 0x2c
 8023aea:	6812      	ldr	r2, [r2, #0]
 8023aec:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8023af0:	e9dd a829 	ldrd	sl, r8, [sp, #164]	; 0xa4
 8023af4:	fb00 1303 	mla	r3, r0, r3, r1
 8023af8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023afc:	18d3      	adds	r3, r2, r3
 8023afe:	9308      	str	r3, [sp, #32]
 8023b00:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023b02:	681b      	ldr	r3, [r3, #0]
 8023b04:	930a      	str	r3, [sp, #40]	; 0x28
 8023b06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023b08:	43db      	mvns	r3, r3
 8023b0a:	b2db      	uxtb	r3, r3
 8023b0c:	9309      	str	r3, [sp, #36]	; 0x24
 8023b0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023b10:	2b00      	cmp	r3, #0
 8023b12:	dc03      	bgt.n	8023b1c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8023b14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023b16:	2b00      	cmp	r3, #0
 8023b18:	f340 81f5 	ble.w	8023f06 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8023b1c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023b1e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023b22:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023b26:	1e48      	subs	r0, r1, #1
 8023b28:	1e54      	subs	r4, r2, #1
 8023b2a:	9b07      	ldr	r3, [sp, #28]
 8023b2c:	2b00      	cmp	r3, #0
 8023b2e:	f340 80d5 	ble.w	8023cdc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8023b32:	ea5f 452a 	movs.w	r5, sl, asr #16
 8023b36:	ea4f 4328 	mov.w	r3, r8, asr #16
 8023b3a:	d406      	bmi.n	8023b4a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8023b3c:	4285      	cmp	r5, r0
 8023b3e:	da04      	bge.n	8023b4a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8023b40:	2b00      	cmp	r3, #0
 8023b42:	db02      	blt.n	8023b4a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8023b44:	42a3      	cmp	r3, r4
 8023b46:	f2c0 80ca 	blt.w	8023cde <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8023b4a:	3501      	adds	r5, #1
 8023b4c:	f100 80bb 	bmi.w	8023cc6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8023b50:	42a9      	cmp	r1, r5
 8023b52:	f2c0 80b8 	blt.w	8023cc6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8023b56:	3301      	adds	r3, #1
 8023b58:	f100 80b5 	bmi.w	8023cc6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8023b5c:	429a      	cmp	r2, r3
 8023b5e:	f2c0 80b2 	blt.w	8023cc6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8023b62:	9b07      	ldr	r3, [sp, #28]
 8023b64:	9d08      	ldr	r5, [sp, #32]
 8023b66:	930d      	str	r3, [sp, #52]	; 0x34
 8023b68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023b6a:	2b00      	cmp	r3, #0
 8023b6c:	f340 80d6 	ble.w	8023d1c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 8023b70:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8023b72:	ea4f 4428 	mov.w	r4, r8, asr #16
 8023b76:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023b78:	f3ca 3203 	ubfx	r2, sl, #12, #4
 8023b7c:	68c6      	ldr	r6, [r0, #12]
 8023b7e:	ea5f 402a 	movs.w	r0, sl, asr #16
 8023b82:	f3c8 3103 	ubfx	r1, r8, #12, #4
 8023b86:	689b      	ldr	r3, [r3, #8]
 8023b88:	f100 810f 	bmi.w	8023daa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8023b8c:	1e5f      	subs	r7, r3, #1
 8023b8e:	42b8      	cmp	r0, r7
 8023b90:	f280 810b 	bge.w	8023daa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8023b94:	2c00      	cmp	r4, #0
 8023b96:	f2c0 8108 	blt.w	8023daa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8023b9a:	1e77      	subs	r7, r6, #1
 8023b9c:	42bc      	cmp	r4, r7
 8023b9e:	f280 8104 	bge.w	8023daa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8023ba2:	b21b      	sxth	r3, r3
 8023ba4:	fb04 0003 	mla	r0, r4, r3, r0
 8023ba8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023baa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023bae:	1826      	adds	r6, r4, r0
 8023bb0:	5c24      	ldrb	r4, [r4, r0]
 8023bb2:	78b7      	ldrb	r7, [r6, #2]
 8023bb4:	7870      	ldrb	r0, [r6, #1]
 8023bb6:	970f      	str	r7, [sp, #60]	; 0x3c
 8023bb8:	7977      	ldrb	r7, [r6, #5]
 8023bba:	f896 e003 	ldrb.w	lr, [r6, #3]
 8023bbe:	f896 c004 	ldrb.w	ip, [r6, #4]
 8023bc2:	9710      	str	r7, [sp, #64]	; 0x40
 8023bc4:	b1c9      	cbz	r1, 8023bfa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8023bc6:	f04f 0b03 	mov.w	fp, #3
 8023bca:	f06f 0904 	mvn.w	r9, #4
 8023bce:	3605      	adds	r6, #5
 8023bd0:	fb13 930b 	smlabb	r3, r3, fp, r9
 8023bd4:	eb06 0b03 	add.w	fp, r6, r3
 8023bd8:	5cf3      	ldrb	r3, [r6, r3]
 8023bda:	9311      	str	r3, [sp, #68]	; 0x44
 8023bdc:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8023be0:	9313      	str	r3, [sp, #76]	; 0x4c
 8023be2:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8023be6:	9315      	str	r3, [sp, #84]	; 0x54
 8023be8:	f89b 3003 	ldrb.w	r3, [fp, #3]
 8023bec:	9312      	str	r3, [sp, #72]	; 0x48
 8023bee:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8023bf2:	9314      	str	r3, [sp, #80]	; 0x50
 8023bf4:	f89b 3005 	ldrb.w	r3, [fp, #5]
 8023bf8:	9316      	str	r3, [sp, #88]	; 0x58
 8023bfa:	b292      	uxth	r2, r2
 8023bfc:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8023bfe:	b289      	uxth	r1, r1
 8023c00:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8023c04:	fb02 f601 	mul.w	r6, r2, r1
 8023c08:	0112      	lsls	r2, r2, #4
 8023c0a:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 8023c0e:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 8023c12:	1b92      	subs	r2, r2, r6
 8023c14:	b289      	uxth	r1, r1
 8023c16:	b292      	uxth	r2, r2
 8023c18:	eba9 0901 	sub.w	r9, r9, r1
 8023c1c:	fb02 fe0e 	mul.w	lr, r2, lr
 8023c20:	fa1f f989 	uxth.w	r9, r9
 8023c24:	fb02 fc0c 	mul.w	ip, r2, ip
 8023c28:	fb09 e404 	mla	r4, r9, r4, lr
 8023c2c:	f895 e000 	ldrb.w	lr, [r5]
 8023c30:	fb09 c000 	mla	r0, r9, r0, ip
 8023c34:	fb01 4407 	mla	r4, r1, r7, r4
 8023c38:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8023c3a:	fb06 4407 	mla	r4, r6, r7, r4
 8023c3e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8023c40:	fb1e fe07 	smulbb	lr, lr, r7
 8023c44:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8023c48:	fb04 e403 	mla	r4, r4, r3, lr
 8023c4c:	b2a4      	uxth	r4, r4
 8023c4e:	f104 0e01 	add.w	lr, r4, #1
 8023c52:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 8023c56:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023c58:	fb01 0004 	mla	r0, r1, r4, r0
 8023c5c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023c5e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8023c62:	fb06 0004 	mla	r0, r6, r4, r0
 8023c66:	786c      	ldrb	r4, [r5, #1]
 8023c68:	f885 e000 	strb.w	lr, [r5]
 8023c6c:	fb14 f407 	smulbb	r4, r4, r7
 8023c70:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023c74:	fb00 4003 	mla	r0, r0, r3, r4
 8023c78:	b280      	uxth	r0, r0
 8023c7a:	1c44      	adds	r4, r0, #1
 8023c7c:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8023c80:	1200      	asrs	r0, r0, #8
 8023c82:	7068      	strb	r0, [r5, #1]
 8023c84:	9810      	ldr	r0, [sp, #64]	; 0x40
 8023c86:	4342      	muls	r2, r0
 8023c88:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8023c8a:	fb09 2200 	mla	r2, r9, r0, r2
 8023c8e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8023c90:	fb01 2100 	mla	r1, r1, r0, r2
 8023c94:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8023c96:	fb06 1602 	mla	r6, r6, r2, r1
 8023c9a:	78a9      	ldrb	r1, [r5, #2]
 8023c9c:	fb11 f107 	smulbb	r1, r1, r7
 8023ca0:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8023ca4:	fb06 1303 	mla	r3, r6, r3, r1
 8023ca8:	b29b      	uxth	r3, r3
 8023caa:	1c5e      	adds	r6, r3, #1
 8023cac:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8023cb0:	121b      	asrs	r3, r3, #8
 8023cb2:	70ab      	strb	r3, [r5, #2]
 8023cb4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023cb6:	3503      	adds	r5, #3
 8023cb8:	449a      	add	sl, r3
 8023cba:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023cbc:	4498      	add	r8, r3
 8023cbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023cc0:	3b01      	subs	r3, #1
 8023cc2:	930d      	str	r3, [sp, #52]	; 0x34
 8023cc4:	e750      	b.n	8023b68 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8023cc6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023cc8:	449a      	add	sl, r3
 8023cca:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023ccc:	4498      	add	r8, r3
 8023cce:	9b07      	ldr	r3, [sp, #28]
 8023cd0:	3b01      	subs	r3, #1
 8023cd2:	9307      	str	r3, [sp, #28]
 8023cd4:	9b08      	ldr	r3, [sp, #32]
 8023cd6:	3303      	adds	r3, #3
 8023cd8:	9308      	str	r3, [sp, #32]
 8023cda:	e726      	b.n	8023b2a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8023cdc:	d026      	beq.n	8023d2c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8023cde:	9b07      	ldr	r3, [sp, #28]
 8023ce0:	982b      	ldr	r0, [sp, #172]	; 0xac
 8023ce2:	3b01      	subs	r3, #1
 8023ce4:	fb00 a003 	mla	r0, r0, r3, sl
 8023ce8:	1400      	asrs	r0, r0, #16
 8023cea:	f53f af3a 	bmi.w	8023b62 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8023cee:	3901      	subs	r1, #1
 8023cf0:	4288      	cmp	r0, r1
 8023cf2:	f6bf af36 	bge.w	8023b62 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8023cf6:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8023cf8:	fb01 8303 	mla	r3, r1, r3, r8
 8023cfc:	141b      	asrs	r3, r3, #16
 8023cfe:	f53f af30 	bmi.w	8023b62 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8023d02:	3a01      	subs	r2, #1
 8023d04:	4293      	cmp	r3, r2
 8023d06:	f6bf af2c 	bge.w	8023b62 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8023d0a:	9b08      	ldr	r3, [sp, #32]
 8023d0c:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8023d10:	1cdd      	adds	r5, r3, #3
 8023d12:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 8023d16:	f1bc 0f00 	cmp.w	ip, #0
 8023d1a:	dc5f      	bgt.n	8023ddc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 8023d1c:	9b07      	ldr	r3, [sp, #28]
 8023d1e:	9a08      	ldr	r2, [sp, #32]
 8023d20:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023d24:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023d28:	441a      	add	r2, r3
 8023d2a:	9208      	str	r2, [sp, #32]
 8023d2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023d2e:	2b00      	cmp	r3, #0
 8023d30:	f340 80e9 	ble.w	8023f06 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8023d34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023d38:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023d3a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023d3e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023d42:	eef0 6a62 	vmov.f32	s13, s5
 8023d46:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023d4a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023d4e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023d52:	ee16 aa90 	vmov	sl, s13
 8023d56:	eef0 6a43 	vmov.f32	s13, s6
 8023d5a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023d5e:	ee16 8a90 	vmov	r8, s13
 8023d62:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023d66:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023d6a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023d6e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023d72:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023d76:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023d7a:	ee12 2a90 	vmov	r2, s5
 8023d7e:	eef0 2a47 	vmov.f32	s5, s14
 8023d82:	fb92 f3f3 	sdiv	r3, r2, r3
 8023d86:	ee13 2a10 	vmov	r2, s6
 8023d8a:	932b      	str	r3, [sp, #172]	; 0xac
 8023d8c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023d8e:	eeb0 3a67 	vmov.f32	s6, s15
 8023d92:	fb92 f3f3 	sdiv	r3, r2, r3
 8023d96:	932c      	str	r3, [sp, #176]	; 0xb0
 8023d98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023d9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023d9c:	3b01      	subs	r3, #1
 8023d9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8023da0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023da2:	bf08      	it	eq
 8023da4:	4613      	moveq	r3, r2
 8023da6:	9307      	str	r3, [sp, #28]
 8023da8:	e6b1      	b.n	8023b0e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8023daa:	1c47      	adds	r7, r0, #1
 8023dac:	d482      	bmi.n	8023cb4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8023dae:	42bb      	cmp	r3, r7
 8023db0:	db80      	blt.n	8023cb4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8023db2:	1c67      	adds	r7, r4, #1
 8023db4:	f53f af7e 	bmi.w	8023cb4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8023db8:	42be      	cmp	r6, r7
 8023dba:	f6ff af7b 	blt.w	8023cb4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8023dbe:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8023dc0:	b236      	sxth	r6, r6
 8023dc2:	9001      	str	r0, [sp, #4]
 8023dc4:	b21b      	sxth	r3, r3
 8023dc6:	9600      	str	r6, [sp, #0]
 8023dc8:	981d      	ldr	r0, [sp, #116]	; 0x74
 8023dca:	e9cd 1704 	strd	r1, r7, [sp, #16]
 8023dce:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8023dd2:	4629      	mov	r1, r5
 8023dd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023dd6:	f7ff fd82 	bl	80238de <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8023dda:	e76b      	b.n	8023cb4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8023ddc:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8023dde:	ea4f 402a 	mov.w	r0, sl, asr #16
 8023de2:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8023de6:	f3ca 3303 	ubfx	r3, sl, #12, #4
 8023dea:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 8023dee:	ea4f 4128 	mov.w	r1, r8, asr #16
 8023df2:	fb07 0101 	mla	r1, r7, r1, r0
 8023df6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8023df8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8023dfc:	1844      	adds	r4, r0, r1
 8023dfe:	5c40      	ldrb	r0, [r0, r1]
 8023e00:	78a6      	ldrb	r6, [r4, #2]
 8023e02:	7861      	ldrb	r1, [r4, #1]
 8023e04:	960f      	str	r6, [sp, #60]	; 0x3c
 8023e06:	78e6      	ldrb	r6, [r4, #3]
 8023e08:	910d      	str	r1, [sp, #52]	; 0x34
 8023e0a:	9610      	str	r6, [sp, #64]	; 0x40
 8023e0c:	f894 9004 	ldrb.w	r9, [r4, #4]
 8023e10:	f894 b005 	ldrb.w	fp, [r4, #5]
 8023e14:	b192      	cbz	r2, 8023e3c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8023e16:	f06f 0604 	mvn.w	r6, #4
 8023e1a:	2103      	movs	r1, #3
 8023e1c:	3405      	adds	r4, #5
 8023e1e:	fb17 6701 	smlabb	r7, r7, r1, r6
 8023e22:	19e6      	adds	r6, r4, r7
 8023e24:	5de4      	ldrb	r4, [r4, r7]
 8023e26:	9417      	str	r4, [sp, #92]	; 0x5c
 8023e28:	7874      	ldrb	r4, [r6, #1]
 8023e2a:	9419      	str	r4, [sp, #100]	; 0x64
 8023e2c:	78b4      	ldrb	r4, [r6, #2]
 8023e2e:	941b      	str	r4, [sp, #108]	; 0x6c
 8023e30:	78f4      	ldrb	r4, [r6, #3]
 8023e32:	9418      	str	r4, [sp, #96]	; 0x60
 8023e34:	7934      	ldrb	r4, [r6, #4]
 8023e36:	941a      	str	r4, [sp, #104]	; 0x68
 8023e38:	7974      	ldrb	r4, [r6, #5]
 8023e3a:	941c      	str	r4, [sp, #112]	; 0x70
 8023e3c:	b29b      	uxth	r3, r3
 8023e3e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8023e40:	b292      	uxth	r2, r2
 8023e42:	9909      	ldr	r1, [sp, #36]	; 0x24
 8023e44:	3503      	adds	r5, #3
 8023e46:	f10c 3cff 	add.w	ip, ip, #4294967295
 8023e4a:	fb03 f402 	mul.w	r4, r3, r2
 8023e4e:	011b      	lsls	r3, r3, #4
 8023e50:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8023e54:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 8023e58:	1b1b      	subs	r3, r3, r4
 8023e5a:	b292      	uxth	r2, r2
 8023e5c:	b29b      	uxth	r3, r3
 8023e5e:	1ab6      	subs	r6, r6, r2
 8023e60:	435f      	muls	r7, r3
 8023e62:	b2b6      	uxth	r6, r6
 8023e64:	fb03 f909 	mul.w	r9, r3, r9
 8023e68:	fb03 fb0b 	mul.w	fp, r3, fp
 8023e6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023e6e:	fb06 7000 	mla	r0, r6, r0, r7
 8023e72:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8023e74:	fb06 bb03 	mla	fp, r6, r3, fp
 8023e78:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023e7a:	fb02 0007 	mla	r0, r2, r7, r0
 8023e7e:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8023e80:	fb02 bb03 	mla	fp, r2, r3, fp
 8023e84:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023e86:	fb04 0007 	mla	r0, r4, r7, r0
 8023e8a:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 8023e8e:	fb17 f701 	smulbb	r7, r7, r1
 8023e92:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023e96:	990d      	ldr	r1, [sp, #52]	; 0x34
 8023e98:	fb00 700e 	mla	r0, r0, lr, r7
 8023e9c:	fb06 9101 	mla	r1, r6, r1, r9
 8023ea0:	b280      	uxth	r0, r0
 8023ea2:	1c47      	adds	r7, r0, #1
 8023ea4:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 8023ea8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8023eaa:	1200      	asrs	r0, r0, #8
 8023eac:	f805 0c06 	strb.w	r0, [r5, #-6]
 8023eb0:	9819      	ldr	r0, [sp, #100]	; 0x64
 8023eb2:	fb02 1100 	mla	r1, r2, r0, r1
 8023eb6:	981a      	ldr	r0, [sp, #104]	; 0x68
 8023eb8:	fb04 1100 	mla	r1, r4, r0, r1
 8023ebc:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 8023ec0:	fb04 b403 	mla	r4, r4, r3, fp
 8023ec4:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 8023ec8:	fb10 f007 	smulbb	r0, r0, r7
 8023ecc:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023ed0:	fb13 f307 	smulbb	r3, r3, r7
 8023ed4:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8023ed8:	fb01 010e 	mla	r1, r1, lr, r0
 8023edc:	fb04 340e 	mla	r4, r4, lr, r3
 8023ee0:	b289      	uxth	r1, r1
 8023ee2:	b2a4      	uxth	r4, r4
 8023ee4:	1c48      	adds	r0, r1, #1
 8023ee6:	1c63      	adds	r3, r4, #1
 8023ee8:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8023eec:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8023ef0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023ef2:	1209      	asrs	r1, r1, #8
 8023ef4:	1224      	asrs	r4, r4, #8
 8023ef6:	449a      	add	sl, r3
 8023ef8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023efa:	f805 1c05 	strb.w	r1, [r5, #-5]
 8023efe:	f805 4c04 	strb.w	r4, [r5, #-4]
 8023f02:	4498      	add	r8, r3
 8023f04:	e707      	b.n	8023d16 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8023f06:	b01f      	add	sp, #124	; 0x7c
 8023f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023f0c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8023f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023f10:	b087      	sub	sp, #28
 8023f12:	780d      	ldrb	r5, [r1, #0]
 8023f14:	784c      	ldrb	r4, [r1, #1]
 8023f16:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8023f1a:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	; 0x40
 8023f1e:	9004      	str	r0, [sp, #16]
 8023f20:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8023f24:	e9dd b611 	ldrd	fp, r6, [sp, #68]	; 0x44
 8023f28:	9005      	str	r0, [sp, #20]
 8023f2a:	fb06 bc03 	mla	ip, r6, r3, fp
 8023f2e:	2e00      	cmp	r6, #0
 8023f30:	7888      	ldrb	r0, [r1, #2]
 8023f32:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8023f36:	eb02 090c 	add.w	r9, r2, ip
 8023f3a:	f2c0 8084 	blt.w	8024046 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 8023f3e:	42b7      	cmp	r7, r6
 8023f40:	f340 8081 	ble.w	8024046 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 8023f44:	f1bb 0f00 	cmp.w	fp, #0
 8023f48:	db79      	blt.n	802403e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 8023f4a:	455b      	cmp	r3, fp
 8023f4c:	dd77      	ble.n	802403e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 8023f4e:	f812 200c 	ldrb.w	r2, [r2, ip]
 8023f52:	9201      	str	r2, [sp, #4]
 8023f54:	f899 2001 	ldrb.w	r2, [r9, #1]
 8023f58:	9202      	str	r2, [sp, #8]
 8023f5a:	f899 2002 	ldrb.w	r2, [r9, #2]
 8023f5e:	9203      	str	r2, [sp, #12]
 8023f60:	f11b 0201 	adds.w	r2, fp, #1
 8023f64:	d476      	bmi.n	8024054 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8023f66:	4293      	cmp	r3, r2
 8023f68:	dd74      	ble.n	8024054 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8023f6a:	9a04      	ldr	r2, [sp, #16]
 8023f6c:	2a00      	cmp	r2, #0
 8023f6e:	d071      	beq.n	8024054 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8023f70:	f899 8003 	ldrb.w	r8, [r9, #3]
 8023f74:	f899 c004 	ldrb.w	ip, [r9, #4]
 8023f78:	f899 a005 	ldrb.w	sl, [r9, #5]
 8023f7c:	3601      	adds	r6, #1
 8023f7e:	d471      	bmi.n	8024064 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8023f80:	42b7      	cmp	r7, r6
 8023f82:	dd6f      	ble.n	8024064 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8023f84:	9a05      	ldr	r2, [sp, #20]
 8023f86:	2a00      	cmp	r2, #0
 8023f88:	d06c      	beq.n	8024064 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8023f8a:	f1bb 0f00 	cmp.w	fp, #0
 8023f8e:	db65      	blt.n	802405c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 8023f90:	455b      	cmp	r3, fp
 8023f92:	dd63      	ble.n	802405c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 8023f94:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8023f98:	f819 e002 	ldrb.w	lr, [r9, r2]
 8023f9c:	2203      	movs	r2, #3
 8023f9e:	fb03 9602 	mla	r6, r3, r2, r9
 8023fa2:	7877      	ldrb	r7, [r6, #1]
 8023fa4:	78b6      	ldrb	r6, [r6, #2]
 8023fa6:	f11b 0b01 	adds.w	fp, fp, #1
 8023faa:	d40c      	bmi.n	8023fc6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8023fac:	455b      	cmp	r3, fp
 8023fae:	dd0a      	ble.n	8023fc6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8023fb0:	9a04      	ldr	r2, [sp, #16]
 8023fb2:	b142      	cbz	r2, 8023fc6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8023fb4:	2203      	movs	r2, #3
 8023fb6:	fb13 2002 	smlabb	r0, r3, r2, r2
 8023fba:	f819 5000 	ldrb.w	r5, [r9, r0]
 8023fbe:	fb03 9002 	mla	r0, r3, r2, r9
 8023fc2:	7904      	ldrb	r4, [r0, #4]
 8023fc4:	7940      	ldrb	r0, [r0, #5]
 8023fc6:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8023fca:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8023fce:	fb03 fb02 	mul.w	fp, r3, r2
 8023fd2:	011b      	lsls	r3, r3, #4
 8023fd4:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 8023fd8:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 8023fdc:	eba3 030b 	sub.w	r3, r3, fp
 8023fe0:	b292      	uxth	r2, r2
 8023fe2:	b29b      	uxth	r3, r3
 8023fe4:	eba9 0902 	sub.w	r9, r9, r2
 8023fe8:	9304      	str	r3, [sp, #16]
 8023fea:	fa1f f989 	uxth.w	r9, r9
 8023fee:	fb03 f808 	mul.w	r8, r3, r8
 8023ff2:	9b01      	ldr	r3, [sp, #4]
 8023ff4:	fb09 8803 	mla	r8, r9, r3, r8
 8023ff8:	9b04      	ldr	r3, [sp, #16]
 8023ffa:	fb03 fc0c 	mul.w	ip, r3, ip
 8023ffe:	9b02      	ldr	r3, [sp, #8]
 8024000:	fb02 880e 	mla	r8, r2, lr, r8
 8024004:	fb09 cc03 	mla	ip, r9, r3, ip
 8024008:	9b04      	ldr	r3, [sp, #16]
 802400a:	fb0b 8805 	mla	r8, fp, r5, r8
 802400e:	fb02 c707 	mla	r7, r2, r7, ip
 8024012:	fb03 f30a 	mul.w	r3, r3, sl
 8024016:	ea4f 2828 	mov.w	r8, r8, asr #8
 802401a:	fb0b 7404 	mla	r4, fp, r4, r7
 802401e:	f881 8000 	strb.w	r8, [r1]
 8024022:	1224      	asrs	r4, r4, #8
 8024024:	704c      	strb	r4, [r1, #1]
 8024026:	9c03      	ldr	r4, [sp, #12]
 8024028:	fb09 3904 	mla	r9, r9, r4, r3
 802402c:	fb02 9206 	mla	r2, r2, r6, r9
 8024030:	fb0b 2000 	mla	r0, fp, r0, r2
 8024034:	1200      	asrs	r0, r0, #8
 8024036:	7088      	strb	r0, [r1, #2]
 8024038:	b007      	add	sp, #28
 802403a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802403e:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8024042:	9501      	str	r5, [sp, #4]
 8024044:	e78c      	b.n	8023f60 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 8024046:	4682      	mov	sl, r0
 8024048:	46a4      	mov	ip, r4
 802404a:	46a8      	mov	r8, r5
 802404c:	9501      	str	r5, [sp, #4]
 802404e:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8024052:	e793      	b.n	8023f7c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8024054:	4682      	mov	sl, r0
 8024056:	46a4      	mov	ip, r4
 8024058:	46a8      	mov	r8, r5
 802405a:	e78f      	b.n	8023f7c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 802405c:	4606      	mov	r6, r0
 802405e:	4627      	mov	r7, r4
 8024060:	46ae      	mov	lr, r5
 8024062:	e7a0      	b.n	8023fa6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 8024064:	4606      	mov	r6, r0
 8024066:	4627      	mov	r7, r4
 8024068:	46ae      	mov	lr, r5
 802406a:	e7ac      	b.n	8023fc6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

0802406c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802406c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024070:	b09b      	sub	sp, #108	; 0x6c
 8024072:	920b      	str	r2, [sp, #44]	; 0x2c
 8024074:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8024076:	9019      	str	r0, [sp, #100]	; 0x64
 8024078:	9109      	str	r1, [sp, #36]	; 0x24
 802407a:	6850      	ldr	r0, [r2, #4]
 802407c:	9306      	str	r3, [sp, #24]
 802407e:	6812      	ldr	r2, [r2, #0]
 8024080:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8024084:	e9dd b425 	ldrd	fp, r4, [sp, #148]	; 0x94
 8024088:	fb00 1303 	mla	r3, r0, r3, r1
 802408c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024090:	18d3      	adds	r3, r2, r3
 8024092:	9307      	str	r3, [sp, #28]
 8024094:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024096:	681b      	ldr	r3, [r3, #0]
 8024098:	9308      	str	r3, [sp, #32]
 802409a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802409c:	2b00      	cmp	r3, #0
 802409e:	dc03      	bgt.n	80240a8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80240a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80240a2:	2b00      	cmp	r3, #0
 80240a4:	f340 81ab 	ble.w	80243fe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80240a8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80240aa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80240ae:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80240b2:	1e48      	subs	r0, r1, #1
 80240b4:	1e55      	subs	r5, r2, #1
 80240b6:	9b06      	ldr	r3, [sp, #24]
 80240b8:	2b00      	cmp	r3, #0
 80240ba:	f340 80b1 	ble.w	8024220 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80240be:	ea5f 462b 	movs.w	r6, fp, asr #16
 80240c2:	ea4f 4324 	mov.w	r3, r4, asr #16
 80240c6:	d406      	bmi.n	80240d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80240c8:	4286      	cmp	r6, r0
 80240ca:	da04      	bge.n	80240d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80240cc:	2b00      	cmp	r3, #0
 80240ce:	db02      	blt.n	80240d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80240d0:	42ab      	cmp	r3, r5
 80240d2:	f2c0 80a6 	blt.w	8024222 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 80240d6:	3601      	adds	r6, #1
 80240d8:	f100 8097 	bmi.w	802420a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 80240dc:	42b1      	cmp	r1, r6
 80240de:	f2c0 8094 	blt.w	802420a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 80240e2:	3301      	adds	r3, #1
 80240e4:	f100 8091 	bmi.w	802420a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 80240e8:	429a      	cmp	r2, r3
 80240ea:	f2c0 808e 	blt.w	802420a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 80240ee:	9b06      	ldr	r3, [sp, #24]
 80240f0:	9e07      	ldr	r6, [sp, #28]
 80240f2:	930a      	str	r3, [sp, #40]	; 0x28
 80240f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80240f6:	2b00      	cmp	r3, #0
 80240f8:	f340 80b0 	ble.w	802425c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 80240fc:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80240fe:	1425      	asrs	r5, r4, #16
 8024100:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024102:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8024106:	68c7      	ldr	r7, [r0, #12]
 8024108:	ea5f 402b 	movs.w	r0, fp, asr #16
 802410c:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8024110:	689b      	ldr	r3, [r3, #8]
 8024112:	f100 80ea 	bmi.w	80242ea <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8024116:	f103 3cff 	add.w	ip, r3, #4294967295
 802411a:	4560      	cmp	r0, ip
 802411c:	f280 80e5 	bge.w	80242ea <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8024120:	2d00      	cmp	r5, #0
 8024122:	f2c0 80e2 	blt.w	80242ea <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8024126:	f107 3cff 	add.w	ip, r7, #4294967295
 802412a:	4565      	cmp	r5, ip
 802412c:	f280 80dd 	bge.w	80242ea <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8024130:	b21b      	sxth	r3, r3
 8024132:	fb05 0003 	mla	r0, r5, r3, r0
 8024136:	9d08      	ldr	r5, [sp, #32]
 8024138:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802413c:	182f      	adds	r7, r5, r0
 802413e:	5c2d      	ldrb	r5, [r5, r0]
 8024140:	7878      	ldrb	r0, [r7, #1]
 8024142:	f897 e002 	ldrb.w	lr, [r7, #2]
 8024146:	900c      	str	r0, [sp, #48]	; 0x30
 8024148:	f897 9003 	ldrb.w	r9, [r7, #3]
 802414c:	f897 8004 	ldrb.w	r8, [r7, #4]
 8024150:	f897 a005 	ldrb.w	sl, [r7, #5]
 8024154:	b1c9      	cbz	r1, 802418a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8024156:	f04f 0c03 	mov.w	ip, #3
 802415a:	f06f 0004 	mvn.w	r0, #4
 802415e:	3705      	adds	r7, #5
 8024160:	fb13 030c 	smlabb	r3, r3, ip, r0
 8024164:	eb07 0c03 	add.w	ip, r7, r3
 8024168:	5cfb      	ldrb	r3, [r7, r3]
 802416a:	930d      	str	r3, [sp, #52]	; 0x34
 802416c:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8024170:	930f      	str	r3, [sp, #60]	; 0x3c
 8024172:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8024176:	9311      	str	r3, [sp, #68]	; 0x44
 8024178:	f89c 3003 	ldrb.w	r3, [ip, #3]
 802417c:	930e      	str	r3, [sp, #56]	; 0x38
 802417e:	f89c 3004 	ldrb.w	r3, [ip, #4]
 8024182:	9310      	str	r3, [sp, #64]	; 0x40
 8024184:	f89c 3005 	ldrb.w	r3, [ip, #5]
 8024188:	9312      	str	r3, [sp, #72]	; 0x48
 802418a:	b292      	uxth	r2, r2
 802418c:	980c      	ldr	r0, [sp, #48]	; 0x30
 802418e:	b289      	uxth	r1, r1
 8024190:	fb02 f301 	mul.w	r3, r2, r1
 8024194:	0112      	lsls	r2, r2, #4
 8024196:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802419a:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 802419e:	1ad2      	subs	r2, r2, r3
 80241a0:	b289      	uxth	r1, r1
 80241a2:	b292      	uxth	r2, r2
 80241a4:	1a7f      	subs	r7, r7, r1
 80241a6:	fb02 f909 	mul.w	r9, r2, r9
 80241aa:	b2bf      	uxth	r7, r7
 80241ac:	fb02 f808 	mul.w	r8, r2, r8
 80241b0:	fb02 fa0a 	mul.w	sl, r2, sl
 80241b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80241b6:	fb07 9905 	mla	r9, r7, r5, r9
 80241ba:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80241bc:	fb07 8800 	mla	r8, r7, r0, r8
 80241c0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80241c2:	fb07 aa0e 	mla	sl, r7, lr, sl
 80241c6:	fb01 9905 	mla	r9, r1, r5, r9
 80241ca:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80241cc:	fb01 8800 	mla	r8, r1, r0, r8
 80241d0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80241d2:	fb01 a102 	mla	r1, r1, r2, sl
 80241d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80241d8:	fb03 9905 	mla	r9, r3, r5, r9
 80241dc:	fb03 8800 	mla	r8, r3, r0, r8
 80241e0:	fb03 1302 	mla	r3, r3, r2, r1
 80241e4:	ea4f 2929 	mov.w	r9, r9, asr #8
 80241e8:	ea4f 2828 	mov.w	r8, r8, asr #8
 80241ec:	121b      	asrs	r3, r3, #8
 80241ee:	f886 9000 	strb.w	r9, [r6]
 80241f2:	f886 8001 	strb.w	r8, [r6, #1]
 80241f6:	70b3      	strb	r3, [r6, #2]
 80241f8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80241fa:	3603      	adds	r6, #3
 80241fc:	449b      	add	fp, r3
 80241fe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024200:	441c      	add	r4, r3
 8024202:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024204:	3b01      	subs	r3, #1
 8024206:	930a      	str	r3, [sp, #40]	; 0x28
 8024208:	e774      	b.n	80240f4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 802420a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802420c:	449b      	add	fp, r3
 802420e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024210:	441c      	add	r4, r3
 8024212:	9b06      	ldr	r3, [sp, #24]
 8024214:	3b01      	subs	r3, #1
 8024216:	9306      	str	r3, [sp, #24]
 8024218:	9b07      	ldr	r3, [sp, #28]
 802421a:	3303      	adds	r3, #3
 802421c:	9307      	str	r3, [sp, #28]
 802421e:	e74a      	b.n	80240b6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8024220:	d024      	beq.n	802426c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8024222:	9b06      	ldr	r3, [sp, #24]
 8024224:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8024226:	3b01      	subs	r3, #1
 8024228:	fb00 b003 	mla	r0, r0, r3, fp
 802422c:	1400      	asrs	r0, r0, #16
 802422e:	f53f af5e 	bmi.w	80240ee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8024232:	3901      	subs	r1, #1
 8024234:	4288      	cmp	r0, r1
 8024236:	f6bf af5a 	bge.w	80240ee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802423a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802423c:	fb01 4303 	mla	r3, r1, r3, r4
 8024240:	141b      	asrs	r3, r3, #16
 8024242:	f53f af54 	bmi.w	80240ee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8024246:	3a01      	subs	r2, #1
 8024248:	4293      	cmp	r3, r2
 802424a:	f6bf af50 	bge.w	80240ee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802424e:	9b07      	ldr	r3, [sp, #28]
 8024250:	f8dd e018 	ldr.w	lr, [sp, #24]
 8024254:	1cde      	adds	r6, r3, #3
 8024256:	f1be 0f00 	cmp.w	lr, #0
 802425a:	dc5f      	bgt.n	802431c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 802425c:	9b06      	ldr	r3, [sp, #24]
 802425e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024262:	9b07      	ldr	r3, [sp, #28]
 8024264:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024268:	4423      	add	r3, r4
 802426a:	9307      	str	r3, [sp, #28]
 802426c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802426e:	2b00      	cmp	r3, #0
 8024270:	f340 80c5 	ble.w	80243fe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8024274:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024278:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802427a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802427e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024282:	eef0 6a62 	vmov.f32	s13, s5
 8024286:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802428a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802428e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024292:	ee16 ba90 	vmov	fp, s13
 8024296:	eef0 6a43 	vmov.f32	s13, s6
 802429a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802429e:	ee16 4a90 	vmov	r4, s13
 80242a2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80242a6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80242aa:	ee77 2a62 	vsub.f32	s5, s14, s5
 80242ae:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80242b2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80242b6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80242ba:	ee12 2a90 	vmov	r2, s5
 80242be:	eef0 2a47 	vmov.f32	s5, s14
 80242c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80242c6:	ee13 2a10 	vmov	r2, s6
 80242ca:	9327      	str	r3, [sp, #156]	; 0x9c
 80242cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80242ce:	eeb0 3a67 	vmov.f32	s6, s15
 80242d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80242d6:	9328      	str	r3, [sp, #160]	; 0xa0
 80242d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80242da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80242dc:	3b01      	subs	r3, #1
 80242de:	9309      	str	r3, [sp, #36]	; 0x24
 80242e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80242e2:	bf08      	it	eq
 80242e4:	4613      	moveq	r3, r2
 80242e6:	9306      	str	r3, [sp, #24]
 80242e8:	e6d7      	b.n	802409a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80242ea:	f110 0c01 	adds.w	ip, r0, #1
 80242ee:	d483      	bmi.n	80241f8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 80242f0:	4563      	cmp	r3, ip
 80242f2:	db81      	blt.n	80241f8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 80242f4:	f115 0c01 	adds.w	ip, r5, #1
 80242f8:	f53f af7e 	bmi.w	80241f8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 80242fc:	4567      	cmp	r7, ip
 80242fe:	f6ff af7b 	blt.w	80241f8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8024302:	b23f      	sxth	r7, r7
 8024304:	b21b      	sxth	r3, r3
 8024306:	9700      	str	r7, [sp, #0]
 8024308:	e9cd 2103 	strd	r2, r1, [sp, #12]
 802430c:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8024310:	9a08      	ldr	r2, [sp, #32]
 8024312:	4631      	mov	r1, r6
 8024314:	9819      	ldr	r0, [sp, #100]	; 0x64
 8024316:	f7ff fdf9 	bl	8023f0c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 802431a:	e76d      	b.n	80241f8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 802431c:	992c      	ldr	r1, [sp, #176]	; 0xb0
 802431e:	ea4f 402b 	mov.w	r0, fp, asr #16
 8024322:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8024326:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802432a:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 802432e:	1421      	asrs	r1, r4, #16
 8024330:	930a      	str	r3, [sp, #40]	; 0x28
 8024332:	fb0c 0101 	mla	r1, ip, r1, r0
 8024336:	9808      	ldr	r0, [sp, #32]
 8024338:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802433c:	1845      	adds	r5, r0, r1
 802433e:	5c40      	ldrb	r0, [r0, r1]
 8024340:	796f      	ldrb	r7, [r5, #5]
 8024342:	7869      	ldrb	r1, [r5, #1]
 8024344:	f895 8002 	ldrb.w	r8, [r5, #2]
 8024348:	f895 a003 	ldrb.w	sl, [r5, #3]
 802434c:	f895 9004 	ldrb.w	r9, [r5, #4]
 8024350:	970c      	str	r7, [sp, #48]	; 0x30
 8024352:	b1a2      	cbz	r2, 802437e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 8024354:	2703      	movs	r7, #3
 8024356:	f06f 0304 	mvn.w	r3, #4
 802435a:	3505      	adds	r5, #5
 802435c:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 8024360:	eb05 070c 	add.w	r7, r5, ip
 8024364:	f815 500c 	ldrb.w	r5, [r5, ip]
 8024368:	9513      	str	r5, [sp, #76]	; 0x4c
 802436a:	787d      	ldrb	r5, [r7, #1]
 802436c:	9515      	str	r5, [sp, #84]	; 0x54
 802436e:	78bd      	ldrb	r5, [r7, #2]
 8024370:	9517      	str	r5, [sp, #92]	; 0x5c
 8024372:	78fd      	ldrb	r5, [r7, #3]
 8024374:	9514      	str	r5, [sp, #80]	; 0x50
 8024376:	793d      	ldrb	r5, [r7, #4]
 8024378:	9516      	str	r5, [sp, #88]	; 0x58
 802437a:	797d      	ldrb	r5, [r7, #5]
 802437c:	9518      	str	r5, [sp, #96]	; 0x60
 802437e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8024382:	b292      	uxth	r2, r2
 8024384:	3603      	adds	r6, #3
 8024386:	f10e 3eff 	add.w	lr, lr, #4294967295
 802438a:	fb03 f502 	mul.w	r5, r3, r2
 802438e:	011b      	lsls	r3, r3, #4
 8024390:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8024394:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8024398:	1b5b      	subs	r3, r3, r5
 802439a:	b292      	uxth	r2, r2
 802439c:	b29b      	uxth	r3, r3
 802439e:	1abf      	subs	r7, r7, r2
 80243a0:	fb03 f909 	mul.w	r9, r3, r9
 80243a4:	b2bf      	uxth	r7, r7
 80243a6:	fb03 fa0a 	mul.w	sl, r3, sl
 80243aa:	fb07 9901 	mla	r9, r7, r1, r9
 80243ae:	9915      	ldr	r1, [sp, #84]	; 0x54
 80243b0:	fb07 aa00 	mla	sl, r7, r0, sl
 80243b4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80243b6:	fb02 9901 	mla	r9, r2, r1, r9
 80243ba:	9916      	ldr	r1, [sp, #88]	; 0x58
 80243bc:	fb02 aa00 	mla	sl, r2, r0, sl
 80243c0:	9814      	ldr	r0, [sp, #80]	; 0x50
 80243c2:	fb05 9901 	mla	r9, r5, r1, r9
 80243c6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80243c8:	fb05 aa00 	mla	sl, r5, r0, sl
 80243cc:	434b      	muls	r3, r1
 80243ce:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80243d0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80243d4:	fb07 3308 	mla	r3, r7, r8, r3
 80243d8:	ea4f 2929 	mov.w	r9, r9, asr #8
 80243dc:	f806 ac06 	strb.w	sl, [r6, #-6]
 80243e0:	fb02 3201 	mla	r2, r2, r1, r3
 80243e4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80243e6:	f806 9c05 	strb.w	r9, [r6, #-5]
 80243ea:	fb05 2503 	mla	r5, r5, r3, r2
 80243ee:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80243f0:	122d      	asrs	r5, r5, #8
 80243f2:	449b      	add	fp, r3
 80243f4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80243f6:	f806 5c04 	strb.w	r5, [r6, #-4]
 80243fa:	441c      	add	r4, r3
 80243fc:	e72b      	b.n	8024256 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80243fe:	b01b      	add	sp, #108	; 0x6c
 8024400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024404 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8024404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024408:	b087      	sub	sp, #28
 802440a:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 802440e:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 8024412:	fb05 7003 	mla	r0, r5, r3, r7
 8024416:	2d00      	cmp	r5, #0
 8024418:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 802441c:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 8024420:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 8024424:	f2c0 811f 	blt.w	8024666 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 8024428:	45a8      	cmp	r8, r5
 802442a:	f340 811c 	ble.w	8024666 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 802442e:	2f00      	cmp	r7, #0
 8024430:	f2c0 8117 	blt.w	8024662 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 8024434:	42bb      	cmp	r3, r7
 8024436:	f340 8114 	ble.w	8024662 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 802443a:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 802443e:	1c7a      	adds	r2, r7, #1
 8024440:	f100 8114 	bmi.w	802466c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 8024444:	4293      	cmp	r3, r2
 8024446:	f340 8111 	ble.w	802466c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 802444a:	2c00      	cmp	r4, #0
 802444c:	f000 8110 	beq.w	8024670 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 8024450:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8024454:	3501      	adds	r5, #1
 8024456:	f100 810f 	bmi.w	8024678 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 802445a:	45a8      	cmp	r8, r5
 802445c:	f340 810c 	ble.w	8024678 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 8024460:	f1be 0f00 	cmp.w	lr, #0
 8024464:	f000 810b 	beq.w	802467e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 8024468:	2f00      	cmp	r7, #0
 802446a:	f2c0 8103 	blt.w	8024674 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 802446e:	42bb      	cmp	r3, r7
 8024470:	f340 8100 	ble.w	8024674 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 8024474:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 8024478:	3701      	adds	r7, #1
 802447a:	f100 8103 	bmi.w	8024684 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 802447e:	42bb      	cmp	r3, r7
 8024480:	f340 8100 	ble.w	8024684 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 8024484:	2c00      	cmp	r4, #0
 8024486:	f000 80ff 	beq.w	8024688 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 802448a:	3301      	adds	r3, #1
 802448c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8024490:	fa1f fc84 	uxth.w	ip, r4
 8024494:	fa1f fe8e 	uxth.w	lr, lr
 8024498:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802449c:	fb0c f90e 	mul.w	r9, ip, lr
 80244a0:	0e13      	lsrs	r3, r2, #24
 80244a2:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80244a6:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 80244aa:	9302      	str	r3, [sp, #8]
 80244ac:	ebac 0709 	sub.w	r7, ip, r9
 80244b0:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 80244b4:	fa1f f48e 	uxth.w	r4, lr
 80244b8:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 80244bc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80244c0:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 80244c4:	fb0a fe0e 	mul.w	lr, sl, lr
 80244c8:	1b1b      	subs	r3, r3, r4
 80244ca:	fb0a f606 	mul.w	r6, sl, r6
 80244ce:	ea4f 6815 	mov.w	r8, r5, lsr #24
 80244d2:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80244d6:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80244da:	b29b      	uxth	r3, r3
 80244dc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80244e0:	b2bf      	uxth	r7, r7
 80244e2:	9301      	str	r3, [sp, #4]
 80244e4:	44e6      	add	lr, ip
 80244e6:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 80244ea:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80244ee:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80244f2:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 80244f6:	9303      	str	r3, [sp, #12]
 80244f8:	0a33      	lsrs	r3, r6, #8
 80244fa:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 80244fe:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024502:	9304      	str	r3, [sp, #16]
 8024504:	fb0b f606 	mul.w	r6, fp, r6
 8024508:	fb0b f000 	mul.w	r0, fp, r0
 802450c:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 8024510:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8024514:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024518:	44b6      	add	lr, r6
 802451a:	f500 7680 	add.w	r6, r0, #256	; 0x100
 802451e:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8024522:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 8024526:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 802452a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802452e:	fb08 f606 	mul.w	r6, r8, r6
 8024532:	0a03      	lsrs	r3, r0, #8
 8024534:	fb08 f505 	mul.w	r5, r8, r5
 8024538:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802453c:	0a30      	lsrs	r0, r6, #8
 802453e:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8024542:	9305      	str	r3, [sp, #20]
 8024544:	0e13      	lsrs	r3, r2, #24
 8024546:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802454a:	fb0e fe07 	mul.w	lr, lr, r7
 802454e:	4430      	add	r0, r6
 8024550:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8024554:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8024558:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 802455c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024560:	0a00      	lsrs	r0, r0, #8
 8024562:	435e      	muls	r6, r3
 8024564:	0a2d      	lsrs	r5, r5, #8
 8024566:	435a      	muls	r2, r3
 8024568:	9b03      	ldr	r3, [sp, #12]
 802456a:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 802456e:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8024572:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8024576:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802457a:	44b4      	add	ip, r6
 802457c:	f502 7680 	add.w	r6, r2, #256	; 0x100
 8024580:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024584:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8024588:	9e01      	ldr	r6, [sp, #4]
 802458a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802458e:	fb03 ee06 	mla	lr, r3, r6, lr
 8024592:	9b04      	ldr	r3, [sp, #16]
 8024594:	0a12      	lsrs	r2, r2, #8
 8024596:	fb0c ee09 	mla	lr, ip, r9, lr
 802459a:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 802459e:	9b05      	ldr	r3, [sp, #20]
 80245a0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80245a4:	fb00 ee04 	mla	lr, r0, r4, lr
 80245a8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80245ac:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 80245b0:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 80245b4:	9b01      	ldr	r3, [sp, #4]
 80245b6:	fb07 fe0e 	mul.w	lr, r7, lr
 80245ba:	fb07 f70b 	mul.w	r7, r7, fp
 80245be:	fb03 ee06 	mla	lr, r3, r6, lr
 80245c2:	fb03 730a 	mla	r3, r3, sl, r7
 80245c6:	fb09 e202 	mla	r2, r9, r2, lr
 80245ca:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80245ce:	fb04 2e0e 	mla	lr, r4, lr, r2
 80245d2:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 80245d6:	fb04 3408 	mla	r4, r4, r8, r3
 80245da:	9b02      	ldr	r3, [sp, #8]
 80245dc:	b292      	uxth	r2, r2
 80245de:	fb09 4903 	mla	r9, r9, r3, r4
 80245e2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80245e6:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80245ea:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80245ee:	fb09 f902 	mul.w	r9, r9, r2
 80245f2:	ea40 0e0e 	orr.w	lr, r0, lr
 80245f6:	f109 0301 	add.w	r3, r9, #1
 80245fa:	fa5f f08e 	uxtb.w	r0, lr
 80245fe:	fb10 f002 	smulbb	r0, r0, r2
 8024602:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8024606:	780b      	ldrb	r3, [r1, #0]
 8024608:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 802460c:	fa5f f989 	uxtb.w	r9, r9
 8024610:	fb03 0309 	mla	r3, r3, r9, r0
 8024614:	b29b      	uxth	r3, r3
 8024616:	1c58      	adds	r0, r3, #1
 8024618:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802461c:	7848      	ldrb	r0, [r1, #1]
 802461e:	fb10 f009 	smulbb	r0, r0, r9
 8024622:	121b      	asrs	r3, r3, #8
 8024624:	700b      	strb	r3, [r1, #0]
 8024626:	f3ce 2307 	ubfx	r3, lr, #8, #8
 802462a:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 802462e:	fb03 0302 	mla	r3, r3, r2, r0
 8024632:	b29b      	uxth	r3, r3
 8024634:	1c58      	adds	r0, r3, #1
 8024636:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802463a:	121b      	asrs	r3, r3, #8
 802463c:	704b      	strb	r3, [r1, #1]
 802463e:	788b      	ldrb	r3, [r1, #2]
 8024640:	fb13 f909 	smulbb	r9, r3, r9
 8024644:	fb0e 9e02 	mla	lr, lr, r2, r9
 8024648:	fa1f fe8e 	uxth.w	lr, lr
 802464c:	f10e 0301 	add.w	r3, lr, #1
 8024650:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8024654:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8024658:	f881 e002 	strb.w	lr, [r1, #2]
 802465c:	b007      	add	sp, #28
 802465e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024662:	2600      	movs	r6, #0
 8024664:	e6eb      	b.n	802443e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 8024666:	2000      	movs	r0, #0
 8024668:	4606      	mov	r6, r0
 802466a:	e6f3      	b.n	8024454 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 802466c:	2000      	movs	r0, #0
 802466e:	e6f1      	b.n	8024454 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8024670:	4620      	mov	r0, r4
 8024672:	e6ef      	b.n	8024454 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8024674:	2500      	movs	r5, #0
 8024676:	e6ff      	b.n	8024478 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 8024678:	2200      	movs	r2, #0
 802467a:	4615      	mov	r5, r2
 802467c:	e708      	b.n	8024490 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 802467e:	4672      	mov	r2, lr
 8024680:	4675      	mov	r5, lr
 8024682:	e705      	b.n	8024490 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8024684:	2200      	movs	r2, #0
 8024686:	e703      	b.n	8024490 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8024688:	4622      	mov	r2, r4
 802468a:	e701      	b.n	8024490 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

0802468c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802468c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024690:	b09d      	sub	sp, #116	; 0x74
 8024692:	9219      	str	r2, [sp, #100]	; 0x64
 8024694:	9307      	str	r3, [sp, #28]
 8024696:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8024698:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 802469c:	901b      	str	r0, [sp, #108]	; 0x6c
 802469e:	931a      	str	r3, [sp, #104]	; 0x68
 80246a0:	6850      	ldr	r0, [r2, #4]
 80246a2:	9117      	str	r1, [sp, #92]	; 0x5c
 80246a4:	6812      	ldr	r2, [r2, #0]
 80246a6:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 80246aa:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 80246ae:	fb00 1303 	mla	r3, r0, r3, r1
 80246b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80246b6:	18d3      	adds	r3, r2, r3
 80246b8:	930a      	str	r3, [sp, #40]	; 0x28
 80246ba:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80246bc:	681b      	ldr	r3, [r3, #0]
 80246be:	9310      	str	r3, [sp, #64]	; 0x40
 80246c0:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 80246c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80246c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80246c8:	2b00      	cmp	r3, #0
 80246ca:	dc03      	bgt.n	80246d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80246cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80246ce:	2b00      	cmp	r3, #0
 80246d0:	f340 8368 	ble.w	8024da4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 80246d4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80246d6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80246da:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80246de:	1e48      	subs	r0, r1, #1
 80246e0:	1e57      	subs	r7, r2, #1
 80246e2:	9b07      	ldr	r3, [sp, #28]
 80246e4:	2b00      	cmp	r3, #0
 80246e6:	f340 8187 	ble.w	80249f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80246ea:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80246ee:	ea4f 4326 	mov.w	r3, r6, asr #16
 80246f2:	d406      	bmi.n	8024702 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80246f4:	4584      	cmp	ip, r0
 80246f6:	da04      	bge.n	8024702 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80246f8:	2b00      	cmp	r3, #0
 80246fa:	db02      	blt.n	8024702 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80246fc:	42bb      	cmp	r3, r7
 80246fe:	f2c0 817c 	blt.w	80249fa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8024702:	f11c 0c01 	adds.w	ip, ip, #1
 8024706:	f100 816c 	bmi.w	80249e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 802470a:	4561      	cmp	r1, ip
 802470c:	f2c0 8169 	blt.w	80249e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8024710:	3301      	adds	r3, #1
 8024712:	f100 8166 	bmi.w	80249e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8024716:	429a      	cmp	r2, r3
 8024718:	f2c0 8163 	blt.w	80249e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 802471c:	9b07      	ldr	r3, [sp, #28]
 802471e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8024720:	9318      	str	r3, [sp, #96]	; 0x60
 8024722:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8024724:	2b00      	cmp	r3, #0
 8024726:	f340 8186 	ble.w	8024a36 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 802472a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802472c:	142a      	asrs	r2, r5, #16
 802472e:	ea4f 4026 	mov.w	r0, r6, asr #16
 8024732:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8024736:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802473a:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 802473e:	f100 81cb 	bmi.w	8024ad8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8024742:	f10e 38ff 	add.w	r8, lr, #4294967295
 8024746:	4542      	cmp	r2, r8
 8024748:	f280 81c6 	bge.w	8024ad8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 802474c:	2800      	cmp	r0, #0
 802474e:	f2c0 81c3 	blt.w	8024ad8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8024752:	f103 38ff 	add.w	r8, r3, #4294967295
 8024756:	4540      	cmp	r0, r8
 8024758:	f280 81be 	bge.w	8024ad8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 802475c:	fa0f f38e 	sxth.w	r3, lr
 8024760:	fb00 2203 	mla	r2, r0, r3, r2
 8024764:	9810      	ldr	r0, [sp, #64]	; 0x40
 8024766:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 802476a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 802476e:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8024772:	2900      	cmp	r1, #0
 8024774:	f000 81a6 	beq.w	8024ac4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 8024778:	f8d8 0004 	ldr.w	r0, [r8, #4]
 802477c:	900c      	str	r0, [sp, #48]	; 0x30
 802477e:	0e00      	lsrs	r0, r0, #24
 8024780:	9013      	str	r0, [sp, #76]	; 0x4c
 8024782:	f1bc 0f00 	cmp.w	ip, #0
 8024786:	d00f      	beq.n	80247a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8024788:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802478c:	3b01      	subs	r3, #1
 802478e:	009b      	lsls	r3, r3, #2
 8024790:	3304      	adds	r3, #4
 8024792:	eb08 0003 	add.w	r0, r8, r3
 8024796:	f858 3003 	ldr.w	r3, [r8, r3]
 802479a:	9308      	str	r3, [sp, #32]
 802479c:	0e1b      	lsrs	r3, r3, #24
 802479e:	9311      	str	r3, [sp, #68]	; 0x44
 80247a0:	6843      	ldr	r3, [r0, #4]
 80247a2:	930d      	str	r3, [sp, #52]	; 0x34
 80247a4:	0e1b      	lsrs	r3, r3, #24
 80247a6:	9314      	str	r3, [sp, #80]	; 0x50
 80247a8:	b289      	uxth	r1, r1
 80247aa:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80247ac:	fa1f fc8c 	uxth.w	ip, ip
 80247b0:	0108      	lsls	r0, r1, #4
 80247b2:	fb01 f90c 	mul.w	r9, r1, ip
 80247b6:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80247ba:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 80247be:	eba0 0809 	sub.w	r8, r0, r9
 80247c2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80247c4:	fa1f f18c 	uxth.w	r1, ip
 80247c8:	fa1f f888 	uxth.w	r8, r8
 80247cc:	1a5b      	subs	r3, r3, r1
 80247ce:	fb08 f000 	mul.w	r0, r8, r0
 80247d2:	b29b      	uxth	r3, r3
 80247d4:	fb03 000e 	mla	r0, r3, lr, r0
 80247d8:	fb01 0004 	mla	r0, r1, r4, r0
 80247dc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80247de:	fb09 0004 	mla	r0, r9, r4, r0
 80247e2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80247e6:	2800      	cmp	r0, #0
 80247e8:	f000 80f2 	beq.w	80249d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80247ec:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80247f0:	d01b      	beq.n	802482a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 80247f2:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 80247f6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80247fa:	fb0e fa0a 	mul.w	sl, lr, sl
 80247fe:	fb0e fe02 	mul.w	lr, lr, r2
 8024802:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8024806:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802480a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802480e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024812:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8024816:	4452      	add	r2, sl
 8024818:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802481c:	0a12      	lsrs	r2, r2, #8
 802481e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024822:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024826:	ea42 020c 	orr.w	r2, r2, ip
 802482a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802482c:	2cff      	cmp	r4, #255	; 0xff
 802482e:	d021      	beq.n	8024874 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8024830:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8024832:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8024836:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024838:	fb04 fb0b 	mul.w	fp, r4, fp
 802483c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802483e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024842:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024844:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024848:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802484c:	fb04 fa0a 	mul.w	sl, r4, sl
 8024850:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024854:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024858:	44de      	add	lr, fp
 802485a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802485e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024862:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024866:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802486a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802486e:	ea4e 040a 	orr.w	r4, lr, sl
 8024872:	940c      	str	r4, [sp, #48]	; 0x30
 8024874:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024876:	2cff      	cmp	r4, #255	; 0xff
 8024878:	d021      	beq.n	80248be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 802487a:	9c08      	ldr	r4, [sp, #32]
 802487c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8024880:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024882:	fb04 fb0b 	mul.w	fp, r4, fp
 8024886:	9c08      	ldr	r4, [sp, #32]
 8024888:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802488c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802488e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024892:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024896:	fb04 fa0a 	mul.w	sl, r4, sl
 802489a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802489e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80248a2:	44de      	add	lr, fp
 80248a4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80248a8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80248ac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80248b0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80248b4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80248b8:	ea4e 040a 	orr.w	r4, lr, sl
 80248bc:	9408      	str	r4, [sp, #32]
 80248be:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80248c0:	2cff      	cmp	r4, #255	; 0xff
 80248c2:	d021      	beq.n	8024908 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80248c4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80248c6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80248ca:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80248cc:	fb04 fb0b 	mul.w	fp, r4, fp
 80248d0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80248d2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80248d6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80248d8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80248dc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80248e0:	fb04 fa0a 	mul.w	sl, r4, sl
 80248e4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80248e8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80248ec:	44de      	add	lr, fp
 80248ee:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80248f2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80248f6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80248fa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80248fe:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024902:	ea4e 040a 	orr.w	r4, lr, sl
 8024906:	940d      	str	r4, [sp, #52]	; 0x34
 8024908:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802490a:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802490e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024912:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024916:	9c08      	ldr	r4, [sp, #32]
 8024918:	fb08 fc0c 	mul.w	ip, r8, ip
 802491c:	fb03 cc0e 	mla	ip, r3, lr, ip
 8024920:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8024924:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024926:	fb01 cc0e 	mla	ip, r1, lr, ip
 802492a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802492e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8024930:	fb09 cc0e 	mla	ip, r9, lr, ip
 8024934:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8024938:	fb08 f80e 	mul.w	r8, r8, lr
 802493c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024940:	fb03 8202 	mla	r2, r3, r2, r8
 8024944:	9b08      	ldr	r3, [sp, #32]
 8024946:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802494a:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 802494e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024950:	fb01 220a 	mla	r2, r1, sl, r2
 8024954:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8024958:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802495a:	fb09 2901 	mla	r9, r9, r1, r2
 802495e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8024960:	4343      	muls	r3, r0
 8024962:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024966:	1c58      	adds	r0, r3, #1
 8024968:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802496c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8024970:	783b      	ldrb	r3, [r7, #0]
 8024972:	ea4c 0c09 	orr.w	ip, ip, r9
 8024976:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 802497a:	fa5f f28c 	uxtb.w	r2, ip
 802497e:	b2c0      	uxtb	r0, r0
 8024980:	fb12 f201 	smulbb	r2, r2, r1
 8024984:	fb03 2300 	mla	r3, r3, r0, r2
 8024988:	b29b      	uxth	r3, r3
 802498a:	1c5a      	adds	r2, r3, #1
 802498c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024990:	787a      	ldrb	r2, [r7, #1]
 8024992:	fb12 f200 	smulbb	r2, r2, r0
 8024996:	121b      	asrs	r3, r3, #8
 8024998:	703b      	strb	r3, [r7, #0]
 802499a:	f3cc 2307 	ubfx	r3, ip, #8, #8
 802499e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80249a2:	fb03 2301 	mla	r3, r3, r1, r2
 80249a6:	b29b      	uxth	r3, r3
 80249a8:	1c5a      	adds	r2, r3, #1
 80249aa:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80249ae:	121b      	asrs	r3, r3, #8
 80249b0:	707b      	strb	r3, [r7, #1]
 80249b2:	78bb      	ldrb	r3, [r7, #2]
 80249b4:	fb13 f000 	smulbb	r0, r3, r0
 80249b8:	fb0c 0c01 	mla	ip, ip, r1, r0
 80249bc:	fa1f fc8c 	uxth.w	ip, ip
 80249c0:	f10c 0301 	add.w	r3, ip, #1
 80249c4:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80249c8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80249cc:	f887 c002 	strb.w	ip, [r7, #2]
 80249d0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80249d2:	3703      	adds	r7, #3
 80249d4:	441d      	add	r5, r3
 80249d6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80249d8:	441e      	add	r6, r3
 80249da:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80249dc:	3b01      	subs	r3, #1
 80249de:	9318      	str	r3, [sp, #96]	; 0x60
 80249e0:	e69f      	b.n	8024722 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80249e2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80249e4:	441d      	add	r5, r3
 80249e6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80249e8:	441e      	add	r6, r3
 80249ea:	9b07      	ldr	r3, [sp, #28]
 80249ec:	3b01      	subs	r3, #1
 80249ee:	9307      	str	r3, [sp, #28]
 80249f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80249f2:	3303      	adds	r3, #3
 80249f4:	930a      	str	r3, [sp, #40]	; 0x28
 80249f6:	e674      	b.n	80246e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 80249f8:	d025      	beq.n	8024a46 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 80249fa:	9b07      	ldr	r3, [sp, #28]
 80249fc:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80249fe:	3b01      	subs	r3, #1
 8024a00:	fb00 5003 	mla	r0, r0, r3, r5
 8024a04:	1400      	asrs	r0, r0, #16
 8024a06:	f53f ae89 	bmi.w	802471c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024a0a:	3901      	subs	r1, #1
 8024a0c:	4288      	cmp	r0, r1
 8024a0e:	f6bf ae85 	bge.w	802471c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024a12:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8024a14:	fb01 6303 	mla	r3, r1, r3, r6
 8024a18:	141b      	asrs	r3, r3, #16
 8024a1a:	f53f ae7f 	bmi.w	802471c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024a1e:	3a01      	subs	r2, #1
 8024a20:	4293      	cmp	r3, r2
 8024a22:	f6bf ae7b 	bge.w	802471c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024a26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024a28:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8024a2c:	f103 0e03 	add.w	lr, r3, #3
 8024a30:	f1bb 0f00 	cmp.w	fp, #0
 8024a34:	dc6e      	bgt.n	8024b14 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8024a36:	9b07      	ldr	r3, [sp, #28]
 8024a38:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024a3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024a3e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024a42:	4423      	add	r3, r4
 8024a44:	930a      	str	r3, [sp, #40]	; 0x28
 8024a46:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024a48:	2b00      	cmp	r3, #0
 8024a4a:	f340 81ab 	ble.w	8024da4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8024a4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024a52:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024a54:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024a58:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024a5c:	eef0 6a62 	vmov.f32	s13, s5
 8024a60:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024a64:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024a68:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024a6c:	ee16 5a90 	vmov	r5, s13
 8024a70:	eef0 6a43 	vmov.f32	s13, s6
 8024a74:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024a78:	ee16 6a90 	vmov	r6, s13
 8024a7c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024a80:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024a84:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024a88:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024a8c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024a90:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024a94:	ee12 2a90 	vmov	r2, s5
 8024a98:	eef0 2a47 	vmov.f32	s5, s14
 8024a9c:	fb92 f3f3 	sdiv	r3, r2, r3
 8024aa0:	ee13 2a10 	vmov	r2, s6
 8024aa4:	9329      	str	r3, [sp, #164]	; 0xa4
 8024aa6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024aa8:	eeb0 3a67 	vmov.f32	s6, s15
 8024aac:	fb92 f3f3 	sdiv	r3, r2, r3
 8024ab0:	932a      	str	r3, [sp, #168]	; 0xa8
 8024ab2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024ab4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8024ab6:	3b01      	subs	r3, #1
 8024ab8:	9317      	str	r3, [sp, #92]	; 0x5c
 8024aba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024abc:	bf08      	it	eq
 8024abe:	4613      	moveq	r3, r2
 8024ac0:	9307      	str	r3, [sp, #28]
 8024ac2:	e600      	b.n	80246c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8024ac4:	f1bc 0f00 	cmp.w	ip, #0
 8024ac8:	f43f ae6e 	beq.w	80247a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8024acc:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8024ad0:	9308      	str	r3, [sp, #32]
 8024ad2:	0e1b      	lsrs	r3, r3, #24
 8024ad4:	9311      	str	r3, [sp, #68]	; 0x44
 8024ad6:	e667      	b.n	80247a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8024ad8:	f112 0801 	adds.w	r8, r2, #1
 8024adc:	f53f af78 	bmi.w	80249d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8024ae0:	45c6      	cmp	lr, r8
 8024ae2:	f6ff af75 	blt.w	80249d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8024ae6:	f110 0801 	adds.w	r8, r0, #1
 8024aea:	f53f af71 	bmi.w	80249d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8024aee:	4543      	cmp	r3, r8
 8024af0:	f6ff af6e 	blt.w	80249d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8024af4:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8024af6:	b21b      	sxth	r3, r3
 8024af8:	9201      	str	r2, [sp, #4]
 8024afa:	9300      	str	r3, [sp, #0]
 8024afc:	fa0f f38e 	sxth.w	r3, lr
 8024b00:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8024b02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8024b06:	e9cd c404 	strd	ip, r4, [sp, #16]
 8024b0a:	4639      	mov	r1, r7
 8024b0c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8024b0e:	f7ff fc79 	bl	8024404 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8024b12:	e75d      	b.n	80249d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8024b14:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024b16:	142f      	asrs	r7, r5, #16
 8024b18:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024b1a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8024b1e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8024b22:	1433      	asrs	r3, r6, #16
 8024b24:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8024b28:	fb02 7303 	mla	r3, r2, r3, r7
 8024b2c:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 8024b30:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8024b34:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8024b38:	2900      	cmp	r1, #0
 8024b3a:	f000 812a 	beq.w	8024d92 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8024b3e:	687c      	ldr	r4, [r7, #4]
 8024b40:	940e      	str	r4, [sp, #56]	; 0x38
 8024b42:	0e24      	lsrs	r4, r4, #24
 8024b44:	9415      	str	r4, [sp, #84]	; 0x54
 8024b46:	b178      	cbz	r0, 8024b68 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8024b48:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8024b4c:	3a01      	subs	r2, #1
 8024b4e:	0092      	lsls	r2, r2, #2
 8024b50:	3204      	adds	r2, #4
 8024b52:	eb07 0802 	add.w	r8, r7, r2
 8024b56:	58ba      	ldr	r2, [r7, r2]
 8024b58:	9209      	str	r2, [sp, #36]	; 0x24
 8024b5a:	0e12      	lsrs	r2, r2, #24
 8024b5c:	9212      	str	r2, [sp, #72]	; 0x48
 8024b5e:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8024b62:	920f      	str	r2, [sp, #60]	; 0x3c
 8024b64:	0e12      	lsrs	r2, r2, #24
 8024b66:	9216      	str	r2, [sp, #88]	; 0x58
 8024b68:	b289      	uxth	r1, r1
 8024b6a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024b6c:	b280      	uxth	r0, r0
 8024b6e:	fb01 f900 	mul.w	r9, r1, r0
 8024b72:	0109      	lsls	r1, r1, #4
 8024b74:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8024b78:	eba1 0809 	sub.w	r8, r1, r9
 8024b7c:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8024b80:	9915      	ldr	r1, [sp, #84]	; 0x54
 8024b82:	b280      	uxth	r0, r0
 8024b84:	fa1f f888 	uxth.w	r8, r8
 8024b88:	1a12      	subs	r2, r2, r0
 8024b8a:	fb08 f101 	mul.w	r1, r8, r1
 8024b8e:	b292      	uxth	r2, r2
 8024b90:	fb02 110c 	mla	r1, r2, ip, r1
 8024b94:	fb00 1104 	mla	r1, r0, r4, r1
 8024b98:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8024b9a:	fb09 1104 	mla	r1, r9, r4, r1
 8024b9e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8024ba2:	2900      	cmp	r1, #0
 8024ba4:	f000 80ec 	beq.w	8024d80 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 8024ba8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8024bac:	d019      	beq.n	8024be2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8024bae:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8024bb2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024bb6:	fb0c fa0a 	mul.w	sl, ip, sl
 8024bba:	fb0c fc03 	mul.w	ip, ip, r3
 8024bbe:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8024bc2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024bc6:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8024bca:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024bce:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8024bd2:	4453      	add	r3, sl
 8024bd4:	0a3f      	lsrs	r7, r7, #8
 8024bd6:	0a1b      	lsrs	r3, r3, #8
 8024bd8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024bdc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024be0:	433b      	orrs	r3, r7
 8024be2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024be4:	2cff      	cmp	r4, #255	; 0xff
 8024be6:	d020      	beq.n	8024c2a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 8024be8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024bea:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024bee:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024bf0:	4367      	muls	r7, r4
 8024bf2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024bf4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024bf8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024bfc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024bfe:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024c02:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024c06:	fb04 fa0a 	mul.w	sl, r4, sl
 8024c0a:	44bc      	add	ip, r7
 8024c0c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024c10:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024c14:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024c18:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024c1c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024c20:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024c24:	ea4c 040a 	orr.w	r4, ip, sl
 8024c28:	940e      	str	r4, [sp, #56]	; 0x38
 8024c2a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024c2c:	2cff      	cmp	r4, #255	; 0xff
 8024c2e:	d020      	beq.n	8024c72 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 8024c30:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8024c32:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024c36:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024c38:	4367      	muls	r7, r4
 8024c3a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8024c3c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024c40:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024c44:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024c46:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024c4a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024c4e:	fb04 fa0a 	mul.w	sl, r4, sl
 8024c52:	44bc      	add	ip, r7
 8024c54:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024c58:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024c5c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024c60:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024c64:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024c68:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024c6c:	ea4c 040a 	orr.w	r4, ip, sl
 8024c70:	9409      	str	r4, [sp, #36]	; 0x24
 8024c72:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8024c74:	2cff      	cmp	r4, #255	; 0xff
 8024c76:	d020      	beq.n	8024cba <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 8024c78:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024c7a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024c7e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8024c80:	4367      	muls	r7, r4
 8024c82:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024c84:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024c88:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024c8c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8024c8e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024c92:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024c96:	fb04 fa0a 	mul.w	sl, r4, sl
 8024c9a:	44bc      	add	ip, r7
 8024c9c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024ca0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024ca4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024ca8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024cac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024cb0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024cb4:	ea4c 040a 	orr.w	r4, ip, sl
 8024cb8:	940f      	str	r4, [sp, #60]	; 0x3c
 8024cba:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024cbc:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8024cc0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024cc4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024cc8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8024cca:	fb08 f707 	mul.w	r7, r8, r7
 8024cce:	fb02 770c 	mla	r7, r2, ip, r7
 8024cd2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024cd6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024cd8:	fb00 770c 	mla	r7, r0, ip, r7
 8024cdc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024ce0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024ce2:	fb09 770c 	mla	r7, r9, ip, r7
 8024ce6:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8024cea:	fb08 f80c 	mul.w	r8, r8, ip
 8024cee:	0a3f      	lsrs	r7, r7, #8
 8024cf0:	fb02 8303 	mla	r3, r2, r3, r8
 8024cf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024cf6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024cfa:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8024cfe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024d00:	fb00 330a 	mla	r3, r0, sl, r3
 8024d04:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8024d08:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8024d0a:	fb09 3c0c 	mla	ip, r9, ip, r3
 8024d0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024d10:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024d14:	434b      	muls	r3, r1
 8024d16:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024d1a:	1c59      	adds	r1, r3, #1
 8024d1c:	ea47 070c 	orr.w	r7, r7, ip
 8024d20:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8024d24:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8024d28:	b2fa      	uxtb	r2, r7
 8024d2a:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8024d2e:	fb12 f200 	smulbb	r2, r2, r0
 8024d32:	b2c9      	uxtb	r1, r1
 8024d34:	fb03 2301 	mla	r3, r3, r1, r2
 8024d38:	b29b      	uxth	r3, r3
 8024d3a:	1c5a      	adds	r2, r3, #1
 8024d3c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024d40:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8024d44:	fb12 f201 	smulbb	r2, r2, r1
 8024d48:	121b      	asrs	r3, r3, #8
 8024d4a:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8024d4e:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8024d52:	0c3f      	lsrs	r7, r7, #16
 8024d54:	fb03 2300 	mla	r3, r3, r0, r2
 8024d58:	b29b      	uxth	r3, r3
 8024d5a:	1c5a      	adds	r2, r3, #1
 8024d5c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024d60:	121b      	asrs	r3, r3, #8
 8024d62:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8024d66:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8024d6a:	fb13 f101 	smulbb	r1, r3, r1
 8024d6e:	fb07 1700 	mla	r7, r7, r0, r1
 8024d72:	b2bf      	uxth	r7, r7
 8024d74:	1c79      	adds	r1, r7, #1
 8024d76:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8024d7a:	123f      	asrs	r7, r7, #8
 8024d7c:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8024d80:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024d82:	f10e 0e03 	add.w	lr, lr, #3
 8024d86:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024d8a:	441d      	add	r5, r3
 8024d8c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024d8e:	441e      	add	r6, r3
 8024d90:	e64e      	b.n	8024a30 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 8024d92:	2800      	cmp	r0, #0
 8024d94:	f43f aee8 	beq.w	8024b68 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8024d98:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8024d9c:	9209      	str	r2, [sp, #36]	; 0x24
 8024d9e:	0e12      	lsrs	r2, r2, #24
 8024da0:	9212      	str	r2, [sp, #72]	; 0x48
 8024da2:	e6e1      	b.n	8024b68 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8024da4:	b01d      	add	sp, #116	; 0x74
 8024da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024daa <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 8024daa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024dae:	b087      	sub	sp, #28
 8024db0:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 8024db4:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 8024db8:	fb05 7003 	mla	r0, r5, r3, r7
 8024dbc:	2d00      	cmp	r5, #0
 8024dbe:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8024dc2:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 8024dc6:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 8024dca:	f2c0 810a 	blt.w	8024fe2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8024dce:	45a8      	cmp	r8, r5
 8024dd0:	f340 8107 	ble.w	8024fe2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8024dd4:	2f00      	cmp	r7, #0
 8024dd6:	f2c0 8102 	blt.w	8024fde <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8024dda:	42bb      	cmp	r3, r7
 8024ddc:	f340 80ff 	ble.w	8024fde <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8024de0:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8024de4:	1c7a      	adds	r2, r7, #1
 8024de6:	f100 80ff 	bmi.w	8024fe8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8024dea:	4293      	cmp	r3, r2
 8024dec:	f340 80fc 	ble.w	8024fe8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8024df0:	2c00      	cmp	r4, #0
 8024df2:	f000 80fb 	beq.w	8024fec <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 8024df6:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8024dfa:	3501      	adds	r5, #1
 8024dfc:	f100 80fa 	bmi.w	8024ff4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8024e00:	45a8      	cmp	r8, r5
 8024e02:	f340 80f7 	ble.w	8024ff4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8024e06:	f1be 0f00 	cmp.w	lr, #0
 8024e0a:	f000 80f6 	beq.w	8024ffa <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 8024e0e:	2f00      	cmp	r7, #0
 8024e10:	f2c0 80ee 	blt.w	8024ff0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8024e14:	42bb      	cmp	r3, r7
 8024e16:	f340 80eb 	ble.w	8024ff0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8024e1a:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 8024e1e:	3701      	adds	r7, #1
 8024e20:	f100 80ee 	bmi.w	8025000 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 8024e24:	42bb      	cmp	r3, r7
 8024e26:	f340 80eb 	ble.w	8025000 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 8024e2a:	2c00      	cmp	r4, #0
 8024e2c:	f000 80ea 	beq.w	8025004 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 8024e30:	3301      	adds	r3, #1
 8024e32:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8024e36:	fa1f fc84 	uxth.w	ip, r4
 8024e3a:	fa1f fe8e 	uxth.w	lr, lr
 8024e3e:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8024e42:	fb0c f90e 	mul.w	r9, ip, lr
 8024e46:	0e13      	lsrs	r3, r2, #24
 8024e48:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8024e4c:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 8024e50:	9302      	str	r3, [sp, #8]
 8024e52:	ebac 0709 	sub.w	r7, ip, r9
 8024e56:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8024e5a:	fa1f f48e 	uxth.w	r4, lr
 8024e5e:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 8024e62:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024e66:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 8024e6a:	fb0a fe0e 	mul.w	lr, sl, lr
 8024e6e:	1b1b      	subs	r3, r3, r4
 8024e70:	fb0a f606 	mul.w	r6, sl, r6
 8024e74:	ea4f 6815 	mov.w	r8, r5, lsr #24
 8024e78:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8024e7c:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8024e80:	b29b      	uxth	r3, r3
 8024e82:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024e86:	b2bf      	uxth	r7, r7
 8024e88:	9301      	str	r3, [sp, #4]
 8024e8a:	44e6      	add	lr, ip
 8024e8c:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8024e90:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024e94:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8024e98:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 8024e9c:	9303      	str	r3, [sp, #12]
 8024e9e:	0a33      	lsrs	r3, r6, #8
 8024ea0:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 8024ea4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024ea8:	9304      	str	r3, [sp, #16]
 8024eaa:	fb0b f606 	mul.w	r6, fp, r6
 8024eae:	fb0b f000 	mul.w	r0, fp, r0
 8024eb2:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 8024eb6:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8024eba:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024ebe:	44b6      	add	lr, r6
 8024ec0:	f500 7680 	add.w	r6, r0, #256	; 0x100
 8024ec4:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8024ec8:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 8024ecc:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8024ed0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024ed4:	fb08 f606 	mul.w	r6, r8, r6
 8024ed8:	0a03      	lsrs	r3, r0, #8
 8024eda:	fb08 f505 	mul.w	r5, r8, r5
 8024ede:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024ee2:	0a30      	lsrs	r0, r6, #8
 8024ee4:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8024ee8:	9305      	str	r3, [sp, #20]
 8024eea:	0e13      	lsrs	r3, r2, #24
 8024eec:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8024ef0:	fb0e fe07 	mul.w	lr, lr, r7
 8024ef4:	4430      	add	r0, r6
 8024ef6:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8024efa:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8024efe:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 8024f02:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024f06:	0a00      	lsrs	r0, r0, #8
 8024f08:	435e      	muls	r6, r3
 8024f0a:	0a2d      	lsrs	r5, r5, #8
 8024f0c:	435a      	muls	r2, r3
 8024f0e:	9b03      	ldr	r3, [sp, #12]
 8024f10:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8024f14:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8024f18:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8024f1c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024f20:	44b4      	add	ip, r6
 8024f22:	f502 7680 	add.w	r6, r2, #256	; 0x100
 8024f26:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024f2a:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8024f2e:	9e01      	ldr	r6, [sp, #4]
 8024f30:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024f34:	fb03 ee06 	mla	lr, r3, r6, lr
 8024f38:	9b04      	ldr	r3, [sp, #16]
 8024f3a:	0a12      	lsrs	r2, r2, #8
 8024f3c:	fb0c ee09 	mla	lr, ip, r9, lr
 8024f40:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 8024f44:	9b05      	ldr	r3, [sp, #20]
 8024f46:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024f4a:	fb00 ee04 	mla	lr, r0, r4, lr
 8024f4e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024f52:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 8024f56:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 8024f5a:	9b01      	ldr	r3, [sp, #4]
 8024f5c:	fb07 fe0e 	mul.w	lr, r7, lr
 8024f60:	fb07 f70b 	mul.w	r7, r7, fp
 8024f64:	fb03 ee06 	mla	lr, r3, r6, lr
 8024f68:	fb03 730a 	mla	r3, r3, sl, r7
 8024f6c:	fb09 e202 	mla	r2, r9, r2, lr
 8024f70:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8024f74:	fb04 2e0e 	mla	lr, r4, lr, r2
 8024f78:	fb04 3408 	mla	r4, r4, r8, r3
 8024f7c:	9b02      	ldr	r3, [sp, #8]
 8024f7e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024f82:	fb09 4903 	mla	r9, r9, r3, r4
 8024f86:	780b      	ldrb	r3, [r1, #0]
 8024f88:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8024f8c:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8024f90:	ea40 0e0e 	orr.w	lr, r0, lr
 8024f94:	fa5f f989 	uxtb.w	r9, r9
 8024f98:	fb03 f209 	mul.w	r2, r3, r9
 8024f9c:	1c53      	adds	r3, r2, #1
 8024f9e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024fa2:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8024fa6:	700b      	strb	r3, [r1, #0]
 8024fa8:	784b      	ldrb	r3, [r1, #1]
 8024faa:	fb03 f309 	mul.w	r3, r3, r9
 8024fae:	1c5a      	adds	r2, r3, #1
 8024fb0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8024fb4:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8024fb8:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8024fbc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024fc0:	704b      	strb	r3, [r1, #1]
 8024fc2:	788b      	ldrb	r3, [r1, #2]
 8024fc4:	fb03 f909 	mul.w	r9, r3, r9
 8024fc8:	f109 0301 	add.w	r3, r9, #1
 8024fcc:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8024fd0:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 8024fd4:	f881 e002 	strb.w	lr, [r1, #2]
 8024fd8:	b007      	add	sp, #28
 8024fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024fde:	2600      	movs	r6, #0
 8024fe0:	e700      	b.n	8024de4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 8024fe2:	2000      	movs	r0, #0
 8024fe4:	4606      	mov	r6, r0
 8024fe6:	e708      	b.n	8024dfa <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8024fe8:	2000      	movs	r0, #0
 8024fea:	e706      	b.n	8024dfa <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8024fec:	4620      	mov	r0, r4
 8024fee:	e704      	b.n	8024dfa <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8024ff0:	2500      	movs	r5, #0
 8024ff2:	e714      	b.n	8024e1e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 8024ff4:	2200      	movs	r2, #0
 8024ff6:	4615      	mov	r5, r2
 8024ff8:	e71d      	b.n	8024e36 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8024ffa:	4672      	mov	r2, lr
 8024ffc:	4675      	mov	r5, lr
 8024ffe:	e71a      	b.n	8024e36 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8025000:	2200      	movs	r2, #0
 8025002:	e718      	b.n	8024e36 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8025004:	4622      	mov	r2, r4
 8025006:	e716      	b.n	8024e36 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

08025008 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802500c:	b099      	sub	sp, #100	; 0x64
 802500e:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 8025012:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8025014:	9017      	str	r0, [sp, #92]	; 0x5c
 8025016:	9306      	str	r3, [sp, #24]
 8025018:	6850      	ldr	r0, [r2, #4]
 802501a:	6812      	ldr	r2, [r2, #0]
 802501c:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 8025020:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	; 0x8c
 8025024:	fb00 1303 	mla	r3, r0, r3, r1
 8025028:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802502c:	18d3      	adds	r3, r2, r3
 802502e:	9309      	str	r3, [sp, #36]	; 0x24
 8025030:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025032:	681b      	ldr	r3, [r3, #0]
 8025034:	930e      	str	r3, [sp, #56]	; 0x38
 8025036:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8025038:	2b00      	cmp	r3, #0
 802503a:	dc03      	bgt.n	8025044 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802503c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802503e:	2b00      	cmp	r3, #0
 8025040:	f340 8360 	ble.w	8025704 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 8025044:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025046:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802504a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802504e:	1e48      	subs	r0, r1, #1
 8025050:	1e57      	subs	r7, r2, #1
 8025052:	9b06      	ldr	r3, [sp, #24]
 8025054:	2b00      	cmp	r3, #0
 8025056:	f340 817b 	ble.w	8025350 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 802505a:	ea5f 4c25 	movs.w	ip, r5, asr #16
 802505e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8025062:	d406      	bmi.n	8025072 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8025064:	4584      	cmp	ip, r0
 8025066:	da04      	bge.n	8025072 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8025068:	2b00      	cmp	r3, #0
 802506a:	db02      	blt.n	8025072 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 802506c:	42bb      	cmp	r3, r7
 802506e:	f2c0 8170 	blt.w	8025352 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8025072:	f11c 0c01 	adds.w	ip, ip, #1
 8025076:	f100 8160 	bmi.w	802533a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 802507a:	4561      	cmp	r1, ip
 802507c:	f2c0 815d 	blt.w	802533a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8025080:	3301      	adds	r3, #1
 8025082:	f100 815a 	bmi.w	802533a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8025086:	429a      	cmp	r2, r3
 8025088:	f2c0 8157 	blt.w	802533a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 802508c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8025090:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8025092:	f1b8 0f00 	cmp.w	r8, #0
 8025096:	f340 8179 	ble.w	802538c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 802509a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802509c:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80250a0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80250a2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80250a6:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80250aa:	142a      	asrs	r2, r5, #16
 80250ac:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80250b0:	689b      	ldr	r3, [r3, #8]
 80250b2:	f100 81be 	bmi.w	8025432 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80250b6:	f103 39ff 	add.w	r9, r3, #4294967295
 80250ba:	454a      	cmp	r2, r9
 80250bc:	f280 81b9 	bge.w	8025432 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80250c0:	f1bc 0f00 	cmp.w	ip, #0
 80250c4:	f2c0 81b5 	blt.w	8025432 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80250c8:	f10e 39ff 	add.w	r9, lr, #4294967295
 80250cc:	45cc      	cmp	ip, r9
 80250ce:	f280 81b0 	bge.w	8025432 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80250d2:	b21b      	sxth	r3, r3
 80250d4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80250d6:	fb0c 2203 	mla	r2, ip, r3, r2
 80250da:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 80250de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80250e2:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80250e6:	2900      	cmp	r1, #0
 80250e8:	f000 8197 	beq.w	802541a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 80250ec:	f8d9 4004 	ldr.w	r4, [r9, #4]
 80250f0:	940a      	str	r4, [sp, #40]	; 0x28
 80250f2:	0e24      	lsrs	r4, r4, #24
 80250f4:	9411      	str	r4, [sp, #68]	; 0x44
 80250f6:	b180      	cbz	r0, 802511a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 80250f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80250fc:	3b01      	subs	r3, #1
 80250fe:	009b      	lsls	r3, r3, #2
 8025100:	3304      	adds	r3, #4
 8025102:	eb09 0c03 	add.w	ip, r9, r3
 8025106:	f859 3003 	ldr.w	r3, [r9, r3]
 802510a:	9307      	str	r3, [sp, #28]
 802510c:	0e1b      	lsrs	r3, r3, #24
 802510e:	930f      	str	r3, [sp, #60]	; 0x3c
 8025110:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8025114:	930b      	str	r3, [sp, #44]	; 0x2c
 8025116:	0e1b      	lsrs	r3, r3, #24
 8025118:	9312      	str	r3, [sp, #72]	; 0x48
 802511a:	b289      	uxth	r1, r1
 802511c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802511e:	b280      	uxth	r0, r0
 8025120:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8025122:	fb01 fa00 	mul.w	sl, r1, r0
 8025126:	0109      	lsls	r1, r1, #4
 8025128:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 802512c:	eba1 090a 	sub.w	r9, r1, sl
 8025130:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8025134:	b280      	uxth	r0, r0
 8025136:	fa1f f989 	uxth.w	r9, r9
 802513a:	1a09      	subs	r1, r1, r0
 802513c:	fb09 f303 	mul.w	r3, r9, r3
 8025140:	b289      	uxth	r1, r1
 8025142:	fb01 330e 	mla	r3, r1, lr, r3
 8025146:	fb00 3304 	mla	r3, r0, r4, r3
 802514a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802514c:	fb0a 3304 	mla	r3, sl, r4, r3
 8025150:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025154:	2b00      	cmp	r3, #0
 8025156:	f000 80e8 	beq.w	802532a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802515a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802515e:	d01b      	beq.n	8025198 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 8025160:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 8025164:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025168:	fb0e fb0b 	mul.w	fp, lr, fp
 802516c:	fb0e fe02 	mul.w	lr, lr, r2
 8025170:	ea4f 221b 	mov.w	r2, fp, lsr #8
 8025174:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025178:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802517c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8025180:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8025184:	445a      	add	r2, fp
 8025186:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802518a:	0a12      	lsrs	r2, r2, #8
 802518c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025190:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8025194:	ea42 020c 	orr.w	r2, r2, ip
 8025198:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802519a:	2cff      	cmp	r4, #255	; 0xff
 802519c:	d021      	beq.n	80251e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 802519e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80251a0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80251a4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80251a6:	fb04 fc0c 	mul.w	ip, r4, ip
 80251aa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80251ac:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80251b0:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 80251b4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80251b6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80251ba:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80251be:	fb04 fb0b 	mul.w	fp, r4, fp
 80251c2:	44e6      	add	lr, ip
 80251c4:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 80251c8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80251cc:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80251d0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80251d4:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80251d8:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80251dc:	ea4e 040b 	orr.w	r4, lr, fp
 80251e0:	940a      	str	r4, [sp, #40]	; 0x28
 80251e2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80251e4:	2cff      	cmp	r4, #255	; 0xff
 80251e6:	d021      	beq.n	802522c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 80251e8:	9c07      	ldr	r4, [sp, #28]
 80251ea:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80251ee:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80251f0:	fb04 fc0c 	mul.w	ip, r4, ip
 80251f4:	9c07      	ldr	r4, [sp, #28]
 80251f6:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80251fa:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 80251fe:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8025200:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8025204:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025208:	fb04 fb0b 	mul.w	fp, r4, fp
 802520c:	44e6      	add	lr, ip
 802520e:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8025212:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025216:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 802521a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802521e:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8025222:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8025226:	ea4e 040b 	orr.w	r4, lr, fp
 802522a:	9407      	str	r4, [sp, #28]
 802522c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802522e:	2cff      	cmp	r4, #255	; 0xff
 8025230:	d021      	beq.n	8025276 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8025232:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025234:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8025238:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802523a:	fb04 fc0c 	mul.w	ip, r4, ip
 802523e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025240:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8025244:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8025248:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802524a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802524e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025252:	fb04 fb0b 	mul.w	fp, r4, fp
 8025256:	44e6      	add	lr, ip
 8025258:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 802525c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025260:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8025264:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025268:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802526c:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8025270:	ea4e 040b 	orr.w	r4, lr, fp
 8025274:	940b      	str	r4, [sp, #44]	; 0x2c
 8025276:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025278:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802527c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025280:	2bff      	cmp	r3, #255	; 0xff
 8025282:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8025286:	9c07      	ldr	r4, [sp, #28]
 8025288:	fb09 fc0c 	mul.w	ip, r9, ip
 802528c:	fb01 cc0e 	mla	ip, r1, lr, ip
 8025290:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8025294:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025296:	fb00 cc0e 	mla	ip, r0, lr, ip
 802529a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802529e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80252a0:	fb0a cc0e 	mla	ip, sl, lr, ip
 80252a4:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80252a8:	fb09 f90e 	mul.w	r9, r9, lr
 80252ac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80252b0:	fb01 9202 	mla	r2, r1, r2, r9
 80252b4:	9907      	ldr	r1, [sp, #28]
 80252b6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80252ba:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 80252be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80252c0:	fb00 220b 	mla	r2, r0, fp, r2
 80252c4:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 80252c8:	fb0a 2a00 	mla	sl, sl, r0, r2
 80252cc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80252d0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80252d4:	ea4c 0c0a 	orr.w	ip, ip, sl
 80252d8:	fa5f f08c 	uxtb.w	r0, ip
 80252dc:	f3cc 2107 	ubfx	r1, ip, #8, #8
 80252e0:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80252e4:	f000 80a2 	beq.w	802542c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 80252e8:	43db      	mvns	r3, r3
 80252ea:	783a      	ldrb	r2, [r7, #0]
 80252ec:	f897 a002 	ldrb.w	sl, [r7, #2]
 80252f0:	b2db      	uxtb	r3, r3
 80252f2:	fb02 fe03 	mul.w	lr, r2, r3
 80252f6:	fb0a fa03 	mul.w	sl, sl, r3
 80252fa:	f10e 0201 	add.w	r2, lr, #1
 80252fe:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 8025302:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8025306:	703a      	strb	r2, [r7, #0]
 8025308:	787a      	ldrb	r2, [r7, #1]
 802530a:	fb02 f003 	mul.w	r0, r2, r3
 802530e:	f10a 0301 	add.w	r3, sl, #1
 8025312:	1c42      	adds	r2, r0, #1
 8025314:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8025318:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802531c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8025320:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8025324:	707a      	strb	r2, [r7, #1]
 8025326:	f887 c002 	strb.w	ip, [r7, #2]
 802532a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802532c:	3703      	adds	r7, #3
 802532e:	f108 38ff 	add.w	r8, r8, #4294967295
 8025332:	441d      	add	r5, r3
 8025334:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025336:	441e      	add	r6, r3
 8025338:	e6ab      	b.n	8025092 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802533a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802533c:	441d      	add	r5, r3
 802533e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025340:	441e      	add	r6, r3
 8025342:	9b06      	ldr	r3, [sp, #24]
 8025344:	3b01      	subs	r3, #1
 8025346:	9306      	str	r3, [sp, #24]
 8025348:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802534a:	3303      	adds	r3, #3
 802534c:	9309      	str	r3, [sp, #36]	; 0x24
 802534e:	e680      	b.n	8025052 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8025350:	d024      	beq.n	802539c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8025352:	9b06      	ldr	r3, [sp, #24]
 8025354:	9825      	ldr	r0, [sp, #148]	; 0x94
 8025356:	3b01      	subs	r3, #1
 8025358:	fb00 5003 	mla	r0, r0, r3, r5
 802535c:	1400      	asrs	r0, r0, #16
 802535e:	f53f ae95 	bmi.w	802508c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8025362:	3901      	subs	r1, #1
 8025364:	4288      	cmp	r0, r1
 8025366:	f6bf ae91 	bge.w	802508c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802536a:	9926      	ldr	r1, [sp, #152]	; 0x98
 802536c:	fb01 6303 	mla	r3, r1, r3, r6
 8025370:	141b      	asrs	r3, r3, #16
 8025372:	f53f ae8b 	bmi.w	802508c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8025376:	3a01      	subs	r2, #1
 8025378:	4293      	cmp	r3, r2
 802537a:	f6bf ae87 	bge.w	802508c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802537e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025380:	f8dd b018 	ldr.w	fp, [sp, #24]
 8025384:	1cdf      	adds	r7, r3, #3
 8025386:	f1bb 0f00 	cmp.w	fp, #0
 802538a:	dc6e      	bgt.n	802546a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 802538c:	9b06      	ldr	r3, [sp, #24]
 802538e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025392:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025394:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8025398:	4423      	add	r3, r4
 802539a:	9309      	str	r3, [sp, #36]	; 0x24
 802539c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802539e:	2b00      	cmp	r3, #0
 80253a0:	f340 81b0 	ble.w	8025704 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 80253a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80253a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80253aa:	ee30 0a04 	vadd.f32	s0, s0, s8
 80253ae:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80253b2:	eef0 6a62 	vmov.f32	s13, s5
 80253b6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80253ba:	ee31 1a05 	vadd.f32	s2, s2, s10
 80253be:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80253c2:	ee16 5a90 	vmov	r5, s13
 80253c6:	eef0 6a43 	vmov.f32	s13, s6
 80253ca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80253ce:	ee16 6a90 	vmov	r6, s13
 80253d2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80253d6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80253da:	ee77 2a62 	vsub.f32	s5, s14, s5
 80253de:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80253e2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80253e6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80253ea:	ee12 2a90 	vmov	r2, s5
 80253ee:	eef0 2a47 	vmov.f32	s5, s14
 80253f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80253f6:	ee13 2a10 	vmov	r2, s6
 80253fa:	9325      	str	r3, [sp, #148]	; 0x94
 80253fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80253fe:	eeb0 3a67 	vmov.f32	s6, s15
 8025402:	fb92 f3f3 	sdiv	r3, r2, r3
 8025406:	9326      	str	r3, [sp, #152]	; 0x98
 8025408:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802540a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802540c:	3b01      	subs	r3, #1
 802540e:	9315      	str	r3, [sp, #84]	; 0x54
 8025410:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8025412:	bf08      	it	eq
 8025414:	4613      	moveq	r3, r2
 8025416:	9306      	str	r3, [sp, #24]
 8025418:	e60d      	b.n	8025036 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 802541a:	2800      	cmp	r0, #0
 802541c:	f43f ae7d 	beq.w	802511a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8025420:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8025424:	9307      	str	r3, [sp, #28]
 8025426:	0e1b      	lsrs	r3, r3, #24
 8025428:	930f      	str	r3, [sp, #60]	; 0x3c
 802542a:	e676      	b.n	802511a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 802542c:	7038      	strb	r0, [r7, #0]
 802542e:	7079      	strb	r1, [r7, #1]
 8025430:	e779      	b.n	8025326 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8025432:	f112 0901 	adds.w	r9, r2, #1
 8025436:	f53f af78 	bmi.w	802532a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802543a:	454b      	cmp	r3, r9
 802543c:	f6ff af75 	blt.w	802532a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8025440:	f11c 0901 	adds.w	r9, ip, #1
 8025444:	f53f af71 	bmi.w	802532a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8025448:	45ce      	cmp	lr, r9
 802544a:	f6ff af6e 	blt.w	802532a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802544e:	b21b      	sxth	r3, r3
 8025450:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8025454:	fa0f f28e 	sxth.w	r2, lr
 8025458:	e9cd 1003 	strd	r1, r0, [sp, #12]
 802545c:	9200      	str	r2, [sp, #0]
 802545e:	4639      	mov	r1, r7
 8025460:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025462:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8025464:	f7ff fca1 	bl	8024daa <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8025468:	e75f      	b.n	802532a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802546a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802546c:	1429      	asrs	r1, r5, #16
 802546e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025470:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8025474:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 8025478:	1433      	asrs	r3, r6, #16
 802547a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802547e:	fb0c 1303 	mla	r3, ip, r3, r1
 8025482:	990e      	ldr	r1, [sp, #56]	; 0x38
 8025484:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8025488:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 802548c:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8025490:	2a00      	cmp	r2, #0
 8025492:	f000 8129 	beq.w	80256e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 8025496:	684c      	ldr	r4, [r1, #4]
 8025498:	940c      	str	r4, [sp, #48]	; 0x30
 802549a:	0e24      	lsrs	r4, r4, #24
 802549c:	9413      	str	r4, [sp, #76]	; 0x4c
 802549e:	b198      	cbz	r0, 80254c8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 80254a0:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 80254a4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80254a8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80254ac:	f10c 0c04 	add.w	ip, ip, #4
 80254b0:	eb01 080c 	add.w	r8, r1, ip
 80254b4:	f851 100c 	ldr.w	r1, [r1, ip]
 80254b8:	9108      	str	r1, [sp, #32]
 80254ba:	0e09      	lsrs	r1, r1, #24
 80254bc:	9110      	str	r1, [sp, #64]	; 0x40
 80254be:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80254c2:	910d      	str	r1, [sp, #52]	; 0x34
 80254c4:	0e09      	lsrs	r1, r1, #24
 80254c6:	9114      	str	r1, [sp, #80]	; 0x50
 80254c8:	b292      	uxth	r2, r2
 80254ca:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80254cc:	b280      	uxth	r0, r0
 80254ce:	fb02 f900 	mul.w	r9, r2, r0
 80254d2:	0112      	lsls	r2, r2, #4
 80254d4:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80254d8:	eba2 0809 	sub.w	r8, r2, r9
 80254dc:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80254e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80254e2:	b280      	uxth	r0, r0
 80254e4:	fa1f f888 	uxth.w	r8, r8
 80254e8:	1a09      	subs	r1, r1, r0
 80254ea:	fb08 f202 	mul.w	r2, r8, r2
 80254ee:	b289      	uxth	r1, r1
 80254f0:	fb01 220e 	mla	r2, r1, lr, r2
 80254f4:	fb00 2204 	mla	r2, r0, r4, r2
 80254f8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80254fa:	fb09 2204 	mla	r2, r9, r4, r2
 80254fe:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8025502:	2a00      	cmp	r2, #0
 8025504:	f000 80e8 	beq.w	80256d8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 8025508:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802550c:	d01b      	beq.n	8025546 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 802550e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8025512:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025516:	fb0e fa0a 	mul.w	sl, lr, sl
 802551a:	fb0e fe03 	mul.w	lr, lr, r3
 802551e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8025522:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8025526:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802552a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802552e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8025532:	4453      	add	r3, sl
 8025534:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025538:	0a1b      	lsrs	r3, r3, #8
 802553a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802553e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025542:	ea43 030c 	orr.w	r3, r3, ip
 8025546:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025548:	2cff      	cmp	r4, #255	; 0xff
 802554a:	d021      	beq.n	8025590 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 802554c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802554e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8025552:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025554:	fb04 fc0c 	mul.w	ip, r4, ip
 8025558:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802555a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802555e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025562:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025564:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8025568:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802556c:	fb04 fa0a 	mul.w	sl, r4, sl
 8025570:	44e6      	add	lr, ip
 8025572:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025576:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802557a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802557e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025582:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025586:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802558a:	ea4e 040a 	orr.w	r4, lr, sl
 802558e:	940c      	str	r4, [sp, #48]	; 0x30
 8025590:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025592:	2cff      	cmp	r4, #255	; 0xff
 8025594:	d021      	beq.n	80255da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 8025596:	9c08      	ldr	r4, [sp, #32]
 8025598:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802559c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802559e:	fb04 fc0c 	mul.w	ip, r4, ip
 80255a2:	9c08      	ldr	r4, [sp, #32]
 80255a4:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80255a8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80255aa:	fb04 fa0e 	mul.w	sl, r4, lr
 80255ae:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80255b2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80255b6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80255ba:	44e6      	add	lr, ip
 80255bc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80255c0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80255c4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80255c8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80255cc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80255d0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80255d4:	ea4e 040a 	orr.w	r4, lr, sl
 80255d8:	9408      	str	r4, [sp, #32]
 80255da:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80255dc:	2cff      	cmp	r4, #255	; 0xff
 80255de:	d021      	beq.n	8025624 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 80255e0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80255e2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80255e6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80255e8:	fb04 fc0c 	mul.w	ip, r4, ip
 80255ec:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80255ee:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80255f2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80255f6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80255f8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80255fc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025600:	fb04 fa0a 	mul.w	sl, r4, sl
 8025604:	44e6      	add	lr, ip
 8025606:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802560a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802560e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025612:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025616:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802561a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802561e:	ea4e 040a 	orr.w	r4, lr, sl
 8025622:	940d      	str	r4, [sp, #52]	; 0x34
 8025624:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8025626:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 802562a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802562e:	2aff      	cmp	r2, #255	; 0xff
 8025630:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8025634:	9c08      	ldr	r4, [sp, #32]
 8025636:	fb08 fc0c 	mul.w	ip, r8, ip
 802563a:	fb01 cc0e 	mla	ip, r1, lr, ip
 802563e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8025642:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025644:	fb00 cc0e 	mla	ip, r0, lr, ip
 8025648:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802564c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802564e:	fb09 cc0e 	mla	ip, r9, lr, ip
 8025652:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8025656:	fb08 f80e 	mul.w	r8, r8, lr
 802565a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802565e:	fb01 8303 	mla	r3, r1, r3, r8
 8025662:	9908      	ldr	r1, [sp, #32]
 8025664:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025668:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802566c:	990d      	ldr	r1, [sp, #52]	; 0x34
 802566e:	fb00 330a 	mla	r3, r0, sl, r3
 8025672:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8025676:	fb09 3e0e 	mla	lr, r9, lr, r3
 802567a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802567e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8025682:	ea4c 0c0e 	orr.w	ip, ip, lr
 8025686:	fa5f f08c 	uxtb.w	r0, ip
 802568a:	f3cc 2107 	ubfx	r1, ip, #8, #8
 802568e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8025692:	d032      	beq.n	80256fa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 8025694:	43d2      	mvns	r2, r2
 8025696:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 802569a:	b2d2      	uxtb	r2, r2
 802569c:	fb0e fe02 	mul.w	lr, lr, r2
 80256a0:	f10e 0301 	add.w	r3, lr, #1
 80256a4:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 80256a8:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80256ac:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 80256b0:	4350      	muls	r0, r2
 80256b2:	f807 3c03 	strb.w	r3, [r7, #-3]
 80256b6:	1c43      	adds	r3, r0, #1
 80256b8:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80256bc:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80256c0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80256c4:	4353      	muls	r3, r2
 80256c6:	f807 1c02 	strb.w	r1, [r7, #-2]
 80256ca:	1c5a      	adds	r2, r3, #1
 80256cc:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80256d0:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 80256d4:	f807 cc01 	strb.w	ip, [r7, #-1]
 80256d8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80256da:	3703      	adds	r7, #3
 80256dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80256e0:	441d      	add	r5, r3
 80256e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80256e4:	441e      	add	r6, r3
 80256e6:	e64e      	b.n	8025386 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 80256e8:	2800      	cmp	r0, #0
 80256ea:	f43f aeed 	beq.w	80254c8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 80256ee:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80256f2:	9108      	str	r1, [sp, #32]
 80256f4:	0e09      	lsrs	r1, r1, #24
 80256f6:	9110      	str	r1, [sp, #64]	; 0x40
 80256f8:	e6e6      	b.n	80254c8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 80256fa:	f807 0c03 	strb.w	r0, [r7, #-3]
 80256fe:	f807 1c02 	strb.w	r1, [r7, #-2]
 8025702:	e7e7      	b.n	80256d4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 8025704:	b019      	add	sp, #100	; 0x64
 8025706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0802570c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 802570c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025710:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	; 0x2c
 8025714:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8025718:	2c00      	cmp	r4, #0
 802571a:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 802571e:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 8025722:	fb00 4e03 	mla	lr, r0, r3, r4
 8025726:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 802572a:	f2c0 80b8 	blt.w	802589e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 802572e:	45a1      	cmp	r9, r4
 8025730:	f340 80b5 	ble.w	802589e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8025734:	2800      	cmp	r0, #0
 8025736:	f2c0 80b2 	blt.w	802589e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 802573a:	4580      	cmp	r8, r0
 802573c:	f340 80af 	ble.w	802589e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8025740:	ea4f 055e 	mov.w	r5, lr, lsr #1
 8025744:	f01e 0f01 	tst.w	lr, #1
 8025748:	5d56      	ldrb	r6, [r2, r5]
 802574a:	bf0c      	ite	eq
 802574c:	f006 060f 	andeq.w	r6, r6, #15
 8025750:	1136      	asrne	r6, r6, #4
 8025752:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8025756:	b2f6      	uxtb	r6, r6
 8025758:	f114 0a01 	adds.w	sl, r4, #1
 802575c:	f100 80a1 	bmi.w	80258a2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8025760:	45d1      	cmp	r9, sl
 8025762:	f340 809e 	ble.w	80258a2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8025766:	2800      	cmp	r0, #0
 8025768:	f2c0 809b 	blt.w	80258a2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 802576c:	4580      	cmp	r8, r0
 802576e:	f340 8098 	ble.w	80258a2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8025772:	2f00      	cmp	r7, #0
 8025774:	f000 8097 	beq.w	80258a6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 8025778:	f10e 0b01 	add.w	fp, lr, #1
 802577c:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8025780:	f01b 0f01 	tst.w	fp, #1
 8025784:	5d55      	ldrb	r5, [r2, r5]
 8025786:	bf0c      	ite	eq
 8025788:	f005 050f 	andeq.w	r5, r5, #15
 802578c:	112d      	asrne	r5, r5, #4
 802578e:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8025792:	b2ed      	uxtb	r5, r5
 8025794:	f1bc 0f00 	cmp.w	ip, #0
 8025798:	f000 8089 	beq.w	80258ae <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 802579c:	2c00      	cmp	r4, #0
 802579e:	f100 0001 	add.w	r0, r0, #1
 80257a2:	f2c0 8082 	blt.w	80258aa <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80257a6:	45a1      	cmp	r9, r4
 80257a8:	dd7f      	ble.n	80258aa <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80257aa:	2800      	cmp	r0, #0
 80257ac:	db7d      	blt.n	80258aa <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80257ae:	4580      	cmp	r8, r0
 80257b0:	dd7b      	ble.n	80258aa <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80257b2:	eb03 0b0e 	add.w	fp, r3, lr
 80257b6:	ea4f 045b 	mov.w	r4, fp, lsr #1
 80257ba:	f01b 0f01 	tst.w	fp, #1
 80257be:	5d14      	ldrb	r4, [r2, r4]
 80257c0:	bf0c      	ite	eq
 80257c2:	f004 040f 	andeq.w	r4, r4, #15
 80257c6:	1124      	asrne	r4, r4, #4
 80257c8:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80257cc:	b2e4      	uxtb	r4, r4
 80257ce:	f1ba 0f00 	cmp.w	sl, #0
 80257d2:	db6f      	blt.n	80258b4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 80257d4:	45d1      	cmp	r9, sl
 80257d6:	dd6d      	ble.n	80258b4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 80257d8:	2800      	cmp	r0, #0
 80257da:	db6b      	blt.n	80258b4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 80257dc:	4580      	cmp	r8, r0
 80257de:	dd69      	ble.n	80258b4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 80257e0:	2f00      	cmp	r7, #0
 80257e2:	d069      	beq.n	80258b8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 80257e4:	3301      	adds	r3, #1
 80257e6:	449e      	add	lr, r3
 80257e8:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80257ec:	f01e 0f01 	tst.w	lr, #1
 80257f0:	5cd0      	ldrb	r0, [r2, r3]
 80257f2:	bf0c      	ite	eq
 80257f4:	f000 000f 	andeq.w	r0, r0, #15
 80257f8:	1100      	asrne	r0, r0, #4
 80257fa:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80257fe:	b2c3      	uxtb	r3, r0
 8025800:	b2ba      	uxth	r2, r7
 8025802:	fa1f fc8c 	uxth.w	ip, ip
 8025806:	fb02 f00c 	mul.w	r0, r2, ip
 802580a:	0112      	lsls	r2, r2, #4
 802580c:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8025810:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8025814:	1a12      	subs	r2, r2, r0
 8025816:	fa1f fc8c 	uxth.w	ip, ip
 802581a:	b292      	uxth	r2, r2
 802581c:	eba7 070c 	sub.w	r7, r7, ip
 8025820:	436a      	muls	r2, r5
 8025822:	b2bf      	uxth	r7, r7
 8025824:	fb06 2207 	mla	r2, r6, r7, r2
 8025828:	fb0c 2404 	mla	r4, ip, r4, r2
 802582c:	fb00 4303 	mla	r3, r0, r3, r4
 8025830:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025834:	b38b      	cbz	r3, 802589a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 8025836:	4a21      	ldr	r2, [pc, #132]	; (80258bc <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 8025838:	6814      	ldr	r4, [r2, #0]
 802583a:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 802583e:	b2e5      	uxtb	r5, r4
 8025840:	4353      	muls	r3, r2
 8025842:	1c5a      	adds	r2, r3, #1
 8025844:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8025848:	1212      	asrs	r2, r2, #8
 802584a:	b290      	uxth	r0, r2
 802584c:	43d2      	mvns	r2, r2
 802584e:	fb15 f500 	smulbb	r5, r5, r0
 8025852:	b2d3      	uxtb	r3, r2
 8025854:	780a      	ldrb	r2, [r1, #0]
 8025856:	fb02 5203 	mla	r2, r2, r3, r5
 802585a:	b292      	uxth	r2, r2
 802585c:	1c55      	adds	r5, r2, #1
 802585e:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8025862:	784d      	ldrb	r5, [r1, #1]
 8025864:	fb15 f503 	smulbb	r5, r5, r3
 8025868:	1212      	asrs	r2, r2, #8
 802586a:	700a      	strb	r2, [r1, #0]
 802586c:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8025870:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8025874:	fb02 5200 	mla	r2, r2, r0, r5
 8025878:	b292      	uxth	r2, r2
 802587a:	1c55      	adds	r5, r2, #1
 802587c:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8025880:	1212      	asrs	r2, r2, #8
 8025882:	704a      	strb	r2, [r1, #1]
 8025884:	788a      	ldrb	r2, [r1, #2]
 8025886:	fb12 f303 	smulbb	r3, r2, r3
 802588a:	fb04 3300 	mla	r3, r4, r0, r3
 802588e:	b29b      	uxth	r3, r3
 8025890:	1c5a      	adds	r2, r3, #1
 8025892:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025896:	121b      	asrs	r3, r3, #8
 8025898:	708b      	strb	r3, [r1, #2]
 802589a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802589e:	2600      	movs	r6, #0
 80258a0:	e75a      	b.n	8025758 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 80258a2:	2500      	movs	r5, #0
 80258a4:	e776      	b.n	8025794 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 80258a6:	463d      	mov	r5, r7
 80258a8:	e774      	b.n	8025794 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 80258aa:	2400      	movs	r4, #0
 80258ac:	e78f      	b.n	80257ce <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 80258ae:	4663      	mov	r3, ip
 80258b0:	4664      	mov	r4, ip
 80258b2:	e7a5      	b.n	8025800 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 80258b4:	2300      	movs	r3, #0
 80258b6:	e7a3      	b.n	8025800 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 80258b8:	463b      	mov	r3, r7
 80258ba:	e7a1      	b.n	8025800 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 80258bc:	24006d40 	.word	0x24006d40

080258c0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80258c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80258c4:	b097      	sub	sp, #92	; 0x5c
 80258c6:	9214      	str	r2, [sp, #80]	; 0x50
 80258c8:	9309      	str	r3, [sp, #36]	; 0x24
 80258ca:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80258cc:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 80258d0:	9015      	str	r0, [sp, #84]	; 0x54
 80258d2:	910c      	str	r1, [sp, #48]	; 0x30
 80258d4:	6850      	ldr	r0, [r2, #4]
 80258d6:	930e      	str	r3, [sp, #56]	; 0x38
 80258d8:	6812      	ldr	r2, [r2, #0]
 80258da:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 80258de:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	; 0x84
 80258e2:	fb00 1303 	mla	r3, r0, r3, r1
 80258e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80258ea:	eb02 0a03 	add.w	sl, r2, r3
 80258ee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80258f0:	689b      	ldr	r3, [r3, #8]
 80258f2:	3301      	adds	r3, #1
 80258f4:	f023 0301 	bic.w	r3, r3, #1
 80258f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80258fa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80258fc:	681f      	ldr	r7, [r3, #0]
 80258fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025900:	2b00      	cmp	r3, #0
 8025902:	dc03      	bgt.n	802590c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8025904:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8025906:	2b00      	cmp	r3, #0
 8025908:	f340 8247 	ble.w	8025d9a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 802590c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802590e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025912:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025916:	1e48      	subs	r0, r1, #1
 8025918:	f102 3cff 	add.w	ip, r2, #4294967295
 802591c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802591e:	2b00      	cmp	r3, #0
 8025920:	f340 80e5 	ble.w	8025aee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8025924:	ea5f 4e25 	movs.w	lr, r5, asr #16
 8025928:	ea4f 4326 	mov.w	r3, r6, asr #16
 802592c:	d406      	bmi.n	802593c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802592e:	4586      	cmp	lr, r0
 8025930:	da04      	bge.n	802593c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8025932:	2b00      	cmp	r3, #0
 8025934:	db02      	blt.n	802593c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8025936:	4563      	cmp	r3, ip
 8025938:	f2c0 80da 	blt.w	8025af0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 802593c:	f11e 0e01 	adds.w	lr, lr, #1
 8025940:	f100 80cb 	bmi.w	8025ada <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8025944:	4571      	cmp	r1, lr
 8025946:	f2c0 80c8 	blt.w	8025ada <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 802594a:	3301      	adds	r3, #1
 802594c:	f100 80c5 	bmi.w	8025ada <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8025950:	429a      	cmp	r2, r3
 8025952:	f2c0 80c2 	blt.w	8025ada <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8025956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025958:	46d0      	mov	r8, sl
 802595a:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 802595e:	930d      	str	r3, [sp, #52]	; 0x34
 8025960:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025962:	2b00      	cmp	r3, #0
 8025964:	f340 80e3 	ble.w	8025b2e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8025968:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802596a:	1430      	asrs	r0, r6, #16
 802596c:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8025970:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8025974:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8025978:	142b      	asrs	r3, r5, #16
 802597a:	f100 812e 	bmi.w	8025bda <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802597e:	f10c 3bff 	add.w	fp, ip, #4294967295
 8025982:	455b      	cmp	r3, fp
 8025984:	f280 8129 	bge.w	8025bda <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8025988:	2800      	cmp	r0, #0
 802598a:	f2c0 8126 	blt.w	8025bda <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802598e:	f10e 3bff 	add.w	fp, lr, #4294967295
 8025992:	4558      	cmp	r0, fp
 8025994:	f280 8121 	bge.w	8025bda <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8025998:	fb00 3309 	mla	r3, r0, r9, r3
 802599c:	0858      	lsrs	r0, r3, #1
 802599e:	07dc      	lsls	r4, r3, #31
 80259a0:	f817 c000 	ldrb.w	ip, [r7, r0]
 80259a4:	bf54      	ite	pl
 80259a6:	f00c 0c0f 	andpl.w	ip, ip, #15
 80259aa:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80259ae:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80259b2:	fa5f fc8c 	uxtb.w	ip, ip
 80259b6:	2a00      	cmp	r2, #0
 80259b8:	f000 80fe 	beq.w	8025bb8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 80259bc:	1c58      	adds	r0, r3, #1
 80259be:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80259c2:	07c0      	lsls	r0, r0, #31
 80259c4:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80259c8:	bf54      	ite	pl
 80259ca:	f00e 0e0f 	andpl.w	lr, lr, #15
 80259ce:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80259d2:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80259d6:	fa5f f08e 	uxtb.w	r0, lr
 80259da:	9010      	str	r0, [sp, #64]	; 0x40
 80259dc:	b1d9      	cbz	r1, 8025a16 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80259de:	444b      	add	r3, r9
 80259e0:	0858      	lsrs	r0, r3, #1
 80259e2:	07dc      	lsls	r4, r3, #31
 80259e4:	f103 0301 	add.w	r3, r3, #1
 80259e8:	5c38      	ldrb	r0, [r7, r0]
 80259ea:	bf54      	ite	pl
 80259ec:	f000 000f 	andpl.w	r0, r0, #15
 80259f0:	1100      	asrmi	r0, r0, #4
 80259f2:	07dc      	lsls	r4, r3, #31
 80259f4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80259f8:	b2c0      	uxtb	r0, r0
 80259fa:	900a      	str	r0, [sp, #40]	; 0x28
 80259fc:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8025a00:	f817 e000 	ldrb.w	lr, [r7, r0]
 8025a04:	bf54      	ite	pl
 8025a06:	f00e 030f 	andpl.w	r3, lr, #15
 8025a0a:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8025a0e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8025a12:	b2db      	uxtb	r3, r3
 8025a14:	9311      	str	r3, [sp, #68]	; 0x44
 8025a16:	b292      	uxth	r2, r2
 8025a18:	b289      	uxth	r1, r1
 8025a1a:	0113      	lsls	r3, r2, #4
 8025a1c:	fb02 f001 	mul.w	r0, r2, r1
 8025a20:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025a22:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8025a26:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 8025a2a:	1a1b      	subs	r3, r3, r0
 8025a2c:	b289      	uxth	r1, r1
 8025a2e:	b29b      	uxth	r3, r3
 8025a30:	ebae 0e01 	sub.w	lr, lr, r1
 8025a34:	4353      	muls	r3, r2
 8025a36:	fa1f fe8e 	uxth.w	lr, lr
 8025a3a:	fb0c 320e 	mla	r2, ip, lr, r3
 8025a3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025a40:	fb01 2203 	mla	r2, r1, r3, r2
 8025a44:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025a46:	fb00 2203 	mla	r2, r0, r3, r2
 8025a4a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8025a4e:	2a00      	cmp	r2, #0
 8025a50:	d039      	beq.n	8025ac6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8025a52:	4bc7      	ldr	r3, [pc, #796]	; (8025d70 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8025a54:	6819      	ldr	r1, [r3, #0]
 8025a56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025a58:	fa5f fc81 	uxtb.w	ip, r1
 8025a5c:	435a      	muls	r2, r3
 8025a5e:	1c53      	adds	r3, r2, #1
 8025a60:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8025a64:	1212      	asrs	r2, r2, #8
 8025a66:	b290      	uxth	r0, r2
 8025a68:	43d2      	mvns	r2, r2
 8025a6a:	fb1c fc00 	smulbb	ip, ip, r0
 8025a6e:	b2d3      	uxtb	r3, r2
 8025a70:	f898 2000 	ldrb.w	r2, [r8]
 8025a74:	fb02 c203 	mla	r2, r2, r3, ip
 8025a78:	b292      	uxth	r2, r2
 8025a7a:	f102 0c01 	add.w	ip, r2, #1
 8025a7e:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8025a82:	f898 c001 	ldrb.w	ip, [r8, #1]
 8025a86:	fb1c fc03 	smulbb	ip, ip, r3
 8025a8a:	1212      	asrs	r2, r2, #8
 8025a8c:	f888 2000 	strb.w	r2, [r8]
 8025a90:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8025a94:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8025a98:	fb02 c200 	mla	r2, r2, r0, ip
 8025a9c:	b292      	uxth	r2, r2
 8025a9e:	f102 0c01 	add.w	ip, r2, #1
 8025aa2:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8025aa6:	1212      	asrs	r2, r2, #8
 8025aa8:	f888 2001 	strb.w	r2, [r8, #1]
 8025aac:	f898 2002 	ldrb.w	r2, [r8, #2]
 8025ab0:	fb12 f303 	smulbb	r3, r2, r3
 8025ab4:	fb01 3300 	mla	r3, r1, r0, r3
 8025ab8:	b29b      	uxth	r3, r3
 8025aba:	1c5a      	adds	r2, r3, #1
 8025abc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025ac0:	121b      	asrs	r3, r3, #8
 8025ac2:	f888 3002 	strb.w	r3, [r8, #2]
 8025ac6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8025ac8:	f108 0803 	add.w	r8, r8, #3
 8025acc:	441d      	add	r5, r3
 8025ace:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025ad0:	441e      	add	r6, r3
 8025ad2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025ad4:	3b01      	subs	r3, #1
 8025ad6:	930d      	str	r3, [sp, #52]	; 0x34
 8025ad8:	e742      	b.n	8025960 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8025ada:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8025adc:	f10a 0a03 	add.w	sl, sl, #3
 8025ae0:	441d      	add	r5, r3
 8025ae2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025ae4:	441e      	add	r6, r3
 8025ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025ae8:	3b01      	subs	r3, #1
 8025aea:	9309      	str	r3, [sp, #36]	; 0x24
 8025aec:	e716      	b.n	802591c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8025aee:	d024      	beq.n	8025b3a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8025af0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025af2:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8025af4:	3b01      	subs	r3, #1
 8025af6:	fb00 5003 	mla	r0, r0, r3, r5
 8025afa:	1400      	asrs	r0, r0, #16
 8025afc:	f53f af2b 	bmi.w	8025956 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8025b00:	3901      	subs	r1, #1
 8025b02:	4288      	cmp	r0, r1
 8025b04:	f6bf af27 	bge.w	8025956 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8025b08:	9924      	ldr	r1, [sp, #144]	; 0x90
 8025b0a:	fb01 6303 	mla	r3, r1, r3, r6
 8025b0e:	141b      	asrs	r3, r3, #16
 8025b10:	f53f af21 	bmi.w	8025956 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8025b14:	3a01      	subs	r2, #1
 8025b16:	4293      	cmp	r3, r2
 8025b18:	f6bf af1d 	bge.w	8025956 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8025b1c:	f10a 0e03 	add.w	lr, sl, #3
 8025b20:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8025b24:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8025b28:	f1b8 0f00 	cmp.w	r8, #0
 8025b2c:	dc76      	bgt.n	8025c1c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 8025b2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025b30:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025b34:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8025b38:	44a2      	add	sl, r4
 8025b3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025b3c:	2b00      	cmp	r3, #0
 8025b3e:	f340 812c 	ble.w	8025d9a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8025b42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025b46:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025b48:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025b4c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025b50:	eef0 6a62 	vmov.f32	s13, s5
 8025b54:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025b58:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025b5c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025b60:	ee16 5a90 	vmov	r5, s13
 8025b64:	eef0 6a43 	vmov.f32	s13, s6
 8025b68:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025b6c:	ee16 6a90 	vmov	r6, s13
 8025b70:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025b74:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025b78:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025b7c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025b80:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025b84:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025b88:	ee12 2a90 	vmov	r2, s5
 8025b8c:	eef0 2a47 	vmov.f32	s5, s14
 8025b90:	fb92 f3f3 	sdiv	r3, r2, r3
 8025b94:	ee13 2a10 	vmov	r2, s6
 8025b98:	9323      	str	r3, [sp, #140]	; 0x8c
 8025b9a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025b9c:	eeb0 3a67 	vmov.f32	s6, s15
 8025ba0:	fb92 f3f3 	sdiv	r3, r2, r3
 8025ba4:	9324      	str	r3, [sp, #144]	; 0x90
 8025ba6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025ba8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8025baa:	3b01      	subs	r3, #1
 8025bac:	930c      	str	r3, [sp, #48]	; 0x30
 8025bae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025bb0:	bf08      	it	eq
 8025bb2:	4613      	moveq	r3, r2
 8025bb4:	9309      	str	r3, [sp, #36]	; 0x24
 8025bb6:	e6a2      	b.n	80258fe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8025bb8:	2900      	cmp	r1, #0
 8025bba:	f43f af2c 	beq.w	8025a16 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8025bbe:	eb09 0003 	add.w	r0, r9, r3
 8025bc2:	0843      	lsrs	r3, r0, #1
 8025bc4:	07c0      	lsls	r0, r0, #31
 8025bc6:	5cfb      	ldrb	r3, [r7, r3]
 8025bc8:	bf54      	ite	pl
 8025bca:	f003 030f 	andpl.w	r3, r3, #15
 8025bce:	111b      	asrmi	r3, r3, #4
 8025bd0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8025bd4:	b2db      	uxtb	r3, r3
 8025bd6:	930a      	str	r3, [sp, #40]	; 0x28
 8025bd8:	e71d      	b.n	8025a16 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8025bda:	f113 0b01 	adds.w	fp, r3, #1
 8025bde:	f53f af72 	bmi.w	8025ac6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8025be2:	45dc      	cmp	ip, fp
 8025be4:	f6ff af6f 	blt.w	8025ac6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8025be8:	f110 0b01 	adds.w	fp, r0, #1
 8025bec:	f53f af6b 	bmi.w	8025ac6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8025bf0:	45de      	cmp	lr, fp
 8025bf2:	f6ff af68 	blt.w	8025ac6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8025bf6:	9302      	str	r3, [sp, #8]
 8025bf8:	fa0f f38e 	sxth.w	r3, lr
 8025bfc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025bfe:	9301      	str	r3, [sp, #4]
 8025c00:	fa0f f38c 	sxth.w	r3, ip
 8025c04:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8025c08:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8025c0c:	9300      	str	r3, [sp, #0]
 8025c0e:	463a      	mov	r2, r7
 8025c10:	464b      	mov	r3, r9
 8025c12:	4641      	mov	r1, r8
 8025c14:	9815      	ldr	r0, [sp, #84]	; 0x54
 8025c16:	f7ff fd79 	bl	802570c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8025c1a:	e754      	b.n	8025ac6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8025c1c:	142a      	asrs	r2, r5, #16
 8025c1e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8025c22:	1433      	asrs	r3, r6, #16
 8025c24:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8025c28:	fb09 2303 	mla	r3, r9, r3, r2
 8025c2c:	085a      	lsrs	r2, r3, #1
 8025c2e:	07dc      	lsls	r4, r3, #31
 8025c30:	5cba      	ldrb	r2, [r7, r2]
 8025c32:	bf54      	ite	pl
 8025c34:	f002 020f 	andpl.w	r2, r2, #15
 8025c38:	1112      	asrmi	r2, r2, #4
 8025c3a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8025c3e:	b2d2      	uxtb	r2, r2
 8025c40:	2900      	cmp	r1, #0
 8025c42:	f000 8097 	beq.w	8025d74 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8025c46:	f103 0b01 	add.w	fp, r3, #1
 8025c4a:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 8025c4e:	f01b 0f01 	tst.w	fp, #1
 8025c52:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025c56:	bf0c      	ite	eq
 8025c58:	f00c 0c0f 	andeq.w	ip, ip, #15
 8025c5c:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8025c60:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025c64:	fa5f f48c 	uxtb.w	r4, ip
 8025c68:	9412      	str	r4, [sp, #72]	; 0x48
 8025c6a:	b300      	cbz	r0, 8025cae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8025c6c:	444b      	add	r3, r9
 8025c6e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8025c72:	07dc      	lsls	r4, r3, #31
 8025c74:	f103 0301 	add.w	r3, r3, #1
 8025c78:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025c7c:	bf54      	ite	pl
 8025c7e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8025c82:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8025c86:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025c8a:	fa5f f48c 	uxtb.w	r4, ip
 8025c8e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8025c92:	940b      	str	r4, [sp, #44]	; 0x2c
 8025c94:	07dc      	lsls	r4, r3, #31
 8025c96:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025c9a:	bf54      	ite	pl
 8025c9c:	f00c 0c0f 	andpl.w	ip, ip, #15
 8025ca0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8025ca4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025ca8:	fa5f f38c 	uxtb.w	r3, ip
 8025cac:	9313      	str	r3, [sp, #76]	; 0x4c
 8025cae:	b289      	uxth	r1, r1
 8025cb0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8025cb2:	b280      	uxth	r0, r0
 8025cb4:	fb01 f300 	mul.w	r3, r1, r0
 8025cb8:	0109      	lsls	r1, r1, #4
 8025cba:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8025cbe:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8025cc2:	1ac9      	subs	r1, r1, r3
 8025cc4:	b280      	uxth	r0, r0
 8025cc6:	b289      	uxth	r1, r1
 8025cc8:	ebac 0c00 	sub.w	ip, ip, r0
 8025ccc:	4361      	muls	r1, r4
 8025cce:	fa1f fc8c 	uxth.w	ip, ip
 8025cd2:	fb02 120c 	mla	r2, r2, ip, r1
 8025cd6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8025cd8:	fb00 2001 	mla	r0, r0, r1, r2
 8025cdc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8025cde:	fb03 0302 	mla	r3, r3, r2, r0
 8025ce2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025ce6:	2b00      	cmp	r3, #0
 8025ce8:	d039      	beq.n	8025d5e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8025cea:	4a21      	ldr	r2, [pc, #132]	; (8025d70 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8025cec:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8025cf0:	6810      	ldr	r0, [r2, #0]
 8025cf2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025cf4:	fa5f fc80 	uxtb.w	ip, r0
 8025cf8:	4353      	muls	r3, r2
 8025cfa:	1c5a      	adds	r2, r3, #1
 8025cfc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025d00:	121b      	asrs	r3, r3, #8
 8025d02:	b29a      	uxth	r2, r3
 8025d04:	43db      	mvns	r3, r3
 8025d06:	fb1c fc02 	smulbb	ip, ip, r2
 8025d0a:	b2db      	uxtb	r3, r3
 8025d0c:	fb01 c103 	mla	r1, r1, r3, ip
 8025d10:	b289      	uxth	r1, r1
 8025d12:	f101 0c01 	add.w	ip, r1, #1
 8025d16:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8025d1a:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8025d1e:	fb1c fc03 	smulbb	ip, ip, r3
 8025d22:	1209      	asrs	r1, r1, #8
 8025d24:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8025d28:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8025d2c:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8025d30:	fb01 c102 	mla	r1, r1, r2, ip
 8025d34:	b289      	uxth	r1, r1
 8025d36:	f101 0c01 	add.w	ip, r1, #1
 8025d3a:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8025d3e:	1209      	asrs	r1, r1, #8
 8025d40:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8025d44:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8025d48:	fb11 f303 	smulbb	r3, r1, r3
 8025d4c:	fb00 3002 	mla	r0, r0, r2, r3
 8025d50:	b280      	uxth	r0, r0
 8025d52:	1c42      	adds	r2, r0, #1
 8025d54:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8025d58:	1200      	asrs	r0, r0, #8
 8025d5a:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8025d5e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8025d60:	f10e 0e03 	add.w	lr, lr, #3
 8025d64:	f108 38ff 	add.w	r8, r8, #4294967295
 8025d68:	441d      	add	r5, r3
 8025d6a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025d6c:	441e      	add	r6, r3
 8025d6e:	e6db      	b.n	8025b28 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8025d70:	24006d40 	.word	0x24006d40
 8025d74:	2800      	cmp	r0, #0
 8025d76:	d09a      	beq.n	8025cae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8025d78:	444b      	add	r3, r9
 8025d7a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8025d7e:	07db      	lsls	r3, r3, #31
 8025d80:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025d84:	bf54      	ite	pl
 8025d86:	f00c 0c0f 	andpl.w	ip, ip, #15
 8025d8a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8025d8e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025d92:	fa5f f38c 	uxtb.w	r3, ip
 8025d96:	930b      	str	r3, [sp, #44]	; 0x2c
 8025d98:	e789      	b.n	8025cae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8025d9a:	b017      	add	sp, #92	; 0x5c
 8025d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025da0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8025da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025da4:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
 8025da8:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8025dac:	2d00      	cmp	r5, #0
 8025dae:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8025db2:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 8025db6:	fb04 5e03 	mla	lr, r4, r3, r5
 8025dba:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 8025dbe:	f2c0 80b1 	blt.w	8025f24 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8025dc2:	45a9      	cmp	r9, r5
 8025dc4:	f340 80ae 	ble.w	8025f24 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8025dc8:	2c00      	cmp	r4, #0
 8025dca:	f2c0 80ab 	blt.w	8025f24 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8025dce:	45a0      	cmp	r8, r4
 8025dd0:	f340 80a8 	ble.w	8025f24 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8025dd4:	ea4f 065e 	mov.w	r6, lr, lsr #1
 8025dd8:	f01e 0f01 	tst.w	lr, #1
 8025ddc:	5d97      	ldrb	r7, [r2, r6]
 8025dde:	bf0c      	ite	eq
 8025de0:	f007 070f 	andeq.w	r7, r7, #15
 8025de4:	113f      	asrne	r7, r7, #4
 8025de6:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 8025dea:	b2ff      	uxtb	r7, r7
 8025dec:	f115 0a01 	adds.w	sl, r5, #1
 8025df0:	f100 809a 	bmi.w	8025f28 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8025df4:	45d1      	cmp	r9, sl
 8025df6:	f340 8097 	ble.w	8025f28 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8025dfa:	2c00      	cmp	r4, #0
 8025dfc:	f2c0 8094 	blt.w	8025f28 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8025e00:	45a0      	cmp	r8, r4
 8025e02:	f340 8091 	ble.w	8025f28 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8025e06:	2800      	cmp	r0, #0
 8025e08:	f000 8090 	beq.w	8025f2c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 8025e0c:	f10e 0b01 	add.w	fp, lr, #1
 8025e10:	ea4f 065b 	mov.w	r6, fp, lsr #1
 8025e14:	f01b 0f01 	tst.w	fp, #1
 8025e18:	5d96      	ldrb	r6, [r2, r6]
 8025e1a:	bf0c      	ite	eq
 8025e1c:	f006 060f 	andeq.w	r6, r6, #15
 8025e20:	1136      	asrne	r6, r6, #4
 8025e22:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8025e26:	b2f6      	uxtb	r6, r6
 8025e28:	f1bc 0f00 	cmp.w	ip, #0
 8025e2c:	f000 8082 	beq.w	8025f34 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 8025e30:	2d00      	cmp	r5, #0
 8025e32:	f104 0401 	add.w	r4, r4, #1
 8025e36:	db7b      	blt.n	8025f30 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8025e38:	45a9      	cmp	r9, r5
 8025e3a:	dd79      	ble.n	8025f30 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8025e3c:	2c00      	cmp	r4, #0
 8025e3e:	db77      	blt.n	8025f30 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8025e40:	45a0      	cmp	r8, r4
 8025e42:	dd75      	ble.n	8025f30 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8025e44:	eb03 0b0e 	add.w	fp, r3, lr
 8025e48:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8025e4c:	f01b 0f01 	tst.w	fp, #1
 8025e50:	5d55      	ldrb	r5, [r2, r5]
 8025e52:	bf0c      	ite	eq
 8025e54:	f005 050f 	andeq.w	r5, r5, #15
 8025e58:	112d      	asrne	r5, r5, #4
 8025e5a:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8025e5e:	b2ed      	uxtb	r5, r5
 8025e60:	f1ba 0f00 	cmp.w	sl, #0
 8025e64:	db69      	blt.n	8025f3a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8025e66:	45d1      	cmp	r9, sl
 8025e68:	dd67      	ble.n	8025f3a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8025e6a:	2c00      	cmp	r4, #0
 8025e6c:	db65      	blt.n	8025f3a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8025e6e:	45a0      	cmp	r8, r4
 8025e70:	dd63      	ble.n	8025f3a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8025e72:	2800      	cmp	r0, #0
 8025e74:	d063      	beq.n	8025f3e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 8025e76:	3301      	adds	r3, #1
 8025e78:	449e      	add	lr, r3
 8025e7a:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8025e7e:	f01e 0f01 	tst.w	lr, #1
 8025e82:	5cd4      	ldrb	r4, [r2, r3]
 8025e84:	bf0c      	ite	eq
 8025e86:	f004 040f 	andeq.w	r4, r4, #15
 8025e8a:	1124      	asrne	r4, r4, #4
 8025e8c:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8025e90:	b2e3      	uxtb	r3, r4
 8025e92:	b282      	uxth	r2, r0
 8025e94:	fa1f fc8c 	uxth.w	ip, ip
 8025e98:	fb02 f40c 	mul.w	r4, r2, ip
 8025e9c:	0112      	lsls	r2, r2, #4
 8025e9e:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 8025ea2:	fa1f f08c 	uxth.w	r0, ip
 8025ea6:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 8025eaa:	1b12      	subs	r2, r2, r4
 8025eac:	ebac 0c00 	sub.w	ip, ip, r0
 8025eb0:	b292      	uxth	r2, r2
 8025eb2:	fa1f fc8c 	uxth.w	ip, ip
 8025eb6:	4372      	muls	r2, r6
 8025eb8:	fb07 220c 	mla	r2, r7, ip, r2
 8025ebc:	fb00 2005 	mla	r0, r0, r5, r2
 8025ec0:	fb04 0303 	mla	r3, r4, r3, r0
 8025ec4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025ec8:	b353      	cbz	r3, 8025f20 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 8025eca:	4a1e      	ldr	r2, [pc, #120]	; (8025f44 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 8025ecc:	7808      	ldrb	r0, [r1, #0]
 8025ece:	6814      	ldr	r4, [r2, #0]
 8025ed0:	b29a      	uxth	r2, r3
 8025ed2:	43db      	mvns	r3, r3
 8025ed4:	b2e5      	uxtb	r5, r4
 8025ed6:	b2db      	uxtb	r3, r3
 8025ed8:	fb15 f502 	smulbb	r5, r5, r2
 8025edc:	fb00 5003 	mla	r0, r0, r3, r5
 8025ee0:	b280      	uxth	r0, r0
 8025ee2:	1c45      	adds	r5, r0, #1
 8025ee4:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8025ee8:	784d      	ldrb	r5, [r1, #1]
 8025eea:	fb15 f503 	smulbb	r5, r5, r3
 8025eee:	1200      	asrs	r0, r0, #8
 8025ef0:	7008      	strb	r0, [r1, #0]
 8025ef2:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8025ef6:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8025efa:	fb00 5002 	mla	r0, r0, r2, r5
 8025efe:	b280      	uxth	r0, r0
 8025f00:	1c45      	adds	r5, r0, #1
 8025f02:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8025f06:	1200      	asrs	r0, r0, #8
 8025f08:	7048      	strb	r0, [r1, #1]
 8025f0a:	7888      	ldrb	r0, [r1, #2]
 8025f0c:	fb10 f303 	smulbb	r3, r0, r3
 8025f10:	fb04 3202 	mla	r2, r4, r2, r3
 8025f14:	b292      	uxth	r2, r2
 8025f16:	1c53      	adds	r3, r2, #1
 8025f18:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8025f1c:	1212      	asrs	r2, r2, #8
 8025f1e:	708a      	strb	r2, [r1, #2]
 8025f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025f24:	2700      	movs	r7, #0
 8025f26:	e761      	b.n	8025dec <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 8025f28:	2600      	movs	r6, #0
 8025f2a:	e77d      	b.n	8025e28 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8025f2c:	4606      	mov	r6, r0
 8025f2e:	e77b      	b.n	8025e28 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8025f30:	2500      	movs	r5, #0
 8025f32:	e795      	b.n	8025e60 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 8025f34:	4663      	mov	r3, ip
 8025f36:	4665      	mov	r5, ip
 8025f38:	e7ab      	b.n	8025e92 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8025f3a:	2300      	movs	r3, #0
 8025f3c:	e7a9      	b.n	8025e92 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8025f3e:	4603      	mov	r3, r0
 8025f40:	e7a7      	b.n	8025e92 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8025f42:	bf00      	nop
 8025f44:	24006d40 	.word	0x24006d40

08025f48 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025f4c:	b093      	sub	sp, #76	; 0x4c
 8025f4e:	461c      	mov	r4, r3
 8025f50:	920c      	str	r2, [sp, #48]	; 0x30
 8025f52:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8025f54:	9011      	str	r0, [sp, #68]	; 0x44
 8025f56:	9107      	str	r1, [sp, #28]
 8025f58:	6850      	ldr	r0, [r2, #4]
 8025f5a:	6812      	ldr	r2, [r2, #0]
 8025f5c:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8025f60:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	; 0x74
 8025f64:	fb00 1303 	mla	r3, r0, r3, r1
 8025f68:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025f6c:	eb02 0b03 	add.w	fp, r2, r3
 8025f70:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025f72:	689b      	ldr	r3, [r3, #8]
 8025f74:	3301      	adds	r3, #1
 8025f76:	f023 0301 	bic.w	r3, r3, #1
 8025f7a:	9309      	str	r3, [sp, #36]	; 0x24
 8025f7c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025f7e:	f8d3 8000 	ldr.w	r8, [r3]
 8025f82:	9b07      	ldr	r3, [sp, #28]
 8025f84:	2b00      	cmp	r3, #0
 8025f86:	dc03      	bgt.n	8025f90 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8025f88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025f8a:	2b00      	cmp	r3, #0
 8025f8c:	f340 822b 	ble.w	80263e6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8025f90:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025f92:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025f96:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025f9a:	1e48      	subs	r0, r1, #1
 8025f9c:	1e57      	subs	r7, r2, #1
 8025f9e:	2c00      	cmp	r4, #0
 8025fa0:	f340 80d7 	ble.w	8026152 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8025fa4:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8025fa8:	ea4f 4326 	mov.w	r3, r6, asr #16
 8025fac:	d406      	bmi.n	8025fbc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8025fae:	4584      	cmp	ip, r0
 8025fb0:	da04      	bge.n	8025fbc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8025fb2:	2b00      	cmp	r3, #0
 8025fb4:	db02      	blt.n	8025fbc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8025fb6:	42bb      	cmp	r3, r7
 8025fb8:	f2c0 80cc 	blt.w	8026154 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8025fbc:	f11c 0c01 	adds.w	ip, ip, #1
 8025fc0:	f100 80bf 	bmi.w	8026142 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8025fc4:	4561      	cmp	r1, ip
 8025fc6:	f2c0 80bc 	blt.w	8026142 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8025fca:	3301      	adds	r3, #1
 8025fcc:	f100 80b9 	bmi.w	8026142 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8025fd0:	429a      	cmp	r2, r3
 8025fd2:	f2c0 80b6 	blt.w	8026142 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8025fd6:	46a2      	mov	sl, r4
 8025fd8:	465f      	mov	r7, fp
 8025fda:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8025fde:	f1ba 0f00 	cmp.w	sl, #0
 8025fe2:	f340 80d4 	ble.w	802618e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8025fe6:	f3c5 3303 	ubfx	r3, r5, #12, #4
 8025fea:	1430      	asrs	r0, r6, #16
 8025fec:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8025ff0:	9308      	str	r3, [sp, #32]
 8025ff2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025ff4:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8025ff8:	142b      	asrs	r3, r5, #16
 8025ffa:	f100 8124 	bmi.w	8026246 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8025ffe:	f10c 32ff 	add.w	r2, ip, #4294967295
 8026002:	4293      	cmp	r3, r2
 8026004:	f280 811f 	bge.w	8026246 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8026008:	2800      	cmp	r0, #0
 802600a:	f2c0 811c 	blt.w	8026246 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802600e:	f10e 32ff 	add.w	r2, lr, #4294967295
 8026012:	4290      	cmp	r0, r2
 8026014:	f280 8117 	bge.w	8026246 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8026018:	fb00 3309 	mla	r3, r0, r9, r3
 802601c:	0858      	lsrs	r0, r3, #1
 802601e:	07da      	lsls	r2, r3, #31
 8026020:	9a08      	ldr	r2, [sp, #32]
 8026022:	f818 c000 	ldrb.w	ip, [r8, r0]
 8026026:	bf54      	ite	pl
 8026028:	f00c 0c0f 	andpl.w	ip, ip, #15
 802602c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8026030:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8026034:	fa5f fc8c 	uxtb.w	ip, ip
 8026038:	2a00      	cmp	r2, #0
 802603a:	f000 80ed 	beq.w	8026218 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 802603e:	1c58      	adds	r0, r3, #1
 8026040:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8026044:	07c0      	lsls	r0, r0, #31
 8026046:	f818 e00e 	ldrb.w	lr, [r8, lr]
 802604a:	bf54      	ite	pl
 802604c:	f00e 0e0f 	andpl.w	lr, lr, #15
 8026050:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8026054:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8026058:	fa5f fe8e 	uxtb.w	lr, lr
 802605c:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8026060:	b1c9      	cbz	r1, 8026096 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8026062:	444b      	add	r3, r9
 8026064:	0858      	lsrs	r0, r3, #1
 8026066:	07da      	lsls	r2, r3, #31
 8026068:	f818 0000 	ldrb.w	r0, [r8, r0]
 802606c:	bf54      	ite	pl
 802606e:	f000 000f 	andpl.w	r0, r0, #15
 8026072:	1100      	asrmi	r0, r0, #4
 8026074:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8026078:	b2c0      	uxtb	r0, r0
 802607a:	900a      	str	r0, [sp, #40]	; 0x28
 802607c:	1c58      	adds	r0, r3, #1
 802607e:	0843      	lsrs	r3, r0, #1
 8026080:	07c2      	lsls	r2, r0, #31
 8026082:	f818 3003 	ldrb.w	r3, [r8, r3]
 8026086:	bf54      	ite	pl
 8026088:	f003 030f 	andpl.w	r3, r3, #15
 802608c:	111b      	asrmi	r3, r3, #4
 802608e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8026092:	b2db      	uxtb	r3, r3
 8026094:	930e      	str	r3, [sp, #56]	; 0x38
 8026096:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802609a:	b289      	uxth	r1, r1
 802609c:	fb02 f301 	mul.w	r3, r2, r1
 80260a0:	0112      	lsls	r2, r2, #4
 80260a2:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80260a6:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 80260aa:	1ad2      	subs	r2, r2, r3
 80260ac:	b289      	uxth	r1, r1
 80260ae:	b292      	uxth	r2, r2
 80260b0:	1a40      	subs	r0, r0, r1
 80260b2:	fa1f fe80 	uxth.w	lr, r0
 80260b6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80260b8:	4342      	muls	r2, r0
 80260ba:	fb0c 2c0e 	mla	ip, ip, lr, r2
 80260be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80260c0:	fb01 c102 	mla	r1, r1, r2, ip
 80260c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80260c6:	fb03 1302 	mla	r3, r3, r2, r1
 80260ca:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80260ce:	b383      	cbz	r3, 8026132 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80260d0:	4ac6      	ldr	r2, [pc, #792]	; (80263ec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 80260d2:	2bff      	cmp	r3, #255	; 0xff
 80260d4:	6812      	ldr	r2, [r2, #0]
 80260d6:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 80260da:	f3c2 2007 	ubfx	r0, r2, #8, #8
 80260de:	b2d2      	uxtb	r2, r2
 80260e0:	f000 80ac 	beq.w	802623c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80260e4:	b299      	uxth	r1, r3
 80260e6:	43db      	mvns	r3, r3
 80260e8:	f897 c000 	ldrb.w	ip, [r7]
 80260ec:	fb12 f201 	smulbb	r2, r2, r1
 80260f0:	b2db      	uxtb	r3, r3
 80260f2:	fb10 f001 	smulbb	r0, r0, r1
 80260f6:	fb0c 2203 	mla	r2, ip, r3, r2
 80260fa:	fb1e f101 	smulbb	r1, lr, r1
 80260fe:	b292      	uxth	r2, r2
 8026100:	f102 0c01 	add.w	ip, r2, #1
 8026104:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8026108:	1212      	asrs	r2, r2, #8
 802610a:	703a      	strb	r2, [r7, #0]
 802610c:	787a      	ldrb	r2, [r7, #1]
 802610e:	fb02 0003 	mla	r0, r2, r3, r0
 8026112:	b280      	uxth	r0, r0
 8026114:	1c42      	adds	r2, r0, #1
 8026116:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802611a:	78ba      	ldrb	r2, [r7, #2]
 802611c:	fb02 1303 	mla	r3, r2, r3, r1
 8026120:	1200      	asrs	r0, r0, #8
 8026122:	b29b      	uxth	r3, r3
 8026124:	7078      	strb	r0, [r7, #1]
 8026126:	f103 0e01 	add.w	lr, r3, #1
 802612a:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 802612e:	121b      	asrs	r3, r3, #8
 8026130:	70bb      	strb	r3, [r7, #2]
 8026132:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8026134:	3703      	adds	r7, #3
 8026136:	f10a 3aff 	add.w	sl, sl, #4294967295
 802613a:	441d      	add	r5, r3
 802613c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802613e:	441e      	add	r6, r3
 8026140:	e74d      	b.n	8025fde <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8026142:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8026144:	3c01      	subs	r4, #1
 8026146:	f10b 0b03 	add.w	fp, fp, #3
 802614a:	441d      	add	r5, r3
 802614c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802614e:	441e      	add	r6, r3
 8026150:	e725      	b.n	8025f9e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8026152:	d021      	beq.n	8026198 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8026154:	1e63      	subs	r3, r4, #1
 8026156:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8026158:	fb00 5003 	mla	r0, r0, r3, r5
 802615c:	1400      	asrs	r0, r0, #16
 802615e:	f53f af3a 	bmi.w	8025fd6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8026162:	3901      	subs	r1, #1
 8026164:	4288      	cmp	r0, r1
 8026166:	f6bf af36 	bge.w	8025fd6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802616a:	9920      	ldr	r1, [sp, #128]	; 0x80
 802616c:	fb01 6303 	mla	r3, r1, r3, r6
 8026170:	141b      	asrs	r3, r3, #16
 8026172:	f53f af30 	bmi.w	8025fd6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8026176:	3a01      	subs	r2, #1
 8026178:	4293      	cmp	r3, r2
 802617a:	f6bf af2c 	bge.w	8025fd6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802617e:	f10b 0c03 	add.w	ip, fp, #3
 8026182:	46a6      	mov	lr, r4
 8026184:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8026188:	f1be 0f00 	cmp.w	lr, #0
 802618c:	dc79      	bgt.n	8026282 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 802618e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8026192:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8026196:	44a3      	add	fp, r4
 8026198:	9b07      	ldr	r3, [sp, #28]
 802619a:	2b00      	cmp	r3, #0
 802619c:	f340 8123 	ble.w	80263e6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80261a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80261a4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80261a6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80261aa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80261ae:	eef0 6a62 	vmov.f32	s13, s5
 80261b2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80261b6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80261ba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80261be:	ee16 5a90 	vmov	r5, s13
 80261c2:	eef0 6a43 	vmov.f32	s13, s6
 80261c6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80261ca:	ee16 6a90 	vmov	r6, s13
 80261ce:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80261d2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80261d6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80261da:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80261de:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80261e2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80261e6:	ee12 2a90 	vmov	r2, s5
 80261ea:	eef0 2a47 	vmov.f32	s5, s14
 80261ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80261f2:	ee13 2a10 	vmov	r2, s6
 80261f6:	931f      	str	r3, [sp, #124]	; 0x7c
 80261f8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80261fa:	eeb0 3a67 	vmov.f32	s6, s15
 80261fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8026202:	9320      	str	r3, [sp, #128]	; 0x80
 8026204:	9b07      	ldr	r3, [sp, #28]
 8026206:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026208:	3b01      	subs	r3, #1
 802620a:	9307      	str	r3, [sp, #28]
 802620c:	bf08      	it	eq
 802620e:	4614      	moveq	r4, r2
 8026210:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8026212:	bf18      	it	ne
 8026214:	461c      	movne	r4, r3
 8026216:	e6b4      	b.n	8025f82 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8026218:	2900      	cmp	r1, #0
 802621a:	f43f af3c 	beq.w	8026096 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802621e:	eb09 0003 	add.w	r0, r9, r3
 8026222:	0843      	lsrs	r3, r0, #1
 8026224:	07c0      	lsls	r0, r0, #31
 8026226:	f818 3003 	ldrb.w	r3, [r8, r3]
 802622a:	bf54      	ite	pl
 802622c:	f003 030f 	andpl.w	r3, r3, #15
 8026230:	111b      	asrmi	r3, r3, #4
 8026232:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8026236:	b2db      	uxtb	r3, r3
 8026238:	930a      	str	r3, [sp, #40]	; 0x28
 802623a:	e72c      	b.n	8026096 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802623c:	703a      	strb	r2, [r7, #0]
 802623e:	7078      	strb	r0, [r7, #1]
 8026240:	f887 e002 	strb.w	lr, [r7, #2]
 8026244:	e775      	b.n	8026132 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8026246:	1c5a      	adds	r2, r3, #1
 8026248:	f53f af73 	bmi.w	8026132 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802624c:	4594      	cmp	ip, r2
 802624e:	f6ff af70 	blt.w	8026132 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8026252:	1c42      	adds	r2, r0, #1
 8026254:	f53f af6d 	bmi.w	8026132 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8026258:	4596      	cmp	lr, r2
 802625a:	f6ff af6a 	blt.w	8026132 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802625e:	9302      	str	r3, [sp, #8]
 8026260:	fa0f f38e 	sxth.w	r3, lr
 8026264:	9a08      	ldr	r2, [sp, #32]
 8026266:	9301      	str	r3, [sp, #4]
 8026268:	fa0f f38c 	sxth.w	r3, ip
 802626c:	9105      	str	r1, [sp, #20]
 802626e:	4639      	mov	r1, r7
 8026270:	9300      	str	r3, [sp, #0]
 8026272:	464b      	mov	r3, r9
 8026274:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8026278:	4642      	mov	r2, r8
 802627a:	9811      	ldr	r0, [sp, #68]	; 0x44
 802627c:	f7ff fd90 	bl	8025da0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8026280:	e757      	b.n	8026132 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8026282:	142a      	asrs	r2, r5, #16
 8026284:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8026288:	1433      	asrs	r3, r6, #16
 802628a:	f3c6 3703 	ubfx	r7, r6, #12, #4
 802628e:	fb09 2303 	mla	r3, r9, r3, r2
 8026292:	085a      	lsrs	r2, r3, #1
 8026294:	07d9      	lsls	r1, r3, #31
 8026296:	f818 2002 	ldrb.w	r2, [r8, r2]
 802629a:	bf54      	ite	pl
 802629c:	f002 020f 	andpl.w	r2, r2, #15
 80262a0:	1112      	asrmi	r2, r2, #4
 80262a2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80262a6:	b2d2      	uxtb	r2, r2
 80262a8:	2800      	cmp	r0, #0
 80262aa:	f000 8085 	beq.w	80263b8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 80262ae:	f103 0a01 	add.w	sl, r3, #1
 80262b2:	ea4f 015a 	mov.w	r1, sl, lsr #1
 80262b6:	f01a 0f01 	tst.w	sl, #1
 80262ba:	f818 1001 	ldrb.w	r1, [r8, r1]
 80262be:	bf0c      	ite	eq
 80262c0:	f001 010f 	andeq.w	r1, r1, #15
 80262c4:	1109      	asrne	r1, r1, #4
 80262c6:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80262ca:	b2c9      	uxtb	r1, r1
 80262cc:	910f      	str	r1, [sp, #60]	; 0x3c
 80262ce:	b1df      	cbz	r7, 8026308 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80262d0:	444b      	add	r3, r9
 80262d2:	0859      	lsrs	r1, r3, #1
 80262d4:	f013 0f01 	tst.w	r3, #1
 80262d8:	f103 0301 	add.w	r3, r3, #1
 80262dc:	f818 1001 	ldrb.w	r1, [r8, r1]
 80262e0:	bf0c      	ite	eq
 80262e2:	f001 010f 	andeq.w	r1, r1, #15
 80262e6:	1109      	asrne	r1, r1, #4
 80262e8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80262ec:	b2c9      	uxtb	r1, r1
 80262ee:	910b      	str	r1, [sp, #44]	; 0x2c
 80262f0:	0859      	lsrs	r1, r3, #1
 80262f2:	07db      	lsls	r3, r3, #31
 80262f4:	f818 1001 	ldrb.w	r1, [r8, r1]
 80262f8:	bf54      	ite	pl
 80262fa:	f001 010f 	andpl.w	r1, r1, #15
 80262fe:	1109      	asrmi	r1, r1, #4
 8026300:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8026304:	b2c9      	uxtb	r1, r1
 8026306:	9110      	str	r1, [sp, #64]	; 0x40
 8026308:	b280      	uxth	r0, r0
 802630a:	b2bf      	uxth	r7, r7
 802630c:	fb00 f307 	mul.w	r3, r0, r7
 8026310:	0100      	lsls	r0, r0, #4
 8026312:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 8026316:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 802631a:	1ac0      	subs	r0, r0, r3
 802631c:	b2bf      	uxth	r7, r7
 802631e:	b280      	uxth	r0, r0
 8026320:	1bc9      	subs	r1, r1, r7
 8026322:	fa1f fa81 	uxth.w	sl, r1
 8026326:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8026328:	4348      	muls	r0, r1
 802632a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802632c:	fb02 020a 	mla	r2, r2, sl, r0
 8026330:	fb07 2701 	mla	r7, r7, r1, r2
 8026334:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8026336:	fb03 7302 	mla	r3, r3, r2, r7
 802633a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802633e:	b393      	cbz	r3, 80263a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8026340:	4a2a      	ldr	r2, [pc, #168]	; (80263ec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8026342:	2bff      	cmp	r3, #255	; 0xff
 8026344:	6811      	ldr	r1, [r2, #0]
 8026346:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 802634a:	f3c1 2707 	ubfx	r7, r1, #8, #8
 802634e:	b2c9      	uxtb	r1, r1
 8026350:	d042      	beq.n	80263d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8026352:	b298      	uxth	r0, r3
 8026354:	43db      	mvns	r3, r3
 8026356:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 802635a:	fb11 f100 	smulbb	r1, r1, r0
 802635e:	b2db      	uxtb	r3, r3
 8026360:	fb17 f700 	smulbb	r7, r7, r0
 8026364:	fb02 1103 	mla	r1, r2, r3, r1
 8026368:	fb1a f000 	smulbb	r0, sl, r0
 802636c:	b289      	uxth	r1, r1
 802636e:	1c4a      	adds	r2, r1, #1
 8026370:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8026374:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 8026378:	fb02 7703 	mla	r7, r2, r3, r7
 802637c:	1209      	asrs	r1, r1, #8
 802637e:	b2bf      	uxth	r7, r7
 8026380:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8026384:	1c7a      	adds	r2, r7, #1
 8026386:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 802638a:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 802638e:	fb02 0303 	mla	r3, r2, r3, r0
 8026392:	123f      	asrs	r7, r7, #8
 8026394:	b29b      	uxth	r3, r3
 8026396:	f80c 7c02 	strb.w	r7, [ip, #-2]
 802639a:	1c5a      	adds	r2, r3, #1
 802639c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80263a0:	121b      	asrs	r3, r3, #8
 80263a2:	f80c 3c01 	strb.w	r3, [ip, #-1]
 80263a6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80263a8:	f10c 0c03 	add.w	ip, ip, #3
 80263ac:	f10e 3eff 	add.w	lr, lr, #4294967295
 80263b0:	441d      	add	r5, r3
 80263b2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80263b4:	441e      	add	r6, r3
 80263b6:	e6e7      	b.n	8026188 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80263b8:	2f00      	cmp	r7, #0
 80263ba:	d0a5      	beq.n	8026308 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80263bc:	444b      	add	r3, r9
 80263be:	0859      	lsrs	r1, r3, #1
 80263c0:	07db      	lsls	r3, r3, #31
 80263c2:	f818 1001 	ldrb.w	r1, [r8, r1]
 80263c6:	bf54      	ite	pl
 80263c8:	f001 010f 	andpl.w	r1, r1, #15
 80263cc:	1109      	asrmi	r1, r1, #4
 80263ce:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80263d2:	b2c9      	uxtb	r1, r1
 80263d4:	910b      	str	r1, [sp, #44]	; 0x2c
 80263d6:	e797      	b.n	8026308 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80263d8:	f80c 1c03 	strb.w	r1, [ip, #-3]
 80263dc:	f80c 7c02 	strb.w	r7, [ip, #-2]
 80263e0:	f80c ac01 	strb.w	sl, [ip, #-1]
 80263e4:	e7df      	b.n	80263a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 80263e6:	b013      	add	sp, #76	; 0x4c
 80263e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80263ec:	24006d40 	.word	0x24006d40

080263f0 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>:
 80263f0:	b530      	push	{r4, r5, lr}
 80263f2:	b29d      	uxth	r5, r3
 80263f4:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80263f8:	780c      	ldrb	r4, [r1, #0]
 80263fa:	b298      	uxth	r0, r3
 80263fc:	7813      	ldrb	r3, [r2, #0]
 80263fe:	fb14 f405 	smulbb	r4, r4, r5
 8026402:	fb13 f300 	smulbb	r3, r3, r0
 8026406:	441c      	add	r4, r3
 8026408:	b2a4      	uxth	r4, r4
 802640a:	1c63      	adds	r3, r4, #1
 802640c:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8026410:	7853      	ldrb	r3, [r2, #1]
 8026412:	fb13 f300 	smulbb	r3, r3, r0
 8026416:	1224      	asrs	r4, r4, #8
 8026418:	7014      	strb	r4, [r2, #0]
 802641a:	784c      	ldrb	r4, [r1, #1]
 802641c:	fb14 f405 	smulbb	r4, r4, r5
 8026420:	441c      	add	r4, r3
 8026422:	b2a4      	uxth	r4, r4
 8026424:	1c63      	adds	r3, r4, #1
 8026426:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802642a:	1224      	asrs	r4, r4, #8
 802642c:	7054      	strb	r4, [r2, #1]
 802642e:	788b      	ldrb	r3, [r1, #2]
 8026430:	7891      	ldrb	r1, [r2, #2]
 8026432:	fb13 f305 	smulbb	r3, r3, r5
 8026436:	fb11 f000 	smulbb	r0, r1, r0
 802643a:	4403      	add	r3, r0
 802643c:	b29b      	uxth	r3, r3
 802643e:	1c59      	adds	r1, r3, #1
 8026440:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8026444:	121b      	asrs	r3, r3, #8
 8026446:	7093      	strb	r3, [r2, #2]
 8026448:	bd30      	pop	{r4, r5, pc}
	...

0802644c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 802644c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026450:	461c      	mov	r4, r3
 8026452:	b08b      	sub	sp, #44	; 0x2c
 8026454:	460e      	mov	r6, r1
 8026456:	4615      	mov	r5, r2
 8026458:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802645a:	4682      	mov	sl, r0
 802645c:	6861      	ldr	r1, [r4, #4]
 802645e:	aa06      	add	r2, sp, #24
 8026460:	6820      	ldr	r0, [r4, #0]
 8026462:	2702      	movs	r7, #2
 8026464:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
 8026468:	3504      	adds	r5, #4
 802646a:	c203      	stmia	r2!, {r0, r1}
 802646c:	6818      	ldr	r0, [r3, #0]
 802646e:	aa08      	add	r2, sp, #32
 8026470:	6859      	ldr	r1, [r3, #4]
 8026472:	c203      	stmia	r2!, {r0, r1}
 8026474:	a806      	add	r0, sp, #24
 8026476:	f7f4 f9e9 	bl	801a84c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802647a:	4621      	mov	r1, r4
 802647c:	a808      	add	r0, sp, #32
 802647e:	f7f4 fa0d 	bl	801a89c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8026482:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8026486:	f9bd b026 	ldrsh.w	fp, [sp, #38]	; 0x26
 802648a:	f002 0301 	and.w	r3, r2, #1
 802648e:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 8026492:	9302      	str	r3, [sp, #8]
 8026494:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8026498:	f003 0101 	and.w	r1, r3, #1
 802649c:	9101      	str	r1, [sp, #4]
 802649e:	9801      	ldr	r0, [sp, #4]
 80264a0:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 80264a4:	4403      	add	r3, r0
 80264a6:	fb01 2303 	mla	r3, r1, r3, r2
 80264aa:	fb93 f3f7 	sdiv	r3, r3, r7
 80264ae:	441e      	add	r6, r3
 80264b0:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80264b4:	441a      	add	r2, r3
 80264b6:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 80264ba:	4419      	add	r1, r3
 80264bc:	4b70      	ldr	r3, [pc, #448]	; (8026680 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 80264be:	f8ad 2020 	strh.w	r2, [sp, #32]
 80264c2:	6818      	ldr	r0, [r3, #0]
 80264c4:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 80264c8:	6803      	ldr	r3, [r0, #0]
 80264ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80264cc:	4798      	blx	r3
 80264ce:	4a6d      	ldr	r2, [pc, #436]	; (8026684 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>)
 80264d0:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 80264d4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80264d8:	8813      	ldrh	r3, [r2, #0]
 80264da:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 80264de:	fb03 1404 	mla	r4, r3, r4, r1
 80264e2:	4611      	mov	r1, r2
 80264e4:	fb0b f303 	mul.w	r3, fp, r3
 80264e8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80264ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80264f0:	4404      	add	r4, r0
 80264f2:	4423      	add	r3, r4
 80264f4:	d073      	beq.n	80265de <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x192>
 80264f6:	9705      	str	r7, [sp, #20]
 80264f8:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80264fc:	9b03      	ldr	r3, [sp, #12]
 80264fe:	429c      	cmp	r4, r3
 8026500:	f080 80b5 	bcs.w	802666e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 8026504:	9b02      	ldr	r3, [sp, #8]
 8026506:	b35b      	cbz	r3, 8026560 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x114>
 8026508:	7831      	ldrb	r1, [r6, #0]
 802650a:	4622      	mov	r2, r4
 802650c:	1c77      	adds	r7, r6, #1
 802650e:	3403      	adds	r4, #3
 8026510:	f001 010f 	and.w	r1, r1, #15
 8026514:	f108 3bff 	add.w	fp, r8, #4294967295
 8026518:	464b      	mov	r3, r9
 802651a:	4650      	mov	r0, sl
 802651c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8026520:	4429      	add	r1, r5
 8026522:	f7ff ff65 	bl	80263f0 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8026526:	f1bb 0f01 	cmp.w	fp, #1
 802652a:	dd1c      	ble.n	8026566 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 802652c:	7839      	ldrb	r1, [r7, #0]
 802652e:	4622      	mov	r2, r4
 8026530:	464b      	mov	r3, r9
 8026532:	4650      	mov	r0, sl
 8026534:	0909      	lsrs	r1, r1, #4
 8026536:	f1ab 0b02 	sub.w	fp, fp, #2
 802653a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802653e:	4429      	add	r1, r5
 8026540:	f7ff ff56 	bl	80263f0 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8026544:	f817 1b01 	ldrb.w	r1, [r7], #1
 8026548:	1ce2      	adds	r2, r4, #3
 802654a:	464b      	mov	r3, r9
 802654c:	f001 010f 	and.w	r1, r1, #15
 8026550:	4650      	mov	r0, sl
 8026552:	3406      	adds	r4, #6
 8026554:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8026558:	4429      	add	r1, r5
 802655a:	f7ff ff49 	bl	80263f0 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 802655e:	e7e2      	b.n	8026526 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 8026560:	4637      	mov	r7, r6
 8026562:	46c3      	mov	fp, r8
 8026564:	e7df      	b.n	8026526 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 8026566:	d10a      	bne.n	802657e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x132>
 8026568:	7839      	ldrb	r1, [r7, #0]
 802656a:	4622      	mov	r2, r4
 802656c:	3403      	adds	r4, #3
 802656e:	464b      	mov	r3, r9
 8026570:	0909      	lsrs	r1, r1, #4
 8026572:	4650      	mov	r0, sl
 8026574:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8026578:	4429      	add	r1, r5
 802657a:	f7ff ff39 	bl	80263f0 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 802657e:	9b04      	ldr	r3, [sp, #16]
 8026580:	9a01      	ldr	r2, [sp, #4]
 8026582:	881b      	ldrh	r3, [r3, #0]
 8026584:	eba3 0308 	sub.w	r3, r3, r8
 8026588:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802658c:	441c      	add	r4, r3
 802658e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8026592:	4413      	add	r3, r2
 8026594:	9a05      	ldr	r2, [sp, #20]
 8026596:	fb93 f3f2 	sdiv	r3, r3, r2
 802659a:	441e      	add	r6, r3
 802659c:	e7ae      	b.n	80264fc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xb0>
 802659e:	4632      	mov	r2, r6
 80265a0:	46c4      	mov	ip, r8
 80265a2:	e037      	b.n	8026614 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 80265a4:	d10e      	bne.n	80265c4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x178>
 80265a6:	7812      	ldrb	r2, [r2, #0]
 80265a8:	3003      	adds	r0, #3
 80265aa:	0912      	lsrs	r2, r2, #4
 80265ac:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80265b0:	18ac      	adds	r4, r5, r2
 80265b2:	5caa      	ldrb	r2, [r5, r2]
 80265b4:	f800 2c03 	strb.w	r2, [r0, #-3]
 80265b8:	7862      	ldrb	r2, [r4, #1]
 80265ba:	f800 2c02 	strb.w	r2, [r0, #-2]
 80265be:	78a2      	ldrb	r2, [r4, #2]
 80265c0:	f800 2c01 	strb.w	r2, [r0, #-1]
 80265c4:	880c      	ldrh	r4, [r1, #0]
 80265c6:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 80265ca:	eba4 0408 	sub.w	r4, r4, r8
 80265ce:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80265d2:	4404      	add	r4, r0
 80265d4:	9801      	ldr	r0, [sp, #4]
 80265d6:	4402      	add	r2, r0
 80265d8:	fb92 f2f7 	sdiv	r2, r2, r7
 80265dc:	4416      	add	r6, r2
 80265de:	429c      	cmp	r4, r3
 80265e0:	d245      	bcs.n	802666e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 80265e2:	9a02      	ldr	r2, [sp, #8]
 80265e4:	2a00      	cmp	r2, #0
 80265e6:	d0da      	beq.n	802659e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x152>
 80265e8:	7830      	ldrb	r0, [r6, #0]
 80265ea:	1c72      	adds	r2, r6, #1
 80265ec:	3403      	adds	r4, #3
 80265ee:	f000 000f 	and.w	r0, r0, #15
 80265f2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80265f6:	eb05 0c00 	add.w	ip, r5, r0
 80265fa:	5c28      	ldrb	r0, [r5, r0]
 80265fc:	f804 0c03 	strb.w	r0, [r4, #-3]
 8026600:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8026604:	f804 0c02 	strb.w	r0, [r4, #-2]
 8026608:	f89c 0002 	ldrb.w	r0, [ip, #2]
 802660c:	f108 3cff 	add.w	ip, r8, #4294967295
 8026610:	f804 0c01 	strb.w	r0, [r4, #-1]
 8026614:	f1bc 0f01 	cmp.w	ip, #1
 8026618:	4620      	mov	r0, r4
 802661a:	f104 0406 	add.w	r4, r4, #6
 802661e:	ddc1      	ble.n	80265a4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x158>
 8026620:	7810      	ldrb	r0, [r2, #0]
 8026622:	f1ac 0c02 	sub.w	ip, ip, #2
 8026626:	0900      	lsrs	r0, r0, #4
 8026628:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802662c:	eb05 0e00 	add.w	lr, r5, r0
 8026630:	5c28      	ldrb	r0, [r5, r0]
 8026632:	f804 0c06 	strb.w	r0, [r4, #-6]
 8026636:	f89e 0001 	ldrb.w	r0, [lr, #1]
 802663a:	f804 0c05 	strb.w	r0, [r4, #-5]
 802663e:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8026642:	f804 0c04 	strb.w	r0, [r4, #-4]
 8026646:	f812 0b01 	ldrb.w	r0, [r2], #1
 802664a:	f000 000f 	and.w	r0, r0, #15
 802664e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8026652:	eb05 0e00 	add.w	lr, r5, r0
 8026656:	5c28      	ldrb	r0, [r5, r0]
 8026658:	f804 0c03 	strb.w	r0, [r4, #-3]
 802665c:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8026660:	f804 0c02 	strb.w	r0, [r4, #-2]
 8026664:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8026668:	f804 0c01 	strb.w	r0, [r4, #-1]
 802666c:	e7d2      	b.n	8026614 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 802666e:	4b04      	ldr	r3, [pc, #16]	; (8026680 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 8026670:	6818      	ldr	r0, [r3, #0]
 8026672:	6803      	ldr	r3, [r0, #0]
 8026674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026676:	4798      	blx	r3
 8026678:	b00b      	add	sp, #44	; 0x2c
 802667a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802667e:	bf00      	nop
 8026680:	24006d38 	.word	0x24006d38
 8026684:	24006d32 	.word	0x24006d32

08026688 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>:
 8026688:	b530      	push	{r4, r5, lr}
 802668a:	f89d 000c 	ldrb.w	r0, [sp, #12]
 802668e:	780d      	ldrb	r5, [r1, #0]
 8026690:	28ff      	cmp	r0, #255	; 0xff
 8026692:	d107      	bne.n	80266a4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 8026694:	2bff      	cmp	r3, #255	; 0xff
 8026696:	d105      	bne.n	80266a4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 8026698:	7015      	strb	r5, [r2, #0]
 802669a:	784b      	ldrb	r3, [r1, #1]
 802669c:	7053      	strb	r3, [r2, #1]
 802669e:	788b      	ldrb	r3, [r1, #2]
 80266a0:	7093      	strb	r3, [r2, #2]
 80266a2:	bd30      	pop	{r4, r5, pc}
 80266a4:	fb10 f003 	smulbb	r0, r0, r3
 80266a8:	b283      	uxth	r3, r0
 80266aa:	1c58      	adds	r0, r3, #1
 80266ac:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80266b0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80266b4:	b284      	uxth	r4, r0
 80266b6:	43c0      	mvns	r0, r0
 80266b8:	fb15 f504 	smulbb	r5, r5, r4
 80266bc:	b2c3      	uxtb	r3, r0
 80266be:	7810      	ldrb	r0, [r2, #0]
 80266c0:	fb00 5003 	mla	r0, r0, r3, r5
 80266c4:	b280      	uxth	r0, r0
 80266c6:	1c45      	adds	r5, r0, #1
 80266c8:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80266cc:	7855      	ldrb	r5, [r2, #1]
 80266ce:	fb15 f503 	smulbb	r5, r5, r3
 80266d2:	1200      	asrs	r0, r0, #8
 80266d4:	7010      	strb	r0, [r2, #0]
 80266d6:	7848      	ldrb	r0, [r1, #1]
 80266d8:	fb00 5004 	mla	r0, r0, r4, r5
 80266dc:	b280      	uxth	r0, r0
 80266de:	1c45      	adds	r5, r0, #1
 80266e0:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80266e4:	1200      	asrs	r0, r0, #8
 80266e6:	7050      	strb	r0, [r2, #1]
 80266e8:	7888      	ldrb	r0, [r1, #2]
 80266ea:	7891      	ldrb	r1, [r2, #2]
 80266ec:	fb11 f303 	smulbb	r3, r1, r3
 80266f0:	fb00 3304 	mla	r3, r0, r4, r3
 80266f4:	b29b      	uxth	r3, r3
 80266f6:	1c59      	adds	r1, r3, #1
 80266f8:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80266fc:	121b      	asrs	r3, r3, #8
 80266fe:	e7cf      	b.n	80266a0 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x18>

08026700 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8026700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026704:	461d      	mov	r5, r3
 8026706:	b08f      	sub	sp, #60	; 0x3c
 8026708:	460c      	mov	r4, r1
 802670a:	4616      	mov	r6, r2
 802670c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802670e:	4680      	mov	r8, r0
 8026710:	6869      	ldr	r1, [r5, #4]
 8026712:	aa0a      	add	r2, sp, #40	; 0x28
 8026714:	6828      	ldr	r0, [r5, #0]
 8026716:	3604      	adds	r6, #4
 8026718:	f89d 9064 	ldrb.w	r9, [sp, #100]	; 0x64
 802671c:	4f57      	ldr	r7, [pc, #348]	; (802687c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>)
 802671e:	c203      	stmia	r2!, {r0, r1}
 8026720:	6818      	ldr	r0, [r3, #0]
 8026722:	aa0c      	add	r2, sp, #48	; 0x30
 8026724:	6859      	ldr	r1, [r3, #4]
 8026726:	c203      	stmia	r2!, {r0, r1}
 8026728:	a80a      	add	r0, sp, #40	; 0x28
 802672a:	f7f4 f88f 	bl	801a84c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802672e:	4629      	mov	r1, r5
 8026730:	a80c      	add	r0, sp, #48	; 0x30
 8026732:	2502      	movs	r5, #2
 8026734:	f7f4 f8b2 	bl	801a89c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8026738:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 802673c:	f9bd a036 	ldrsh.w	sl, [sp, #54]	; 0x36
 8026740:	f002 0301 	and.w	r3, r2, #1
 8026744:	f9bd b034 	ldrsh.w	fp, [sp, #52]	; 0x34
 8026748:	9304      	str	r3, [sp, #16]
 802674a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 802674e:	f003 0101 	and.w	r1, r3, #1
 8026752:	9103      	str	r1, [sp, #12]
 8026754:	9803      	ldr	r0, [sp, #12]
 8026756:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 802675a:	4403      	add	r3, r0
 802675c:	6838      	ldr	r0, [r7, #0]
 802675e:	fb01 2303 	mla	r3, r1, r3, r2
 8026762:	fb93 f3f5 	sdiv	r3, r3, r5
 8026766:	18e5      	adds	r5, r4, r3
 8026768:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 802676c:	441a      	add	r2, r3
 802676e:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8026772:	4419      	add	r1, r3
 8026774:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8026778:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
 802677c:	6803      	ldr	r3, [r0, #0]
 802677e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026780:	4798      	blx	r3
 8026782:	4a3f      	ldr	r2, [pc, #252]	; (8026880 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x180>)
 8026784:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	; 0x32
 8026788:	8813      	ldrh	r3, [r2, #0]
 802678a:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 802678e:	9207      	str	r2, [sp, #28]
 8026790:	fb03 1404 	mla	r4, r3, r4, r1
 8026794:	fb0a f303 	mul.w	r3, sl, r3
 8026798:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802679c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80267a0:	4404      	add	r4, r0
 80267a2:	18e3      	adds	r3, r4, r3
 80267a4:	e9cd 3705 	strd	r3, r7, [sp, #20]
 80267a8:	9b05      	ldr	r3, [sp, #20]
 80267aa:	429c      	cmp	r4, r3
 80267ac:	d25d      	bcs.n	802686a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16a>
 80267ae:	9b04      	ldr	r3, [sp, #16]
 80267b0:	2b00      	cmp	r3, #0
 80267b2:	d037      	beq.n	8026824 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 80267b4:	782b      	ldrb	r3, [r5, #0]
 80267b6:	1c6f      	adds	r7, r5, #1
 80267b8:	f003 030f 	and.w	r3, r3, #15
 80267bc:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80267c0:	9309      	str	r3, [sp, #36]	; 0x24
 80267c2:	0e1b      	lsrs	r3, r3, #24
 80267c4:	d006      	beq.n	80267d4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd4>
 80267c6:	9300      	str	r3, [sp, #0]
 80267c8:	4622      	mov	r2, r4
 80267ca:	464b      	mov	r3, r9
 80267cc:	a909      	add	r1, sp, #36	; 0x24
 80267ce:	4640      	mov	r0, r8
 80267d0:	f7ff ff5a 	bl	8026688 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 80267d4:	3403      	adds	r4, #3
 80267d6:	f10b 3aff 	add.w	sl, fp, #4294967295
 80267da:	f1ba 0f01 	cmp.w	sl, #1
 80267de:	dd24      	ble.n	802682a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12a>
 80267e0:	783b      	ldrb	r3, [r7, #0]
 80267e2:	091b      	lsrs	r3, r3, #4
 80267e4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80267e8:	9308      	str	r3, [sp, #32]
 80267ea:	0e1b      	lsrs	r3, r3, #24
 80267ec:	d006      	beq.n	80267fc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 80267ee:	9300      	str	r3, [sp, #0]
 80267f0:	4622      	mov	r2, r4
 80267f2:	464b      	mov	r3, r9
 80267f4:	a908      	add	r1, sp, #32
 80267f6:	4640      	mov	r0, r8
 80267f8:	f7ff ff46 	bl	8026688 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 80267fc:	f817 3b01 	ldrb.w	r3, [r7], #1
 8026800:	f003 030f 	and.w	r3, r3, #15
 8026804:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8026808:	9309      	str	r3, [sp, #36]	; 0x24
 802680a:	0e1b      	lsrs	r3, r3, #24
 802680c:	d006      	beq.n	802681c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 802680e:	9300      	str	r3, [sp, #0]
 8026810:	1ce2      	adds	r2, r4, #3
 8026812:	464b      	mov	r3, r9
 8026814:	a909      	add	r1, sp, #36	; 0x24
 8026816:	4640      	mov	r0, r8
 8026818:	f7ff ff36 	bl	8026688 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 802681c:	3406      	adds	r4, #6
 802681e:	f1aa 0a02 	sub.w	sl, sl, #2
 8026822:	e7da      	b.n	80267da <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 8026824:	462f      	mov	r7, r5
 8026826:	46da      	mov	sl, fp
 8026828:	e7d7      	b.n	80267da <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 802682a:	d10e      	bne.n	802684a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x14a>
 802682c:	783b      	ldrb	r3, [r7, #0]
 802682e:	091b      	lsrs	r3, r3, #4
 8026830:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8026834:	9309      	str	r3, [sp, #36]	; 0x24
 8026836:	0e1b      	lsrs	r3, r3, #24
 8026838:	d006      	beq.n	8026848 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x148>
 802683a:	9300      	str	r3, [sp, #0]
 802683c:	4622      	mov	r2, r4
 802683e:	464b      	mov	r3, r9
 8026840:	a909      	add	r1, sp, #36	; 0x24
 8026842:	4640      	mov	r0, r8
 8026844:	f7ff ff20 	bl	8026688 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8026848:	3403      	adds	r4, #3
 802684a:	9b07      	ldr	r3, [sp, #28]
 802684c:	9a03      	ldr	r2, [sp, #12]
 802684e:	881b      	ldrh	r3, [r3, #0]
 8026850:	eba3 030b 	sub.w	r3, r3, fp
 8026854:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8026858:	441c      	add	r4, r3
 802685a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 802685e:	4413      	add	r3, r2
 8026860:	2202      	movs	r2, #2
 8026862:	fb93 f3f2 	sdiv	r3, r3, r2
 8026866:	441d      	add	r5, r3
 8026868:	e79e      	b.n	80267a8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa8>
 802686a:	9b06      	ldr	r3, [sp, #24]
 802686c:	6818      	ldr	r0, [r3, #0]
 802686e:	6803      	ldr	r3, [r0, #0]
 8026870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026872:	4798      	blx	r3
 8026874:	b00f      	add	sp, #60	; 0x3c
 8026876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802687a:	bf00      	nop
 802687c:	24006d38 	.word	0x24006d38
 8026880:	24006d32 	.word	0x24006d32

08026884 <CRC_Lock>:
 8026884:	4a20      	ldr	r2, [pc, #128]	; (8026908 <CRC_Lock+0x84>)
 8026886:	b530      	push	{r4, r5, lr}
 8026888:	6813      	ldr	r3, [r2, #0]
 802688a:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 802688e:	f24c 2540 	movw	r5, #49728	; 0xc240
 8026892:	f023 0301 	bic.w	r3, r3, #1
 8026896:	6013      	str	r3, [r2, #0]
 8026898:	4b1c      	ldr	r3, [pc, #112]	; (802690c <CRC_Lock+0x88>)
 802689a:	681a      	ldr	r2, [r3, #0]
 802689c:	4022      	ands	r2, r4
 802689e:	42aa      	cmp	r2, r5
 80268a0:	d005      	beq.n	80268ae <CRC_Lock+0x2a>
 80268a2:	681b      	ldr	r3, [r3, #0]
 80268a4:	f24c 2270 	movw	r2, #49776	; 0xc270
 80268a8:	4023      	ands	r3, r4
 80268aa:	4293      	cmp	r3, r2
 80268ac:	d124      	bne.n	80268f8 <CRC_Lock+0x74>
 80268ae:	4b18      	ldr	r3, [pc, #96]	; (8026910 <CRC_Lock+0x8c>)
 80268b0:	681b      	ldr	r3, [r3, #0]
 80268b2:	bb0b      	cbnz	r3, 80268f8 <CRC_Lock+0x74>
 80268b4:	4b17      	ldr	r3, [pc, #92]	; (8026914 <CRC_Lock+0x90>)
 80268b6:	681a      	ldr	r2, [r3, #0]
 80268b8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80268bc:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 80268c0:	d00d      	beq.n	80268de <CRC_Lock+0x5a>
 80268c2:	681a      	ldr	r2, [r3, #0]
 80268c4:	f240 4483 	movw	r4, #1155	; 0x483
 80268c8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80268cc:	42a2      	cmp	r2, r4
 80268ce:	d006      	beq.n	80268de <CRC_Lock+0x5a>
 80268d0:	681b      	ldr	r3, [r3, #0]
 80268d2:	f240 4285 	movw	r2, #1157	; 0x485
 80268d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80268da:	4293      	cmp	r3, r2
 80268dc:	d10c      	bne.n	80268f8 <CRC_Lock+0x74>
 80268de:	4b0e      	ldr	r3, [pc, #56]	; (8026918 <CRC_Lock+0x94>)
 80268e0:	2201      	movs	r2, #1
 80268e2:	601a      	str	r2, [r3, #0]
 80268e4:	681a      	ldr	r2, [r3, #0]
 80268e6:	2a00      	cmp	r2, #0
 80268e8:	d1fc      	bne.n	80268e4 <CRC_Lock+0x60>
 80268ea:	4b0c      	ldr	r3, [pc, #48]	; (802691c <CRC_Lock+0x98>)
 80268ec:	6018      	str	r0, [r3, #0]
 80268ee:	6818      	ldr	r0, [r3, #0]
 80268f0:	1a43      	subs	r3, r0, r1
 80268f2:	4258      	negs	r0, r3
 80268f4:	4158      	adcs	r0, r3
 80268f6:	bd30      	pop	{r4, r5, pc}
 80268f8:	4b09      	ldr	r3, [pc, #36]	; (8026920 <CRC_Lock+0x9c>)
 80268fa:	2201      	movs	r2, #1
 80268fc:	601a      	str	r2, [r3, #0]
 80268fe:	681a      	ldr	r2, [r3, #0]
 8026900:	2a00      	cmp	r2, #0
 8026902:	d1fc      	bne.n	80268fe <CRC_Lock+0x7a>
 8026904:	4b07      	ldr	r3, [pc, #28]	; (8026924 <CRC_Lock+0xa0>)
 8026906:	e7f1      	b.n	80268ec <CRC_Lock+0x68>
 8026908:	e0002000 	.word	0xe0002000
 802690c:	e000ed00 	.word	0xe000ed00
 8026910:	e0042000 	.word	0xe0042000
 8026914:	5c001000 	.word	0x5c001000
 8026918:	58024c08 	.word	0x58024c08
 802691c:	58024c00 	.word	0x58024c00
 8026920:	40023008 	.word	0x40023008
 8026924:	40023000 	.word	0x40023000

08026928 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8026928:	6101      	str	r1, [r0, #16]
 802692a:	4770      	bx	lr

0802692c <_ZN8touchgfx8Gestures4tickEv>:
 802692c:	7b83      	ldrb	r3, [r0, #14]
 802692e:	b14b      	cbz	r3, 8026944 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8026930:	8903      	ldrh	r3, [r0, #8]
 8026932:	3301      	adds	r3, #1
 8026934:	b29b      	uxth	r3, r3
 8026936:	2b07      	cmp	r3, #7
 8026938:	8103      	strh	r3, [r0, #8]
 802693a:	bf81      	itttt	hi
 802693c:	2300      	movhi	r3, #0
 802693e:	8143      	strhhi	r3, [r0, #10]
 8026940:	8183      	strhhi	r3, [r0, #12]
 8026942:	7383      	strbhi	r3, [r0, #14]
 8026944:	4770      	bx	lr
	...

08026948 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8026948:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802694c:	4698      	mov	r8, r3
 802694e:	8883      	ldrh	r3, [r0, #4]
 8026950:	4604      	mov	r4, r0
 8026952:	4617      	mov	r7, r2
 8026954:	f8ad 3006 	strh.w	r3, [sp, #6]
 8026958:	eba8 0303 	sub.w	r3, r8, r3
 802695c:	4a19      	ldr	r2, [pc, #100]	; (80269c4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 802695e:	460e      	mov	r6, r1
 8026960:	b21b      	sxth	r3, r3
 8026962:	88c1      	ldrh	r1, [r0, #6]
 8026964:	9200      	str	r2, [sp, #0]
 8026966:	2000      	movs	r0, #0
 8026968:	2b00      	cmp	r3, #0
 802696a:	8aa2      	ldrh	r2, [r4, #20]
 802696c:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8026970:	bfb8      	it	lt
 8026972:	425b      	neglt	r3, r3
 8026974:	f88d 0004 	strb.w	r0, [sp, #4]
 8026978:	f8ad 1008 	strh.w	r1, [sp, #8]
 802697c:	b21b      	sxth	r3, r3
 802697e:	f8ad 800a 	strh.w	r8, [sp, #10]
 8026982:	f8ad 500c 	strh.w	r5, [sp, #12]
 8026986:	4293      	cmp	r3, r2
 8026988:	dc07      	bgt.n	802699a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 802698a:	1a69      	subs	r1, r5, r1
 802698c:	b209      	sxth	r1, r1
 802698e:	2900      	cmp	r1, #0
 8026990:	bfb8      	it	lt
 8026992:	4249      	neglt	r1, r1
 8026994:	b209      	sxth	r1, r1
 8026996:	428a      	cmp	r2, r1
 8026998:	da10      	bge.n	80269bc <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 802699a:	6920      	ldr	r0, [r4, #16]
 802699c:	4669      	mov	r1, sp
 802699e:	eba8 0606 	sub.w	r6, r8, r6
 80269a2:	1bef      	subs	r7, r5, r7
 80269a4:	6803      	ldr	r3, [r0, #0]
 80269a6:	685b      	ldr	r3, [r3, #4]
 80269a8:	4798      	blx	r3
 80269aa:	2300      	movs	r3, #0
 80269ac:	2001      	movs	r0, #1
 80269ae:	8166      	strh	r6, [r4, #10]
 80269b0:	8123      	strh	r3, [r4, #8]
 80269b2:	81a7      	strh	r7, [r4, #12]
 80269b4:	f8a4 8004 	strh.w	r8, [r4, #4]
 80269b8:	80e5      	strh	r5, [r4, #6]
 80269ba:	73a0      	strb	r0, [r4, #14]
 80269bc:	b004      	add	sp, #16
 80269be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80269c2:	bf00      	nop
 80269c4:	080293d0 	.word	0x080293d0

080269c8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 80269c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80269ca:	461e      	mov	r6, r3
 80269cc:	1e4b      	subs	r3, r1, #1
 80269ce:	b085      	sub	sp, #20
 80269d0:	4604      	mov	r4, r0
 80269d2:	2b01      	cmp	r3, #1
 80269d4:	460d      	mov	r5, r1
 80269d6:	4617      	mov	r7, r2
 80269d8:	d84b      	bhi.n	8026a72 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 80269da:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80269de:	1cd3      	adds	r3, r2, #3
 80269e0:	b29b      	uxth	r3, r3
 80269e2:	2b06      	cmp	r3, #6
 80269e4:	d916      	bls.n	8026a14 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 80269e6:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8026a88 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80269ea:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80269ee:	f8cd c004 	str.w	ip, [sp, #4]
 80269f2:	f04f 0c00 	mov.w	ip, #0
 80269f6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80269fa:	6900      	ldr	r0, [r0, #16]
 80269fc:	f8ad 100c 	strh.w	r1, [sp, #12]
 8026a00:	a901      	add	r1, sp, #4
 8026a02:	f88d c008 	strb.w	ip, [sp, #8]
 8026a06:	f8ad 200a 	strh.w	r2, [sp, #10]
 8026a0a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8026a0e:	6803      	ldr	r3, [r0, #0]
 8026a10:	689b      	ldr	r3, [r3, #8]
 8026a12:	4798      	blx	r3
 8026a14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8026a18:	1cd3      	adds	r3, r2, #3
 8026a1a:	b29b      	uxth	r3, r3
 8026a1c:	2b06      	cmp	r3, #6
 8026a1e:	d916      	bls.n	8026a4e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8026a20:	f8df c064 	ldr.w	ip, [pc, #100]	; 8026a88 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8026a24:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8026a28:	f8cd c004 	str.w	ip, [sp, #4]
 8026a2c:	f04f 0c01 	mov.w	ip, #1
 8026a30:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8026a34:	6920      	ldr	r0, [r4, #16]
 8026a36:	f8ad 100c 	strh.w	r1, [sp, #12]
 8026a3a:	a901      	add	r1, sp, #4
 8026a3c:	f88d c008 	strb.w	ip, [sp, #8]
 8026a40:	f8ad 200a 	strh.w	r2, [sp, #10]
 8026a44:	f8ad 300e 	strh.w	r3, [sp, #14]
 8026a48:	6803      	ldr	r3, [r0, #0]
 8026a4a:	689b      	ldr	r3, [r3, #8]
 8026a4c:	4798      	blx	r3
 8026a4e:	4b0d      	ldr	r3, [pc, #52]	; (8026a84 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8026a50:	a901      	add	r1, sp, #4
 8026a52:	6920      	ldr	r0, [r4, #16]
 8026a54:	9301      	str	r3, [sp, #4]
 8026a56:	2300      	movs	r3, #0
 8026a58:	f88d 5008 	strb.w	r5, [sp, #8]
 8026a5c:	f8ad 700a 	strh.w	r7, [sp, #10]
 8026a60:	f8ad 600c 	strh.w	r6, [sp, #12]
 8026a64:	f8ad 300e 	strh.w	r3, [sp, #14]
 8026a68:	6803      	ldr	r3, [r0, #0]
 8026a6a:	681b      	ldr	r3, [r3, #0]
 8026a6c:	4798      	blx	r3
 8026a6e:	b005      	add	sp, #20
 8026a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026a72:	2900      	cmp	r1, #0
 8026a74:	d1eb      	bne.n	8026a4e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8026a76:	80a2      	strh	r2, [r4, #4]
 8026a78:	80c6      	strh	r6, [r0, #6]
 8026a7a:	60a1      	str	r1, [r4, #8]
 8026a7c:	81a1      	strh	r1, [r4, #12]
 8026a7e:	73a1      	strb	r1, [r4, #14]
 8026a80:	e7e5      	b.n	8026a4e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8026a82:	bf00      	nop
 8026a84:	080293bc 	.word	0x080293bc
 8026a88:	080293e4 	.word	0x080293e4

08026a8c <__aeabi_atexit>:
 8026a8c:	460b      	mov	r3, r1
 8026a8e:	4601      	mov	r1, r0
 8026a90:	4618      	mov	r0, r3
 8026a92:	f000 b90f 	b.w	8026cb4 <__cxa_atexit>

08026a96 <_ZdlPvj>:
 8026a96:	f000 b812 	b.w	8026abe <_ZdlPv>

08026a9a <__cxa_guard_acquire>:
 8026a9a:	6803      	ldr	r3, [r0, #0]
 8026a9c:	07db      	lsls	r3, r3, #31
 8026a9e:	d406      	bmi.n	8026aae <__cxa_guard_acquire+0x14>
 8026aa0:	7843      	ldrb	r3, [r0, #1]
 8026aa2:	b103      	cbz	r3, 8026aa6 <__cxa_guard_acquire+0xc>
 8026aa4:	deff      	udf	#255	; 0xff
 8026aa6:	2301      	movs	r3, #1
 8026aa8:	7043      	strb	r3, [r0, #1]
 8026aaa:	4618      	mov	r0, r3
 8026aac:	4770      	bx	lr
 8026aae:	2000      	movs	r0, #0
 8026ab0:	4770      	bx	lr

08026ab2 <__cxa_guard_release>:
 8026ab2:	2301      	movs	r3, #1
 8026ab4:	6003      	str	r3, [r0, #0]
 8026ab6:	4770      	bx	lr

08026ab8 <__cxa_pure_virtual>:
 8026ab8:	b508      	push	{r3, lr}
 8026aba:	f000 f80f 	bl	8026adc <_ZSt9terminatev>

08026abe <_ZdlPv>:
 8026abe:	f000 b845 	b.w	8026b4c <free>

08026ac2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8026ac2:	b508      	push	{r3, lr}
 8026ac4:	4780      	blx	r0
 8026ac6:	f000 f80e 	bl	8026ae6 <abort>
	...

08026acc <_ZSt13get_terminatev>:
 8026acc:	4b02      	ldr	r3, [pc, #8]	; (8026ad8 <_ZSt13get_terminatev+0xc>)
 8026ace:	6818      	ldr	r0, [r3, #0]
 8026ad0:	f3bf 8f5b 	dmb	ish
 8026ad4:	4770      	bx	lr
 8026ad6:	bf00      	nop
 8026ad8:	240000b0 	.word	0x240000b0

08026adc <_ZSt9terminatev>:
 8026adc:	b508      	push	{r3, lr}
 8026ade:	f7ff fff5 	bl	8026acc <_ZSt13get_terminatev>
 8026ae2:	f7ff ffee 	bl	8026ac2 <_ZN10__cxxabiv111__terminateEPFvvE>

08026ae6 <abort>:
 8026ae6:	b508      	push	{r3, lr}
 8026ae8:	2006      	movs	r0, #6
 8026aea:	f000 fa39 	bl	8026f60 <raise>
 8026aee:	2001      	movs	r0, #1
 8026af0:	f7da ff70 	bl	80019d4 <_exit>

08026af4 <__assert_func>:
 8026af4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8026af6:	4614      	mov	r4, r2
 8026af8:	461a      	mov	r2, r3
 8026afa:	4b09      	ldr	r3, [pc, #36]	; (8026b20 <__assert_func+0x2c>)
 8026afc:	681b      	ldr	r3, [r3, #0]
 8026afe:	4605      	mov	r5, r0
 8026b00:	68d8      	ldr	r0, [r3, #12]
 8026b02:	b14c      	cbz	r4, 8026b18 <__assert_func+0x24>
 8026b04:	4b07      	ldr	r3, [pc, #28]	; (8026b24 <__assert_func+0x30>)
 8026b06:	9100      	str	r1, [sp, #0]
 8026b08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8026b0c:	4906      	ldr	r1, [pc, #24]	; (8026b28 <__assert_func+0x34>)
 8026b0e:	462b      	mov	r3, r5
 8026b10:	f000 f982 	bl	8026e18 <fiprintf>
 8026b14:	f7ff ffe7 	bl	8026ae6 <abort>
 8026b18:	4b04      	ldr	r3, [pc, #16]	; (8026b2c <__assert_func+0x38>)
 8026b1a:	461c      	mov	r4, r3
 8026b1c:	e7f3      	b.n	8026b06 <__assert_func+0x12>
 8026b1e:	bf00      	nop
 8026b20:	2400010c 	.word	0x2400010c
 8026b24:	08029654 	.word	0x08029654
 8026b28:	08029661 	.word	0x08029661
 8026b2c:	0802968f 	.word	0x0802968f

08026b30 <atexit>:
 8026b30:	2300      	movs	r3, #0
 8026b32:	4601      	mov	r1, r0
 8026b34:	461a      	mov	r2, r3
 8026b36:	4618      	mov	r0, r3
 8026b38:	f000 bac0 	b.w	80270bc <__register_exitproc>

08026b3c <malloc>:
 8026b3c:	4b02      	ldr	r3, [pc, #8]	; (8026b48 <malloc+0xc>)
 8026b3e:	4601      	mov	r1, r0
 8026b40:	6818      	ldr	r0, [r3, #0]
 8026b42:	f000 b82b 	b.w	8026b9c <_malloc_r>
 8026b46:	bf00      	nop
 8026b48:	2400010c 	.word	0x2400010c

08026b4c <free>:
 8026b4c:	4b02      	ldr	r3, [pc, #8]	; (8026b58 <free+0xc>)
 8026b4e:	4601      	mov	r1, r0
 8026b50:	6818      	ldr	r0, [r3, #0]
 8026b52:	f000 bb11 	b.w	8027178 <_free_r>
 8026b56:	bf00      	nop
 8026b58:	2400010c 	.word	0x2400010c

08026b5c <sbrk_aligned>:
 8026b5c:	b570      	push	{r4, r5, r6, lr}
 8026b5e:	4e0e      	ldr	r6, [pc, #56]	; (8026b98 <sbrk_aligned+0x3c>)
 8026b60:	460c      	mov	r4, r1
 8026b62:	6831      	ldr	r1, [r6, #0]
 8026b64:	4605      	mov	r5, r0
 8026b66:	b911      	cbnz	r1, 8026b6e <sbrk_aligned+0x12>
 8026b68:	f000 fa4a 	bl	8027000 <_sbrk_r>
 8026b6c:	6030      	str	r0, [r6, #0]
 8026b6e:	4621      	mov	r1, r4
 8026b70:	4628      	mov	r0, r5
 8026b72:	f000 fa45 	bl	8027000 <_sbrk_r>
 8026b76:	1c43      	adds	r3, r0, #1
 8026b78:	d00a      	beq.n	8026b90 <sbrk_aligned+0x34>
 8026b7a:	1cc4      	adds	r4, r0, #3
 8026b7c:	f024 0403 	bic.w	r4, r4, #3
 8026b80:	42a0      	cmp	r0, r4
 8026b82:	d007      	beq.n	8026b94 <sbrk_aligned+0x38>
 8026b84:	1a21      	subs	r1, r4, r0
 8026b86:	4628      	mov	r0, r5
 8026b88:	f000 fa3a 	bl	8027000 <_sbrk_r>
 8026b8c:	3001      	adds	r0, #1
 8026b8e:	d101      	bne.n	8026b94 <sbrk_aligned+0x38>
 8026b90:	f04f 34ff 	mov.w	r4, #4294967295
 8026b94:	4620      	mov	r0, r4
 8026b96:	bd70      	pop	{r4, r5, r6, pc}
 8026b98:	24007668 	.word	0x24007668

08026b9c <_malloc_r>:
 8026b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026ba0:	1ccd      	adds	r5, r1, #3
 8026ba2:	f025 0503 	bic.w	r5, r5, #3
 8026ba6:	3508      	adds	r5, #8
 8026ba8:	2d0c      	cmp	r5, #12
 8026baa:	bf38      	it	cc
 8026bac:	250c      	movcc	r5, #12
 8026bae:	2d00      	cmp	r5, #0
 8026bb0:	4607      	mov	r7, r0
 8026bb2:	db01      	blt.n	8026bb8 <_malloc_r+0x1c>
 8026bb4:	42a9      	cmp	r1, r5
 8026bb6:	d905      	bls.n	8026bc4 <_malloc_r+0x28>
 8026bb8:	230c      	movs	r3, #12
 8026bba:	603b      	str	r3, [r7, #0]
 8026bbc:	2600      	movs	r6, #0
 8026bbe:	4630      	mov	r0, r6
 8026bc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026bc4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8026c98 <_malloc_r+0xfc>
 8026bc8:	f000 f868 	bl	8026c9c <__malloc_lock>
 8026bcc:	f8d8 3000 	ldr.w	r3, [r8]
 8026bd0:	461c      	mov	r4, r3
 8026bd2:	bb5c      	cbnz	r4, 8026c2c <_malloc_r+0x90>
 8026bd4:	4629      	mov	r1, r5
 8026bd6:	4638      	mov	r0, r7
 8026bd8:	f7ff ffc0 	bl	8026b5c <sbrk_aligned>
 8026bdc:	1c43      	adds	r3, r0, #1
 8026bde:	4604      	mov	r4, r0
 8026be0:	d155      	bne.n	8026c8e <_malloc_r+0xf2>
 8026be2:	f8d8 4000 	ldr.w	r4, [r8]
 8026be6:	4626      	mov	r6, r4
 8026be8:	2e00      	cmp	r6, #0
 8026bea:	d145      	bne.n	8026c78 <_malloc_r+0xdc>
 8026bec:	2c00      	cmp	r4, #0
 8026bee:	d048      	beq.n	8026c82 <_malloc_r+0xe6>
 8026bf0:	6823      	ldr	r3, [r4, #0]
 8026bf2:	4631      	mov	r1, r6
 8026bf4:	4638      	mov	r0, r7
 8026bf6:	eb04 0903 	add.w	r9, r4, r3
 8026bfa:	f000 fa01 	bl	8027000 <_sbrk_r>
 8026bfe:	4581      	cmp	r9, r0
 8026c00:	d13f      	bne.n	8026c82 <_malloc_r+0xe6>
 8026c02:	6821      	ldr	r1, [r4, #0]
 8026c04:	1a6d      	subs	r5, r5, r1
 8026c06:	4629      	mov	r1, r5
 8026c08:	4638      	mov	r0, r7
 8026c0a:	f7ff ffa7 	bl	8026b5c <sbrk_aligned>
 8026c0e:	3001      	adds	r0, #1
 8026c10:	d037      	beq.n	8026c82 <_malloc_r+0xe6>
 8026c12:	6823      	ldr	r3, [r4, #0]
 8026c14:	442b      	add	r3, r5
 8026c16:	6023      	str	r3, [r4, #0]
 8026c18:	f8d8 3000 	ldr.w	r3, [r8]
 8026c1c:	2b00      	cmp	r3, #0
 8026c1e:	d038      	beq.n	8026c92 <_malloc_r+0xf6>
 8026c20:	685a      	ldr	r2, [r3, #4]
 8026c22:	42a2      	cmp	r2, r4
 8026c24:	d12b      	bne.n	8026c7e <_malloc_r+0xe2>
 8026c26:	2200      	movs	r2, #0
 8026c28:	605a      	str	r2, [r3, #4]
 8026c2a:	e00f      	b.n	8026c4c <_malloc_r+0xb0>
 8026c2c:	6822      	ldr	r2, [r4, #0]
 8026c2e:	1b52      	subs	r2, r2, r5
 8026c30:	d41f      	bmi.n	8026c72 <_malloc_r+0xd6>
 8026c32:	2a0b      	cmp	r2, #11
 8026c34:	d917      	bls.n	8026c66 <_malloc_r+0xca>
 8026c36:	1961      	adds	r1, r4, r5
 8026c38:	42a3      	cmp	r3, r4
 8026c3a:	6025      	str	r5, [r4, #0]
 8026c3c:	bf18      	it	ne
 8026c3e:	6059      	strne	r1, [r3, #4]
 8026c40:	6863      	ldr	r3, [r4, #4]
 8026c42:	bf08      	it	eq
 8026c44:	f8c8 1000 	streq.w	r1, [r8]
 8026c48:	5162      	str	r2, [r4, r5]
 8026c4a:	604b      	str	r3, [r1, #4]
 8026c4c:	4638      	mov	r0, r7
 8026c4e:	f104 060b 	add.w	r6, r4, #11
 8026c52:	f000 f829 	bl	8026ca8 <__malloc_unlock>
 8026c56:	f026 0607 	bic.w	r6, r6, #7
 8026c5a:	1d23      	adds	r3, r4, #4
 8026c5c:	1af2      	subs	r2, r6, r3
 8026c5e:	d0ae      	beq.n	8026bbe <_malloc_r+0x22>
 8026c60:	1b9b      	subs	r3, r3, r6
 8026c62:	50a3      	str	r3, [r4, r2]
 8026c64:	e7ab      	b.n	8026bbe <_malloc_r+0x22>
 8026c66:	42a3      	cmp	r3, r4
 8026c68:	6862      	ldr	r2, [r4, #4]
 8026c6a:	d1dd      	bne.n	8026c28 <_malloc_r+0x8c>
 8026c6c:	f8c8 2000 	str.w	r2, [r8]
 8026c70:	e7ec      	b.n	8026c4c <_malloc_r+0xb0>
 8026c72:	4623      	mov	r3, r4
 8026c74:	6864      	ldr	r4, [r4, #4]
 8026c76:	e7ac      	b.n	8026bd2 <_malloc_r+0x36>
 8026c78:	4634      	mov	r4, r6
 8026c7a:	6876      	ldr	r6, [r6, #4]
 8026c7c:	e7b4      	b.n	8026be8 <_malloc_r+0x4c>
 8026c7e:	4613      	mov	r3, r2
 8026c80:	e7cc      	b.n	8026c1c <_malloc_r+0x80>
 8026c82:	230c      	movs	r3, #12
 8026c84:	603b      	str	r3, [r7, #0]
 8026c86:	4638      	mov	r0, r7
 8026c88:	f000 f80e 	bl	8026ca8 <__malloc_unlock>
 8026c8c:	e797      	b.n	8026bbe <_malloc_r+0x22>
 8026c8e:	6025      	str	r5, [r4, #0]
 8026c90:	e7dc      	b.n	8026c4c <_malloc_r+0xb0>
 8026c92:	605b      	str	r3, [r3, #4]
 8026c94:	deff      	udf	#255	; 0xff
 8026c96:	bf00      	nop
 8026c98:	24007664 	.word	0x24007664

08026c9c <__malloc_lock>:
 8026c9c:	4801      	ldr	r0, [pc, #4]	; (8026ca4 <__malloc_lock+0x8>)
 8026c9e:	f000 b9fc 	b.w	802709a <__retarget_lock_acquire_recursive>
 8026ca2:	bf00      	nop
 8026ca4:	240077ad 	.word	0x240077ad

08026ca8 <__malloc_unlock>:
 8026ca8:	4801      	ldr	r0, [pc, #4]	; (8026cb0 <__malloc_unlock+0x8>)
 8026caa:	f000 b9f7 	b.w	802709c <__retarget_lock_release_recursive>
 8026cae:	bf00      	nop
 8026cb0:	240077ad 	.word	0x240077ad

08026cb4 <__cxa_atexit>:
 8026cb4:	b510      	push	{r4, lr}
 8026cb6:	4c05      	ldr	r4, [pc, #20]	; (8026ccc <__cxa_atexit+0x18>)
 8026cb8:	4613      	mov	r3, r2
 8026cba:	b12c      	cbz	r4, 8026cc8 <__cxa_atexit+0x14>
 8026cbc:	460a      	mov	r2, r1
 8026cbe:	4601      	mov	r1, r0
 8026cc0:	2002      	movs	r0, #2
 8026cc2:	f000 f9fb 	bl	80270bc <__register_exitproc>
 8026cc6:	bd10      	pop	{r4, pc}
 8026cc8:	4620      	mov	r0, r4
 8026cca:	e7fc      	b.n	8026cc6 <__cxa_atexit+0x12>
 8026ccc:	080270bd 	.word	0x080270bd

08026cd0 <std>:
 8026cd0:	2300      	movs	r3, #0
 8026cd2:	b510      	push	{r4, lr}
 8026cd4:	4604      	mov	r4, r0
 8026cd6:	e9c0 3300 	strd	r3, r3, [r0]
 8026cda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8026cde:	6083      	str	r3, [r0, #8]
 8026ce0:	8181      	strh	r1, [r0, #12]
 8026ce2:	6643      	str	r3, [r0, #100]	; 0x64
 8026ce4:	81c2      	strh	r2, [r0, #14]
 8026ce6:	6183      	str	r3, [r0, #24]
 8026ce8:	4619      	mov	r1, r3
 8026cea:	2208      	movs	r2, #8
 8026cec:	305c      	adds	r0, #92	; 0x5c
 8026cee:	f000 f906 	bl	8026efe <memset>
 8026cf2:	4b0d      	ldr	r3, [pc, #52]	; (8026d28 <std+0x58>)
 8026cf4:	6263      	str	r3, [r4, #36]	; 0x24
 8026cf6:	4b0d      	ldr	r3, [pc, #52]	; (8026d2c <std+0x5c>)
 8026cf8:	62a3      	str	r3, [r4, #40]	; 0x28
 8026cfa:	4b0d      	ldr	r3, [pc, #52]	; (8026d30 <std+0x60>)
 8026cfc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8026cfe:	4b0d      	ldr	r3, [pc, #52]	; (8026d34 <std+0x64>)
 8026d00:	6323      	str	r3, [r4, #48]	; 0x30
 8026d02:	4b0d      	ldr	r3, [pc, #52]	; (8026d38 <std+0x68>)
 8026d04:	6224      	str	r4, [r4, #32]
 8026d06:	429c      	cmp	r4, r3
 8026d08:	d006      	beq.n	8026d18 <std+0x48>
 8026d0a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8026d0e:	4294      	cmp	r4, r2
 8026d10:	d002      	beq.n	8026d18 <std+0x48>
 8026d12:	33d0      	adds	r3, #208	; 0xd0
 8026d14:	429c      	cmp	r4, r3
 8026d16:	d105      	bne.n	8026d24 <std+0x54>
 8026d18:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8026d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026d20:	f000 b9ba 	b.w	8027098 <__retarget_lock_init_recursive>
 8026d24:	bd10      	pop	{r4, pc}
 8026d26:	bf00      	nop
 8026d28:	08026e79 	.word	0x08026e79
 8026d2c:	08026e9b 	.word	0x08026e9b
 8026d30:	08026ed3 	.word	0x08026ed3
 8026d34:	08026ef7 	.word	0x08026ef7
 8026d38:	2400766c 	.word	0x2400766c

08026d3c <stdio_exit_handler>:
 8026d3c:	4a02      	ldr	r2, [pc, #8]	; (8026d48 <stdio_exit_handler+0xc>)
 8026d3e:	4903      	ldr	r1, [pc, #12]	; (8026d4c <stdio_exit_handler+0x10>)
 8026d40:	4803      	ldr	r0, [pc, #12]	; (8026d50 <stdio_exit_handler+0x14>)
 8026d42:	f000 b87b 	b.w	8026e3c <_fwalk_sglue>
 8026d46:	bf00      	nop
 8026d48:	240000b4 	.word	0x240000b4
 8026d4c:	080278c5 	.word	0x080278c5
 8026d50:	240000c0 	.word	0x240000c0

08026d54 <cleanup_stdio>:
 8026d54:	6841      	ldr	r1, [r0, #4]
 8026d56:	4b0c      	ldr	r3, [pc, #48]	; (8026d88 <cleanup_stdio+0x34>)
 8026d58:	4299      	cmp	r1, r3
 8026d5a:	b510      	push	{r4, lr}
 8026d5c:	4604      	mov	r4, r0
 8026d5e:	d001      	beq.n	8026d64 <cleanup_stdio+0x10>
 8026d60:	f000 fdb0 	bl	80278c4 <_fflush_r>
 8026d64:	68a1      	ldr	r1, [r4, #8]
 8026d66:	4b09      	ldr	r3, [pc, #36]	; (8026d8c <cleanup_stdio+0x38>)
 8026d68:	4299      	cmp	r1, r3
 8026d6a:	d002      	beq.n	8026d72 <cleanup_stdio+0x1e>
 8026d6c:	4620      	mov	r0, r4
 8026d6e:	f000 fda9 	bl	80278c4 <_fflush_r>
 8026d72:	68e1      	ldr	r1, [r4, #12]
 8026d74:	4b06      	ldr	r3, [pc, #24]	; (8026d90 <cleanup_stdio+0x3c>)
 8026d76:	4299      	cmp	r1, r3
 8026d78:	d004      	beq.n	8026d84 <cleanup_stdio+0x30>
 8026d7a:	4620      	mov	r0, r4
 8026d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026d80:	f000 bda0 	b.w	80278c4 <_fflush_r>
 8026d84:	bd10      	pop	{r4, pc}
 8026d86:	bf00      	nop
 8026d88:	2400766c 	.word	0x2400766c
 8026d8c:	240076d4 	.word	0x240076d4
 8026d90:	2400773c 	.word	0x2400773c

08026d94 <global_stdio_init.part.0>:
 8026d94:	b510      	push	{r4, lr}
 8026d96:	4b0b      	ldr	r3, [pc, #44]	; (8026dc4 <global_stdio_init.part.0+0x30>)
 8026d98:	4c0b      	ldr	r4, [pc, #44]	; (8026dc8 <global_stdio_init.part.0+0x34>)
 8026d9a:	4a0c      	ldr	r2, [pc, #48]	; (8026dcc <global_stdio_init.part.0+0x38>)
 8026d9c:	601a      	str	r2, [r3, #0]
 8026d9e:	4620      	mov	r0, r4
 8026da0:	2200      	movs	r2, #0
 8026da2:	2104      	movs	r1, #4
 8026da4:	f7ff ff94 	bl	8026cd0 <std>
 8026da8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8026dac:	2201      	movs	r2, #1
 8026dae:	2109      	movs	r1, #9
 8026db0:	f7ff ff8e 	bl	8026cd0 <std>
 8026db4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8026db8:	2202      	movs	r2, #2
 8026dba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026dbe:	2112      	movs	r1, #18
 8026dc0:	f7ff bf86 	b.w	8026cd0 <std>
 8026dc4:	240077a4 	.word	0x240077a4
 8026dc8:	2400766c 	.word	0x2400766c
 8026dcc:	08026d3d 	.word	0x08026d3d

08026dd0 <__sfp_lock_acquire>:
 8026dd0:	4801      	ldr	r0, [pc, #4]	; (8026dd8 <__sfp_lock_acquire+0x8>)
 8026dd2:	f000 b962 	b.w	802709a <__retarget_lock_acquire_recursive>
 8026dd6:	bf00      	nop
 8026dd8:	240077ae 	.word	0x240077ae

08026ddc <__sfp_lock_release>:
 8026ddc:	4801      	ldr	r0, [pc, #4]	; (8026de4 <__sfp_lock_release+0x8>)
 8026dde:	f000 b95d 	b.w	802709c <__retarget_lock_release_recursive>
 8026de2:	bf00      	nop
 8026de4:	240077ae 	.word	0x240077ae

08026de8 <__sinit>:
 8026de8:	b510      	push	{r4, lr}
 8026dea:	4604      	mov	r4, r0
 8026dec:	f7ff fff0 	bl	8026dd0 <__sfp_lock_acquire>
 8026df0:	6a23      	ldr	r3, [r4, #32]
 8026df2:	b11b      	cbz	r3, 8026dfc <__sinit+0x14>
 8026df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026df8:	f7ff bff0 	b.w	8026ddc <__sfp_lock_release>
 8026dfc:	4b04      	ldr	r3, [pc, #16]	; (8026e10 <__sinit+0x28>)
 8026dfe:	6223      	str	r3, [r4, #32]
 8026e00:	4b04      	ldr	r3, [pc, #16]	; (8026e14 <__sinit+0x2c>)
 8026e02:	681b      	ldr	r3, [r3, #0]
 8026e04:	2b00      	cmp	r3, #0
 8026e06:	d1f5      	bne.n	8026df4 <__sinit+0xc>
 8026e08:	f7ff ffc4 	bl	8026d94 <global_stdio_init.part.0>
 8026e0c:	e7f2      	b.n	8026df4 <__sinit+0xc>
 8026e0e:	bf00      	nop
 8026e10:	08026d55 	.word	0x08026d55
 8026e14:	240077a4 	.word	0x240077a4

08026e18 <fiprintf>:
 8026e18:	b40e      	push	{r1, r2, r3}
 8026e1a:	b503      	push	{r0, r1, lr}
 8026e1c:	4601      	mov	r1, r0
 8026e1e:	ab03      	add	r3, sp, #12
 8026e20:	4805      	ldr	r0, [pc, #20]	; (8026e38 <fiprintf+0x20>)
 8026e22:	f853 2b04 	ldr.w	r2, [r3], #4
 8026e26:	6800      	ldr	r0, [r0, #0]
 8026e28:	9301      	str	r3, [sp, #4]
 8026e2a:	f000 fa1b 	bl	8027264 <_vfiprintf_r>
 8026e2e:	b002      	add	sp, #8
 8026e30:	f85d eb04 	ldr.w	lr, [sp], #4
 8026e34:	b003      	add	sp, #12
 8026e36:	4770      	bx	lr
 8026e38:	2400010c 	.word	0x2400010c

08026e3c <_fwalk_sglue>:
 8026e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026e40:	4607      	mov	r7, r0
 8026e42:	4688      	mov	r8, r1
 8026e44:	4614      	mov	r4, r2
 8026e46:	2600      	movs	r6, #0
 8026e48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8026e4c:	f1b9 0901 	subs.w	r9, r9, #1
 8026e50:	d505      	bpl.n	8026e5e <_fwalk_sglue+0x22>
 8026e52:	6824      	ldr	r4, [r4, #0]
 8026e54:	2c00      	cmp	r4, #0
 8026e56:	d1f7      	bne.n	8026e48 <_fwalk_sglue+0xc>
 8026e58:	4630      	mov	r0, r6
 8026e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026e5e:	89ab      	ldrh	r3, [r5, #12]
 8026e60:	2b01      	cmp	r3, #1
 8026e62:	d907      	bls.n	8026e74 <_fwalk_sglue+0x38>
 8026e64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8026e68:	3301      	adds	r3, #1
 8026e6a:	d003      	beq.n	8026e74 <_fwalk_sglue+0x38>
 8026e6c:	4629      	mov	r1, r5
 8026e6e:	4638      	mov	r0, r7
 8026e70:	47c0      	blx	r8
 8026e72:	4306      	orrs	r6, r0
 8026e74:	3568      	adds	r5, #104	; 0x68
 8026e76:	e7e9      	b.n	8026e4c <_fwalk_sglue+0x10>

08026e78 <__sread>:
 8026e78:	b510      	push	{r4, lr}
 8026e7a:	460c      	mov	r4, r1
 8026e7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026e80:	f000 f898 	bl	8026fb4 <_read_r>
 8026e84:	2800      	cmp	r0, #0
 8026e86:	bfab      	itete	ge
 8026e88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8026e8a:	89a3      	ldrhlt	r3, [r4, #12]
 8026e8c:	181b      	addge	r3, r3, r0
 8026e8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8026e92:	bfac      	ite	ge
 8026e94:	6563      	strge	r3, [r4, #84]	; 0x54
 8026e96:	81a3      	strhlt	r3, [r4, #12]
 8026e98:	bd10      	pop	{r4, pc}

08026e9a <__swrite>:
 8026e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026e9e:	461f      	mov	r7, r3
 8026ea0:	898b      	ldrh	r3, [r1, #12]
 8026ea2:	05db      	lsls	r3, r3, #23
 8026ea4:	4605      	mov	r5, r0
 8026ea6:	460c      	mov	r4, r1
 8026ea8:	4616      	mov	r6, r2
 8026eaa:	d505      	bpl.n	8026eb8 <__swrite+0x1e>
 8026eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026eb0:	2302      	movs	r3, #2
 8026eb2:	2200      	movs	r2, #0
 8026eb4:	f000 f86c 	bl	8026f90 <_lseek_r>
 8026eb8:	89a3      	ldrh	r3, [r4, #12]
 8026eba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026ebe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8026ec2:	81a3      	strh	r3, [r4, #12]
 8026ec4:	4632      	mov	r2, r6
 8026ec6:	463b      	mov	r3, r7
 8026ec8:	4628      	mov	r0, r5
 8026eca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8026ece:	f000 b8a7 	b.w	8027020 <_write_r>

08026ed2 <__sseek>:
 8026ed2:	b510      	push	{r4, lr}
 8026ed4:	460c      	mov	r4, r1
 8026ed6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026eda:	f000 f859 	bl	8026f90 <_lseek_r>
 8026ede:	1c43      	adds	r3, r0, #1
 8026ee0:	89a3      	ldrh	r3, [r4, #12]
 8026ee2:	bf15      	itete	ne
 8026ee4:	6560      	strne	r0, [r4, #84]	; 0x54
 8026ee6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8026eea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8026eee:	81a3      	strheq	r3, [r4, #12]
 8026ef0:	bf18      	it	ne
 8026ef2:	81a3      	strhne	r3, [r4, #12]
 8026ef4:	bd10      	pop	{r4, pc}

08026ef6 <__sclose>:
 8026ef6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026efa:	f000 b839 	b.w	8026f70 <_close_r>

08026efe <memset>:
 8026efe:	4402      	add	r2, r0
 8026f00:	4603      	mov	r3, r0
 8026f02:	4293      	cmp	r3, r2
 8026f04:	d100      	bne.n	8026f08 <memset+0xa>
 8026f06:	4770      	bx	lr
 8026f08:	f803 1b01 	strb.w	r1, [r3], #1
 8026f0c:	e7f9      	b.n	8026f02 <memset+0x4>

08026f0e <_raise_r>:
 8026f0e:	291f      	cmp	r1, #31
 8026f10:	b538      	push	{r3, r4, r5, lr}
 8026f12:	4604      	mov	r4, r0
 8026f14:	460d      	mov	r5, r1
 8026f16:	d904      	bls.n	8026f22 <_raise_r+0x14>
 8026f18:	2316      	movs	r3, #22
 8026f1a:	6003      	str	r3, [r0, #0]
 8026f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8026f20:	bd38      	pop	{r3, r4, r5, pc}
 8026f22:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8026f24:	b112      	cbz	r2, 8026f2c <_raise_r+0x1e>
 8026f26:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8026f2a:	b94b      	cbnz	r3, 8026f40 <_raise_r+0x32>
 8026f2c:	4620      	mov	r0, r4
 8026f2e:	f000 f865 	bl	8026ffc <_getpid_r>
 8026f32:	462a      	mov	r2, r5
 8026f34:	4601      	mov	r1, r0
 8026f36:	4620      	mov	r0, r4
 8026f38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8026f3c:	f000 b84c 	b.w	8026fd8 <_kill_r>
 8026f40:	2b01      	cmp	r3, #1
 8026f42:	d00a      	beq.n	8026f5a <_raise_r+0x4c>
 8026f44:	1c59      	adds	r1, r3, #1
 8026f46:	d103      	bne.n	8026f50 <_raise_r+0x42>
 8026f48:	2316      	movs	r3, #22
 8026f4a:	6003      	str	r3, [r0, #0]
 8026f4c:	2001      	movs	r0, #1
 8026f4e:	e7e7      	b.n	8026f20 <_raise_r+0x12>
 8026f50:	2400      	movs	r4, #0
 8026f52:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8026f56:	4628      	mov	r0, r5
 8026f58:	4798      	blx	r3
 8026f5a:	2000      	movs	r0, #0
 8026f5c:	e7e0      	b.n	8026f20 <_raise_r+0x12>
	...

08026f60 <raise>:
 8026f60:	4b02      	ldr	r3, [pc, #8]	; (8026f6c <raise+0xc>)
 8026f62:	4601      	mov	r1, r0
 8026f64:	6818      	ldr	r0, [r3, #0]
 8026f66:	f7ff bfd2 	b.w	8026f0e <_raise_r>
 8026f6a:	bf00      	nop
 8026f6c:	2400010c 	.word	0x2400010c

08026f70 <_close_r>:
 8026f70:	b538      	push	{r3, r4, r5, lr}
 8026f72:	4d06      	ldr	r5, [pc, #24]	; (8026f8c <_close_r+0x1c>)
 8026f74:	2300      	movs	r3, #0
 8026f76:	4604      	mov	r4, r0
 8026f78:	4608      	mov	r0, r1
 8026f7a:	602b      	str	r3, [r5, #0]
 8026f7c:	f7da fd6d 	bl	8001a5a <_close>
 8026f80:	1c43      	adds	r3, r0, #1
 8026f82:	d102      	bne.n	8026f8a <_close_r+0x1a>
 8026f84:	682b      	ldr	r3, [r5, #0]
 8026f86:	b103      	cbz	r3, 8026f8a <_close_r+0x1a>
 8026f88:	6023      	str	r3, [r4, #0]
 8026f8a:	bd38      	pop	{r3, r4, r5, pc}
 8026f8c:	240077a8 	.word	0x240077a8

08026f90 <_lseek_r>:
 8026f90:	b538      	push	{r3, r4, r5, lr}
 8026f92:	4d07      	ldr	r5, [pc, #28]	; (8026fb0 <_lseek_r+0x20>)
 8026f94:	4604      	mov	r4, r0
 8026f96:	4608      	mov	r0, r1
 8026f98:	4611      	mov	r1, r2
 8026f9a:	2200      	movs	r2, #0
 8026f9c:	602a      	str	r2, [r5, #0]
 8026f9e:	461a      	mov	r2, r3
 8026fa0:	f7da fd82 	bl	8001aa8 <_lseek>
 8026fa4:	1c43      	adds	r3, r0, #1
 8026fa6:	d102      	bne.n	8026fae <_lseek_r+0x1e>
 8026fa8:	682b      	ldr	r3, [r5, #0]
 8026faa:	b103      	cbz	r3, 8026fae <_lseek_r+0x1e>
 8026fac:	6023      	str	r3, [r4, #0]
 8026fae:	bd38      	pop	{r3, r4, r5, pc}
 8026fb0:	240077a8 	.word	0x240077a8

08026fb4 <_read_r>:
 8026fb4:	b538      	push	{r3, r4, r5, lr}
 8026fb6:	4d07      	ldr	r5, [pc, #28]	; (8026fd4 <_read_r+0x20>)
 8026fb8:	4604      	mov	r4, r0
 8026fba:	4608      	mov	r0, r1
 8026fbc:	4611      	mov	r1, r2
 8026fbe:	2200      	movs	r2, #0
 8026fc0:	602a      	str	r2, [r5, #0]
 8026fc2:	461a      	mov	r2, r3
 8026fc4:	f7da fd10 	bl	80019e8 <_read>
 8026fc8:	1c43      	adds	r3, r0, #1
 8026fca:	d102      	bne.n	8026fd2 <_read_r+0x1e>
 8026fcc:	682b      	ldr	r3, [r5, #0]
 8026fce:	b103      	cbz	r3, 8026fd2 <_read_r+0x1e>
 8026fd0:	6023      	str	r3, [r4, #0]
 8026fd2:	bd38      	pop	{r3, r4, r5, pc}
 8026fd4:	240077a8 	.word	0x240077a8

08026fd8 <_kill_r>:
 8026fd8:	b538      	push	{r3, r4, r5, lr}
 8026fda:	4d07      	ldr	r5, [pc, #28]	; (8026ff8 <_kill_r+0x20>)
 8026fdc:	2300      	movs	r3, #0
 8026fde:	4604      	mov	r4, r0
 8026fe0:	4608      	mov	r0, r1
 8026fe2:	4611      	mov	r1, r2
 8026fe4:	602b      	str	r3, [r5, #0]
 8026fe6:	f7da fce5 	bl	80019b4 <_kill>
 8026fea:	1c43      	adds	r3, r0, #1
 8026fec:	d102      	bne.n	8026ff4 <_kill_r+0x1c>
 8026fee:	682b      	ldr	r3, [r5, #0]
 8026ff0:	b103      	cbz	r3, 8026ff4 <_kill_r+0x1c>
 8026ff2:	6023      	str	r3, [r4, #0]
 8026ff4:	bd38      	pop	{r3, r4, r5, pc}
 8026ff6:	bf00      	nop
 8026ff8:	240077a8 	.word	0x240077a8

08026ffc <_getpid_r>:
 8026ffc:	f7da bcd2 	b.w	80019a4 <_getpid>

08027000 <_sbrk_r>:
 8027000:	b538      	push	{r3, r4, r5, lr}
 8027002:	4d06      	ldr	r5, [pc, #24]	; (802701c <_sbrk_r+0x1c>)
 8027004:	2300      	movs	r3, #0
 8027006:	4604      	mov	r4, r0
 8027008:	4608      	mov	r0, r1
 802700a:	602b      	str	r3, [r5, #0]
 802700c:	f7da fd5a 	bl	8001ac4 <_sbrk>
 8027010:	1c43      	adds	r3, r0, #1
 8027012:	d102      	bne.n	802701a <_sbrk_r+0x1a>
 8027014:	682b      	ldr	r3, [r5, #0]
 8027016:	b103      	cbz	r3, 802701a <_sbrk_r+0x1a>
 8027018:	6023      	str	r3, [r4, #0]
 802701a:	bd38      	pop	{r3, r4, r5, pc}
 802701c:	240077a8 	.word	0x240077a8

08027020 <_write_r>:
 8027020:	b538      	push	{r3, r4, r5, lr}
 8027022:	4d07      	ldr	r5, [pc, #28]	; (8027040 <_write_r+0x20>)
 8027024:	4604      	mov	r4, r0
 8027026:	4608      	mov	r0, r1
 8027028:	4611      	mov	r1, r2
 802702a:	2200      	movs	r2, #0
 802702c:	602a      	str	r2, [r5, #0]
 802702e:	461a      	mov	r2, r3
 8027030:	f7da fcf7 	bl	8001a22 <_write>
 8027034:	1c43      	adds	r3, r0, #1
 8027036:	d102      	bne.n	802703e <_write_r+0x1e>
 8027038:	682b      	ldr	r3, [r5, #0]
 802703a:	b103      	cbz	r3, 802703e <_write_r+0x1e>
 802703c:	6023      	str	r3, [r4, #0]
 802703e:	bd38      	pop	{r3, r4, r5, pc}
 8027040:	240077a8 	.word	0x240077a8

08027044 <__errno>:
 8027044:	4b01      	ldr	r3, [pc, #4]	; (802704c <__errno+0x8>)
 8027046:	6818      	ldr	r0, [r3, #0]
 8027048:	4770      	bx	lr
 802704a:	bf00      	nop
 802704c:	2400010c 	.word	0x2400010c

08027050 <__libc_init_array>:
 8027050:	b570      	push	{r4, r5, r6, lr}
 8027052:	4d0d      	ldr	r5, [pc, #52]	; (8027088 <__libc_init_array+0x38>)
 8027054:	4c0d      	ldr	r4, [pc, #52]	; (802708c <__libc_init_array+0x3c>)
 8027056:	1b64      	subs	r4, r4, r5
 8027058:	10a4      	asrs	r4, r4, #2
 802705a:	2600      	movs	r6, #0
 802705c:	42a6      	cmp	r6, r4
 802705e:	d109      	bne.n	8027074 <__libc_init_array+0x24>
 8027060:	4d0b      	ldr	r5, [pc, #44]	; (8027090 <__libc_init_array+0x40>)
 8027062:	4c0c      	ldr	r4, [pc, #48]	; (8027094 <__libc_init_array+0x44>)
 8027064:	f000 fd70 	bl	8027b48 <_init>
 8027068:	1b64      	subs	r4, r4, r5
 802706a:	10a4      	asrs	r4, r4, #2
 802706c:	2600      	movs	r6, #0
 802706e:	42a6      	cmp	r6, r4
 8027070:	d105      	bne.n	802707e <__libc_init_array+0x2e>
 8027072:	bd70      	pop	{r4, r5, r6, pc}
 8027074:	f855 3b04 	ldr.w	r3, [r5], #4
 8027078:	4798      	blx	r3
 802707a:	3601      	adds	r6, #1
 802707c:	e7ee      	b.n	802705c <__libc_init_array+0xc>
 802707e:	f855 3b04 	ldr.w	r3, [r5], #4
 8027082:	4798      	blx	r3
 8027084:	3601      	adds	r6, #1
 8027086:	e7f2      	b.n	802706e <__libc_init_array+0x1e>
 8027088:	080296ec 	.word	0x080296ec
 802708c:	080296ec 	.word	0x080296ec
 8027090:	080296ec 	.word	0x080296ec
 8027094:	08029700 	.word	0x08029700

08027098 <__retarget_lock_init_recursive>:
 8027098:	4770      	bx	lr

0802709a <__retarget_lock_acquire_recursive>:
 802709a:	4770      	bx	lr

0802709c <__retarget_lock_release_recursive>:
 802709c:	4770      	bx	lr

0802709e <memcpy>:
 802709e:	440a      	add	r2, r1
 80270a0:	4291      	cmp	r1, r2
 80270a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80270a6:	d100      	bne.n	80270aa <memcpy+0xc>
 80270a8:	4770      	bx	lr
 80270aa:	b510      	push	{r4, lr}
 80270ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80270b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80270b4:	4291      	cmp	r1, r2
 80270b6:	d1f9      	bne.n	80270ac <memcpy+0xe>
 80270b8:	bd10      	pop	{r4, pc}
	...

080270bc <__register_exitproc>:
 80270bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80270c0:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8027174 <__register_exitproc+0xb8>
 80270c4:	4606      	mov	r6, r0
 80270c6:	f8d8 0000 	ldr.w	r0, [r8]
 80270ca:	461f      	mov	r7, r3
 80270cc:	460d      	mov	r5, r1
 80270ce:	4691      	mov	r9, r2
 80270d0:	f7ff ffe3 	bl	802709a <__retarget_lock_acquire_recursive>
 80270d4:	4b23      	ldr	r3, [pc, #140]	; (8027164 <__register_exitproc+0xa8>)
 80270d6:	681c      	ldr	r4, [r3, #0]
 80270d8:	b934      	cbnz	r4, 80270e8 <__register_exitproc+0x2c>
 80270da:	4c23      	ldr	r4, [pc, #140]	; (8027168 <__register_exitproc+0xac>)
 80270dc:	601c      	str	r4, [r3, #0]
 80270de:	4b23      	ldr	r3, [pc, #140]	; (802716c <__register_exitproc+0xb0>)
 80270e0:	b113      	cbz	r3, 80270e8 <__register_exitproc+0x2c>
 80270e2:	681b      	ldr	r3, [r3, #0]
 80270e4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80270e8:	6863      	ldr	r3, [r4, #4]
 80270ea:	2b1f      	cmp	r3, #31
 80270ec:	dd07      	ble.n	80270fe <__register_exitproc+0x42>
 80270ee:	f8d8 0000 	ldr.w	r0, [r8]
 80270f2:	f7ff ffd3 	bl	802709c <__retarget_lock_release_recursive>
 80270f6:	f04f 30ff 	mov.w	r0, #4294967295
 80270fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80270fe:	b32e      	cbz	r6, 802714c <__register_exitproc+0x90>
 8027100:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8027104:	b968      	cbnz	r0, 8027122 <__register_exitproc+0x66>
 8027106:	4b1a      	ldr	r3, [pc, #104]	; (8027170 <__register_exitproc+0xb4>)
 8027108:	2b00      	cmp	r3, #0
 802710a:	d0f0      	beq.n	80270ee <__register_exitproc+0x32>
 802710c:	f44f 7084 	mov.w	r0, #264	; 0x108
 8027110:	f7ff fd14 	bl	8026b3c <malloc>
 8027114:	2800      	cmp	r0, #0
 8027116:	d0ea      	beq.n	80270ee <__register_exitproc+0x32>
 8027118:	2300      	movs	r3, #0
 802711a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802711e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8027122:	6863      	ldr	r3, [r4, #4]
 8027124:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8027128:	2201      	movs	r2, #1
 802712a:	409a      	lsls	r2, r3
 802712c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8027130:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8027134:	4313      	orrs	r3, r2
 8027136:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802713a:	2e02      	cmp	r6, #2
 802713c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8027140:	bf02      	ittt	eq
 8027142:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8027146:	4313      	orreq	r3, r2
 8027148:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 802714c:	6863      	ldr	r3, [r4, #4]
 802714e:	f8d8 0000 	ldr.w	r0, [r8]
 8027152:	1c5a      	adds	r2, r3, #1
 8027154:	3302      	adds	r3, #2
 8027156:	6062      	str	r2, [r4, #4]
 8027158:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 802715c:	f7ff ff9e 	bl	802709c <__retarget_lock_release_recursive>
 8027160:	2000      	movs	r0, #0
 8027162:	e7ca      	b.n	80270fa <__register_exitproc+0x3e>
 8027164:	2400783c 	.word	0x2400783c
 8027168:	240077b0 	.word	0x240077b0
 802716c:	08029690 	.word	0x08029690
 8027170:	08026b3d 	.word	0x08026b3d
 8027174:	24000110 	.word	0x24000110

08027178 <_free_r>:
 8027178:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802717a:	2900      	cmp	r1, #0
 802717c:	d044      	beq.n	8027208 <_free_r+0x90>
 802717e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8027182:	9001      	str	r0, [sp, #4]
 8027184:	2b00      	cmp	r3, #0
 8027186:	f1a1 0404 	sub.w	r4, r1, #4
 802718a:	bfb8      	it	lt
 802718c:	18e4      	addlt	r4, r4, r3
 802718e:	f7ff fd85 	bl	8026c9c <__malloc_lock>
 8027192:	4a1e      	ldr	r2, [pc, #120]	; (802720c <_free_r+0x94>)
 8027194:	9801      	ldr	r0, [sp, #4]
 8027196:	6813      	ldr	r3, [r2, #0]
 8027198:	b933      	cbnz	r3, 80271a8 <_free_r+0x30>
 802719a:	6063      	str	r3, [r4, #4]
 802719c:	6014      	str	r4, [r2, #0]
 802719e:	b003      	add	sp, #12
 80271a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80271a4:	f7ff bd80 	b.w	8026ca8 <__malloc_unlock>
 80271a8:	42a3      	cmp	r3, r4
 80271aa:	d908      	bls.n	80271be <_free_r+0x46>
 80271ac:	6825      	ldr	r5, [r4, #0]
 80271ae:	1961      	adds	r1, r4, r5
 80271b0:	428b      	cmp	r3, r1
 80271b2:	bf01      	itttt	eq
 80271b4:	6819      	ldreq	r1, [r3, #0]
 80271b6:	685b      	ldreq	r3, [r3, #4]
 80271b8:	1949      	addeq	r1, r1, r5
 80271ba:	6021      	streq	r1, [r4, #0]
 80271bc:	e7ed      	b.n	802719a <_free_r+0x22>
 80271be:	461a      	mov	r2, r3
 80271c0:	685b      	ldr	r3, [r3, #4]
 80271c2:	b10b      	cbz	r3, 80271c8 <_free_r+0x50>
 80271c4:	42a3      	cmp	r3, r4
 80271c6:	d9fa      	bls.n	80271be <_free_r+0x46>
 80271c8:	6811      	ldr	r1, [r2, #0]
 80271ca:	1855      	adds	r5, r2, r1
 80271cc:	42a5      	cmp	r5, r4
 80271ce:	d10b      	bne.n	80271e8 <_free_r+0x70>
 80271d0:	6824      	ldr	r4, [r4, #0]
 80271d2:	4421      	add	r1, r4
 80271d4:	1854      	adds	r4, r2, r1
 80271d6:	42a3      	cmp	r3, r4
 80271d8:	6011      	str	r1, [r2, #0]
 80271da:	d1e0      	bne.n	802719e <_free_r+0x26>
 80271dc:	681c      	ldr	r4, [r3, #0]
 80271de:	685b      	ldr	r3, [r3, #4]
 80271e0:	6053      	str	r3, [r2, #4]
 80271e2:	440c      	add	r4, r1
 80271e4:	6014      	str	r4, [r2, #0]
 80271e6:	e7da      	b.n	802719e <_free_r+0x26>
 80271e8:	d902      	bls.n	80271f0 <_free_r+0x78>
 80271ea:	230c      	movs	r3, #12
 80271ec:	6003      	str	r3, [r0, #0]
 80271ee:	e7d6      	b.n	802719e <_free_r+0x26>
 80271f0:	6825      	ldr	r5, [r4, #0]
 80271f2:	1961      	adds	r1, r4, r5
 80271f4:	428b      	cmp	r3, r1
 80271f6:	bf04      	itt	eq
 80271f8:	6819      	ldreq	r1, [r3, #0]
 80271fa:	685b      	ldreq	r3, [r3, #4]
 80271fc:	6063      	str	r3, [r4, #4]
 80271fe:	bf04      	itt	eq
 8027200:	1949      	addeq	r1, r1, r5
 8027202:	6021      	streq	r1, [r4, #0]
 8027204:	6054      	str	r4, [r2, #4]
 8027206:	e7ca      	b.n	802719e <_free_r+0x26>
 8027208:	b003      	add	sp, #12
 802720a:	bd30      	pop	{r4, r5, pc}
 802720c:	24007664 	.word	0x24007664

08027210 <__sfputc_r>:
 8027210:	6893      	ldr	r3, [r2, #8]
 8027212:	3b01      	subs	r3, #1
 8027214:	2b00      	cmp	r3, #0
 8027216:	b410      	push	{r4}
 8027218:	6093      	str	r3, [r2, #8]
 802721a:	da08      	bge.n	802722e <__sfputc_r+0x1e>
 802721c:	6994      	ldr	r4, [r2, #24]
 802721e:	42a3      	cmp	r3, r4
 8027220:	db01      	blt.n	8027226 <__sfputc_r+0x16>
 8027222:	290a      	cmp	r1, #10
 8027224:	d103      	bne.n	802722e <__sfputc_r+0x1e>
 8027226:	f85d 4b04 	ldr.w	r4, [sp], #4
 802722a:	f000 bb73 	b.w	8027914 <__swbuf_r>
 802722e:	6813      	ldr	r3, [r2, #0]
 8027230:	1c58      	adds	r0, r3, #1
 8027232:	6010      	str	r0, [r2, #0]
 8027234:	7019      	strb	r1, [r3, #0]
 8027236:	4608      	mov	r0, r1
 8027238:	f85d 4b04 	ldr.w	r4, [sp], #4
 802723c:	4770      	bx	lr

0802723e <__sfputs_r>:
 802723e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027240:	4606      	mov	r6, r0
 8027242:	460f      	mov	r7, r1
 8027244:	4614      	mov	r4, r2
 8027246:	18d5      	adds	r5, r2, r3
 8027248:	42ac      	cmp	r4, r5
 802724a:	d101      	bne.n	8027250 <__sfputs_r+0x12>
 802724c:	2000      	movs	r0, #0
 802724e:	e007      	b.n	8027260 <__sfputs_r+0x22>
 8027250:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027254:	463a      	mov	r2, r7
 8027256:	4630      	mov	r0, r6
 8027258:	f7ff ffda 	bl	8027210 <__sfputc_r>
 802725c:	1c43      	adds	r3, r0, #1
 802725e:	d1f3      	bne.n	8027248 <__sfputs_r+0xa>
 8027260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08027264 <_vfiprintf_r>:
 8027264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027268:	460d      	mov	r5, r1
 802726a:	b09d      	sub	sp, #116	; 0x74
 802726c:	4614      	mov	r4, r2
 802726e:	4698      	mov	r8, r3
 8027270:	4606      	mov	r6, r0
 8027272:	b118      	cbz	r0, 802727c <_vfiprintf_r+0x18>
 8027274:	6a03      	ldr	r3, [r0, #32]
 8027276:	b90b      	cbnz	r3, 802727c <_vfiprintf_r+0x18>
 8027278:	f7ff fdb6 	bl	8026de8 <__sinit>
 802727c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802727e:	07d9      	lsls	r1, r3, #31
 8027280:	d405      	bmi.n	802728e <_vfiprintf_r+0x2a>
 8027282:	89ab      	ldrh	r3, [r5, #12]
 8027284:	059a      	lsls	r2, r3, #22
 8027286:	d402      	bmi.n	802728e <_vfiprintf_r+0x2a>
 8027288:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802728a:	f7ff ff06 	bl	802709a <__retarget_lock_acquire_recursive>
 802728e:	89ab      	ldrh	r3, [r5, #12]
 8027290:	071b      	lsls	r3, r3, #28
 8027292:	d501      	bpl.n	8027298 <_vfiprintf_r+0x34>
 8027294:	692b      	ldr	r3, [r5, #16]
 8027296:	b99b      	cbnz	r3, 80272c0 <_vfiprintf_r+0x5c>
 8027298:	4629      	mov	r1, r5
 802729a:	4630      	mov	r0, r6
 802729c:	f000 fb78 	bl	8027990 <__swsetup_r>
 80272a0:	b170      	cbz	r0, 80272c0 <_vfiprintf_r+0x5c>
 80272a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80272a4:	07dc      	lsls	r4, r3, #31
 80272a6:	d504      	bpl.n	80272b2 <_vfiprintf_r+0x4e>
 80272a8:	f04f 30ff 	mov.w	r0, #4294967295
 80272ac:	b01d      	add	sp, #116	; 0x74
 80272ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80272b2:	89ab      	ldrh	r3, [r5, #12]
 80272b4:	0598      	lsls	r0, r3, #22
 80272b6:	d4f7      	bmi.n	80272a8 <_vfiprintf_r+0x44>
 80272b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80272ba:	f7ff feef 	bl	802709c <__retarget_lock_release_recursive>
 80272be:	e7f3      	b.n	80272a8 <_vfiprintf_r+0x44>
 80272c0:	2300      	movs	r3, #0
 80272c2:	9309      	str	r3, [sp, #36]	; 0x24
 80272c4:	2320      	movs	r3, #32
 80272c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80272ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80272ce:	2330      	movs	r3, #48	; 0x30
 80272d0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8027484 <_vfiprintf_r+0x220>
 80272d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80272d8:	f04f 0901 	mov.w	r9, #1
 80272dc:	4623      	mov	r3, r4
 80272de:	469a      	mov	sl, r3
 80272e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80272e4:	b10a      	cbz	r2, 80272ea <_vfiprintf_r+0x86>
 80272e6:	2a25      	cmp	r2, #37	; 0x25
 80272e8:	d1f9      	bne.n	80272de <_vfiprintf_r+0x7a>
 80272ea:	ebba 0b04 	subs.w	fp, sl, r4
 80272ee:	d00b      	beq.n	8027308 <_vfiprintf_r+0xa4>
 80272f0:	465b      	mov	r3, fp
 80272f2:	4622      	mov	r2, r4
 80272f4:	4629      	mov	r1, r5
 80272f6:	4630      	mov	r0, r6
 80272f8:	f7ff ffa1 	bl	802723e <__sfputs_r>
 80272fc:	3001      	adds	r0, #1
 80272fe:	f000 80a9 	beq.w	8027454 <_vfiprintf_r+0x1f0>
 8027302:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027304:	445a      	add	r2, fp
 8027306:	9209      	str	r2, [sp, #36]	; 0x24
 8027308:	f89a 3000 	ldrb.w	r3, [sl]
 802730c:	2b00      	cmp	r3, #0
 802730e:	f000 80a1 	beq.w	8027454 <_vfiprintf_r+0x1f0>
 8027312:	2300      	movs	r3, #0
 8027314:	f04f 32ff 	mov.w	r2, #4294967295
 8027318:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802731c:	f10a 0a01 	add.w	sl, sl, #1
 8027320:	9304      	str	r3, [sp, #16]
 8027322:	9307      	str	r3, [sp, #28]
 8027324:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8027328:	931a      	str	r3, [sp, #104]	; 0x68
 802732a:	4654      	mov	r4, sl
 802732c:	2205      	movs	r2, #5
 802732e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027332:	4854      	ldr	r0, [pc, #336]	; (8027484 <_vfiprintf_r+0x220>)
 8027334:	f7d8 ffe4 	bl	8000300 <memchr>
 8027338:	9a04      	ldr	r2, [sp, #16]
 802733a:	b9d8      	cbnz	r0, 8027374 <_vfiprintf_r+0x110>
 802733c:	06d1      	lsls	r1, r2, #27
 802733e:	bf44      	itt	mi
 8027340:	2320      	movmi	r3, #32
 8027342:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8027346:	0713      	lsls	r3, r2, #28
 8027348:	bf44      	itt	mi
 802734a:	232b      	movmi	r3, #43	; 0x2b
 802734c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8027350:	f89a 3000 	ldrb.w	r3, [sl]
 8027354:	2b2a      	cmp	r3, #42	; 0x2a
 8027356:	d015      	beq.n	8027384 <_vfiprintf_r+0x120>
 8027358:	9a07      	ldr	r2, [sp, #28]
 802735a:	4654      	mov	r4, sl
 802735c:	2000      	movs	r0, #0
 802735e:	f04f 0c0a 	mov.w	ip, #10
 8027362:	4621      	mov	r1, r4
 8027364:	f811 3b01 	ldrb.w	r3, [r1], #1
 8027368:	3b30      	subs	r3, #48	; 0x30
 802736a:	2b09      	cmp	r3, #9
 802736c:	d94d      	bls.n	802740a <_vfiprintf_r+0x1a6>
 802736e:	b1b0      	cbz	r0, 802739e <_vfiprintf_r+0x13a>
 8027370:	9207      	str	r2, [sp, #28]
 8027372:	e014      	b.n	802739e <_vfiprintf_r+0x13a>
 8027374:	eba0 0308 	sub.w	r3, r0, r8
 8027378:	fa09 f303 	lsl.w	r3, r9, r3
 802737c:	4313      	orrs	r3, r2
 802737e:	9304      	str	r3, [sp, #16]
 8027380:	46a2      	mov	sl, r4
 8027382:	e7d2      	b.n	802732a <_vfiprintf_r+0xc6>
 8027384:	9b03      	ldr	r3, [sp, #12]
 8027386:	1d19      	adds	r1, r3, #4
 8027388:	681b      	ldr	r3, [r3, #0]
 802738a:	9103      	str	r1, [sp, #12]
 802738c:	2b00      	cmp	r3, #0
 802738e:	bfbb      	ittet	lt
 8027390:	425b      	neglt	r3, r3
 8027392:	f042 0202 	orrlt.w	r2, r2, #2
 8027396:	9307      	strge	r3, [sp, #28]
 8027398:	9307      	strlt	r3, [sp, #28]
 802739a:	bfb8      	it	lt
 802739c:	9204      	strlt	r2, [sp, #16]
 802739e:	7823      	ldrb	r3, [r4, #0]
 80273a0:	2b2e      	cmp	r3, #46	; 0x2e
 80273a2:	d10c      	bne.n	80273be <_vfiprintf_r+0x15a>
 80273a4:	7863      	ldrb	r3, [r4, #1]
 80273a6:	2b2a      	cmp	r3, #42	; 0x2a
 80273a8:	d134      	bne.n	8027414 <_vfiprintf_r+0x1b0>
 80273aa:	9b03      	ldr	r3, [sp, #12]
 80273ac:	1d1a      	adds	r2, r3, #4
 80273ae:	681b      	ldr	r3, [r3, #0]
 80273b0:	9203      	str	r2, [sp, #12]
 80273b2:	2b00      	cmp	r3, #0
 80273b4:	bfb8      	it	lt
 80273b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80273ba:	3402      	adds	r4, #2
 80273bc:	9305      	str	r3, [sp, #20]
 80273be:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8027494 <_vfiprintf_r+0x230>
 80273c2:	7821      	ldrb	r1, [r4, #0]
 80273c4:	2203      	movs	r2, #3
 80273c6:	4650      	mov	r0, sl
 80273c8:	f7d8 ff9a 	bl	8000300 <memchr>
 80273cc:	b138      	cbz	r0, 80273de <_vfiprintf_r+0x17a>
 80273ce:	9b04      	ldr	r3, [sp, #16]
 80273d0:	eba0 000a 	sub.w	r0, r0, sl
 80273d4:	2240      	movs	r2, #64	; 0x40
 80273d6:	4082      	lsls	r2, r0
 80273d8:	4313      	orrs	r3, r2
 80273da:	3401      	adds	r4, #1
 80273dc:	9304      	str	r3, [sp, #16]
 80273de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80273e2:	4829      	ldr	r0, [pc, #164]	; (8027488 <_vfiprintf_r+0x224>)
 80273e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80273e8:	2206      	movs	r2, #6
 80273ea:	f7d8 ff89 	bl	8000300 <memchr>
 80273ee:	2800      	cmp	r0, #0
 80273f0:	d03f      	beq.n	8027472 <_vfiprintf_r+0x20e>
 80273f2:	4b26      	ldr	r3, [pc, #152]	; (802748c <_vfiprintf_r+0x228>)
 80273f4:	bb1b      	cbnz	r3, 802743e <_vfiprintf_r+0x1da>
 80273f6:	9b03      	ldr	r3, [sp, #12]
 80273f8:	3307      	adds	r3, #7
 80273fa:	f023 0307 	bic.w	r3, r3, #7
 80273fe:	3308      	adds	r3, #8
 8027400:	9303      	str	r3, [sp, #12]
 8027402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027404:	443b      	add	r3, r7
 8027406:	9309      	str	r3, [sp, #36]	; 0x24
 8027408:	e768      	b.n	80272dc <_vfiprintf_r+0x78>
 802740a:	fb0c 3202 	mla	r2, ip, r2, r3
 802740e:	460c      	mov	r4, r1
 8027410:	2001      	movs	r0, #1
 8027412:	e7a6      	b.n	8027362 <_vfiprintf_r+0xfe>
 8027414:	2300      	movs	r3, #0
 8027416:	3401      	adds	r4, #1
 8027418:	9305      	str	r3, [sp, #20]
 802741a:	4619      	mov	r1, r3
 802741c:	f04f 0c0a 	mov.w	ip, #10
 8027420:	4620      	mov	r0, r4
 8027422:	f810 2b01 	ldrb.w	r2, [r0], #1
 8027426:	3a30      	subs	r2, #48	; 0x30
 8027428:	2a09      	cmp	r2, #9
 802742a:	d903      	bls.n	8027434 <_vfiprintf_r+0x1d0>
 802742c:	2b00      	cmp	r3, #0
 802742e:	d0c6      	beq.n	80273be <_vfiprintf_r+0x15a>
 8027430:	9105      	str	r1, [sp, #20]
 8027432:	e7c4      	b.n	80273be <_vfiprintf_r+0x15a>
 8027434:	fb0c 2101 	mla	r1, ip, r1, r2
 8027438:	4604      	mov	r4, r0
 802743a:	2301      	movs	r3, #1
 802743c:	e7f0      	b.n	8027420 <_vfiprintf_r+0x1bc>
 802743e:	ab03      	add	r3, sp, #12
 8027440:	9300      	str	r3, [sp, #0]
 8027442:	462a      	mov	r2, r5
 8027444:	4b12      	ldr	r3, [pc, #72]	; (8027490 <_vfiprintf_r+0x22c>)
 8027446:	a904      	add	r1, sp, #16
 8027448:	4630      	mov	r0, r6
 802744a:	f3af 8000 	nop.w
 802744e:	4607      	mov	r7, r0
 8027450:	1c78      	adds	r0, r7, #1
 8027452:	d1d6      	bne.n	8027402 <_vfiprintf_r+0x19e>
 8027454:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8027456:	07d9      	lsls	r1, r3, #31
 8027458:	d405      	bmi.n	8027466 <_vfiprintf_r+0x202>
 802745a:	89ab      	ldrh	r3, [r5, #12]
 802745c:	059a      	lsls	r2, r3, #22
 802745e:	d402      	bmi.n	8027466 <_vfiprintf_r+0x202>
 8027460:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8027462:	f7ff fe1b 	bl	802709c <__retarget_lock_release_recursive>
 8027466:	89ab      	ldrh	r3, [r5, #12]
 8027468:	065b      	lsls	r3, r3, #25
 802746a:	f53f af1d 	bmi.w	80272a8 <_vfiprintf_r+0x44>
 802746e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8027470:	e71c      	b.n	80272ac <_vfiprintf_r+0x48>
 8027472:	ab03      	add	r3, sp, #12
 8027474:	9300      	str	r3, [sp, #0]
 8027476:	462a      	mov	r2, r5
 8027478:	4b05      	ldr	r3, [pc, #20]	; (8027490 <_vfiprintf_r+0x22c>)
 802747a:	a904      	add	r1, sp, #16
 802747c:	4630      	mov	r0, r6
 802747e:	f000 f879 	bl	8027574 <_printf_i>
 8027482:	e7e4      	b.n	802744e <_vfiprintf_r+0x1ea>
 8027484:	08029694 	.word	0x08029694
 8027488:	0802969e 	.word	0x0802969e
 802748c:	00000000 	.word	0x00000000
 8027490:	0802723f 	.word	0x0802723f
 8027494:	0802969a 	.word	0x0802969a

08027498 <_printf_common>:
 8027498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802749c:	4616      	mov	r6, r2
 802749e:	4699      	mov	r9, r3
 80274a0:	688a      	ldr	r2, [r1, #8]
 80274a2:	690b      	ldr	r3, [r1, #16]
 80274a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80274a8:	4293      	cmp	r3, r2
 80274aa:	bfb8      	it	lt
 80274ac:	4613      	movlt	r3, r2
 80274ae:	6033      	str	r3, [r6, #0]
 80274b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80274b4:	4607      	mov	r7, r0
 80274b6:	460c      	mov	r4, r1
 80274b8:	b10a      	cbz	r2, 80274be <_printf_common+0x26>
 80274ba:	3301      	adds	r3, #1
 80274bc:	6033      	str	r3, [r6, #0]
 80274be:	6823      	ldr	r3, [r4, #0]
 80274c0:	0699      	lsls	r1, r3, #26
 80274c2:	bf42      	ittt	mi
 80274c4:	6833      	ldrmi	r3, [r6, #0]
 80274c6:	3302      	addmi	r3, #2
 80274c8:	6033      	strmi	r3, [r6, #0]
 80274ca:	6825      	ldr	r5, [r4, #0]
 80274cc:	f015 0506 	ands.w	r5, r5, #6
 80274d0:	d106      	bne.n	80274e0 <_printf_common+0x48>
 80274d2:	f104 0a19 	add.w	sl, r4, #25
 80274d6:	68e3      	ldr	r3, [r4, #12]
 80274d8:	6832      	ldr	r2, [r6, #0]
 80274da:	1a9b      	subs	r3, r3, r2
 80274dc:	42ab      	cmp	r3, r5
 80274de:	dc26      	bgt.n	802752e <_printf_common+0x96>
 80274e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80274e4:	1e13      	subs	r3, r2, #0
 80274e6:	6822      	ldr	r2, [r4, #0]
 80274e8:	bf18      	it	ne
 80274ea:	2301      	movne	r3, #1
 80274ec:	0692      	lsls	r2, r2, #26
 80274ee:	d42b      	bmi.n	8027548 <_printf_common+0xb0>
 80274f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80274f4:	4649      	mov	r1, r9
 80274f6:	4638      	mov	r0, r7
 80274f8:	47c0      	blx	r8
 80274fa:	3001      	adds	r0, #1
 80274fc:	d01e      	beq.n	802753c <_printf_common+0xa4>
 80274fe:	6823      	ldr	r3, [r4, #0]
 8027500:	6922      	ldr	r2, [r4, #16]
 8027502:	f003 0306 	and.w	r3, r3, #6
 8027506:	2b04      	cmp	r3, #4
 8027508:	bf02      	ittt	eq
 802750a:	68e5      	ldreq	r5, [r4, #12]
 802750c:	6833      	ldreq	r3, [r6, #0]
 802750e:	1aed      	subeq	r5, r5, r3
 8027510:	68a3      	ldr	r3, [r4, #8]
 8027512:	bf0c      	ite	eq
 8027514:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8027518:	2500      	movne	r5, #0
 802751a:	4293      	cmp	r3, r2
 802751c:	bfc4      	itt	gt
 802751e:	1a9b      	subgt	r3, r3, r2
 8027520:	18ed      	addgt	r5, r5, r3
 8027522:	2600      	movs	r6, #0
 8027524:	341a      	adds	r4, #26
 8027526:	42b5      	cmp	r5, r6
 8027528:	d11a      	bne.n	8027560 <_printf_common+0xc8>
 802752a:	2000      	movs	r0, #0
 802752c:	e008      	b.n	8027540 <_printf_common+0xa8>
 802752e:	2301      	movs	r3, #1
 8027530:	4652      	mov	r2, sl
 8027532:	4649      	mov	r1, r9
 8027534:	4638      	mov	r0, r7
 8027536:	47c0      	blx	r8
 8027538:	3001      	adds	r0, #1
 802753a:	d103      	bne.n	8027544 <_printf_common+0xac>
 802753c:	f04f 30ff 	mov.w	r0, #4294967295
 8027540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027544:	3501      	adds	r5, #1
 8027546:	e7c6      	b.n	80274d6 <_printf_common+0x3e>
 8027548:	18e1      	adds	r1, r4, r3
 802754a:	1c5a      	adds	r2, r3, #1
 802754c:	2030      	movs	r0, #48	; 0x30
 802754e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8027552:	4422      	add	r2, r4
 8027554:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8027558:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802755c:	3302      	adds	r3, #2
 802755e:	e7c7      	b.n	80274f0 <_printf_common+0x58>
 8027560:	2301      	movs	r3, #1
 8027562:	4622      	mov	r2, r4
 8027564:	4649      	mov	r1, r9
 8027566:	4638      	mov	r0, r7
 8027568:	47c0      	blx	r8
 802756a:	3001      	adds	r0, #1
 802756c:	d0e6      	beq.n	802753c <_printf_common+0xa4>
 802756e:	3601      	adds	r6, #1
 8027570:	e7d9      	b.n	8027526 <_printf_common+0x8e>
	...

08027574 <_printf_i>:
 8027574:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8027578:	7e0f      	ldrb	r7, [r1, #24]
 802757a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802757c:	2f78      	cmp	r7, #120	; 0x78
 802757e:	4691      	mov	r9, r2
 8027580:	4680      	mov	r8, r0
 8027582:	460c      	mov	r4, r1
 8027584:	469a      	mov	sl, r3
 8027586:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802758a:	d807      	bhi.n	802759c <_printf_i+0x28>
 802758c:	2f62      	cmp	r7, #98	; 0x62
 802758e:	d80a      	bhi.n	80275a6 <_printf_i+0x32>
 8027590:	2f00      	cmp	r7, #0
 8027592:	f000 80d4 	beq.w	802773e <_printf_i+0x1ca>
 8027596:	2f58      	cmp	r7, #88	; 0x58
 8027598:	f000 80c0 	beq.w	802771c <_printf_i+0x1a8>
 802759c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80275a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80275a4:	e03a      	b.n	802761c <_printf_i+0xa8>
 80275a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80275aa:	2b15      	cmp	r3, #21
 80275ac:	d8f6      	bhi.n	802759c <_printf_i+0x28>
 80275ae:	a101      	add	r1, pc, #4	; (adr r1, 80275b4 <_printf_i+0x40>)
 80275b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80275b4:	0802760d 	.word	0x0802760d
 80275b8:	08027621 	.word	0x08027621
 80275bc:	0802759d 	.word	0x0802759d
 80275c0:	0802759d 	.word	0x0802759d
 80275c4:	0802759d 	.word	0x0802759d
 80275c8:	0802759d 	.word	0x0802759d
 80275cc:	08027621 	.word	0x08027621
 80275d0:	0802759d 	.word	0x0802759d
 80275d4:	0802759d 	.word	0x0802759d
 80275d8:	0802759d 	.word	0x0802759d
 80275dc:	0802759d 	.word	0x0802759d
 80275e0:	08027725 	.word	0x08027725
 80275e4:	0802764d 	.word	0x0802764d
 80275e8:	080276df 	.word	0x080276df
 80275ec:	0802759d 	.word	0x0802759d
 80275f0:	0802759d 	.word	0x0802759d
 80275f4:	08027747 	.word	0x08027747
 80275f8:	0802759d 	.word	0x0802759d
 80275fc:	0802764d 	.word	0x0802764d
 8027600:	0802759d 	.word	0x0802759d
 8027604:	0802759d 	.word	0x0802759d
 8027608:	080276e7 	.word	0x080276e7
 802760c:	682b      	ldr	r3, [r5, #0]
 802760e:	1d1a      	adds	r2, r3, #4
 8027610:	681b      	ldr	r3, [r3, #0]
 8027612:	602a      	str	r2, [r5, #0]
 8027614:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8027618:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802761c:	2301      	movs	r3, #1
 802761e:	e09f      	b.n	8027760 <_printf_i+0x1ec>
 8027620:	6820      	ldr	r0, [r4, #0]
 8027622:	682b      	ldr	r3, [r5, #0]
 8027624:	0607      	lsls	r7, r0, #24
 8027626:	f103 0104 	add.w	r1, r3, #4
 802762a:	6029      	str	r1, [r5, #0]
 802762c:	d501      	bpl.n	8027632 <_printf_i+0xbe>
 802762e:	681e      	ldr	r6, [r3, #0]
 8027630:	e003      	b.n	802763a <_printf_i+0xc6>
 8027632:	0646      	lsls	r6, r0, #25
 8027634:	d5fb      	bpl.n	802762e <_printf_i+0xba>
 8027636:	f9b3 6000 	ldrsh.w	r6, [r3]
 802763a:	2e00      	cmp	r6, #0
 802763c:	da03      	bge.n	8027646 <_printf_i+0xd2>
 802763e:	232d      	movs	r3, #45	; 0x2d
 8027640:	4276      	negs	r6, r6
 8027642:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8027646:	485a      	ldr	r0, [pc, #360]	; (80277b0 <_printf_i+0x23c>)
 8027648:	230a      	movs	r3, #10
 802764a:	e012      	b.n	8027672 <_printf_i+0xfe>
 802764c:	682b      	ldr	r3, [r5, #0]
 802764e:	6820      	ldr	r0, [r4, #0]
 8027650:	1d19      	adds	r1, r3, #4
 8027652:	6029      	str	r1, [r5, #0]
 8027654:	0605      	lsls	r5, r0, #24
 8027656:	d501      	bpl.n	802765c <_printf_i+0xe8>
 8027658:	681e      	ldr	r6, [r3, #0]
 802765a:	e002      	b.n	8027662 <_printf_i+0xee>
 802765c:	0641      	lsls	r1, r0, #25
 802765e:	d5fb      	bpl.n	8027658 <_printf_i+0xe4>
 8027660:	881e      	ldrh	r6, [r3, #0]
 8027662:	4853      	ldr	r0, [pc, #332]	; (80277b0 <_printf_i+0x23c>)
 8027664:	2f6f      	cmp	r7, #111	; 0x6f
 8027666:	bf0c      	ite	eq
 8027668:	2308      	moveq	r3, #8
 802766a:	230a      	movne	r3, #10
 802766c:	2100      	movs	r1, #0
 802766e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8027672:	6865      	ldr	r5, [r4, #4]
 8027674:	60a5      	str	r5, [r4, #8]
 8027676:	2d00      	cmp	r5, #0
 8027678:	bfa2      	ittt	ge
 802767a:	6821      	ldrge	r1, [r4, #0]
 802767c:	f021 0104 	bicge.w	r1, r1, #4
 8027680:	6021      	strge	r1, [r4, #0]
 8027682:	b90e      	cbnz	r6, 8027688 <_printf_i+0x114>
 8027684:	2d00      	cmp	r5, #0
 8027686:	d04b      	beq.n	8027720 <_printf_i+0x1ac>
 8027688:	4615      	mov	r5, r2
 802768a:	fbb6 f1f3 	udiv	r1, r6, r3
 802768e:	fb03 6711 	mls	r7, r3, r1, r6
 8027692:	5dc7      	ldrb	r7, [r0, r7]
 8027694:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8027698:	4637      	mov	r7, r6
 802769a:	42bb      	cmp	r3, r7
 802769c:	460e      	mov	r6, r1
 802769e:	d9f4      	bls.n	802768a <_printf_i+0x116>
 80276a0:	2b08      	cmp	r3, #8
 80276a2:	d10b      	bne.n	80276bc <_printf_i+0x148>
 80276a4:	6823      	ldr	r3, [r4, #0]
 80276a6:	07de      	lsls	r6, r3, #31
 80276a8:	d508      	bpl.n	80276bc <_printf_i+0x148>
 80276aa:	6923      	ldr	r3, [r4, #16]
 80276ac:	6861      	ldr	r1, [r4, #4]
 80276ae:	4299      	cmp	r1, r3
 80276b0:	bfde      	ittt	le
 80276b2:	2330      	movle	r3, #48	; 0x30
 80276b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80276b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80276bc:	1b52      	subs	r2, r2, r5
 80276be:	6122      	str	r2, [r4, #16]
 80276c0:	f8cd a000 	str.w	sl, [sp]
 80276c4:	464b      	mov	r3, r9
 80276c6:	aa03      	add	r2, sp, #12
 80276c8:	4621      	mov	r1, r4
 80276ca:	4640      	mov	r0, r8
 80276cc:	f7ff fee4 	bl	8027498 <_printf_common>
 80276d0:	3001      	adds	r0, #1
 80276d2:	d14a      	bne.n	802776a <_printf_i+0x1f6>
 80276d4:	f04f 30ff 	mov.w	r0, #4294967295
 80276d8:	b004      	add	sp, #16
 80276da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80276de:	6823      	ldr	r3, [r4, #0]
 80276e0:	f043 0320 	orr.w	r3, r3, #32
 80276e4:	6023      	str	r3, [r4, #0]
 80276e6:	4833      	ldr	r0, [pc, #204]	; (80277b4 <_printf_i+0x240>)
 80276e8:	2778      	movs	r7, #120	; 0x78
 80276ea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80276ee:	6823      	ldr	r3, [r4, #0]
 80276f0:	6829      	ldr	r1, [r5, #0]
 80276f2:	061f      	lsls	r7, r3, #24
 80276f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80276f8:	d402      	bmi.n	8027700 <_printf_i+0x18c>
 80276fa:	065f      	lsls	r7, r3, #25
 80276fc:	bf48      	it	mi
 80276fe:	b2b6      	uxthmi	r6, r6
 8027700:	07df      	lsls	r7, r3, #31
 8027702:	bf48      	it	mi
 8027704:	f043 0320 	orrmi.w	r3, r3, #32
 8027708:	6029      	str	r1, [r5, #0]
 802770a:	bf48      	it	mi
 802770c:	6023      	strmi	r3, [r4, #0]
 802770e:	b91e      	cbnz	r6, 8027718 <_printf_i+0x1a4>
 8027710:	6823      	ldr	r3, [r4, #0]
 8027712:	f023 0320 	bic.w	r3, r3, #32
 8027716:	6023      	str	r3, [r4, #0]
 8027718:	2310      	movs	r3, #16
 802771a:	e7a7      	b.n	802766c <_printf_i+0xf8>
 802771c:	4824      	ldr	r0, [pc, #144]	; (80277b0 <_printf_i+0x23c>)
 802771e:	e7e4      	b.n	80276ea <_printf_i+0x176>
 8027720:	4615      	mov	r5, r2
 8027722:	e7bd      	b.n	80276a0 <_printf_i+0x12c>
 8027724:	682b      	ldr	r3, [r5, #0]
 8027726:	6826      	ldr	r6, [r4, #0]
 8027728:	6961      	ldr	r1, [r4, #20]
 802772a:	1d18      	adds	r0, r3, #4
 802772c:	6028      	str	r0, [r5, #0]
 802772e:	0635      	lsls	r5, r6, #24
 8027730:	681b      	ldr	r3, [r3, #0]
 8027732:	d501      	bpl.n	8027738 <_printf_i+0x1c4>
 8027734:	6019      	str	r1, [r3, #0]
 8027736:	e002      	b.n	802773e <_printf_i+0x1ca>
 8027738:	0670      	lsls	r0, r6, #25
 802773a:	d5fb      	bpl.n	8027734 <_printf_i+0x1c0>
 802773c:	8019      	strh	r1, [r3, #0]
 802773e:	2300      	movs	r3, #0
 8027740:	6123      	str	r3, [r4, #16]
 8027742:	4615      	mov	r5, r2
 8027744:	e7bc      	b.n	80276c0 <_printf_i+0x14c>
 8027746:	682b      	ldr	r3, [r5, #0]
 8027748:	1d1a      	adds	r2, r3, #4
 802774a:	602a      	str	r2, [r5, #0]
 802774c:	681d      	ldr	r5, [r3, #0]
 802774e:	6862      	ldr	r2, [r4, #4]
 8027750:	2100      	movs	r1, #0
 8027752:	4628      	mov	r0, r5
 8027754:	f7d8 fdd4 	bl	8000300 <memchr>
 8027758:	b108      	cbz	r0, 802775e <_printf_i+0x1ea>
 802775a:	1b40      	subs	r0, r0, r5
 802775c:	6060      	str	r0, [r4, #4]
 802775e:	6863      	ldr	r3, [r4, #4]
 8027760:	6123      	str	r3, [r4, #16]
 8027762:	2300      	movs	r3, #0
 8027764:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8027768:	e7aa      	b.n	80276c0 <_printf_i+0x14c>
 802776a:	6923      	ldr	r3, [r4, #16]
 802776c:	462a      	mov	r2, r5
 802776e:	4649      	mov	r1, r9
 8027770:	4640      	mov	r0, r8
 8027772:	47d0      	blx	sl
 8027774:	3001      	adds	r0, #1
 8027776:	d0ad      	beq.n	80276d4 <_printf_i+0x160>
 8027778:	6823      	ldr	r3, [r4, #0]
 802777a:	079b      	lsls	r3, r3, #30
 802777c:	d413      	bmi.n	80277a6 <_printf_i+0x232>
 802777e:	68e0      	ldr	r0, [r4, #12]
 8027780:	9b03      	ldr	r3, [sp, #12]
 8027782:	4298      	cmp	r0, r3
 8027784:	bfb8      	it	lt
 8027786:	4618      	movlt	r0, r3
 8027788:	e7a6      	b.n	80276d8 <_printf_i+0x164>
 802778a:	2301      	movs	r3, #1
 802778c:	4632      	mov	r2, r6
 802778e:	4649      	mov	r1, r9
 8027790:	4640      	mov	r0, r8
 8027792:	47d0      	blx	sl
 8027794:	3001      	adds	r0, #1
 8027796:	d09d      	beq.n	80276d4 <_printf_i+0x160>
 8027798:	3501      	adds	r5, #1
 802779a:	68e3      	ldr	r3, [r4, #12]
 802779c:	9903      	ldr	r1, [sp, #12]
 802779e:	1a5b      	subs	r3, r3, r1
 80277a0:	42ab      	cmp	r3, r5
 80277a2:	dcf2      	bgt.n	802778a <_printf_i+0x216>
 80277a4:	e7eb      	b.n	802777e <_printf_i+0x20a>
 80277a6:	2500      	movs	r5, #0
 80277a8:	f104 0619 	add.w	r6, r4, #25
 80277ac:	e7f5      	b.n	802779a <_printf_i+0x226>
 80277ae:	bf00      	nop
 80277b0:	080296a5 	.word	0x080296a5
 80277b4:	080296b6 	.word	0x080296b6

080277b8 <__sflush_r>:
 80277b8:	898a      	ldrh	r2, [r1, #12]
 80277ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80277be:	4605      	mov	r5, r0
 80277c0:	0710      	lsls	r0, r2, #28
 80277c2:	460c      	mov	r4, r1
 80277c4:	d458      	bmi.n	8027878 <__sflush_r+0xc0>
 80277c6:	684b      	ldr	r3, [r1, #4]
 80277c8:	2b00      	cmp	r3, #0
 80277ca:	dc05      	bgt.n	80277d8 <__sflush_r+0x20>
 80277cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80277ce:	2b00      	cmp	r3, #0
 80277d0:	dc02      	bgt.n	80277d8 <__sflush_r+0x20>
 80277d2:	2000      	movs	r0, #0
 80277d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80277d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80277da:	2e00      	cmp	r6, #0
 80277dc:	d0f9      	beq.n	80277d2 <__sflush_r+0x1a>
 80277de:	2300      	movs	r3, #0
 80277e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80277e4:	682f      	ldr	r7, [r5, #0]
 80277e6:	6a21      	ldr	r1, [r4, #32]
 80277e8:	602b      	str	r3, [r5, #0]
 80277ea:	d032      	beq.n	8027852 <__sflush_r+0x9a>
 80277ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80277ee:	89a3      	ldrh	r3, [r4, #12]
 80277f0:	075a      	lsls	r2, r3, #29
 80277f2:	d505      	bpl.n	8027800 <__sflush_r+0x48>
 80277f4:	6863      	ldr	r3, [r4, #4]
 80277f6:	1ac0      	subs	r0, r0, r3
 80277f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80277fa:	b10b      	cbz	r3, 8027800 <__sflush_r+0x48>
 80277fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80277fe:	1ac0      	subs	r0, r0, r3
 8027800:	2300      	movs	r3, #0
 8027802:	4602      	mov	r2, r0
 8027804:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8027806:	6a21      	ldr	r1, [r4, #32]
 8027808:	4628      	mov	r0, r5
 802780a:	47b0      	blx	r6
 802780c:	1c43      	adds	r3, r0, #1
 802780e:	89a3      	ldrh	r3, [r4, #12]
 8027810:	d106      	bne.n	8027820 <__sflush_r+0x68>
 8027812:	6829      	ldr	r1, [r5, #0]
 8027814:	291d      	cmp	r1, #29
 8027816:	d82b      	bhi.n	8027870 <__sflush_r+0xb8>
 8027818:	4a29      	ldr	r2, [pc, #164]	; (80278c0 <__sflush_r+0x108>)
 802781a:	410a      	asrs	r2, r1
 802781c:	07d6      	lsls	r6, r2, #31
 802781e:	d427      	bmi.n	8027870 <__sflush_r+0xb8>
 8027820:	2200      	movs	r2, #0
 8027822:	6062      	str	r2, [r4, #4]
 8027824:	04d9      	lsls	r1, r3, #19
 8027826:	6922      	ldr	r2, [r4, #16]
 8027828:	6022      	str	r2, [r4, #0]
 802782a:	d504      	bpl.n	8027836 <__sflush_r+0x7e>
 802782c:	1c42      	adds	r2, r0, #1
 802782e:	d101      	bne.n	8027834 <__sflush_r+0x7c>
 8027830:	682b      	ldr	r3, [r5, #0]
 8027832:	b903      	cbnz	r3, 8027836 <__sflush_r+0x7e>
 8027834:	6560      	str	r0, [r4, #84]	; 0x54
 8027836:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8027838:	602f      	str	r7, [r5, #0]
 802783a:	2900      	cmp	r1, #0
 802783c:	d0c9      	beq.n	80277d2 <__sflush_r+0x1a>
 802783e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027842:	4299      	cmp	r1, r3
 8027844:	d002      	beq.n	802784c <__sflush_r+0x94>
 8027846:	4628      	mov	r0, r5
 8027848:	f7ff fc96 	bl	8027178 <_free_r>
 802784c:	2000      	movs	r0, #0
 802784e:	6360      	str	r0, [r4, #52]	; 0x34
 8027850:	e7c0      	b.n	80277d4 <__sflush_r+0x1c>
 8027852:	2301      	movs	r3, #1
 8027854:	4628      	mov	r0, r5
 8027856:	47b0      	blx	r6
 8027858:	1c41      	adds	r1, r0, #1
 802785a:	d1c8      	bne.n	80277ee <__sflush_r+0x36>
 802785c:	682b      	ldr	r3, [r5, #0]
 802785e:	2b00      	cmp	r3, #0
 8027860:	d0c5      	beq.n	80277ee <__sflush_r+0x36>
 8027862:	2b1d      	cmp	r3, #29
 8027864:	d001      	beq.n	802786a <__sflush_r+0xb2>
 8027866:	2b16      	cmp	r3, #22
 8027868:	d101      	bne.n	802786e <__sflush_r+0xb6>
 802786a:	602f      	str	r7, [r5, #0]
 802786c:	e7b1      	b.n	80277d2 <__sflush_r+0x1a>
 802786e:	89a3      	ldrh	r3, [r4, #12]
 8027870:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027874:	81a3      	strh	r3, [r4, #12]
 8027876:	e7ad      	b.n	80277d4 <__sflush_r+0x1c>
 8027878:	690f      	ldr	r7, [r1, #16]
 802787a:	2f00      	cmp	r7, #0
 802787c:	d0a9      	beq.n	80277d2 <__sflush_r+0x1a>
 802787e:	0793      	lsls	r3, r2, #30
 8027880:	680e      	ldr	r6, [r1, #0]
 8027882:	bf08      	it	eq
 8027884:	694b      	ldreq	r3, [r1, #20]
 8027886:	600f      	str	r7, [r1, #0]
 8027888:	bf18      	it	ne
 802788a:	2300      	movne	r3, #0
 802788c:	eba6 0807 	sub.w	r8, r6, r7
 8027890:	608b      	str	r3, [r1, #8]
 8027892:	f1b8 0f00 	cmp.w	r8, #0
 8027896:	dd9c      	ble.n	80277d2 <__sflush_r+0x1a>
 8027898:	6a21      	ldr	r1, [r4, #32]
 802789a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802789c:	4643      	mov	r3, r8
 802789e:	463a      	mov	r2, r7
 80278a0:	4628      	mov	r0, r5
 80278a2:	47b0      	blx	r6
 80278a4:	2800      	cmp	r0, #0
 80278a6:	dc06      	bgt.n	80278b6 <__sflush_r+0xfe>
 80278a8:	89a3      	ldrh	r3, [r4, #12]
 80278aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80278ae:	81a3      	strh	r3, [r4, #12]
 80278b0:	f04f 30ff 	mov.w	r0, #4294967295
 80278b4:	e78e      	b.n	80277d4 <__sflush_r+0x1c>
 80278b6:	4407      	add	r7, r0
 80278b8:	eba8 0800 	sub.w	r8, r8, r0
 80278bc:	e7e9      	b.n	8027892 <__sflush_r+0xda>
 80278be:	bf00      	nop
 80278c0:	dfbffffe 	.word	0xdfbffffe

080278c4 <_fflush_r>:
 80278c4:	b538      	push	{r3, r4, r5, lr}
 80278c6:	690b      	ldr	r3, [r1, #16]
 80278c8:	4605      	mov	r5, r0
 80278ca:	460c      	mov	r4, r1
 80278cc:	b913      	cbnz	r3, 80278d4 <_fflush_r+0x10>
 80278ce:	2500      	movs	r5, #0
 80278d0:	4628      	mov	r0, r5
 80278d2:	bd38      	pop	{r3, r4, r5, pc}
 80278d4:	b118      	cbz	r0, 80278de <_fflush_r+0x1a>
 80278d6:	6a03      	ldr	r3, [r0, #32]
 80278d8:	b90b      	cbnz	r3, 80278de <_fflush_r+0x1a>
 80278da:	f7ff fa85 	bl	8026de8 <__sinit>
 80278de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80278e2:	2b00      	cmp	r3, #0
 80278e4:	d0f3      	beq.n	80278ce <_fflush_r+0xa>
 80278e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80278e8:	07d0      	lsls	r0, r2, #31
 80278ea:	d404      	bmi.n	80278f6 <_fflush_r+0x32>
 80278ec:	0599      	lsls	r1, r3, #22
 80278ee:	d402      	bmi.n	80278f6 <_fflush_r+0x32>
 80278f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80278f2:	f7ff fbd2 	bl	802709a <__retarget_lock_acquire_recursive>
 80278f6:	4628      	mov	r0, r5
 80278f8:	4621      	mov	r1, r4
 80278fa:	f7ff ff5d 	bl	80277b8 <__sflush_r>
 80278fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8027900:	07da      	lsls	r2, r3, #31
 8027902:	4605      	mov	r5, r0
 8027904:	d4e4      	bmi.n	80278d0 <_fflush_r+0xc>
 8027906:	89a3      	ldrh	r3, [r4, #12]
 8027908:	059b      	lsls	r3, r3, #22
 802790a:	d4e1      	bmi.n	80278d0 <_fflush_r+0xc>
 802790c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802790e:	f7ff fbc5 	bl	802709c <__retarget_lock_release_recursive>
 8027912:	e7dd      	b.n	80278d0 <_fflush_r+0xc>

08027914 <__swbuf_r>:
 8027914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027916:	460e      	mov	r6, r1
 8027918:	4614      	mov	r4, r2
 802791a:	4605      	mov	r5, r0
 802791c:	b118      	cbz	r0, 8027926 <__swbuf_r+0x12>
 802791e:	6a03      	ldr	r3, [r0, #32]
 8027920:	b90b      	cbnz	r3, 8027926 <__swbuf_r+0x12>
 8027922:	f7ff fa61 	bl	8026de8 <__sinit>
 8027926:	69a3      	ldr	r3, [r4, #24]
 8027928:	60a3      	str	r3, [r4, #8]
 802792a:	89a3      	ldrh	r3, [r4, #12]
 802792c:	071a      	lsls	r2, r3, #28
 802792e:	d525      	bpl.n	802797c <__swbuf_r+0x68>
 8027930:	6923      	ldr	r3, [r4, #16]
 8027932:	b31b      	cbz	r3, 802797c <__swbuf_r+0x68>
 8027934:	6823      	ldr	r3, [r4, #0]
 8027936:	6922      	ldr	r2, [r4, #16]
 8027938:	1a98      	subs	r0, r3, r2
 802793a:	6963      	ldr	r3, [r4, #20]
 802793c:	b2f6      	uxtb	r6, r6
 802793e:	4283      	cmp	r3, r0
 8027940:	4637      	mov	r7, r6
 8027942:	dc04      	bgt.n	802794e <__swbuf_r+0x3a>
 8027944:	4621      	mov	r1, r4
 8027946:	4628      	mov	r0, r5
 8027948:	f7ff ffbc 	bl	80278c4 <_fflush_r>
 802794c:	b9e0      	cbnz	r0, 8027988 <__swbuf_r+0x74>
 802794e:	68a3      	ldr	r3, [r4, #8]
 8027950:	3b01      	subs	r3, #1
 8027952:	60a3      	str	r3, [r4, #8]
 8027954:	6823      	ldr	r3, [r4, #0]
 8027956:	1c5a      	adds	r2, r3, #1
 8027958:	6022      	str	r2, [r4, #0]
 802795a:	701e      	strb	r6, [r3, #0]
 802795c:	6962      	ldr	r2, [r4, #20]
 802795e:	1c43      	adds	r3, r0, #1
 8027960:	429a      	cmp	r2, r3
 8027962:	d004      	beq.n	802796e <__swbuf_r+0x5a>
 8027964:	89a3      	ldrh	r3, [r4, #12]
 8027966:	07db      	lsls	r3, r3, #31
 8027968:	d506      	bpl.n	8027978 <__swbuf_r+0x64>
 802796a:	2e0a      	cmp	r6, #10
 802796c:	d104      	bne.n	8027978 <__swbuf_r+0x64>
 802796e:	4621      	mov	r1, r4
 8027970:	4628      	mov	r0, r5
 8027972:	f7ff ffa7 	bl	80278c4 <_fflush_r>
 8027976:	b938      	cbnz	r0, 8027988 <__swbuf_r+0x74>
 8027978:	4638      	mov	r0, r7
 802797a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802797c:	4621      	mov	r1, r4
 802797e:	4628      	mov	r0, r5
 8027980:	f000 f806 	bl	8027990 <__swsetup_r>
 8027984:	2800      	cmp	r0, #0
 8027986:	d0d5      	beq.n	8027934 <__swbuf_r+0x20>
 8027988:	f04f 37ff 	mov.w	r7, #4294967295
 802798c:	e7f4      	b.n	8027978 <__swbuf_r+0x64>
	...

08027990 <__swsetup_r>:
 8027990:	b538      	push	{r3, r4, r5, lr}
 8027992:	4b2a      	ldr	r3, [pc, #168]	; (8027a3c <__swsetup_r+0xac>)
 8027994:	4605      	mov	r5, r0
 8027996:	6818      	ldr	r0, [r3, #0]
 8027998:	460c      	mov	r4, r1
 802799a:	b118      	cbz	r0, 80279a4 <__swsetup_r+0x14>
 802799c:	6a03      	ldr	r3, [r0, #32]
 802799e:	b90b      	cbnz	r3, 80279a4 <__swsetup_r+0x14>
 80279a0:	f7ff fa22 	bl	8026de8 <__sinit>
 80279a4:	89a3      	ldrh	r3, [r4, #12]
 80279a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80279aa:	0718      	lsls	r0, r3, #28
 80279ac:	d422      	bmi.n	80279f4 <__swsetup_r+0x64>
 80279ae:	06d9      	lsls	r1, r3, #27
 80279b0:	d407      	bmi.n	80279c2 <__swsetup_r+0x32>
 80279b2:	2309      	movs	r3, #9
 80279b4:	602b      	str	r3, [r5, #0]
 80279b6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80279ba:	81a3      	strh	r3, [r4, #12]
 80279bc:	f04f 30ff 	mov.w	r0, #4294967295
 80279c0:	e034      	b.n	8027a2c <__swsetup_r+0x9c>
 80279c2:	0758      	lsls	r0, r3, #29
 80279c4:	d512      	bpl.n	80279ec <__swsetup_r+0x5c>
 80279c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80279c8:	b141      	cbz	r1, 80279dc <__swsetup_r+0x4c>
 80279ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80279ce:	4299      	cmp	r1, r3
 80279d0:	d002      	beq.n	80279d8 <__swsetup_r+0x48>
 80279d2:	4628      	mov	r0, r5
 80279d4:	f7ff fbd0 	bl	8027178 <_free_r>
 80279d8:	2300      	movs	r3, #0
 80279da:	6363      	str	r3, [r4, #52]	; 0x34
 80279dc:	89a3      	ldrh	r3, [r4, #12]
 80279de:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80279e2:	81a3      	strh	r3, [r4, #12]
 80279e4:	2300      	movs	r3, #0
 80279e6:	6063      	str	r3, [r4, #4]
 80279e8:	6923      	ldr	r3, [r4, #16]
 80279ea:	6023      	str	r3, [r4, #0]
 80279ec:	89a3      	ldrh	r3, [r4, #12]
 80279ee:	f043 0308 	orr.w	r3, r3, #8
 80279f2:	81a3      	strh	r3, [r4, #12]
 80279f4:	6923      	ldr	r3, [r4, #16]
 80279f6:	b94b      	cbnz	r3, 8027a0c <__swsetup_r+0x7c>
 80279f8:	89a3      	ldrh	r3, [r4, #12]
 80279fa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80279fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8027a02:	d003      	beq.n	8027a0c <__swsetup_r+0x7c>
 8027a04:	4621      	mov	r1, r4
 8027a06:	4628      	mov	r0, r5
 8027a08:	f000 f840 	bl	8027a8c <__smakebuf_r>
 8027a0c:	89a0      	ldrh	r0, [r4, #12]
 8027a0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8027a12:	f010 0301 	ands.w	r3, r0, #1
 8027a16:	d00a      	beq.n	8027a2e <__swsetup_r+0x9e>
 8027a18:	2300      	movs	r3, #0
 8027a1a:	60a3      	str	r3, [r4, #8]
 8027a1c:	6963      	ldr	r3, [r4, #20]
 8027a1e:	425b      	negs	r3, r3
 8027a20:	61a3      	str	r3, [r4, #24]
 8027a22:	6923      	ldr	r3, [r4, #16]
 8027a24:	b943      	cbnz	r3, 8027a38 <__swsetup_r+0xa8>
 8027a26:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8027a2a:	d1c4      	bne.n	80279b6 <__swsetup_r+0x26>
 8027a2c:	bd38      	pop	{r3, r4, r5, pc}
 8027a2e:	0781      	lsls	r1, r0, #30
 8027a30:	bf58      	it	pl
 8027a32:	6963      	ldrpl	r3, [r4, #20]
 8027a34:	60a3      	str	r3, [r4, #8]
 8027a36:	e7f4      	b.n	8027a22 <__swsetup_r+0x92>
 8027a38:	2000      	movs	r0, #0
 8027a3a:	e7f7      	b.n	8027a2c <__swsetup_r+0x9c>
 8027a3c:	2400010c 	.word	0x2400010c

08027a40 <__swhatbuf_r>:
 8027a40:	b570      	push	{r4, r5, r6, lr}
 8027a42:	460c      	mov	r4, r1
 8027a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027a48:	2900      	cmp	r1, #0
 8027a4a:	b096      	sub	sp, #88	; 0x58
 8027a4c:	4615      	mov	r5, r2
 8027a4e:	461e      	mov	r6, r3
 8027a50:	da0d      	bge.n	8027a6e <__swhatbuf_r+0x2e>
 8027a52:	89a3      	ldrh	r3, [r4, #12]
 8027a54:	f013 0f80 	tst.w	r3, #128	; 0x80
 8027a58:	f04f 0100 	mov.w	r1, #0
 8027a5c:	bf0c      	ite	eq
 8027a5e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8027a62:	2340      	movne	r3, #64	; 0x40
 8027a64:	2000      	movs	r0, #0
 8027a66:	6031      	str	r1, [r6, #0]
 8027a68:	602b      	str	r3, [r5, #0]
 8027a6a:	b016      	add	sp, #88	; 0x58
 8027a6c:	bd70      	pop	{r4, r5, r6, pc}
 8027a6e:	466a      	mov	r2, sp
 8027a70:	f000 f848 	bl	8027b04 <_fstat_r>
 8027a74:	2800      	cmp	r0, #0
 8027a76:	dbec      	blt.n	8027a52 <__swhatbuf_r+0x12>
 8027a78:	9901      	ldr	r1, [sp, #4]
 8027a7a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8027a7e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8027a82:	4259      	negs	r1, r3
 8027a84:	4159      	adcs	r1, r3
 8027a86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8027a8a:	e7eb      	b.n	8027a64 <__swhatbuf_r+0x24>

08027a8c <__smakebuf_r>:
 8027a8c:	898b      	ldrh	r3, [r1, #12]
 8027a8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8027a90:	079d      	lsls	r5, r3, #30
 8027a92:	4606      	mov	r6, r0
 8027a94:	460c      	mov	r4, r1
 8027a96:	d507      	bpl.n	8027aa8 <__smakebuf_r+0x1c>
 8027a98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8027a9c:	6023      	str	r3, [r4, #0]
 8027a9e:	6123      	str	r3, [r4, #16]
 8027aa0:	2301      	movs	r3, #1
 8027aa2:	6163      	str	r3, [r4, #20]
 8027aa4:	b002      	add	sp, #8
 8027aa6:	bd70      	pop	{r4, r5, r6, pc}
 8027aa8:	ab01      	add	r3, sp, #4
 8027aaa:	466a      	mov	r2, sp
 8027aac:	f7ff ffc8 	bl	8027a40 <__swhatbuf_r>
 8027ab0:	9900      	ldr	r1, [sp, #0]
 8027ab2:	4605      	mov	r5, r0
 8027ab4:	4630      	mov	r0, r6
 8027ab6:	f7ff f871 	bl	8026b9c <_malloc_r>
 8027aba:	b948      	cbnz	r0, 8027ad0 <__smakebuf_r+0x44>
 8027abc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8027ac0:	059a      	lsls	r2, r3, #22
 8027ac2:	d4ef      	bmi.n	8027aa4 <__smakebuf_r+0x18>
 8027ac4:	f023 0303 	bic.w	r3, r3, #3
 8027ac8:	f043 0302 	orr.w	r3, r3, #2
 8027acc:	81a3      	strh	r3, [r4, #12]
 8027ace:	e7e3      	b.n	8027a98 <__smakebuf_r+0xc>
 8027ad0:	89a3      	ldrh	r3, [r4, #12]
 8027ad2:	6020      	str	r0, [r4, #0]
 8027ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8027ad8:	81a3      	strh	r3, [r4, #12]
 8027ada:	9b00      	ldr	r3, [sp, #0]
 8027adc:	6163      	str	r3, [r4, #20]
 8027ade:	9b01      	ldr	r3, [sp, #4]
 8027ae0:	6120      	str	r0, [r4, #16]
 8027ae2:	b15b      	cbz	r3, 8027afc <__smakebuf_r+0x70>
 8027ae4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8027ae8:	4630      	mov	r0, r6
 8027aea:	f000 f81d 	bl	8027b28 <_isatty_r>
 8027aee:	b128      	cbz	r0, 8027afc <__smakebuf_r+0x70>
 8027af0:	89a3      	ldrh	r3, [r4, #12]
 8027af2:	f023 0303 	bic.w	r3, r3, #3
 8027af6:	f043 0301 	orr.w	r3, r3, #1
 8027afa:	81a3      	strh	r3, [r4, #12]
 8027afc:	89a3      	ldrh	r3, [r4, #12]
 8027afe:	431d      	orrs	r5, r3
 8027b00:	81a5      	strh	r5, [r4, #12]
 8027b02:	e7cf      	b.n	8027aa4 <__smakebuf_r+0x18>

08027b04 <_fstat_r>:
 8027b04:	b538      	push	{r3, r4, r5, lr}
 8027b06:	4d07      	ldr	r5, [pc, #28]	; (8027b24 <_fstat_r+0x20>)
 8027b08:	2300      	movs	r3, #0
 8027b0a:	4604      	mov	r4, r0
 8027b0c:	4608      	mov	r0, r1
 8027b0e:	4611      	mov	r1, r2
 8027b10:	602b      	str	r3, [r5, #0]
 8027b12:	f7d9 ffae 	bl	8001a72 <_fstat>
 8027b16:	1c43      	adds	r3, r0, #1
 8027b18:	d102      	bne.n	8027b20 <_fstat_r+0x1c>
 8027b1a:	682b      	ldr	r3, [r5, #0]
 8027b1c:	b103      	cbz	r3, 8027b20 <_fstat_r+0x1c>
 8027b1e:	6023      	str	r3, [r4, #0]
 8027b20:	bd38      	pop	{r3, r4, r5, pc}
 8027b22:	bf00      	nop
 8027b24:	240077a8 	.word	0x240077a8

08027b28 <_isatty_r>:
 8027b28:	b538      	push	{r3, r4, r5, lr}
 8027b2a:	4d06      	ldr	r5, [pc, #24]	; (8027b44 <_isatty_r+0x1c>)
 8027b2c:	2300      	movs	r3, #0
 8027b2e:	4604      	mov	r4, r0
 8027b30:	4608      	mov	r0, r1
 8027b32:	602b      	str	r3, [r5, #0]
 8027b34:	f7d9 ffad 	bl	8001a92 <_isatty>
 8027b38:	1c43      	adds	r3, r0, #1
 8027b3a:	d102      	bne.n	8027b42 <_isatty_r+0x1a>
 8027b3c:	682b      	ldr	r3, [r5, #0]
 8027b3e:	b103      	cbz	r3, 8027b42 <_isatty_r+0x1a>
 8027b40:	6023      	str	r3, [r4, #0]
 8027b42:	bd38      	pop	{r3, r4, r5, pc}
 8027b44:	240077a8 	.word	0x240077a8

08027b48 <_init>:
 8027b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027b4a:	bf00      	nop
 8027b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8027b4e:	bc08      	pop	{r3}
 8027b50:	469e      	mov	lr, r3
 8027b52:	4770      	bx	lr

08027b54 <_fini>:
 8027b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027b56:	bf00      	nop
 8027b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8027b5a:	bc08      	pop	{r3}
 8027b5c:	469e      	mov	lr, r3
 8027b5e:	4770      	bx	lr
